stringr,
babeldown,
here
)
export(chapters_changed, here("chapters_changed_Luong.rds"))
import(here("chapters_changed_Luong.rds"))
ls(pattern = "^csv")
ls(pattern = "^qmd")
?rio::import()
xlsx_file <- tempfile(fileext = ".xlsx")
list.files(pattern = ".RDS", full.names=T)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
diffs <- gert::git_diff()
View(diffs)
chapters_changed <- diffs$new[str_detect(diffs$new, "\\.R$")]
export(chapters_changed, here("chapters_change" ,"chapters_changed_Luong.rds"))
export(chapters_changed, here("chapters_change" ,"chapters_changed_Neale.rds"))
list.files(path = here("chapters_changed"), pattern = ".rds", full.names=T)
list.files(path = here("chapters_changed"), pattern = ".RDS", full.names=T)
# Export the list of changed chapters to a RDS file. Add your name after the filename.
export(chapters_changed, here("chapters_changed" ,"chapters_changed_Luong.rds"))
here("chapters_changed")
list.files(path = "D:/Book Writing/epihandbook_quarto/chapters_changed", pattern = ".RDS", full.names=T)
list.files(path = here("chapters_changed"), pattern = "\.RDS", full.names=T)
list.files(path = here("chapters_changed"), pattern = "\.rds", full.names=T)
list.files(path = here("chapters_changed"), pattern = ".RDS", full.names=T)
list.files()
list.files(path = here("chapters_changed"))
export(chapters_changed, here("chapters_changed" ,"chapters_changed_Neale.rds"))
list.files(path = here("chapters_changed"))
# import all .rds files in the chapters_changed folder using import_list() function from rio package
new <- rio::import_list(here("chapters_changed"))
# import all .rds files in the chapters_changed folder using import_list() function from rio package
new <- rio::import_list(file = here("chapters_changed"))
list.files(here("chapters_changed"), full.names = TRUE)
test <- list.files(here("chapters_changed"), full.names = TRUE)
new <- lapply(test, readRDS)
View(new)
rm(test, new)
test <- list.files(here("chapters_changed"), full.names = TRUE)
new <- lapply(test, import_list)
View(new)
new <- lapply(test, import_list) %>% unlist(recursive = FALSE)
View(new)
new <- import(test)
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
new <- import(file_list) %>% unlist()
my_data <- import_list(dir(here("chapters_changed"), pattern = ".rds"), rbind = TRUE)
ir(here("chapters_changed"), pattern = ".rds")
dir(here("chapters_changed"), pattern = ".rds")
tbl <-
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$") %>%
map_df(~import(.))
tbl <-
list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$") %>%
map_df(~import_list(.))
data_files <- map_df(here("chapters_changed"), import)
data_files <- map_df(file_list, import)
data_files <- map_df(file_list, import_list)
data_files <- map_df(file_list, readRDS)
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
test <- c(chapters_changed, chapter_data)
}
test
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
chapters_changed <- c(chapters_changed, chapter_data)
}
file_list <- list.files(here("chapters_changed"), full.names = TRUE, pattern = "^chapters_changed_.*\\.rds$")
chapters_changed <- c()
for (file in file_list) {
# Import the .rds file using the rio package
chapter_data <- import(file)
# Append the data to the all_chapters vector
chapters_changed <- c(chapters_changed, chapter_data)
}
# Remove duplicates
chapters_changed <- unique(chapters_changed)
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
yaml::read_yaml("_quarto.yml")
?quarto::quarto_render()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
rlang::last_trace()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
# WHOLE HANDBOOK
babelquarto::render_book()
yaml::read_yaml("_quarto.yml")
config_contents <- yaml::read_yaml("_quarto.yml")
View(config_contents)
language_codes <- config_contents[["babelquarto"]][["languages"]]
main_language <- config_contents[["babelquarto"]][["mainlanguage"]]
temporary_directory <- withr::local_tempdir()
fs::dir_copy(here::here(), temporary_directory)
withr::with_dir(file.path(temporary_directory, fs::path_file(path)),
{
fs::file_delete(fs::dir_ls(regexp = "\\...\\.qmd"))
quarto::quarto_render(as_job = FALSE)
})
withr::with_dir(file.path(temporary_directory, fs::path_file(here::here())),
{
fs::file_delete(fs::dir_ls(regexp = "\\...\\.qmd"))
quarto::quarto_render(as_job = FALSE)
})
temporary_directory
config$lang <- language_code
# WHOLE HANDBOOK
babelquarto::render_book()
renv::activate()
renv::snapshot()
renv::snapshot()
renv::install()
renv::install()
renv::snapshot()
renv::deactivate()
renv::deactivate()
gert::git_diff()
diffs <- gert::git_diff()
View(diffs)
#
# # Export the list of changed chapters to a RDS file. Add your name after the filename.
# export(chapters_changed, here("chapters_changed" ,"chapters_changed_Luong.rds"))
diffs1 <- gert::git_log()
View(diffs1)
View(diffs1)
View(diffs1)
system("git status -s", intern = TRUE)
system("git log --name-only --pretty=format:", intern = TRUE)
#
# # Export the list of changed chapters to a RDS file. Add your name after the filename.
# export(chapters_changed, here("chapters_changed" ,"chapters_changed_Luong.rds"))
diffs1 <- system("git log --name-only --pretty=format:", intern = TRUE)
#
# # Export the list of changed chapters to a RDS file. Add your name after the filename.
# export(chapters_changed, here("chapters_changed" ,"chapters_changed_Luong.rds"))
diffs1 <- gert::git_log()
View(diffs1)
git show diffs1[1,1]
test <- system("git diff --name-only HEAD~1", intern = TRUE)
test
test2 <- system("git show diffs1[1,1]")
diffs1[1,1]
test3 <- system("git show a5363baa1493f64472505e36e828a11e534231a8")
test <- system("git diff --name-only HEAD~1", intern = TRUE)
test
diffs <- system("git diff --name-only HEAD~1", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs$new[str_detect(diffs, "\\.qmd$")]
# # Filter only .qmd files
chapters_changed <- str_detect(diffs, "\\.qmd$")
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
# # Filter only .qmd files
chapters_changed <- stringr::str_detect(diffs, "\\.qmd$")
chapters_changed
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
diffs <- system("git diff --name-only HEAD~1", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs1 <- system("git log base_branch..HEAD")
diffs1 <- system("git log base_branch..HEAD", intern = TRUE)
diffs1
system("git log base_branch..HEAD", intern = TRUE)
system("git log base_branch..HEAD")
commits_since_creation <- system("git log master..HEAD --oneline", intern = TRUE)
commits_since_creation
diffs1 <- system("git diff --name-only HEAD~3", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs1
# # Filter only .qmd files
chapters_changed <- c()
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
chapters_changed <- diffs1[stringr::str_detect(diffs, "\\.qmd$")]
chapters_changed
chapters_changed <- diffs1[stringr::str_detect(diffs1, "\\.qmd$")]
diffs <- system("git diff --name-only HEAD~1", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs <- system("git diff --name-only HEAD~5", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs1 <- system("git reflog")
diffs1 <- system("git reflog", intern = TRUE)
diffs1 <- tibble(system("git reflog", intern = TRUE))
diffs1 <- tibble::tibble(system("git reflog", intern = TRUE))
View(diffs1)
diff2 <- system("git log 71975b4 ..HEAD", intern = TRUE)
diff2 <- system("git log <71975b4> ..HEAD", intern = TRUE)
diff2 <- system("git log update_test ..HEAD", intern = TRUE)
diff2 <- system("git log <update_test> ..HEAD", intern = TRUE)
diff2
diffs <- system("git diff --name-only HEAD~10", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs1 <- system("git log --name-only", intern = TRUE)
diffs1 <- tibble::tibble(system("git log --name-only", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git log --name-status", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git diff <71975b4>..HEAD", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git diff 71975b4..HEAD", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git diff --name-only main/71975b4", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git diff --name-only main/update_test", intern = TRUE))
View(diffs1)
diffs1 <- tibble::tibble(system("git diff --name-only main...", intern = TRUE))
View(diffs1)
diffs1 <- system("git diff --name-only main...", intern = TRUE)
diffs <- system("git diff --name-only main...", intern = TRUE)
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
diffs <- system("git diff --name-only main...", intern = TRUE) # to include only committed file, use ... after main
# # Filter only .qmd files
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")]
chapters_changed
deepL_lang = c("FR", "ES") #, "VN", "JA", "PT-PT", "TR", "RU"
target_lang = c("fr", "es") #, "vn" , "jp", "pt", "tr", "ru"
for (old_chapter in names(chapters_changed)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
# Setup the environment variable
Sys.setenv("DEEPL_API_URL" = "https://api.deepl.com")
Sys.setenv(DEEPL_API_KEY = "287d5481-9d96-8500-228c-6f98cfb3c576")
for (old_chapter in names(chapters_changed)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
names(chapters_changed)
chapters_changed
for (chapter in chapters_changed) {
print(chapter)
}
# 4. Create a named list where each original chapter filename maps to its new versions with language codes
chapters_changed_new <- setNames(
lapply(chapters_changed, function(chapter) {
sapply(target_lang, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})}),
chapters_changed)
View(chapters_changed_new)
for (old_chapter in chapters_changed_new) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed_new[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
for (old_chapter in names(chapters_changed_new)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed_new[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
rlang::last_trace()
names(chapters_changed_new))
names(chapters_changed_new)
new_chapters <- chapters_changed_new[[3]]
View(chapters_changed_new)
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here("new_pages/cleaning.qmd"),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
rlang::last_trace()
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here("new_pages/cleaning.qmd"),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
# WHOLE HANDBOOK
babelquarto::render_book()
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here("new_pages/cleaning.qmd"),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
for (old_chapter in names(chapters_changed_new)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed_new[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
# Setup the environment variable
Sys.setenv("DEEPL_API_URL" = "https://api.deepl.com")
Sys.setenv(DEEPL_API_KEY = "287d5481-9d96-8500-228c-6f98cfb3c576")
for (old_chapter in names(chapters_changed_new)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed_new[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
# Setup the environment variable
Sys.setenv("DEEPL_API_URL" = "https://api.deepl.com")
Sys.setenv(DEEPL_API_KEY = "287d5481-9d96-8500-228c-6f98cfb3c576")
pacman::p_load(
rio,
gert,
stringr,
babeldown,
here
)
# UPDATE LANGUAGE TRANSLATION PROTOCOL ------------------------------------------------------------------------
# 1 Detect chapters changed in the book
diffs <- system("git diff --name-only main...", intern = TRUE) # to include only committed file, use ... after main
chapters_changed <- diffs[stringr::str_detect(diffs, "\\.qmd$")] # Filter only .qmd files
deepL_lang = c("FR", "ES")
target_lang = c("fr", "es")
# 4. Create a named list where each original chapter filename maps to its new versions with language codes
chapters_changed_new <- setNames(
lapply(chapters_changed, function(chapter) {
sapply(target_lang, function(lang) {
sub("\\.qmd$", paste0(".", lang, ".qmd"), chapter)
})}),
chapters_changed)
for (old_chapter in names(chapters_changed_new)) {
# Get the vector of new filenames for the current original chapter
new_chapters <- chapters_changed_new[[old_chapter]]
# Loop over each new filename and its corresponding language
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here(old_chapter),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
}
old_chapter in names(chapters_changed_new)
new_chapters <- chapters_changed_new[[old_chapter]]
for (idx in seq_along(new_chapters)) {
new_chapter <- new_chapters[idx]
lang <- deepL_lang[idx]
babeldown::deepl_update(
path = here::here("index.qmd"),
out_path = here::here(new_chapter),
source_lang = "EN",
target_lang = lang,
formality = "less",
yaml_fields = NULL
)
}
babeldown::deepl_translate_quarto(
book_path = here::here(),
chapter = "index.qmd",
force = TRUE,
render = FALSE, # Whether to run babelquarto::render_bool() after translation.
source_lang = "EN",
target_lang = "FR",
formality = "less")
tinkr::yarn$new((here("index.qmd")))
old_source <- tinkr::yarn$new((here("index.qmd")))
View(old_source)
xml2::xml_length(old_source$body)
old_target <- tinkr::yarn$new((here("index.fr.qmd")))
View(old_target)
old_target["body"]
old_target$body
old_target$body[2]
old_target$body[1]
old_target$body[[1]]
xml_child(old_target[["body"]], 1)
library(xml2)
xml_child(old_target[["body"]], 1)
xml_child(old_target[["body"]], 2)
xml_child(old_target[["body"]], 3)
