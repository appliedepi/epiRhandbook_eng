{"title":"Transition to R","markdown":{"headingText":"Transition to R","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n<!-- ======================================================= -->\n<!-- ======================================================= -->\n<!-- ======================================================= -->\n\nBelow, we provide some advice and resources if you are transitioning to R.  \n\nR was introduced in the late 1990s and has since grown dramatically in scope. Its capabilities are so extensive that commercial alternatives have reacted to R developments in order to stay competitive! ([read this article comparing R, SPSS, SAS, STATA, and Python](https://www.inwt-statistics.com/read-blog/comparison-of-r-python-sas-spss-and-stata.html)).  \n\nMoreover, R is much easier to learn than it was 10 years ago. Previously, R had a reputation of being difficult for beginners. It is now much easier with friendly user-interfaces like RStudio, intuitive code like the **tidyverse**, and many tutorial resources.  \n\n<span style=\"color: darkgreen;\">**Do not be intimidated - come discover the world of R!**</span>  \n\n  \n\n```{r, echo=F, out.width = \"75%\", out.height=\"75%\", fig.align = \"center\"}\nknitr::include_graphics(here::here(\"images\", \"transition_door.png\"))\n```\n\n\n\n\n## From Excel  \n\nTransitioning from Excel directly to R is a very achievable goal. It may seem daunting, but you can do it!  \n\nIt is true that someone with strong Excel skills can do very advanced activities in Excel alone - even using scripting tools like VBA. Excel is used across the world and is an essential tool for an epidemiologist. However, complementing it with R can dramatically improve and expand your work flows.  \n\n### Benefits {.unnumbered}  \n\nYou will find that using R offers immense benefits in time saved, more consistent and accurate analysis, reproducibility, shareability, and faster error-correction. Like any new software there is a learning \"curve\" of time you must invest to become familiar. The dividends will be significant and immense scope of new possibilities will open to you with R.  \n\nExcel is a well-known software that can be easy for a beginner to use to produce simple analysis and visualizations with \"point-and-click\". In comparison, it can take a couple weeks to become comfortable with R functions and interface. However, R has evolved in recent years to become much more friendly to beginners.  \n\nMany Excel workflows rely on memory and on repetition - thus, there is much opportunity for error. Furthermore, generally the data cleaning, analysis methodology, and equations used are hidden from view. It can require substantial time for a new colleague to learn what an Excel workbook is doing and how to troubleshoot it. With R, all the steps are explicitly written in the script and can be easily viewed, edited, corrected, and applied to other datasets.   \n\n\n**To begin your transition from Excel to R you must adjust your mindset in a few important ways:**  \n\n\n### Tidy data {.unnumbered}  \n\nUse machine-readable \"tidy\" data instead of messy \"human-readable\" data. These are the three main requirements for \"tidy\" data, as explained in this tutorial on [\"tidy\" data in R](https://r4ds.had.co.nz/tidy-data.html):  \n\n* Each variable must have its own column  \n* Each observation must have its own row  \n* Each value must have its own cell  \n\nTo Excel users - think of the role that [Excel \"tables\"](https://exceljet.net/excel-tables) play in standardizing data and making the format more predictable.  \n\nAn example of \"tidy\" data would be the case linelist used throughout this handbook - each variable is contained within one column, each observation (one case) has it's own row, and every value is in just one cell. Below you can view the first 50 rows of the linelist:  \n\n```{r, echo=F}\n# import the linelist into R\nlinelist <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n\n```{r, message=FALSE, echo=F}\n# display the linelist data as a table\nDT::datatable(head(linelist, 50), rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\n```\n\n*The main reason one encounters non-tidy data is because many Excel spreadsheets are designed to prioritize easy reading by humans, not easy reading by machines/software.*  \n\nTo help you see the difference, below are some fictional examples of **non-tidy data** that prioritize *human*-readability over *machine*-readability:  \n\n```{r, echo=F, out.width = \"100%\", out.height=\"75%\", fig.align = \"center\"}\nknitr::include_graphics(here::here(\"images\", \"Excel_nonTidy_1.png\"))\n```\n\n\n*Problems:* In the spreadsheet above, there are *merged cells* which are not easily digested by R. Which row should be considered the \"header\" is not clear. A color-based dictionary is to the right side and cell values are represented by colors - which is also not easily interpreted by R (nor by humans with color-blindness!). Furthermore, different pieces of information are combined into one cell (multiple partner organizations working in one area, or the status \"TBC\" in the same cell as \"Partner D\").  \n\n\n```{r, echo=F, out.width = \"100%\", out.height=\"100%\", fig.align = \"center\"}\nknitr::include_graphics(here::here(\"images\", \"Excel_nonTidy_2.png\"))\n```\n\n\n*Problems:* In the spreadsheet above, there are numerous extra empty rows and columns within the dataset - this will cause cleaning headaches in R. Furthermore, the GPS coordinates are spread across two rows for a given treatment center. As a side note - the GPS coordinates are in two different formats!  \n\n\"Tidy\" datasets may not be as readable to a human eye, but they make data cleaning and analysis much easier! Tidy data can be stored in various formats, for example \"long\" or \"wide\"\"(see page on [Pivoting data]), but the principles above are still observed.\n\n\n### Functions {.unnumbered}  \n\nThe R word \"function\" might be new, but the concept exists in Excel too as *formulas*. Formulas in Excel also require precise syntax (e.g. placement of semicolons and parentheses). All you need to do is learn a few new functions and how they work together in R.  \n\n\n\n### Scripts {.unnumbered}  \n\nInstead of clicking buttons and dragging cells you will be writing *every* step and procedure into a \"script\". \nExcel users may be familiar with \"VBA macros\" which also employ a scripting approach.  \n\n*The R script consists of step-by-step instructions.* This allows any colleague to read the script and easily see the steps you took. This also helps de-bug errors or inaccurate calculations. See the [R basics] section on scripts for examples.  \n\nHere is an example of an R script:  \n\n```{r, echo=F, out.width = \"75%\", out.height=\"75%\", fig.align = \"center\"}\nknitr::include_graphics(here::here(\"images\", \"example_script.png\"))\n```\n\n\n\n\n\n\n\n### Excel-to-R resources {.unnumbered}\n\nHere are some links to tutorials to help you transition to R from Excel:  \n\n* [R vs. Excel](https://www.northeastern.edu/graduate/blog/r-vs-excel/)  \n* [RStudio course in R for Excel users](https://rstudio-conf-2020.github.io/r-for-excel/)  \n\n\n### R-Excel interaction {.unnumbered}  \n\nR has robust ways to import Excel workbooks, work with the data, export/save Excel files, and work with the nuances of Excel sheets.  \n\nIt is true that some of the more aesthetic Excel formatting can get lost in translation (e.g. italics, sideways text, etc.). If your work flow requires passing documents back-and-forth between R and Excel while retaining the original Excel formatting, try packages such as **openxlsx**.  \n\n\n\n\n\n\n\n## From Stata  \n<!-- ======================================================= -->\n\n**Coming to R from Stata**  \n\nMany epidemiologists are first taught how to use Stata, and it can seem daunting to move into R. However, if you are a comfortable Stata user then the jump into R is certainly more manageable than you might think. While there are some key differences between Stata and R in how data can be created and modified, as well as how analysis functions are implemented – after learning these key differences you will be able to translate your skills.\n\nBelow are some key translations between Stata and R, which may be handy as your review this guide.\n\n\n**General notes**\n\n**STATA**                    | **R**  \n---------------------------- | ---------------------------------------------    \nYou can only view and manipulate one dataset at a time | You can view and manipulate multiple datasets at the same time, therefore you will frequently have to specify your dataset within the code\nOnline community available through [https://www.statalist.org/](https://www.statalist.org/) | Online community available through [RStudio](https://community.rstudio.com/), [StackOverFlow](https://stackoverflow.com/questions/tagged/r), and [R-bloggers](https://www.r-bloggers.com/)\nPoint and click functionality as an option | Minimal point and click functionality\nHelp for commands available by `help [command]` | Help available by `[function]?` or search in the Help pane\nComment code using * or /// or  /* TEXT */ | Comment code using #\nAlmost all commands are built-in to Stata. New/user-written functions can be installed as **ado** files using **ssc install** [package] | R installs with **base** functions, but typical use involves installing other packages from CRAN (see page on [R basics])\nAnalysis is usually written in a **do** file | Analysis written in an R script in the RStudio source pane. R markdown scripts are an alternative.\n\n\n**Working directory**  \n\n**STATA**                        | **R**  \n-------------------------------- | ---------------------------------------------\nWorking directories involve absolute filepaths (e.g. \"C:/usename/documents/projects/data/\")| Working directories can be either absolute, or relative to a project root folder by using the **here** package (see [Import and export]) \nSee current working directory with **pwd** | Use `getwd()` or `here()` (if using the **here** package), with empty parentheses \nSet working directory with **cd** “folder location” | Use `setwd(“folder location”)`, or `set_here(\"folder location)` (if using **here** package)\n\n**Importing and viewing data**  \n\n**STATA**                    | **R**  \n-------------------------------- | ---------------------------------------------\nSpecific commands per file type | Use `import()` from **rio** package for almost all filetypes. Specific functions exist as alternatives (see [Import and export])\nReading in csv files is done by **import delimited** “filename.csv” | Use `import(\"filename.csv\")`\nReading in xslx files is done by **import excel** “filename.xlsx” | Use `import(\"filename.xlsx\")`\nBrowse your data in a new window using the command **browse** | View a dataset in the RStudio source pane using `View(dataset)`. *You need to specify your dataset name to the function in R because multiple datasets can be held at the same time. Note capital \"V\" in this function*\nGet a high-level overview of your dataset using **summarize**, which provides the variable names and basic information | Get a high-level overview of your dataset using `summary(dataset)`\n\n**Basic data manipulation**  \n\n**STATA**                    | **R**  \n-------------------------------- | ---------------------------------------------\nDataset columns are often referred to as \"variables\" | More often referred to as \"columns\" or sometimes as \"vectors\" or \"variables\"\nNo need to specify the dataset | In each of the below commands, you need to specify the dataset - see the page on [Cleaning data and core functions] for examples\nNew variables are created using the command **generate** *varname* =  | Generate new variables using the function `mutate(varname = )`. See page on [Cleaning data and core functions] for details on all the below **dplyr** functions.\nVariables are renamed using **rename** *old_name new_name* | Columns can be renamed using the function `rename(new_name = old_name)`\nVariables are dropped using **drop** *varname* | Columns can be removed using the function `select()` with the column name in the parentheses following a minus sign\nFactor variables can be labeled using a series of commands such as **label define** | Labeling values can done by converting the column to Factor class and specifying levels. See page on [Factors]. Column names are not typically labeled as they are in Stata.\n\n**Descriptive analysis**  \n\n**STATA**                    | **R**  \n-------------------------------- | ---------------------------------------------\nTabulate counts of a variable using **tab** *varname* | Provide the dataset and column name to `table()` such as `table(dataset$colname)`. Alternatively, use `count(varname)` from the **dplyr** package, as explained in [Grouping data]\nCross-tabulaton of two variables in a 2x2 table is done with **tab** *varname1 varname2* | Use `table(dataset$varname1, dataset$varname2` or `count(varname1, varname2)`\n\n\nWhile this list gives an overview of the basics in translating Stata commands into R, it is not exhaustive. There are many other great resources for Stata users transitioning to R that could be of interest:  \n\n* https://dss.princeton.edu/training/RStata.pdf  \n* https://clanfear.github.io/Stata_R_Equivalency/docs/r_stata_commands.html  \n* http://r4stats.com/books/r4stata/  \n\n\n\n\n## From SAS  \n<!-- ======================================================= -->\n\n**Coming from SAS to R**  \n\nSAS is commonly used at public health agencies and academic research fields. Although transitioning to a new language is rarely a simple process, understanding key differences between SAS and R may help you start to navigate the new language using your native language. \nBelow outlines the key translations in data management and descriptive analysis between SAS and R.   \n\n**General notes**  \n\n**SAS**                          | **R**  \n-------------------------------- | ---------------------------------------------\nOnline community available through [SAS Customer Support](https://support.sas.com/en/support-home.html)|Online community available through RStudio, StackOverFlow, and R-bloggers\nHelp for commands available by `help [command]`|Help available by [function]? or search in the Help pane\nComment code using `* TEXT ;` or `/* TEXT */`|Comment code using #\nAlmost all commands are built-in.  Users can write new functions using SAS macro, SAS/IML, SAS Component Language (SCL), and most recently, procedures `Proc Fcmp` and `Proc Proto`|R installs with **base** functions, but typical use involves installing other packages from CRAN (see page on [R basics])\nAnalysis is usually conducted by writing a SAS program in the Editor window.|Analysis written in an R script in the RStudio source pane. R markdown scripts are an alternative.\n\n**Working directory**  \n\n**SAS**                          | **R**  \n-------------------------------- | ---------------------------------------------\nWorking directories can be either absolute, or relative to a project root folder by defining the root folder using `%let rootdir=/root path; %include “&rootdir/subfoldername/filename”`|Working directories can be either absolute, or relative to a project root folder by using the **here** package (see [Import and export])\nSee current working directory with `%put %sysfunc(getoption(work));`|Use `getwd()` or `here()` (if using the **here** package), with empty parentheses\nSet working directory with `libname “folder location”`|Use `setwd(“folder location”)`, or `set_here(\"folder location)` if using **here** package\n\n\n**Importing and viewing data**  \n\n**SAS**                          | **R**  \n-------------------------------- | ---------------------------------------------\nUse `Proc Import` procedure or using `Data Step Infile` statement.|Use `import()` from **rio** package for almost all filetypes. Specific functions exist as alternatives (see [Import and export])\nReading in csv files is done by using `Proc Import datafile=”filename.csv” out=work.filename dbms=CSV; run;` OR using [Data Step Infile statement](http://support.sas.com/techsup/technote/ts673.pdf)|Use `import(\"filename.csv\")`\nReading in xslx files is done by using `Proc Import datafile=”filename.xlsx” out=work.filename dbms=xlsx; run;` OR using [Data Step Infile statement](http://support.sas.com/techsup/technote/ts673.pdf)|Use import(\"filename.xlsx\")\nBrowse your data in a new window by opening the Explorer window and select desired library and the dataset|View a dataset in the RStudio source pane using View(dataset). You need to specify your dataset name to the function in R because multiple datasets can be held at the same time. Note capital “V” in this function\n\n**Basic data manipulation**  \n\n**SAS**                          | **R**  \n-------------------------------- | ---------------------------------------------\nDataset columns are often referred to as “variables”|More often referred to as “columns” or sometimes as “vectors” or “variables”\nNo special procedures are needed to create a variable. New variables are created simply by typing the new variable name, followed by an equal sign, and then an expression for the value|Generate new variables using the function `mutate()`. See page on [Cleaning data and core functions] for details on all the below **dplyr** functions.\nVariables are renamed using `rename *old_name=new_name*`|Columns can be renamed using the function `rename(new_name = old_name)`\nVariables are kept using `**keep**=varname`|Columns can be selected using the function `select()` with the column name in the parentheses\nVariables are dropped using `**drop**=varname`|Columns can be removed using the function `select()` with the column name in the parentheses following a minus sign\nFactor variables can be labeled in the Data Step using `Label` statement|Labeling values can done by converting the column to Factor class and specifying levels. See page on [Factors]. Column names are not typically labeled.\nRecords are selected using `Where` or `If` statement in the Data Step. Multiple selection conditions are separated using “and” command.|Records are selected using the function `filter()` with multiple selection conditions separated either by an AND operator (&) or a comma  \nDatasets are combined using `Merge` statement in the Data Step. The datasets to be merged need to be sorted first using `Proc Sort` procedure.|**dplyr** package offers a few functions for merging datasets. See page [Joining Data] for details.\n\n**Descriptive analysis**  \n\n**SAS**                          | **R**  \n-------------------------------- | ---------------------------------------------\nGet a high-level overview of your dataset using `Proc Summary` procedure, which provides the variable names and descriptive statistics|Get a high-level overview of your dataset using `summary(dataset)` or `skim(dataset)` from the **skimr** package\nTabulate counts of a variable using `proc freq data=Dataset; Tables varname; Run;`|See the page on [Descriptive tables]. Options include `table()` from **base** R, and `tabyl()` from **janitor** package, among others. Note you will need to specify the dataset and column name as R holds multiple datasets.\nCross-tabulation of two variables in a 2x2 table is done with `proc freq data=Dataset; Tables rowvar*colvar; Run;`|Again, you can use `table()`, `tabyl()` or other options as described in the [Descriptive tables] page.  \n\n**Some useful resources:**  \n\n[R for SAS and SPSS Users (2011)](https://www.amazon.com/SAS-SPSS-Users-Statistics-Computing/dp/1461406846/ref=sr_1_1?dchild=1&gclid=EAIaIQobChMIoqLOvf6u7wIVAhLnCh1c9w_DEAMYASAAEgJLIfD_BwE&hvadid=241675955927&hvdev=c&hvlocphy=9032185&hvnetw=g&hvqmt=e&hvrand=16854847287059617468&hvtargid=kwd-44746119007&hydadcr=16374_10302157&keywords=r+for+sas+users&qid=1615698213&sr=8-1)\n\n[SAS and R, Second Edition (2014)](https://www.amazon.com/SAS-Management-Statistical-Analysis-Graphics-dp-1466584491/dp/1466584491/ref=dp_ob_title_bk)\n\n\n\n## Data interoperability  \n<!-- ======================================================= -->\n\nSee the [Import and export] page for details on how the R package **rio** can import and export files such as STATA .dta files, SAS .xpt and.sas7bdat files, SPSS .por and.sav files, and many others.  \n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"transition_to_R.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}