{"title":"Simple statistical tests","markdown":{"headingText":"Simple statistical tests","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\nThis page demonstrates how to conduct simple statistical tests using **base** R, **rstatix**, and **gtsummary**.  \n\n* T-test  \n* Shapiro-Wilk test  \n* Wilcoxon rank sum test  \n* Kruskal-Wallis test  \n* Chi-squared test  \n* Correlations between numeric variables  \n\n...many other tests can be performed, but we showcase just these common ones and link to further documentation.  \n\nEach of the above packages bring certain advantages and disadvantages:  \n\n* Use **base** R functions to print a statistical outputs to the R Console  \n* Use **rstatix** functions to return results in a data frame, or if you want tests to run by group  \n* Use **gtsummary** if you want to quickly print publication-ready tables  \n\n\n\n<!-- ======================================================= -->\n## Preparation {  }\n\n\n### Load packages {.unnumbered}\n\nThis code chunk shows the loading of packages required for the analyses. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n\n```{r}\npacman::p_load(\n  rio,          # File import\n  here,         # File locator\n  skimr,        # get overview of data\n  tidyverse,    # data management + ggplot2 graphics, \n  gtsummary,    # summary statistics and tests\n  rstatix,      # statistics\n  corrr,        # correlation analayis for numeric variables\n  janitor,      # adding totals and percents to tables\n  flextable     # converting tables to HTML\n  )\n```\n\n### Import data {.unnumbered}\n\nWe import the dataset of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import your data with the `import()` function from the **rio** package (it accepts many file types like .xlsx, .rds, .csv - see the [Import and export] page for details).  \n\n\n```{r, echo=F}\n# import the linelist into R\nlinelist <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n\n```{r, eval=F}\n# import the linelist\nlinelist <- import(\"linelist_cleaned.rds\")\n```\n\nThe first 50 rows of the linelist are displayed below.\n\n```{r, message=FALSE, echo=F}\n# display the linelist data as a table\nDT::datatable(head(linelist, 50), rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\n```\n\n\n\n\n\n## **base** R {}\n\nYou can use **base** R functions to conduct statistical tests. The commands are relatively simple and results will print to the R Console for simple viewing. However, the outputs are usually lists and so are harder to manipulate if you want to use the results in subsequent operations. \n\n### T-tests {.unnumbered} \n\nA [t-test](https://en.wikipedia.org/wiki/Student%27s_t-test), also called \"Student's t-Test\", is typically used to determine if there is a significant difference between the means of some numeric variable between two groups. Here we'll show the syntax to do this test depending on whether the columns are in the same data frame.\n\n**Syntax 1:** This is the syntax when your numeric and categorical columns are in the same data frame. Provide the numeric column on the left side of the equation and the categorical column on the right side. Specify the dataset to `data = `. Optionally, set `paired = TRUE`, and `conf.level = ` (0.95 default), and `alternative = ` (either \"two.sided\", \"less\", or \"greater\"). Enter `?t.test` for more details.  \n\n```{r}\n## compare mean age by outcome group with a t-test\nt.test(age_years ~ gender, data = linelist)\n```\n\n**Syntax 2:** You can compare two separate numeric vectors using this alternative syntax. For example, if the two columns are in different data sets.  \n\n```{r, eval=F}\nt.test(df1$age_years, df2$age_years)\n```\n\nYou can also use a t-test to determine whether a sample mean is significantly different from some specific value. Here we conduct a one-sample t-test with the known/hypothesized population mean as `mu = `:  \n\n```{r, eval=F}\nt.test(linelist$age_years, mu = 45)\n```\n\n### Shapiro-Wilk test {.unnumbered}  \n\nThe [Shapiro-Wilk test](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test) can be used to determine whether a sample came from a normally-distributed population (an assumption of many other tests and analysis, such as the t-test). However, this can only be used on a sample between 3 and 5000 observations. For larger samples a [quantile-quantile plot](https://ggplot2.tidyverse.org/reference/geom_qq.html) may be helpful. \n\n\n```{r, eval=F}\nshapiro.test(linelist$age_years)\n```\n\n### Wilcoxon rank sum test {.unnumbered}\n\nThe Wilcoxon rank sum test, also called the [Mannâ€“Whitney U test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test), is often used to help determine if two numeric samples are from the same distribution when their populations are not normally distributed or have unequal variance.\n\n```{r wilcox_base}\n\n## compare age distribution by outcome group with a wilcox test\nwilcox.test(age_years ~ outcome, data = linelist)\n\n```\n\n\n### Kruskal-Wallis test {.unnumbered}\n\n\nThe [Kruskal-Wallis test](https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance) is an extension of the Wilcoxon rank sum test that can be used to test for differences in the distribution of more than two samples. When only two samples are used it gives identical results to the Wilcoxon rank sum test. \n\n```{r }\n\n## compare age distribution by outcome group with a kruskal-wallis test\nkruskal.test(age_years ~ outcome, linelist)\n\n```\n\n### Chi-squared test {.unnumbered} \n\n[Pearson's Chi-squared test](https://en.wikipedia.org/wiki/Chi-squared_test) is used in testing for significant differences between categorical croups. \n\n```{r}\n\n## compare the proportions in each group with a chi-squared test\nchisq.test(linelist$gender, linelist$outcome)\n\n```\n\n\n\n## **rstatix** package {}\n\nThe **rstatix** package offers the ability to run statistical tests and retrieve results in a \"pipe-friendly\" framework. The results are automatically in a data frame so that you can perform subsequent operations on the results. It is also easy to group the data being passed into the functions, so that the statistics are run for each group.  \n\n\n### Summary statistics {.unnumbered}  \n\nThe function `get_summary_stats()` is a quick way to return summary statistics. Simply pipe your dataset to this function and provide the columns to analyse. If no columns are specified, the statistics are calculated for all columns.  \n\nBy default, a full range of summary statistics are returned: n, max, min, median, 25%ile, 75%ile, IQR, median absolute deviation (mad), mean, standard deviation, standard error, and a confidence interval of the mean. \n\n\n```{r}\nlinelist %>%\n  rstatix::get_summary_stats(age, temp)\n```\n\nYou can specify a subset of summary statistics to return by providing one of the following values to `type = `: \"full\", \"common\", \"robust\", \"five_number\", \"mean_sd\", \"mean_se\", \"mean_ci\", \"median_iqr\", \"median_mad\", \"quantile\", \"mean\", \"median\", \"min\", \"max\".  \n\nIt can be used with grouped data as well, such that a row is returned for each grouping-variable:  \n\n```{r}\nlinelist %>%\n  group_by(hospital) %>%\n  rstatix::get_summary_stats(age, temp, type = \"common\")\n```\n\nYou can also use **rstatix** to conduct statistical tests:  \n\n### T-test {.unnumbered}  \n\nUse a formula syntax to specify the numeric and categorical columns:  \n\n```{r}\nlinelist %>% \n  t_test(age_years ~ gender)\n```\n\nOr use `~ 1` and specify `mu = ` for a one-sample T-test. This can also be done by group.  \n\n```{r}\nlinelist %>% \n  t_test(age_years ~ 1, mu = 30)\n```\n\nIf applicable, the statistical tests can be done by group, as shown below:  \n\n```{r}\nlinelist %>% \n  group_by(gender) %>% \n  t_test(age_years ~ 1, mu = 18)\n```\n\n### Shapiro-Wilk test {.unnumbered}  \n\nAs stated above, sample size must be between 3 and 5000.  \n\n```{r}\nlinelist %>% \n  head(500) %>%            # first 500 rows of case linelist, for example only\n  shapiro_test(age_years)\n```\n\n### Wilcoxon rank sum test {.unnumbered}  \n\n```{r}\nlinelist %>% \n  wilcox_test(age_years ~ gender)\n```\n\n\n### Kruskal-Wallis test {.unnumbered}  \n\nAlso known as the Mann-Whitney U test.  \n\n```{r}\nlinelist %>% \n  kruskal_test(age_years ~ outcome)\n```\n\n\n### Chi-squared test {.unnumbered}  \n\nThe chi-square test function accepts a table, so first we create a cross-tabulation. There are many ways to create a cross-tabulation (see [Descriptive tables]) but here we use `tabyl()` from **janitor** and remove the left-most column of value labels before passing to `chisq_test()`.  \n\n```{r}\nlinelist %>% \n  tabyl(gender, outcome) %>% \n  select(-1) %>% \n  chisq_test()\n\n```\n\nMany many more functions and statistical tests can be run with **rstatix** functions. See the documentation for **rstatix** [online here](https://github.com/kassambara/rstatix) or by entering ?rstatix.  \n\n\n\n\n\n## `gtsummary` package {#stats_gt}\n\nUse **gtsummary** if you are looking to add the results of a statistical test to a pretty table that was created with this package (as described in the **gtsummary** section of the [Descriptive tables](#tbl_gt) page).  \n\nPerforming statistical tests of comparison with `tbl_summary` is done by adding the \n`add_p` function to a table and specifying which test to use. It is possible to get p-values corrected for multiple testing by using the\n`add_q` function. Run `?tbl_summary` for details.  \n\n### Chi-squared test {.unnumbered}\n\nCompare the proportions of a categorical variable in two groups. The default statistical test for `add_p()` when applied to a categorical variable is to perform a chi-squared test of independence with continuity correction, but if any expected call count is below 5 then a Fisher's exact test is used. \n\n```{r chi_gt}\nlinelist %>% \n  select(gender, outcome) %>%    # keep variables of interest\n  tbl_summary(by = outcome) %>%  # produce summary table and specify grouping variable\n  add_p()                        # specify what test to perform\n```\n\n\n### T-tests {.unnumbered} \n\nCompare the difference in means for a continuous variable in two groups. \nFor example, compare the mean age by patient outcome. \n\n```{r ttest_gt}\n\nlinelist %>% \n  select(age_years, outcome) %>%             # keep variables of interest\n  tbl_summary(                               # produce summary table\n    statistic = age_years ~ \"{mean} ({sd})\", # specify what statistics to show\n    by = outcome) %>%                        # specify the grouping variable\n  add_p(age_years ~ \"t.test\")                # specify what tests to perform\n\n\n```\n\n### Wilcoxon rank sum test{.unnumbered}\n\nCompare the distribution of a continuous variable in two groups. The default \nis to use the Wilcoxon rank sum test and the median (IQR) when comparing two \ngroups. However for non-normally distributed data or comparing multiple groups, \nthe Kruskal-wallis test is more appropriate. \n\n```{r wilcox_gt}\n\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (this is default so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"wilcox.test\")                     # specify what test to perform (default so could leave brackets empty)\n\n\n```\n\n### Kruskal-wallis test {.unnumbered}\n\nCompare the distribution of a continuous variable in two or more groups, \nregardless of whether the data is normally distributed. \n\n```{r kruskal_gt}\n\nlinelist %>% \n  select(age_years, outcome) %>%                       # keep variables of interest\n  tbl_summary(                                         # produce summary table\n    statistic = age_years ~ \"{median} ({p25}, {p75})\", # specify what statistic to show (default, so could remove)\n    by = outcome) %>%                                  # specify the grouping variable\n  add_p(age_years ~ \"kruskal.test\")                    # specify what test to perform\n\n\n```\n\n\n\n\n<!-- ## `dplyr` package {} -->\n\n<!-- Performing statistical tests in `dplyr` alone is very dense, again because it  -->\n<!-- does not fit within the tidy-data framework. It requires using `purrr` to create -->\n<!-- a list of dataframes for each of the subgroups you want to compare. See the page on [Iteration, loops, and lists] to learn about **purrr**.   -->\n\n<!-- An easier alternative may be the `rstatix` package.  -->\n\n<!-- ### T-tests {.unnumbered}  -->\n\n<!-- ```{r ttest_dplyr} -->\n\n<!-- linelist %>%  -->\n<!--   ## only keep variables of interest -->\n<!--   select(age, outcome) %>%  -->\n<!--   ## drop those missing outcome  -->\n<!--   filter(!is.na(outcome)) %>%  -->\n<!--   ## specify the grouping variable -->\n<!--   group_by(outcome) %>%  -->\n<!--   ## create a subset of data for each group (as a list) -->\n<!--   nest() %>%  -->\n<!--   ## spread in to wide format -->\n<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->\n<!--   mutate( -->\n<!--     ## calculate the mean age for the death group -->\n<!--     Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)), -->\n<!--     ## calculate the sd among dead  -->\n<!--     Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)), -->\n<!--     ## calculate the mean age for the recover group -->\n<!--     Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)),  -->\n<!--     ## calculate the sd among recovered  -->\n<!--     Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)), -->\n<!--     ## using both grouped data sets compare mean age with a t-test -->\n<!--     ## keep only the p.value -->\n<!--     t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value) -->\n<!--   ) %>%  -->\n<!--   ## drop datasets  -->\n<!--   select(-Death, -Recover) %>%  -->\n<!--   ## return a dataset with the medians and p.value (drop missing) -->\n<!--   unnest(cols = everything()) -->\n\n<!-- ``` -->\n\n\n<!-- ### Wilcoxon rank sum test {.unnumbered} -->\n\n<!-- ```{r wilcox_dplyr} -->\n\n<!-- linelist %>%  -->\n<!--   ## only keep variables of interest -->\n<!--   select(age, outcome) %>%  -->\n<!--   ## drop those missing outcome  -->\n<!--   filter(!is.na(outcome)) %>%  -->\n<!--   ## specify the grouping variable -->\n<!--   group_by(outcome) %>%  -->\n<!--   ## create a subset of data for each group (as a list) -->\n<!--   nest() %>%  -->\n<!--   ## spread in to wide format -->\n<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->\n<!--   mutate( -->\n<!--     ## calculate the median age for the death group -->\n<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->\n<!--     ## calculate the sd among dead  -->\n<!--     Death_iqr = map(Death, ~str_c( -->\n<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->\n<!--       collapse = \", \" -->\n<!--       )), -->\n<!--     ## calculate the median age for the recover group -->\n<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->\n<!--     ## calculate the sd among recovered  -->\n<!--     Recover_iqr = map(Recover, ~str_c( -->\n<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->\n<!--       collapse = \", \" -->\n<!--       )), -->\n<!--     ## using both grouped data sets compare age distribution with a wilcox test -->\n<!--     ## keep only the p.value -->\n<!--     wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value) -->\n<!--   ) %>%  -->\n<!--   ## drop datasets  -->\n<!--   select(-Death, -Recover) %>%  -->\n<!--   ## return a dataset with the medians and p.value (drop missing) -->\n<!--   unnest(cols = everything()) -->\n\n<!-- ``` -->\n\n<!-- ### Kruskal-wallis test {.unnumbered} -->\n\n\n<!-- ```{r kruskal_dplyr} -->\n\n<!-- linelist %>%  -->\n<!--   ## only keep variables of interest -->\n<!--   select(age, outcome) %>%  -->\n<!--   ## drop those missing outcome  -->\n<!--   filter(!is.na(outcome)) %>%  -->\n<!--   ## specify the grouping variable -->\n<!--   group_by(outcome) %>%  -->\n<!--   ## create a subset of data for each group (as a list) -->\n<!--   nest() %>%  -->\n<!--   ## spread in to wide format -->\n<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->\n<!--   mutate( -->\n<!--     ## calculate the median age for the death group -->\n<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->\n<!--     ## calculate the sd among dead  -->\n<!--     Death_iqr = map(Death, ~str_c( -->\n<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->\n<!--       collapse = \", \" -->\n<!--       )), -->\n<!--     ## calculate the median age for the recover group -->\n<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->\n<!--     ## calculate the sd among recovered  -->\n<!--     Recover_iqr = map(Recover, ~str_c( -->\n<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->\n<!--       collapse = \", \" -->\n<!--       )), -->\n<!--     ## using the original data set compare age distribution with a kruskal test -->\n<!--     ## keep only the p.value -->\n<!--     kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value -->\n<!--   ) %>%  -->\n<!--   ## drop datasets  -->\n<!--   select(-Death, -Recover) %>%  -->\n<!--   ## return a dataset with the medians and p.value (drop missing) -->\n<!--   unnest(cols = everything()) -->\n\n<!-- ``` -->\n\n<!-- ### Chi-squared test {.unnumbered}  -->\n\n\n<!-- ```{r} -->\n<!-- linelist %>%  -->\n<!--   ## do everything by gender  -->\n<!--   group_by(outcome) %>%  -->\n<!--   ## count the variable of interest -->\n<!--   count(gender) %>%  -->\n<!--   ## calculate proportion  -->\n<!--   ## note that the denominator here is the sum of each gender -->\n<!--   mutate(percentage = n / sum(n) * 100) %>%  -->\n<!--   pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>%  -->\n<!--   filter(!is.na(gender)) %>%  -->\n<!--   mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value) -->\n<!-- ``` -->\n\n\n<!-- ======================================================= -->\n\n## Correlations \n\nCorrelation between numeric variables can be investigated using the **tidyverse**  \n**corrr** package. It allows you to compute correlations using Pearson, Kendall\ntau or Spearman rho. The package creates a table and also has a function to \nautomatically plot the values. \n\n```{r, warning=F, message=F}\n\ncorrelation_tab <- linelist %>% \n  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # keep numeric variables of interest\n  correlate()      # create correlation table (using default pearson)\n\ncorrelation_tab    # print\n\n## remove duplicate entries (the table above is mirrored) \ncorrelation_tab <- correlation_tab %>% \n  shave()\n\n## view correlation table \ncorrelation_tab\n\n## plot correlations \nrplot(correlation_tab)\n```\n\n\n<!-- ======================================================= -->\n\n## Resources {  }\n\nMuch of the information in this page is adapted from these resources and vignettes online:  \n\n[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)\n[dplyr](https://dplyr.tidyverse.org/articles/grouping.html)\n[corrr](https://corrr.tidymodels.org/articles/using-corrr.html)\n[sthda correlation](http://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r)\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"stat_tests.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}