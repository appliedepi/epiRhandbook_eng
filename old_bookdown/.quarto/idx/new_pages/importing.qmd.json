{"title":"Import and export","markdown":{"headingText":"Import and export","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r, out.width=c('100%'), echo=F, message=F}\nknitr::include_graphics(here::here(\"images\", \"Import_Export_1500x500.png\"))\n```\n\n\n\nIn this page we describe ways to locate, import, and export files:  \n\n* Use of the **rio** package to flexibly `import()` and `export()` many types of files  \n* Use of the **here** package to locate files relative to an R project root - to prevent complications from file paths that are specific to one computer  \n* Specific import scenarios, such as:  \n  * Specific Excel sheets  \n  * Messy headers and skipping rows  \n  * From Google sheets  \n  * From data posted to websites  \n  * With APIs  \n  * Importing the *most recent* file  \n* Manual data entry  \n* R-specific file types such as RDS and RData  \n* Exporting/saving files and plots  \n\n\n```{r, include=FALSE}\npacman::p_load(\n  rio,            # import/export\n  here,           # file pathways\n  tidyverse)      # data management, summary, and visualization\n```\n\n<!-- ======================================================= -->\n## Overview\n\nWhen you import a \"dataset\" into R, you are generally creating a new *data frame* object in your R environment and defining it as an imported file (e.g. Excel, CSV, TSV, RDS) that is located in your folder directories at a certain file path/address.  \n\nYou can import/export many types of files, including those created by other statistical programs (SAS, STATA, SPSS). You can also connect to relational databases.  \n\nR even has its own data formats:  \n\n* An RDS file (.rds) stores a single R object such as a data frame. These are useful to store cleaned data, as they maintain R column classes. Read more in [this section](#import_rds).    \n* An RData file (.Rdata) can be used to store multiple objects, or even a complete R workspace. Read more in [this section](#import_rdata).  \n\n\n<!-- ======================================================= -->\n## The **rio** package {}  \n\nThe R package we recommend is: **rio**. The name \"rio\" is an abbreviation of \"R I/O\" (input/output).  \n\nIts functions `import()` and `export()` can handle many different file types (e.g. .xlsx, .csv, .rds, .tsv). When you provide a file path to either of these functions (including the file extension like \".csv\"), **rio** will read the extension and use the correct tool to import or export the file.  \n\nThe alternative to using **rio** is to use functions from many other packages, each of which is specific to a type of file. For example, `read.csv()` (**base** R), `read.xlsx()` (**openxlsx** package), and `write_csv()` (**readr** pacakge), etc. These alternatives can be difficult to remember, whereas using `import()` and `export()` from **rio** is easy.  \n\n**rio**'s functions `import()` and `export()` use the appropriate package and function for a given file, based on its file extension. See the end of this page for a complete table of which packages/functions **rio** uses in the background. It can also be used to import STATA, SAS, and SPSS files, among dozens of other file types.  \n\nImport/export of shapefiles requires other packages, as detailed in the page on [GIS basics].    \n\n\n\n\n\n## The **here** package {#here}\n\nThe package **here** and its function `here()` make it easy to tell R where to find and to save your files - in essence, it builds file paths.  \n\nUsed in conjunction with an R project, **here** allows you to describe the location of files in your R project in relation to the R project's *root directory* (the top-level folder). This is useful when the R project may be shared or accessed by multiple people/computers. It prevents complications due to the unique file paths on different computers (e.g. `\"C:/Users/Laura/Documents...\"` by \"starting\" the file path in a place common to all users (the R project root).  \n\nThis is how `here()` works within an R project:  \n\n* When the **here** package is first loaded within the R project, it places a small file called \".here\" in the root folder of your R project as a \"benchmark\" or \"anchor\"  \n* In your scripts, to reference a file in the R project's sub-folders, you use the function `here()` to build the file path *in relation to that anchor*\n* To build the file path, write the names of folders beyond the root, within quotes, separated by commas, finally ending with the file name and file extension as shown below  \n* `here()` file paths can be used for both importing and exporting  \n\nFor example, below, the function `import()` is being provided a file path constructed with `here()`.  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"linelists\", \"ebola_linelist.xlsx\"))\n```\n\nThe command `here(\"data\", \"linelists\", \"ebola_linelist.xlsx\")` is actually providing the full file path that is *unique to the user's computer*:  \n\n```\n\"C:/Users/Laura/Documents/my_R_project/data/linelists/ebola_linelist.xlsx\"\n```\n\nThe beauty is that the R command using `here()` can be successfully run on any computer accessing the R project.   \n\n\n<span style=\"color: darkgreen;\">**_TIP:_** If you are unsure where the “.here” root is set to, run the function `here()` with empty parentheses.</span>  \n\nRead more about the **here** package [at this link](https://here.r-lib.org/).  \n\n\n\n<!-- ======================================================= -->\n## File paths  \n\nWhen importing or exporting data, you must provide a file path. You can do this one of three ways:  \n\n1) *Recommended:* provide a \"relative\" file path with the **here** package  \n2) Provide the \"full\" / \"absolute\" file path  \n3) Manual file selection  \n\n\n\n### \"Relative\" file paths {.unnumbered}\n\nIn R, \"relative\" file paths consist of the file path *relative to* the root of an R project. They allow for more simple file paths that can work on different computers (e.g. if the R project is on a shared drive or is sent by email). As described [above](#here), relative file paths are facilitated by use of the **here** package.  \n\nAn example of a relative file path constructed with `here()` is below. We assume the work is in an R project that contains a sub-folder \"data\" and within that a subfolder \"linelists\", in which there is the .xlsx file of interest.  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"linelists\", \"ebola_linelist.xlsx\"))\n```\n\n\n\n### \"Absolute\" file paths {.unnumbered}  \n\nAbsolute or \"full\" file paths can be provided to functions like `import()` but they are \"fragile\" as they are unique to the user's specific computer and therefore *not recommended*. \n\nBelow is an example of an absolute file path, where in Laura's computer there is a folder \"analysis\", a sub-folder \"data\" and within that a sub-folder \"linelists\", in which there is the .xlsx file of interest.  \n\n```{r, eval=F}\nlinelist <- import(\"C:/Users/Laura/Documents/analysis/data/linelists/ebola_linelist.xlsx\")\n```\n\nA few things to note about absolute file paths:  \n\n* **Avoid using absolute file paths** as they will break if the script is run on a different computer\n* Use *forward* slashes (`/`), as in the example above (note: this is *NOT* the default for Windows file paths)  \n* File paths that begin with double slashes (e.g. \"//...\") will likely **not be recognized by R** and will produce an error. Consider moving your work to a \"named\" or \"lettered\" drive that begins with a letter (e.g. \"J:\" or \"C:\"). See the page on [Directory interactions] for more details on this issue.  \n\nOne scenario where absolute file paths may be appropriate is when you want to import a file from a shared drive that has the same full file path for all users.  \n\n<span style=\"color: darkgreen;\">**_TIP:_** To quickly convert all `\\` to `/`, highlight the code of interest, use Ctrl+f (in Windows), check the option box for \"In selection\", and then use the replace functionality to convert them.</span>  \n\n\n\n<!-- ======================================================= -->\n### Select file manually {.unnumbered}\n\nYou can import data manually via one of these methods:  \n\n1) Environment RStudio Pane, click \"Import Dataset\", and select the type of data \n2) Click File / Import Dataset / (select the type of data)  \n3) To hard-code manual selection, use the *base R* command `file.choose()` (leaving the parentheses empty) to trigger appearance of a **pop-up window** that allows the user to manually select the file from their computer. For example:  \n\n```{r import_choose, eval=F}\n# Manual selection of a file. When this command is run, a POP-UP window will appear. \n# The file path selected will be supplied to the import() command.\n\nmy_data <- import(file.choose())\n```\n\n<span style=\"color: darkgreen;\">**_TIP:_** The **pop-up window** may appear BEHIND your RStudio window.</span>\n\n\n\n## Import data  \n\nTo use `import()` to import a dataset is quite simple. Simply provide the path to the file (including the file name and file extension) in quotes. If using `here()` to build the file path, follow the instructions above. Below are a few examples:  \n\nImporting a csv file that is located in your \"working directory\" or in the R project root folder:  \n\n```{r, eval=F}\nlinelist <- import(\"linelist_cleaned.csv\")\n```\n\n\nImporting the first sheet of an Excel workbook that is located in \"data\" and \"linelists\" sub-folders of the R project (the file path built using `here()`):  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"linelists\", \"linelist_cleaned.xlsx\"))\n```\n\n\nImporting a data frame (a .rds file) using an absolute file path:  \n\n```{r, eval=F}\nlinelist <- import(\"C:/Users/Laura/Documents/tuberculosis/data/linelists/linelist_cleaned.rds\")\n```\n\n\n\n\n\n### Specific Excel sheets {.unnumbered}\n\nBy default, if you provide an Excel workbook (.xlsx) to `import()`, the workbook's first sheet will be imported. If you want to import a specific **sheet**, include the sheet name to the `which = ` argument. For example:  \n\n```{r eval=F}\nmy_data <- import(\"my_excel_file.xlsx\", which = \"Sheetname\")\n```\n\nIf using the `here()` method to provide a relative pathway to `import()`, you can still indicate a specific sheet by adding the `which = ` argument after the closing parentheses of the `here()` function.  \n\n```{r import_sheet_here, eval=F}\n# Demonstration: importing a specific Excel sheet when using relative pathways with the 'here' package\nlinelist_raw <- import(here(\"data\", \"linelist.xlsx\"), which = \"Sheet1\")`  \n```\n\nTo *export* a data frame from R to a specific Excel sheet and have the rest of the Excel workbook remain unchanged, you will have to import, edit, and export with an alternative package catered to this purpose such as **openxlsx**. See more information in the page on [Directory interactions] or [at this github page](https://ycphs.github.io/openxlsx/).\n\nIf your Excel workbook is .xlsb (binary format Excel workbook) you may not be able to import it using **rio**. Consider re-saving it as .xlsx, or using a package like **readxlsb** which is built for [this purpose](https://cran.r-project.org/web/packages/readxlsb/vignettes/read-xlsb-workbook.html).  \n\n\n\n\n\n\n<!-- ======================================================= -->\n### Missing values {#import_missing .unnumbered} \n\nYou may want to designate which value(s) in your dataset should be considered as missing. As explained in the page on [Missing data], the value in R for missing data is `NA`, but perhaps the dataset you want to import uses 99, \"Missing\", or just empty character space \"\" instead.  \n\nUse the `na = ` argument for `import()` and provide the value(s) within quotes (even if they are numbers). You can specify multiple values by including them within a vector, using `c()` as shown below.  \n\nHere, the value \"99\" in the imported dataset is considered missing and converted to `NA` in R.  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"my_linelist.xlsx\"), na = \"99\")\n```\n\nHere, any of the values \"Missing\", \"\" (empty cell), or \" \" (single space) in the imported dataset are converted to `NA` in R.  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"my_linelist.csv\"), na = c(\"Missing\", \"\", \" \"))\n```\n\n\n<!-- ======================================================= -->\n### Skip rows {.unnumbered} \n\nSometimes, you may want to avoid importing a row of data. You can do this with the argument `skip = ` if using `import()` from **rio** on a .xlsx or .csv file. Provide the number of rows you want to skip. \n\n\n```{r, eval=F}\nlinelist_raw <- import(\"linelist_raw.xlsx\", skip = 1)  # does not import header row\n```\n\nUnfortunately `skip = ` only accepts one integer value, *not* a range (e.g. \"2:10\" does not work). To skip import of specific rows that are not consecutive from the top, consider importing multiple times and using `bind_rows()` from **dplyr**. See the example below of skipping only row 2.  \n\n\n\n### Manage a second header row {.unnumbered}  \n\nSometimes, your data may have a *second* row, for example if it is a \"data dictionary\" row as shown below. This situation can be problematic because it can result in all columns being imported as class \"character\".  \n\n```{r, echo=F}\n# HIDDEN FROM READER\n####################\n# Create second header row of \"data dictionary\" and insert into row 2. Save as new dataframe.\nlinelist_2headers <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\")) %>%         \n        mutate(across(everything(), as.character)) %>% \n        add_row(.before = 1,\n                #row_num = \"000\",\n                case_id = \"case identification number assigned by MOH\",\n                generation = \"transmission chain generation number\",\n                date_infection = \"estimated date of infection, mm/dd/yyyy\",\n                date_onset = \"date of symptom onset, YYYY-MM-DD\",\n                date_hospitalisation = \"date of initial hospitalization, mm/dd/yyyy\",\n                date_outcome = \"date of outcome status determination\",\n                outcome = \"either 'Death' or 'Recovered' or 'Unknown'\",\n                gender = \"either 'm' or 'f' or 'unknown'\",\n                hospital = \"Name of hospital of first admission\",\n                lon = \"longitude of residence, approx\",\n                lat = \"latitude of residence, approx\",\n                infector = \"case_id of infector\",\n                source = \"context of known transmission event\",\n                age = \"age number\",\n                age_unit = \"age unit, either 'years' or 'months' or 'days'\",\n                fever = \"presence of fever on admission, either 'yes' or 'no'\",\n                chills = \"presence of chills on admission, either 'yes' or 'no'\",\n                cough = \"presence of cough on admission, either 'yes' or 'no'\",\n                aches = \"presence of aches on admission, either 'yes' or 'no'\",\n                vomit = \"presence of vomiting on admission, either 'yes' or 'no'\",\n                time_admission = \"time of hospital admission HH:MM\")\n```\n\nBelow is an example of this kind of dataset (with the first row being the data dictionary).  \n\n```{r message=FALSE, echo=F}\n# display the linelist data as a table\nDT::datatable(head(linelist_2headers, 5), rownames = FALSE, filter=\"top\", options = list(pageLength = 4, scrollX=T), class = 'white-space: nowrap' )\n```\n\n#### Remove the second header row {.unnumbered}  \n\nTo drop the second header row, you will likely need to import the data twice.  \n\n1) Import the data in order to store the correct column names  \n2) Import the data again, skipping the first *two* rows (header and second rows)  \n3) Bind the correct names onto the reduced dataframe\n\nThe exact argument used to bind the correct column names depends on the type of data file (.csv, .tsv, .xlsx, etc.). This is because **rio** is using a different function for the different file types (see table above).  \n\n**For Excel files:** (`col_names = `)  \n\n```{r, eval=F}\n# import first time; store the column names\nlinelist_raw_names <- import(\"linelist_raw.xlsx\") %>% names()  # save true column names\n\n# import second time; skip row 2, and assign column names to argument col_names =\nlinelist_raw <- import(\"linelist_raw.xlsx\",\n                       skip = 2,\n                       col_names = linelist_raw_names\n                       ) \n```\n\n**For CSV files:** (`col.names = `)  \n\n```{r, eval=F}\n# import first time; sotre column names\nlinelist_raw_names <- import(\"linelist_raw.csv\") %>% names() # save true column names\n\n# note argument for csv files is 'col.names = '\nlinelist_raw <- import(\"linelist_raw.csv\",\n                       skip = 2,\n                       col.names = linelist_raw_names\n                       ) \n```\n\n**Backup option** - changing column names as a separate command\n\n```{r, eval=F}\n# assign/overwrite headers using the base 'colnames()' function\ncolnames(linelist_raw) <- linelist_raw_names\n```\n\n\n#### Make a data dictionary {.unnumbered}  \n\nBonus! If you do have a second row that is a data dictionary, you can easily create a proper data dictionary from it. This tip is adapted from this [post](https://alison.rbind.io/post/2018-02-23-read-multiple-header-rows/).  \n\n\n```{r}\ndict <- linelist_2headers %>%             # begin: linelist with dictionary as first row\n  head(1) %>%                             # keep only column names and first dictionary row                \n  pivot_longer(cols = everything(),       # pivot all columns to long format\n               names_to = \"Column\",       # assign new column names\n               values_to = \"Description\")\n```\n\n\n```{r message=FALSE, echo=F}\nDT::datatable(dict, rownames = FALSE, filter=\"top\", options = list(pageLength = 4, scrollX=T), class = 'white-space: nowrap' )\n```\n\n\n\n#### Combine the two header rows {.unnumbered}  \n\nIn some cases when your raw dataset has *two* header rows (or more specifically, the 2nd row of data is a secondary header), you may want to \"combine\" them or add the values in the second header row into the first header row.  \n\nThe command below will define the data frame's column names as the combination (pasting together) of the first (true) headers with the value immediately underneath (in the first row).  \n\n```{r, eval=F}\nnames(my_data) <- paste(names(my_data), my_data[1, ], sep = \"_\")\n```\n\n\n\n<!-- ======================================================= -->\n### Google sheets {.unnumbered}\n\nYou can import data from an online Google spreadsheet with the **googlesheet4** package and by authenticating your access to the spreadsheet.  \n\n\n```{r, eval=F}\npacman::p_load(\"googlesheets4\")\n```\n\nBelow, a demo Google sheet is imported and saved. This command may prompt confirmation of authentification of your Google account. Follow prompts and pop-ups in your internet browser to grant Tidyverse API packages permissions to edit, create, and delete your spreadsheets in Google Drive.  \n\n\nThe sheet below is \"viewable for anyone with the link\" and you can try to import it.  \n\n```{r, eval=F}\nGsheets_demo <- read_sheet(\"https://docs.google.com/spreadsheets/d/1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY/edit#gid=0\")\n```\n\nThe sheet can also be imported using only the sheet ID, a shorter part of the URL:  \n\n```{r, eval=F}\nGsheets_demo <- read_sheet(\"1scgtzkVLLHAe5a6_eFQEwkZcc14yFUx1KgOMZ4AKUfY\")\n```\n\n\nAnother package, **googledrive** offers useful functions for writing, editing, and deleting Google sheets. For example, using the  `gs4_create()` and `sheet_write()` functions found in this package. \n\nHere are some other helpful online tutorials:  \n[basic Google sheets importing tutorial](https://arbor-analytics.com/post/getting-your-data-into-r-from-google-sheets/)  \n[more detailed tutorial](https://googlesheets4.tidyverse.org/articles/googlesheets4.html)  \n[interaction between the googlesheets4 and tidyverse](https://googlesheets4.tidyverse.org/articles/articles/drive-and-sheets.html)  \n\n\n\n\n## Multiple files - import, export, split, combine  \n\nSee the page on [Iteration, loops, and lists] for examples of how to import and combine multiple files, or multiple Excel workbook files. That page also has examples on how to split a data frame into parts and export each one separately, or as named sheets in an Excel workbook.  \n\n\n\n\n<!-- ======================================================= -->\n## Import from Github {#import_github}\n\nImporting data directly from Github into R can be very easy or can require a few steps - depending on the file type. Below are some approaches:  \n\n### CSV files {.unnumbered}  \n\nIt can be easy to import a .csv file directly from Github into R with an R command.  \n\n1) Go to the Github repo, locate the file of interest, and click on it  \n3) Click on the \"Raw\" button (you will then see the \"raw\" csv data, as shown below)  \n4) Copy the URL (web address)  \n5) Place the URL in quotes within the `import()` R command  \n\n```{r, out.width=c('100%', '100%'), fig.align = \"left\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"download_csv_raw.png\"))\n```\n\n### XLSX files {.unnumbered}  \n\nYou may not be able to view the \"Raw\" data for some files (e.g. .xlsx, .rds, .nwk, .shp)  \n\n1) Go to the Github repo, locate the file of interest, and click on it  \n2) Click the \"Download\" button, as shown below  \n3) Save the file on your computer, and import it into R  \n\n\n```{r , out.width=c('100%', '100%'), fig.align = \"left\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"download_xlsx.png\"))\n```\n\n### Shapefiles {.unnumbered} \n\nShapefiles have many sub-component files, each with a different file extention. One file will have the \".shp\" extension, but others may have \".dbf\", \".prj\", etc.  To download a shapefile from Github, you will need to download each of the sub-component files individually, and save them in the *same* folder on your computer. In Github, click on each file individually and download them by clicking on the \"Download\" button.  \n\nOnce saved to your computer you can import the shapefile as shown in the [GIS basics] page using `st_read()` from the **sf** package. You only need to provide the filepath and name of the \".shp\" file - as long as the other related files are within the same folder on your computer.  \n\nBelow, you can see how the shapefile \"sle_adm3\" consists of many files - each of which must be downloaded from Github.  \n\n```{r , out.width=c('100%', '100%'), fig.align = \"left\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"download_shp.png\"))\n```\n\n\n\n\n\n<!-- ======================================================= -->\n## Manual data entry {}\n\n### Entry by rows {.unnumbered}  \n\nUse the `tribble` function from the **tibble** package from the tidyverse ([online tibble reference](https://tibble.tidyverse.org/reference/tribble.html)).  \n  \nNote how column headers start with a *tilde* (`~`).  Also note that each column must contain only one class of data (character, numeric, etc.). You can use tabs, spacing, and new rows to make the data entry more intuitive and readable. Spaces do not matter between values, but each row is represented by a new line of code. For example:  \n\n```{r import_manual_row}\n# create the dataset manually by row\nmanual_entry_rows <- tibble::tribble(\n  ~colA, ~colB,\n  \"a\",   1,\n  \"b\",   2,\n  \"c\",   3\n  )\n```\n\nAnd now we display the new dataset:  \n\n```{r, echo=F}\n# display the new dataset\nDT::datatable(manual_entry_rows)\n```\n\n\n### Entry by columns {.unnumbered}  \n\nSince a data frame consists of vectors (vertical columns), the **base** approach to manual dataframe creation in R expects you to define each column and then bind them together. This can be counter-intuitive in epidemiology, as we usually think about our data in rows (as above). \n\n```{r import_manual_col}\n# define each vector (vertical column) separately, each with its own name\nPatientID <- c(235, 452, 778, 111)\nTreatment <- c(\"Yes\", \"No\", \"Yes\", \"Yes\")\nDeath     <- c(1, 0, 1, 0)\n```\n\n<span style=\"color: orange;\">**_CAUTION:_** All vectors must be the same length (same number of values).</span>\n\nThe vectors can then be bound together using the function `data.frame()`:  \n\n```{r}\n# combine the columns into a data frame, by referencing the vector names\nmanual_entry_cols <- data.frame(PatientID, Treatment, Death)\n```\n\nAnd now we display the new dataset:  \n\n```{r, echo=F}\n# display the new dataset\nDT::datatable(manual_entry_cols)\n```\n\n\n\n\n### Pasting from clipboard {.unnumbered}  \n\nIf you copy data from elsewhere and have it on your clipboard, you can try one of the two ways below:  \n\nFrom the **clipr** package, you can use `read_clip_tbl()` to import as a data frame, or just just `read_clip()` to import as a character vector. In both cases, leave the parentheses empty.    \n\n```{r, eval=F}\nlinelist <- clipr::read_clip_tbl()  # imports current clipboard as data frame\nlinelist <- clipr::read_clip()      # imports as character vector\n```\nYou can also easily export to your system's clipboard with **clipr**. See the section below on Export.  \n\n\nAlternatively, you can use the the `read.table()` function from **base** R with `file = \"clipboard\")` to import as a data frame:  \n\n```{r, eval=F}\ndf_from_clipboard <- read.table(\n  file = \"clipboard\",  # specify this as \"clipboard\"\n  sep = \"t\",           # separator could be tab, or commas, etc.\n  header=TRUE)         # if there is a header row\n```\n\n\n\n\n\n\n## Import most recent file  \n\nOften you may receive daily updates to your datasets. In this case you will want to write code that imports the most recent file. Below we present two ways to approach this:  \n\n* Selecting the file based on the date in the file name  \n* Selecting the file based on file metadata (last modification)  \n\n\n### Dates in file name {.unnumbered}  \n\nThis approach depends on three premises:  \n\n1) You trust the dates in the file names  \n2) The dates are numeric and appear in *generally* the same format (e.g. year then month then day)  \n3) There are no other numbers in the file name  \n\nWe will explain each step, and then show you them combined at the end.  \n\nFirst, use `dir()` from **base** R to extract just the file names for each file in the folder of interest. See the page on [Directory interactions] for more details about `dir()`. In this example, the folder of interest is the folder \"linelists\" within the folder \"example\" within \"data\" within the R project. \n\n```{r}\nlinelist_filenames <- dir(here(\"data\", \"example\", \"linelists\")) # get file names from folder\nlinelist_filenames                                              # print\n```\n\nOnce you have this vector of names, you can extract the dates from them by applying `str_extract()` from **stringr** using this regular expression. It extracts any numbers in the file name (including any other characters in the middle such as dashes or slashes). You can read more about **stringr** in the [Strings and characters] page.  \n\n```{r}\nlinelist_dates_raw <- stringr::str_extract(linelist_filenames, \"[0-9].*[0-9]\") # extract numbers and any characters in between\nlinelist_dates_raw  # print\n```\n\nAssuming the dates are written in generally the same date format (e.g. Year then Month then Day) and the years are 4-digits, you can use **lubridate**'s flexible conversion functions (`ymd()`, `dmy()`, or `mdy()`) to convert them to dates. For these functions, the dashes, spaces, or slashes do not matter, only the order of the numbers. Read more in the [Working with dates] page.  \n\n```{r}\nlinelist_dates_clean <- lubridate::ymd(linelist_dates_raw)\nlinelist_dates_clean\n```\n\n\nThe **base** R function `which.max()` can then be used to return the index position (e.g. 1st, 2nd, 3rd, ...) of the maximum date value. The latest file is correctly identified as the 6th file - \"case_linelist_2020-10-08.xlsx\".  \n\n```{r}\nindex_latest_file <- which.max(linelist_dates_clean)\nindex_latest_file\n```\n\nIf we condense all these commands, the complete code could look like below. Note that the `.` in the last line is a placeholder for the piped object at that point in the pipe sequence. At that point the value is simply the number 6. This is placed in double brackets to extract the 6th element of the vector of file names produced by `dir()`.    \n\n```{r}\n# load packages\npacman::p_load(\n  tidyverse,         # data management\n  stringr,           # work with strings/characters\n  lubridate,         # work with dates\n  rio,               # import / export\n  here,              # relative file paths\n  fs)                # directory interactions\n\n# extract the file name of latest file\nlatest_file <- dir(here(\"data\", \"example\", \"linelists\")) %>%  # file names from \"linelists\" sub-folder          \n  str_extract(\"[0-9].*[0-9]\") %>%                  # pull out dates (numbers)\n  ymd() %>%                                        # convert numbers to dates (assuming year-month-day format)\n  which.max() %>%                                  # get index of max date (latest file)\n  dir(here(\"data\", \"example\", \"linelists\"))[[.]]              # return the filename of latest linelist\n\nlatest_file  # print name of latest file\n```\n\nYou can now use this name to finish the relative file path, with `here()`:  \n\n```{r, eval=F}\nhere(\"data\", \"example\", \"linelists\", latest_file) \n```\n\nAnd you can now import the latest file:  \n\n```{r, eval=F}\n# import\nimport(here(\"data\", \"example\", \"linelists\", latest_file)) # import \n```\n\n \n\n\n\n### Use the file info {.unnumbered}  \n\nIf your files do not have dates in their names (or you do not trust those dates), you can try to extract the last modification date from the file metadata. Use functions from the package **fs** to examine the metadata information for each file, which includes the last modification time and the file path.  \n\nBelow, we provide the folder of interest to **fs**'s `dir_info()`. In this case, the folder of interest is in the R project in the folder \"data\", the sub-folder \"example\", and its sub-folder \"linelists\".  The result is a data frame with one line per file and columns for `modification_time`, `path`, etc. You can see a visual example of this in the page on [Directory interactions].    \n\nWe can sort this data frame of files by the column `modification_time`, and then keep only the top/latest row (file) with **base** R's `head()`. Then we can extract the file path of this latest file only with the **dplyr** function `pull()` on the column `path`. Finally we can pass this file path to `import()`. The imported file is saved as `latest_file`.  \n\n```{r, eval=F}\nlatest_file <- dir_info(here(\"data\", \"example\", \"linelists\")) %>%  # collect file info on all files in directory\n  arrange(desc(modification_time)) %>%      # sort by modification time\n  head(1) %>%                               # keep only the top (latest) file\n  pull(path) %>%                            # extract only the file path\n  import()                                  # import the file\n\n```\n\n\n\n<!-- ======================================================= -->\n## APIs {#import_api}\n\nAn \"Automated Programming Interface\" (API) can be used to directly request data from a website. APIs are a set of rules that allow one software application to interact with another. The client (you) sends a \"request\" and receives a \"response\" containing content. The R packages **httr** and **jsonlite** can facilitate this process. \n\nEach API-enabled website will have its own documentation and specifics to become familiar with. Some sites are publicly available and can be accessed by anyone. Others, such as platforms with user IDs and credentials, require authentication to access their data. \n\nNeedless to say, it is necessary to have an internet connection to import data via API. We will briefly give examples of use of APIs to import data, and link you to further resources.  \n\n*Note: recall that data may be *posted* on a website without an API, which may be easier to retrieve. For example a posted CSV file may be accessible simply by providing the site URL to `import()` as described in the section on [importing from Github](#import_github).*  \n\n\n### HTTP request {.unnumbered}  \n\nThe API exchange is most commonly done through an HTTP request. HTTP is Hypertext Transfer Protocol, and is the underlying format of a request/response between a client and a server. The exact input and output may vary depending on the type of API but the process is the same - a \"Request\" (often HTTP Request) from the user, often containing a query, followed by a \"Response\", containing status information about the request and possibly the requested content.  \n\nHere are a few components of an *HTTP request*:  \n\n* The URL of the API endpoint  \n* The \"Method\" (or \"Verb\")  \n* Headers  \n* Body  \n\nThe HTTP request \"method\" is the action your want to perform. The two most common HTTP methods are `GET` and `POST` but others could include `PUT`, `DELETE`, `PATCH`, etc. When importing data into R it is most likely that you will use `GET`.  \n\nAfter your request, your computer will receive a \"response\" in a format similar to what you sent, including URL, HTTP status (Status 200 is what you want!), file type, size, and the desired content. You will then need to parse this response and turn it into a workable data frame within your R environment.\n\n\n### Packages {.unnumbered}  \n\nThe **httr** package works well for handling HTTP requests in R. It requires little prior knowledge of Web APIs and can be used by people less familiar with software development terminology. In addition, if the HTTP response is .json, you can use **jsonlite** to parse the response.  \n\n```{r, eval=F}\n# load packages\npacman::p_load(httr, jsonlite, tidyverse)\n```\n\n\n### Publicly-available data {.unnumbered}  \n\nBelow is an example of an HTTP request, borrowed from a tutorial from [the Trafford Data Lab](https://www.trafforddatalab.io/open_data_companion/#A_quick_introduction_to_APIs). This site has several other resources to learn and API exercises.\n\nScenario: We want to import a list of fast food outlets in the city of Trafford, UK. The data can be accessed from the API of the Food Standards Agency, which provides food hygiene rating data for the United Kingdom.  \n\nHere are the parameters for our request:  \n\n* HTTP verb: GET  \n* API endpoint URL: http://api.ratings.food.gov.uk/Establishments  \n* Selected parameters: name, address, longitude, latitude, businessTypeId, ratingKey, localAuthorityId  \n* Headers: “x-api-version”, 2  \n* Data format(s): JSON, XML  \n* Documentation: http://api.ratings.food.gov.uk/help  \n\nThe R code would be as follows:  \n\n```{r, eval=F, warning=F, message=F}\n# prepare the request\npath <- \"http://api.ratings.food.gov.uk/Establishments\"\nrequest <- GET(url = path,\n             query = list(\n               localAuthorityId = 188,\n               BusinessTypeId = 7844,\n               pageNumber = 1,\n               pageSize = 5000),\n             add_headers(\"x-api-version\" = \"2\"))\n\n# check for any server error (\"200\" is good!)\nrequest$status_code\n\n# submit the request, parse the response, and convert to a data frame\nresponse <- content(request, as = \"text\", encoding = \"UTF-8\") %>%\n  fromJSON(flatten = TRUE) %>%\n  pluck(\"establishments\") %>%\n  as_tibble()\n```\n\nYou can now clean and use the `response` data frame, which contains one row per fast food facility.  \n\n\n### Authentication required {.unnumbered}  \n\nSome APIs require authentication - for you to prove who you are, so you can access restricted data. To import these data, you may need to first use a POST method to provide a username, password, or code. This will return an access token, that can be used for subsequent GET method requests to retrieve the desired data.  \n\nBelow is an example of querying data from *Go.Data*, which is an outbreak investigation tool. *Go.Data* uses an API for all interactions between the web front-end and smartphone applications used for data collection. *Go.Data* is used throughout the world. Because outbreak data are sensitive and you should only be able to access data for *your* outbreak, authentication is required.  \n\nBelow is some sample R code using **httr** and **jsonlite** for connecting to the *Go.Data* API to import data on contact follow-up from your outbreak.  \n\n\n```{r, eval=F}\n# set credentials for authorization\nurl <- \"https://godatasampleURL.int/\"           # valid Go.Data instance url\nusername <- \"username\"                          # valid Go.Data username \npassword <- \"password\"                          # valid Go,Data password \noutbreak_id <- \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxx\"  # valid Go.Data outbreak ID\n\n# get access token\nurl_request <- paste0(url,\"api/oauth/token?access_token=123\") # define base URL request\n\n# prepare request\nresponse <- POST(\n  url = url_request,  \n  body = list(\n    username = username,    # use saved username/password from above to authorize                               \n    password = password),                                       \n    encode = \"json\")\n\n# execute request and parse response\ncontent <-\n  content(response, as = \"text\") %>%\n  fromJSON(flatten = TRUE) %>%          # flatten nested JSON\n  glimpse()\n\n# Save access token from response\naccess_token <- content$access_token    # save access token to allow subsequent API calls below\n\n# import outbreak contacts\n# Use the access token \nresponse_contacts <- GET(\n  paste0(url,\"api/outbreaks/\",outbreak_id,\"/contacts\"),          # GET request\n  add_headers(\n    Authorization = paste(\"Bearer\", access_token, sep = \" \")))\n\njson_contacts <- content(response_contacts, as = \"text\")         # convert to text JSON\n\ncontacts <- as_tibble(fromJSON(json_contacts, flatten = TRUE))   # flatten JSON to tibble\n```\n\n<span style=\"color: orange;\">**_CAUTION:_** If you are importing large amounts of data from an API requiring authentication, it may time-out. To avoid this, retrieve access_token again before each API GET request and try using filters or limits in the query. </span> \n\n<span style=\"color: darkgreen;\">**_TIP:_** The `fromJSON()` function in the **jsonlite** package does not fully un-nest the first time it's executed, so you will likely still have list items in your resulting tibble. You will need to further un-nest for certain variables; depending on how nested your .json is. To view more info on this, view the documentation for the **jsonlite** package, such as the [`flatten()` function](https://rdrr.io/cran/jsonlite/man/flatten.html). </span>\n\n\nFor more details, View documentation on [LoopBack Explorer](https://loopback.io/doc/en/lb4/index.html), the [Contact Tracing] page or API tips on [Go.Data Github repository](https://worldhealthorganization.github.io/godata/api-docs)\n\nYou can read more about the *httr* package [here](https://httr.r-lib.org/articles/quickstart.html)  \n\nThis section was also informed by [this tutorial](https://www.dataquest.io/blog/r-api-tutorial/) and [this tutorial](https://medium.com/@traffordDataLab/querying-apis-in-r-39029b73d5f1). \n\n\n\n\n<!-- ======================================================= -->\n## Export {}  \n\n### With **rio** package {.unnumbered}\nWith **rio**, you can use the `export()` function in a very similar way to `import()`. First give the name of the R object you want to save (e.g. `linelist`) and then in quotes put the file path where you want to save the file, including the desired file name and file extension. For example:  \n\nThis saves the data frame `linelist` as an Excel workbook to the working directory/R project root folder:  \n\n```{r, eval=F}\nexport(linelist, \"my_linelist.xlsx\") # will save to working directory\n```\n\nYou could save the same data frame as a csv file by changing the extension. For example, we also save it to a file path constructed with `here()`:  \n\n```{r, eval=F}\nexport(linelist, here(\"data\", \"clean\", \"my_linelist.csv\"))\n```\n\n\n### To clipboard {.unnumbered}\n\nTo export a data frame to your computer's \"clipboard\" (to then paste into another software like Excel, Google Spreadsheets, etc.) you can use `write_clip()` from the **clipr** package. \n\n```{r, eval=F}\n# export the linelist data frame to your system's clipboard\nclipr::write_clip(linelist)\n```\n\n\n\n\n## RDS files {#import_rds}\n\nAlong with .csv, .xlsx, etc, you can also export/save R data frames as .rds files. This is a file format specific to R, and is very useful if you know you will work with the exported data again in R. \n\nThe classes of columns are stored, so you don't have do to cleaning again when it is imported (with an Excel or even a CSV file this can be a headache!). It is also a smaller file, which is useful for export and import if your dataset is large.  \n\nFor example, if you work in an Epidemiology team and need to send files to a GIS team for mapping, and they use R as well, just send them the .rds file! Then all the column classes are retained and they have less work to do.  \n\n```{r, eval=F}\nexport(linelist, here(\"data\", \"clean\", \"my_linelist.rds\"))\n```\n\n\n\n<!-- ======================================================= -->\n## Rdata files and lists {#import_rdata}\n\n`.Rdata` files can store multiple R objects - for example multiple data frames, model results, lists, etc. This can be very useful to consolidate or share a lot of your data for a given project.  \n\nIn the below example, multiple R objects are stored within the exported file \"my_objects.Rdata\":  \n\n```{r, eval=F}\nrio::export(my_list, my_dataframe, my_vector, \"my_objects.Rdata\")\n```\n\nNote: if you are trying to *import* a list, use `import_list()` from **rio** to import it with the complete original structure and contents.  \n\n```{r, eval=F}\nrio::import_list(\"my_list.Rdata\")\n```\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Saving plots {} \n\nInstructions on how to save plots, such as those created by `ggplot()`, are discussed in depth in the [ggplot basics] page.  \n\nIn brief, run `ggsave(\"my_plot_filepath_and_name.png\")` after printing your plot. You can either provide a saved plot object to the `plot = ` argument, or only specify the destination file path (with file extension) to save the most recently-displayed plot. You can also control the `width = `, `height = `, `units = `, and `dpi = `.  \n\nHow to save a network graph, such as a transmission tree, is addressed in the page on [Transmission chains]. \n\n\n<!-- ======================================================= -->\n## Resources {} \n\nThe [R Data Import/Export Manual](https://cran.r-project.org/doc/manuals/r-release/R-data.html)  \n[R 4 Data Science chapter on data import](https://r4ds.had.co.nz/data-import.html#data-import)  \n[ggsave() documentation](https://ggplot2.tidyverse.org/reference/ggsave.html)  \n\n\nBelow is a table, taken from the **rio** online [vignette](https://cran.r-project.org/web/packages/rio/vignettes/rio.html). For each type of data it shows: the expected file extension, the package **rio** uses to import or export the data, and whether this functionality is included in the default installed version of **rio**.  \n\n\n\nFormat                     | Typical Extension | Import Package    | Export Package     | Installed by Default\n---------------------------|-------------------|-------------------|--------------------|---------------------\nComma-separated data | .csv | data.table `fread()` | data.table |\tYes\nPipe-separated data |\t.psv | data.table `fread()` | data.table | Yes\nTab-separated data| .tsv | data.table `fread()` | data.table | Yes\nSAS | .sas7bdat | haven | haven | Yes\nSPSS | .sav | haven | haven | Yes\nStata | .dta | haven | haven | Yes\nSAS | XPORT | .xpt | haven | haven | Yes\nSPSS Portable | .por | haven | | Yes\nExcel | .xls | readxl | | Yes\nExcel | .xlsx | readxl | openxlsx | Yes\nR syntax | .R\t| base | base | Yes\nSaved R objects | .RData, .rda | base | base | Yes\nSerialized R objects | .rds | base | base | Yes\nEpiinfo | .rec | foreign | | Yes\nMinitab | .mtp | foreign | | Yes\nSystat | .syd |\tforeign | | Yes\n“XBASE” | database files | .dbf | foreign | foreign | Yes\nWeka Attribute-Relation File Format | .arff | foreign | foreign | Yes\nData Interchange Format | .dif | utils | | Yes\nFortran data | no recognized extension | utils | | Yes\nFixed-width format data | .fwf | utils | utils | Yes\ngzip comma-separated data | .csv.gz | utils | utils | Yes\nCSVY (CSV + YAML metadata header) | .csvy | csvy | csvy | No\nEViews | .wf1 |hexView | | No\nFeather R/Python interchange format | .feather | feather | feather | No\nFast Storage | .fst | fst |\tfst | No\nJSON | .json | jsonlite | jsonlite | No\nMatlab | .mat | rmatio | rmatio | No\nOpenDocument Spreadsheet | .ods | readODS | readODS | No\nHTML Tables | .html | xml2 | xml2 | No\nShallow XML documents | .xml | xml2 | xml2 | No\nYAML | .yml | yaml | yaml\t| No\nClipboard\tdefault is tsv | |  clipr | clipr | No\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"importing.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}