{"title":"Survival analysis","markdown":{"headingText":"Survival analysis","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n<!-- ======================================================= -->\n<!-- ======================================================= -->\n<!-- ======================================================= -->\n\n\n```{r out.width = c('75%'), fig.align='center', fig.show='hold', echo=F}\nknitr::include_graphics(here::here(\"images\", \"survival_analysis.png\"))\n```\n\n<!-- ======================================================= -->\n## Overview {}\n\n\n*Survival analysis* focuses on describing for a given individual or group of individuals, a defined point of event called **_the failure_** (occurrence of a disease, cure from a disease, death, relapse after response to treatment...) that occurs after a period of time called **_failure time_** (or  **_follow-up time_** in cohort/population-based studies) during which individuals are observed. To determine the failure time, it is then necessary to define a time of origin (that can be the inclusion date, the date of diagnosis...). \n\nThe target of inference for survival analysis is then the time between an origin and an event.\nIn current medical research, it is widely used in clinical studies to assess the effect of a treatment for instance, or in cancer epidemiology to assess a large variety of cancer survival measures. \n\n\nIt is usually expressed through the **_survival probability_** which is the probability that the event of interest has not occurred by a duration t.\n\n\n**_Censoring_**: Censoring occurs when at the end of follow-up, some of the individuals have not had the event of interest, and thus their true time to event is unknown. We will mostly focus on right censoring here but for more details on censoring and survival analysis in general, you can see references. \n\n\n```{r echo=F, eval=F, out.width = \"80%\", out.height=\"80%\", fig.align = \"center\"}\n \n#Add a figure from the following chunks for the last version of the page\n#do not forget to save the output figure in \"images\"\n# knitr::include_graphics(here::here(\"images\", \"survanalysis.png\"))\n\n```  \n\n<!-- ======================================================= -->\n## Preparation {  }\n\n### Load packages {.unnumbered}  \n\nTo run survival analyses in R, one the most widely used package is the **survival** package. We first install it and then load it as well as the other packages that will be used in this section:\n\nIn this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n```{r, echo=F, message=FALSE, warning=FALSE}\n\n# install/load the different packages needed for this page\npacman::p_load(\n  survival,      # survival analysis \n  survminer,     # survival analysis\n  rio,           # importing data  \n  here,          # relative file pathways  \n  janitor,       # tabulations\n  SemiCompRisks, # dataset examples and advanced tools for working with Semi-Competing Risks data\n  tidyverse,     # data manipulation and visualization\n  Epi,           # stat analyses in Epi\n  survival,      # survival analysis\n  survminer      # survival analysis: advanced KM curves\n)\n\n\n```\n\n\nThis page explores survival analyses using the linelist used in most of the previous pages and on which we apply some changes to have a proper survival data.\n\n\n### Import dataset {.unnumbered}  \n\nWe import the dataset of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/epirhandbook/Epi_R_handbook/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import data with the `import()` function from the **rio** package (it handles many file types like .xlsx, .csv, .rds - see the [Import and export] page for details).  \n\n```{r echo=F}\n# import linelist\nlinelist_case_data <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n\n```{r eval=F}\n# import linelist\nlinelist_case_data <- rio::import(\"linelist_cleaned.rds\")\n```\n\n### Data management and transformation {.unnumbered}\n\nIn short, survival data can be described as having the following three characteristics:\n\n1) the dependent variable or response is the waiting time until the occurrence of a well-defined event,\n2) observations are censored, in the sense that for some units the event of interest has not occurred at the time the data are analyzed, and \n3) there are predictors or explanatory variables whose effect on the waiting time we wish to assess or control. \n\nThus, we will create different variables needed to respect that structure and run the survival analysis.\n\nWe define:\n\n- a new data frame `linelist_surv` for this analysis  \n- our event of interest as being \"death\" (hence our survival probability will be the probability of being alive after a certain time after the time of origin),\n- the follow-up time (`futime`) as the time between the time of onset and the time of outcome *in days*,\n- censored patients as those who recovered or for whom the final outcome is not known ie the event \"death\" was not observed (`event=0`).\n\n<span style=\"color: orange;\">**_CAUTION:_** Since in a real cohort study, the information on the time of origin and the end of the follow-up is known given individuals are observed, we will remove observations where the date of onset or the date of outcome is unknown. Also the cases where the date of onset is later than the date of outcome will be removed since they are considered as wrong.</span>\n\n<span style=\"color: darkgreen;\">**_TIP:_** Given that filtering to greater than (>) or less than (<) a date can remove rows with missing values, applying the filter on the wrong dates will also remove the rows with missing dates.</span>\n\nWe then use `case_when()` to create a column `age_cat_small` in which there are only 3 age categories.\n\n```{r }\n#create a new data called linelist_surv from the linelist_case_data\n\nlinelist_surv <-  linelist_case_data %>% \n     \n  dplyr::filter(\n       # remove observations with wrong or missing dates of onset or date of outcome\n       date_outcome > date_onset) %>% \n  \n  dplyr::mutate(\n       # create the event var which is 1 if the patient died and 0 if he was right censored\n       event = ifelse(is.na(outcome) | outcome == \"Recover\", 0, 1), \n    \n       # create the var on the follow-up time in days\n       futime = as.double(date_outcome - date_onset), \n    \n       # create a new age category variable with only 3 strata levels\n       age_cat_small = dplyr::case_when( \n            age_years < 5  ~ \"0-4\",\n            age_years >= 5 & age_years < 20 ~ \"5-19\",\n            age_years >= 20   ~ \"20+\"),\n       \n       # previous step created age_cat_small var as character.\n       # now convert it to factor and specify the levels.\n       # Note that the NA values remain NA's and are not put in a level \"unknown\" for example,\n       # since in the next analyses they have to be removed.\n       age_cat_small = fct_relevel(age_cat_small, \"0-4\", \"5-19\", \"20+\")\n       )\n```\n\n\n<span style=\"color: darkgreen;\">**_TIP:_** We can verify the new columns we have created by doing a summary on the `futime` and a cross-tabulation between `event` and `outcome` from which it was created. Besides this verification it is a good habit to communicate the median follow-up time when interpreting survival analysis results.</span>\n\n```{r }\n\nsummary(linelist_surv$futime)\n\n# cross tabulate the new event var and the outcome var from which it was created\n# to make sure the code did what it was intended to\nlinelist_surv %>% \n  tabyl(outcome, event)\n```\n\nNow we cross-tabulate the new age_cat_small var and the old age_cat col to ensure correct assingments  \n\n```{r}\nlinelist_surv %>% \n  tabyl(age_cat_small, age_cat)\n```\n\nNow we review the 10 first observations of the `linelist_surv` data looking at specific variables (including those newly created).  \n\n\n```{r}\nlinelist_surv %>% \n  select(case_id, age_cat_small, date_onset, date_outcome, outcome, event, futime) %>% \n  head(10)\n```\n\nWe can also cross-tabulate the columns `age_cat_small` and `gender` to have more details on the distribution of this new column by gender. We use `tabyl()` and the *adorn* functions from **janitor** as described in the [Descriptive tables] page. \n\n<!-- For this we use the `stat.table()` function of the **Epi** package. -->\n\n```{r}\n\nlinelist_surv %>% \n  tabyl(gender, age_cat_small, show_na = F) %>% \n  adorn_totals(where = \"both\") %>% \n  adorn_percentages() %>% \n  adorn_pct_formatting() %>% \n  adorn_ns(position = \"front\")\n\n```\n\n<!-- Epi::stat.table(  -->\n<!--   #give variables for the cross tabulation -->\n<!--   list( -->\n<!--     gender,  -->\n<!--     age_cat_small -->\n<!--     ), -->\n\n<!--   #precise the function you want to call (mean,count..) -->\n<!--   list(  -->\n<!--     count(), -->\n<!--     percent(age_cat_small) -->\n<!--     ),  -->\n\n<!--   #add margins -->\n<!--   margins=T,  -->\n\n<!--   #data used -->\n<!--   data = linelist_surv  -->\n<!--   ) -->\n\n<!-- ``` -->\n\n\n<!-- ======================================================= -->\n## Basics of survival analysis {}\n\n\n### Building a surv-type object {.unnumbered}\n\nWe will first use `Surv()` from **survival** to build a survival object from the follow-up time and event columns.  \n\nThe result of such a step is to produce an object of type *Surv* that condenses the time information and whether the event of interest (death) was observed. This object will ultimately be used in the right-hand side of subsequent model formulae (see [documentation](https://cran.r-project.org/web/packages/survival/vignettes/survival.pdf)).  \n\n\n```{r survobj }\n# Use Suv() syntax for right-censored data\nsurvobj <- Surv(time = linelist_surv$futime,\n                event = linelist_surv$event)\n```\n\n<!-- ```{r} -->\n<!-- survobj <- with(linelist_surv, -->\n\n<!--                 survival::Surv(futime, event) -->\n\n<!--                 ) -->\n<!-- ``` -->\n\n\nTo review, here are the first 10 rows of the `linelist_surv` data, viewing only some important columns.  \n\n```{r}\nlinelist_surv %>% \n  select(case_id, date_onset, date_outcome, futime, outcome, event) %>% \n  head(10)\n```\n\nAnd here are the first 10 elements of `survobj`. It prints as essentially a vector of follow-up time, with \"+\" to represent if an observation was right-censored. See how the numbers align above and below.  \n\n```{r}\n#print the 50 first elements of the vector to see how it presents\nhead(survobj, 10)\n```\n\n\n### Running initial analyses {.unnumbered}\n\nWe then start our analysis using the `survfit()` function to produce a *survfit object*, which fits the default calculations for **_Kaplan Meier_** (KM) estimates of the overall (marginal) survival curve, which are in fact a step function with jumps at observed event times. The final *survfit object*  contains one or more survival curves and is created using the *Surv* object as a response variable in the model formula.  \n\n<span style=\"color: black;\">**_NOTE:_** The Kaplan-Meier estimate is a nonparametric maximum likelihood estimate (MLE) of the survival function. . (see resources for more information).</span>\n\nThe summary of this *survfit object* will give what is called a *life table*. For each time step of the follow-up (`time`) where an event happened (in ascending order):  \n\n* the number of people who were at risk of developing the event (people who did not have the event yet nor were censored: `n.risk`)  \n* those who did develop the event  (`n.event`)  \n* and from the above: the probability of *not* developing the event (probability of not dying, or of surviving past that specific time)  \n* finally, the standard error and the confidence interval for that probability are derived and displayed  \n\nWe fit the KM estimates using the formula where the previously Surv object \"survobj\" is the response variable. \"~ 1\" precises we run the model for the overall survival.  \n\n```{r fit}\n# fit the KM estimates using a formula where the Surv object \"survobj\" is the response variable.\n# \"~ 1\" signifies that we run the model for the overall survival  \nlinelistsurv_fit <-  survival::survfit(survobj ~ 1)\n\n#print its summary for more details\nsummary(linelistsurv_fit)\n\n```\n\n\nWhile using `summary()` we can add the option `times` and  specify certain times at which we want to see the survival information \n\n```{r print_spec_times}\n\n#print its summary at specific times\nsummary(linelistsurv_fit, times = c(5,10,20,30,60))\n\n```\n\n\nWe can also use the `print()` function. The `print.rmean = TRUE` argument is used to obtain the mean survival time and its standard error (se).\n\n<span style=\"color: black;\">**_NOTE:_** The restricted mean survival time (RMST) is a specific survival measure more and more used in cancer survival analysis and which is often defined as the area under the survival curve, given we observe patients up to restricted time T (more details in Resources section).\n\n\n```{r, mean_survtime}\n# print linelistsurv_fit object with mean survival time and its se. \nprint(linelistsurv_fit, print.rmean = TRUE)\n\n```\n\n\n<span style=\"color: darkgreen;\">**_TIP:_** We can create the *surv object* directly in the `survfit()` function and save a line of code. This will then look like: `linelistsurv_quick <-  survfit(Surv(futime, event) ~ 1, data=linelist_surv)`.</span>\n\n\n### Cumulative hazard {.unnumbered}  \n\nBesides the `summary()` function, we can also use the `str()` function that gives more details on the structure of the `survfit()` object. It is a list of 16 elements.  \n\nAmong these elements is an important one: `cumhaz`, which is a numeric vector. This could be plotted to allow show the **_cumulative hazard_**, with the **_hazard_** being the **_instantaneous rate of event occurrence_** (see references).\n\n```{r fit_struct}\n\nstr(linelistsurv_fit)\n\n```\n\n<!-- ======================================================= -->\n### Plotting Kaplan-Meir curves  {.unnumbered}\n\nOnce the KM estimates are fitted, we can visualize the probability of being alive through a given time using the basic `plot()` function that draws the \"Kaplan-Meier curve\". In other words, the curve below is a conventional illustration of the survival experience in the whole patient group.\n\nWe can quickly verify the follow-up time min and max on the curve.  \n\nAn easy way to interpret is to say that at time zero, all the participants are still alive and survival probability is then 100%. This probability decreases over time as patients die. The proportion of participants surviving past 60 days of follow-up is around 40%.\n\n```{r }\n\nplot(linelistsurv_fit, \n     xlab = \"Days of follow-up\",    # x-axis label\n     ylab=\"Survival Probability\",   # y-axis label\n     main= \"Overall survival curve\" # figure title\n     )\n\n```\n\nThe confidence interval of the KM survival estimates are also plotted by default and can be dismissed by adding the option `conf.int = FALSE` to the `plot()` command.\n\nSince the event of interest is \"death\", drawing a curve describing the complements of the survival proportions will lead to drawing the cumulative mortality proportions. This can be done with `lines()`, which adds information to an existing plot.  \n\n\n```{r}\n\n# original plot\nplot(\n  linelistsurv_fit,\n  xlab = \"Days of follow-up\",       \n  ylab = \"Survival Probability\",       \n  mark.time = TRUE,              # mark events on the curve: a \"+\" is printed at every event\n  conf.int = FALSE,              # do not plot the confidence interval\n  main = \"Overall survival curve and cumulative mortality\"\n  )\n\n# draw an additional curve to the previous plot\nlines(\n  linelistsurv_fit,\n  lty = 3,             # use different line type for clarity\n  fun = \"event\",       # draw the cumulative events instead of the survival \n  mark.time = FALSE,\n  conf.int = FALSE\n  )\n\n# add a legend to the plot\nlegend(\n  \"topright\",                               # position of legend\n  legend = c(\"Survival\", \"Cum. Mortality\"), # legend text \n  lty = c(1, 3),                            # line types to use in the legend\n  cex = .85,                                # parametes that defines size of legend text\n  bty = \"n\"                                 # no box type to be drawn for the legend\n  )\n\n```\n\n<!-- ======================================================= -->\n## Comparison of survival curves \n\nTo compare the survival within different groups of our observed participants or patients, we might need to first look at their respective survival curves and then run tests to evaluate the difference between independent groups. This comparison can concern groups based on gender, age, treatment, comorbidity...\n\n### Log rank test {.unnumbered}\n\nThe log rank test is a popular test that compares the entire survival experience between two or more *independent* groups and can be thought of as a test of whether the survival curves are identical (overlapping) or not (null hypothesis of no difference in survival between the groups). The `survdiff()` function of the **survival package** allows running the log-rank test when we specify `rho = 0` (which is the default). The test results gives a chi-square statistic along with a p-value since the log rank statistic is approximately distributed as a chi-square test statistic.\n\nWe first try to compare the survival curves by gender group. For this, we first try to visualize it (check whether the two survival curves are overlapping). A new *survfit object*  will be created with a slightly different formula. Then the *survdiff object* will be created.\n\nBy supplying ` ~ gender` as the right side of the formula, we no longer plot the overall survival but instead by gender.  \n\n\n```{r comp_surv, warning=FALSE}\n\n# create the new survfit object based on gender\nlinelistsurv_fit_sex <-  survfit(Surv(futime, event) ~ gender, data = linelist_surv)\n```\n\nNow we can plot the survival curves by gender. Have a look at the *order* of the strata levels in the gender column before defining your colors and legend.  \n\n```{r}\n# set colors\ncol_sex <- c(\"lightgreen\", \"darkgreen\")\n\n# create plot\nplot(\n  linelistsurv_fit_sex,\n  col = col_sex,\n  xlab = \"Days of follow-up\",\n  ylab = \"Survival Probability\")\n\n# add legend\nlegend(\n  \"topright\",\n  legend = c(\"Female\",\"Male\"),\n  col = col_sex,\n  lty = 1,\n  cex = .9,\n  bty = \"n\")\n```\n\nAnd now we can compute the test of the difference between the survival curves using `survdiff()`\n\n```{r}\n#compute the test of the difference between the survival curves\nsurvival::survdiff(\n  Surv(futime, event) ~ gender, \n  data = linelist_surv\n  )\n\n```\n\nWe see that the survival curve for women and the one for men overlap and the log-rank test does not give evidence of a survival difference between women and men.\n\nSome other R packages allow illustrating survival curves for different groups and testing the difference all at once. Using the `ggsurvplot()` function from the **survminer** package, we can also include in our curve the printed risk tables for each group, as well the p-value from the log-rank test. \n\n<span style=\"color: orange;\">**_CAUTION:_** **survminer** functions require that you specify the survival object *and* again specify the data used to fit the survival object. Remember to do this to avoid non-specific error messages. </span>\n\n```{r, warning=F, message=F}\n\nsurvminer::ggsurvplot(\n    linelistsurv_fit_sex, \n    data = linelist_surv,          # again specify the data used to fit linelistsurv_fit_sex \n    conf.int = FALSE,              # do not show confidence interval of KM estimates\n    surv.scale = \"percent\",        # present probabilities in the y axis in %\n    break.time.by = 10,            # present the time axis with an increment of 10 days\n    xlab = \"Follow-up days\",\n    ylab = \"Survival Probability\",\n    pval = T,                      # print p-value of Log-rank test \n    pval.coord = c(40,.91),        # print p-value at these plot coordinates\n    risk.table = T,                # print the risk table at bottom \n    legend.title = \"Gender\",       # legend characteristics\n    legend.labs = c(\"Female\",\"Male\"),\n    font.legend = 10, \n    palette = \"Dark2\",             # specify color palette \n    surv.median.line = \"hv\",       # draw horizontal and vertical lines to the median survivals\n    ggtheme = theme_light()        # simplify plot background\n)\n\n```\n\n\nWe may also want to test for differences in survival by the source of infection (source of contamination).  \n\nIn this case, the Log rank test gives enough evidence of a difference in the survival probabilities at `alpha= 0.005`. The survival probabilities for patients that were infected at funerals are higher than the survival probabilities for patients that got infected in other places, suggesting a survival benefit.\n\n```{r}\n\nlinelistsurv_fit_source <-  survfit(\n  Surv(futime, event) ~ source,\n  data = linelist_surv\n  )\n\n# plot\nggsurvplot( \n  linelistsurv_fit_source,\n  data = linelist_surv,\n  size = 1, linetype = \"strata\",   # line types\n  conf.int = T,\n  surv.scale = \"percent\",  \n  break.time.by = 10, \n  xlab = \"Follow-up days\",\n  ylab= \"Survival Probability\",\n  pval = T,\n  pval.coord = c(40,.91),\n  risk.table = T,\n  legend.title = \"Source of \\ninfection\",\n  legend.labs = c(\"Funeral\", \"Other\"),\n  font.legend = 10,\n  palette = c(\"#E7B800\",\"#3E606F\"),\n  surv.median.line = \"hv\", \n  ggtheme = theme_light()\n)\n\n```\n\n<!-- ======================================================= -->\n## Cox regression analysis {}\n\nCox proportional hazards regression is one of the most popular regression techniques for survival analysis. Other models  can also be used since the Cox model requires *important assumptions* that need to be verified for an appropriate use such as the proportional hazards assumption: see references. \n\nIn a Cox proportional hazards regression model, the measure of effect is the **_hazard rate_** (HR), which is the risk of failure (or the risk of death in our example), given that the participant has survived up to a specific time.  Usually, we are interested in comparing *independent* groups with respect to their hazards, and we use a hazard ratio, which is analogous to an odds ratio in the setting of multiple logistic regression analysis. The `cox.ph()` function from the **survival** package is used to fit the model. The function `cox.zph()` from **survival** package may be used to test the proportional hazards assumption for a Cox regression model fit. \n\n<span style=\"color: black;\">**_NOTE:_** A probability must lie in the range 0 to 1. However, the hazard represents the expected number of events per one unit of time. \n\n* If the hazard ratio for a predictor is close to 1 then that predictor does not affect survival,\n* if the HR is less than 1, then the predictor is protective (i.e., associated with improved survival),\n* and if the HR is greater than 1, then the predictor is associated with increased risk (or decreased survival).</span> \n\n### Fitting a Cox model {.unnumbered}\n\nWe can first fit a model to assess the effect of age and gender on the survival. By just printing the model, we have the information on:\n\n  + the estimated regression coefficients `coef` which quantifies the association between the predictors and the outcome,\n  + their exponential (for interpretability, `exp(coef)`) which produces the *hazard ratio*,\n  + their standard error `se(coef)`,\n  + the z-score: how many standard errors is the estimated coefficient away from  0,\n  + and the p-value:  the probability that the estimated coefficient could be 0.\n  \nThe `summary()` function applied to the cox model object gives more information, such as the confidence interval of the estimated HR and the different test scores.\n\nThe effect of the first covariate `gender`  is presented in the first row. `genderm` (male) is printed, implying that the first strata level (\"f\"), i.e the female group, is the reference group for the gender. Thus the interpretation of the test parameter is that of men compared to women. The p-value indicates there was not enough evidence of an effect of the gender on the expected hazard or of an association between gender and all-cause mortality.\n\nThe same lack of evidence is noted regarding age-group.\n\n```{r coxmodel_agesex}\n\n#fitting the cox model\nlinelistsurv_cox_sexage <-  survival::coxph(\n              Surv(futime, event) ~ gender + age_cat_small, \n              data = linelist_surv\n              )\n\n\n#printing the model fitted\nlinelistsurv_cox_sexage\n\n\n#summary of the model\nsummary(linelistsurv_cox_sexage)\n\n```\n\n\nIt was interesting to run the model and look at the results but a first look to verify whether the proportional hazards assumptions is respected could help saving time.\n\n```{r test_assumption}\n\ntest_ph_sexage <- survival::cox.zph(linelistsurv_cox_sexage)\ntest_ph_sexage\n\n```\n\n\n<span style=\"color: black;\">**_NOTE:_** A second argument called *method* can be specified when computing the cox model, that determines how ties are handled. The *default* is \"efron\", and the other options are \"breslow\" and \"exact\".</span>\n\nIn another model we add more risk factors such as the source of infection and the number of days between date of onset and admission. This time, we first  verify the proportional hazards assumption before going forward.\n\nIn this model, we have included a continuous predictor (`days_onset_hosp`). In this case we interpret the parameter estimates as the increase in the expected log of the relative hazard for each one unit increase in the predictor, holding other predictors constant. We first verify the proportional hazards assumption.  \n\n```{r coxmodel_fit_ph,  message=FALSE}\n\n#fit the model\nlinelistsurv_cox <-  coxph(\n                        Surv(futime, event) ~ gender + age_years+ source + days_onset_hosp,\n                        data = linelist_surv\n                        )\n\n\n#test the proportional hazard model\nlinelistsurv_ph_test <- cox.zph(linelistsurv_cox)\nlinelistsurv_ph_test\n```\n\nThe graphical verification of this assumption may be performed with the function `ggcoxzph()` from the **survminer** package. \n\n```{r}\nsurvminer::ggcoxzph(linelistsurv_ph_test)\n\n```\n\n\nThe model results indicate there is a negative association between onset to admission duration and all-cause mortality. The expected hazard is 0.9 times lower in a person who who is one day later admitted than another, holding gender constant. Or in a more straightforward explanation, a one unit increase in the duration of onset to admission is associated with a 10.7% (`coef *100`) decrease in the risk of death.\n\nResults show also a positive association between the source of infection and the all-cause mortality. Which is to say there is an increased risk of death (1.21x) for patients that got a source of infection other than funerals.\n\n\n```{r coxmodel_summary,  message=FALSE}\n\n#print the summary of the model\nsummary(linelistsurv_cox)\n\n```\n\n\nWe can verify this relationship with a table:  \n\n\n```{r}\nlinelist_case_data %>% \n  tabyl(days_onset_hosp, outcome) %>% \n  adorn_percentages() %>%  \n  adorn_pct_formatting()\n\n```\n\n\nWe would need to consider and investigate why this association exists in the data. One possible explanation could be that patients who live long enough to be admitted later had less severe disease to begin with. Another perhaps more likely explanation is that since we used a simulated fake dataset, this pattern does not reflect reality!  \n\n\n<!-- ======================================================= -->\n\n### Forest plots {.unnumbered}\n\nWe can then visualize the results of the cox model using the practical forest plots with the `ggforest()` function of the **survminer package**.\n\n```{r forestp}\n\nggforest(linelistsurv_cox, data = linelist_surv)\n\n```\n\n<!-- ======================================================= -->\n## Time-dependent covariates in survival models {}\n\nSome of the following sections have been adapted with permission from an excellent [introduction to survival analysis in R](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html) by [Dr. Emily Zabor](https://www.emilyzabor.com/) \n\nIn the last section we covered using Cox regression to examine associations between covariates of interest and survival outcomes.But these analyses rely on the covariate being measured at baseline, that is, before follow-up time for the event begins.\n\nWhat happens if you are interested in a covariate that is measured **after** follow-up time begins? Or, what if you have a covariate that can change over time?\n\nFor example, maybe you are working with clinical data where you repeated measures of hospital laboratory values that can change over time. This is an example of a **Time Dependent Covariate**. In order to address this you need a special setup, but fortunately the cox model is very flexible and this type of data can also be modeled with tools from the **survival** package. \n\n### Time-dependent covariate setup {.unnumbered} \n\nAnalysis of time-dependent covariates in R requires setup of a special dataset. If interested, see the more detailed paper on this by the author of the **survival** package [Using Time Dependent Covariates and Time Dependent Coefficients in the Cox Model](https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf).\n\nFor this, we'll use a new dataset from the `SemiCompRisks` package named `BMT`, which includes data on 137 bone marrow transplant patients. The variables we'll focus on are:  \n\n* `T1`  - time (in days) to death or last follow-up  \n* `delta1` - death indicator; 1-Dead, 0-Alive  \n* `TA` -  time (in days) to acute graft-versus-host disease  \n* `deltaA` -  acute graft-versus-host disease indicator;  \n  * 1 - Developed acute graft-versus-host disease  \n  * 0 - Never developed acute graft-versus-host disease\n\nWe'll load this dataset from the **survival** package using the **base** R command `data()`, which can be used for loading data that is already included in a R package that is loaded. The data frame `BMT` will appear in your R environment.  \n\n```{r}\ndata(BMT, package = \"SemiCompRisks\")\n```\n\n#### Add unique patient identifier {.unnumbered}  \n\nThere is no unique ID column in the `BMT` data, which is needed to create the type of dataset we want. So we use the function `rowid_to_column()` from the **tidyverse** package **tibble** to create a new id column called `my_id` (adds column at start of data frame with sequential row ids, starting at 1). We name the data frame `bmt`.  \n\n```{r}\nbmt <- rowid_to_column(BMT, \"my_id\")\n```\n\nThe dataset now looks like this:  \n\n```{r message=FALSE, echo=F}\nDT::datatable(bmt, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\n```\n\n#### Expand patient rows {.unnumbered}  \n\nNext, we'll use the `tmerge()` function with the `event()` and `tdc()` helper functions to create the restructured dataset. Our goal is to restructure the dataset to create a separate row for each patient for each time interval where they have a different value for `deltaA`. In this case, each patient can have at most two rows depending on whether they developed acute graft-versus-host disease during the data collection period. We'll call our new indicator for the development of acute graft-versus-host disease `agvhd`.\n\n- `tmerge()` creates a long dataset with multiple time intervals for the different covariate values for each patient\n- `event()` creates the new event indicator to go with the newly-created time intervals\n- `tdc()` creates the time-dependent covariate column, `agvhd`, to go with the newly created time intervals\n\n```{r}\ntd_dat <- \n  tmerge(\n    data1 = bmt %>% select(my_id, T1, delta1), \n    data2 = bmt %>% select(my_id, T1, delta1, TA, deltaA), \n    id = my_id, \n    death = event(T1, delta1),\n    agvhd = tdc(TA)\n    )\n```\n\nTo see what this does, let's look at the data for the first 5 individual patients.\n\nThe variables of interest in the original data looked like this:\n\n```{r}\nbmt %>% \n  select(my_id, T1, delta1, TA, deltaA) %>% \n  filter(my_id %in% seq(1, 5))\n```\n\nThe new dataset for these same patients looks like this:\n\n```{r}\ntd_dat %>% \n  filter(my_id %in% seq(1, 5))\n```\n\nNow some of our patients have two rows in the dataset corresponding to intervals where they have a different value of our new variable, `agvhd`. For example, Patient 1 now has two rows with a `agvhd` value of zero from time 0 to time 67, and a value of 1 from time 67 to time 2081. \n\n### Cox regression with time-dependent covariates {.unnumbered} \n\nNow that we've reshaped our data and added the new time-dependent `aghvd` variable, let's fit a simple single variable cox regression model. We can use the same `coxph()` function as before, we just need to change our `Surv()` function to specify both the start and stop time for each interval using the `time1 = ` and `time2 = ` arguments. \n\n\n```{r}\nbmt_td_model = coxph(\n  Surv(time = tstart, time2 = tstop, event = death) ~ agvhd, \n  data = td_dat\n  )\n\nsummary(bmt_td_model)\n```\n\nAgain, we'll visualize our cox model results using the `ggforest()` function from the **survminer package**.:\n\n```{r}\n\nggforest(bmt_td_model, data = td_dat)\n\n```\n\nAs you can see from the forest plot, confidence interval, and p-value, there does not appear to be a strong association between death and acute graft-versus-host disease in the context of our simple model. \n\n<!-- ======================================================= -->\n## Resources {  }\n\n[Survival Analysis Part I: Basic concepts and first analyses](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2394262/)\n\n[Survival Analysis in R](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html)\n\n[Survival analysis in infectious disease research: Describing events in time](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2954271/)\n\n[Chapter on advanced survival models Princeton](https://data.princeton.edu/wws509/notes/c7.pdf)\n\n[Using Time Dependent Covariates and Time Dependent Coefficients in the Cox Model](https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf)\n\n[Survival analysis cheatsheet R](https://publicifsv.sund.ku.dk/~ts/survival/survival-cheat.pdf)\n\n[Survminer cheatsheet](https://paulvanderlaken.files.wordpress.com/2017/08/survminer_cheatsheet.pdf)\n\n[Paper on different survival measures for cancer registry data with Rcode provided as supplementary materials](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6322561/)\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"survival_analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}