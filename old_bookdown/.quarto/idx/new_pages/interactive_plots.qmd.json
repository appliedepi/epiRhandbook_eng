{"title":"Interactive plots","markdown":{"headingText":"Interactive plots","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\nData visualisation is increasingly required to be interrogable by the audience. Consequently, is is becoming common to create interactive plots. There are several ways to include these but the two most common are **plotly** and **shiny**. \n\nIn this page we will focus on converting an existing `ggplot()` plot into an interactive plot with **plotly**. You can read more about **shiny** in the [Dashboards with Shiny] page. What is worth mentioning is that interactive plots are only useable in HTML format R markdown documents, not PDF or Word documents.\n\nBelow is a basic epicurve that has been transformed to be interactive using the integration of **ggplot2** and **plotly** (hover your mouse over the plot, zoom in, or click items in the legend). \n\n```{r plotly_demo, out.width=c('75%'), out.height=c('500px'), echo=F, warning=F, message=F}\npacman::p_load(plotly, rio, here, ggplot2, dplyr, lubridate)\nlinelist <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n\n## these buttons are superfluous/distracting\nplotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',\n                              'zoomOut2d','autoScale2d','hoverClosestCartesian',\n                              'toggleSpikelines','hoverCompareCartesian')\n\np <- linelist %>% \n  mutate(outcome = if_else(is.na(outcome), \"Unknown\", outcome),\n         date_earliest = if_else(is.na(date_infection), date_onset, date_infection),\n         week_earliest = floor_date(date_earliest, unit = \"week\",week_start = 1))%>% \n  count(week_earliest, outcome) %>% \n  ggplot()+\n  geom_col(aes(week_earliest, n, fill = outcome))+\n  xlab(\"Week of infection/onset\") + ylab(\"Cases per week\")+\n  theme_minimal()\n\np %>% \n  ggplotly() %>% \n  partial_bundle() %>% \n  config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)\n\n```\n\n<!-- ======================================================= -->\n## Preparation {  }\n\n### Load packages {.unnumbered}  \n\nThis code chunk shows the loading of packages required for the analyses. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n\n```{r}\npacman::p_load(\n  rio,       # import/export\n  here,      # filepaths\n  lubridate, # working with dates\n  plotly,    # interactive plots\n  scales,    # quick percents\n  tidyverse  # data management and visualization\n  ) \n```\n\n### Start with a `ggplot()` {.unnumbered}  \n\nIn this page we assume that you are beginning with a `ggplot()` plot that you want to convert to be interactive. We will build several of these plots in this page, using the case `linelist` used in many pages of this handbook.  \n\n\n### Import data {.unnumbered}\n\nTo begin, we import the cleaned linelist of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import data with the `import()` function from the **rio** package (it handles many file types like .xlsx, .csv, .rds - see the [Import and export] page for details).  \n\n```{r, echo=F}\n# import the linelist into R\nlinelist <- rio::import(here::here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n\n```{r, eval=F}\n# import case linelist \nlinelist <- import(\"linelist_cleaned.rds\")\n```\n\nThe first 50 rows of the linelist are displayed below.\n\n```{r, message=FALSE, echo=F}\n# display the linelist data as a table\nDT::datatable(head(linelist, 50), rownames = FALSE, filter=\"top\", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\n```\n\n\n\n\n\n\n  \n<!-- ======================================================= -->\n## Plot with `ggplotly()` {  }\n\nThe function `ggplotly()` from the **plotly** package makes it easy to convert a `ggplot()` to be interactive. Simply save your `ggplot()` and then pipe it to the `ggplotly()` function.  \n\n\nBelow, we plot a simple line representing the proportion of cases who died in a given week:  \n\nWe begin by creating a summary dataset of each epidemiological week, and the percent of cases with a known outcome that died.  \n\n```{r}\nweekly_deaths <- linelist %>%\n  group_by(epiweek = floor_date(date_onset, \"week\")) %>%  # create and group data by epiweek column\n  summarise(                                              # create new summary data frame:\n    n_known_outcome = sum(!is.na(outcome), na.rm=T),      # number of cases per group with known outcome\n    n_death  = sum(outcome == \"Death\", na.rm=T),          # number of cases per group who died\n    pct_death = 100*(n_death / n_known_outcome)           # percent of cases with known outcome who died\n  )\n```\nHere is the first 50 rows of the `weekly_deaths` dataset.  \n\n```{r message=FALSE, echo=F}\nDT::datatable(head(weekly_deaths, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )\n```\nThen we create the plot with **ggplot2**, using `geom_line()`.  \n\n```{r, warning=F, message=F}\ndeaths_plot <- ggplot(data = weekly_deaths)+            # begin with weekly deaths data\n  geom_line(mapping = aes(x = epiweek, y = pct_death))  # make line \n\ndeaths_plot   # print\n```\n\n\nWe can make this interactive by simply passing this plot to `ggplotly()`, as below. Hover your mouse over the line to show the x and y values. You can zoom in on the plot, and drag it around. You can also see icons in the upper-right of the plot. In order, they allow you to:  \n\n* Download the current view as a PNG image  \n* Zoom in with a select box  \n* \"Pan\", or move across the plot by clicking and dragging the plot  \n* Zoom in, zoom out, or return to default zoom  \n* Reset axes to defaults  \n* Toggle on/off \"spike lines\" which are dotted lines from the interactive point extending to the x and y axes  \n* Adjustments to whether data show when you are not hovering on the line  \n\n\n```{r}\ndeaths_plot %>% plotly::ggplotly()\n```\n\nGrouped data work with `ggplotly()` as well. Below, a weekly epicurve is made, grouped by outcome. The stacked bars are interactive. Try clicking on the different items in the legend (they will appear/disappear).  \n\n\n```{r plot_show, eval=F}\n# Make epidemic curve with incidence2 pacakge\np <- incidence2::incidence(\n  linelist,\n  date_index = date_onset,\n  interval = \"weeks\",\n  groups = outcome) %>% plot(fill = outcome)\n```\n\n```{r, echo=T, eval=F}\n# Plot interactively  \np %>% plotly::ggplotly()\n```\n  \n```{r, warning = F, message = F, , out.width=c('95%'), out.height=c('500px'), echo=FALSE}\np %>% \n  ggplotly() %>% \n  partial_bundle() \n```\n  \n<!-- ======================================================= -->\n## Modifications {  }\n\n### File size {.unnumbered}  \n\nWhen exporting in an R Markdown generated HTML (like this book!) you want to make the plot as small data size as possible (with no negative side effects in most cases). For this, just pipe the interactive plot to `partial_bundle()`, also from **plotly**.  \n\n```{r plot_tidyshow, eval=F}\np <- p %>% \n  plotly::ggplotly() %>%\n  plotly::partial_bundle()\n```\n\n### Buttons {.unnumbered}  \n\nSome of the buttons on a standard plotly are superfluous and can be distracting, so you can remove them. You can do this simply by piping the output into `config()` from **plotly** and specifying which buttons to remove. In the below example we specify in advance the names of the buttons to remove, and provide them to the argument `modeBarButtonsToRemove = `. We also set `displaylogo = FALSE` to remove the plotly logo.  \n\n```{r plot_tidyshow2, eval=F}\n## these buttons are distracting and we want to remove them\nplotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',\n                              'zoomOut2d','autoScale2d','hoverClosestCartesian',\n                              'toggleSpikelines','hoverCompareCartesian')\n\np <- p %>%          # re-define interactive plot without these buttons\n  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)\n```\n\n\n\n<!-- ======================================================= -->\n## Heat tiles {  }\n\nYou can make almost any `ggplot()` plot interactive, including heat tiles. In the page on [Heat plots] you can read about how to make the below plot, which displays the proportion of days per week that certain facilities reported data to their province.  \n\nHere is the code, although we will not describe it in depth here.  \n\n```{r  message=F, warning=F}\n# import data\nfacility_count_data <- rio::import(here::here(\"data\", \"malaria_facility_count_data.rds\"))\n\n# aggregate data into Weeks for Spring district\nagg_weeks <- facility_count_data %>% \n  filter(District == \"Spring\",\n         data_date < as.Date(\"2020-08-01\")) %>% \n  mutate(week = aweek::date2week(\n    data_date,\n    start_date = \"Monday\",\n    floor_day = TRUE,\n    factor = TRUE)) %>% \n  group_by(location_name, week, .drop = F) %>%\n  summarise(\n    n_days          = 7,\n    n_reports       = n(),\n    malaria_tot     = sum(malaria_tot, na.rm = T),\n    n_days_reported = length(unique(data_date)),\n    p_days_reported = round(100*(n_days_reported / n_days))) %>% \n  ungroup(location_name, week) %>% \n  right_join(tidyr::expand(., week, location_name)) %>% \n  mutate(week = aweek::week2date(week))\n\n# create plot\nmetrics_plot <- ggplot(agg_weeks,\n       aes(x = week,\n           y = location_name,\n           fill = p_days_reported))+\n  geom_tile(colour=\"white\")+\n  scale_fill_gradient(low = \"orange\", high = \"darkgreen\", na.value = \"grey80\")+\n  scale_x_date(expand = c(0,0),\n               date_breaks = \"2 weeks\",\n               date_labels = \"%d\\n%b\")+\n  theme_minimal()+ \n  theme(\n    legend.title = element_text(size=12, face=\"bold\"),\n    legend.text  = element_text(size=10, face=\"bold\"),\n    legend.key.height = grid::unit(1,\"cm\"),\n    legend.key.width  = grid::unit(0.6,\"cm\"),\n    axis.text.x = element_text(size=12),\n    axis.text.y = element_text(vjust=0.2),\n    axis.ticks = element_line(size=0.4),\n    axis.title = element_text(size=12, face=\"bold\"),\n    plot.title = element_text(hjust=0,size=14,face=\"bold\"),\n    plot.caption = element_text(hjust = 0, face = \"italic\")\n    )+\n  labs(x = \"Week\",\n       y = \"Facility name\",\n       fill = \"Reporting\\nperformance (%)\",\n       title = \"Percent of days per week that facility reported data\",\n       subtitle = \"District health facilities, April-May 2019\",\n       caption = \"7-day weeks beginning on Mondays.\")\n\nmetrics_plot # print\n```\n\nBelow, we make it interactive and modify it for simple buttons and file size.  \n\n```{r,  out.width=c('95%'), out.height=c('500px')}\nmetrics_plot %>% \n  plotly::ggplotly() %>% \n  plotly::partial_bundle() %>% \n  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)\n```\n\n<!-- ## Maps {.unnumbered}   -->\n\n<!-- You can also make `ggplot()` GIS maps interactive, although it makes a bit more care.  -->\n\n<!-- THIS SECTION IS UNDER CONSTRUCTION  -->\n\n<!-- Although **plotly** works well with `ggplot2::geom_sf` in RStudio, when you try to include its outputs in R Markdown HTML files (like this book), it doesn't work well.   -->\n\n<!-- So instead you can use {**plotly**}'s own mapping tools which can be tricky but are easy when you know how. Read on...   -->\n\n<!-- We're going to use Covid-19 incidence across African countries for this example. The data used can be found on the [World Health Organisation website](https://covid19.who.int/table).   -->\n\n<!-- You'll also need a new type of file, a GeoJSON, which is sort of similar to a shp file for those familiar with GIS. For this book, we used one from [here](https://geojson-maps.ash.ms).   -->\n\n<!-- GeoJSON files are stored in R as complex lists and you'll need to maipulate them a little. -->\n\n<!-- ```{r, echo=T,} -->\n<!-- ## You need two new packages: {rjson} and {purrr} -->\n<!-- pacman::p_load(plotly, rjson, purrr) -->\n\n<!-- ## This is a simplified version of the WHO data -->\n<!-- df <- rio::import(here::here(\"data\", \"gis\", \"covid_incidence.csv\")) -->\n\n<!-- ## Load your geojson file -->\n<!-- geoJSON <- rjson::fromJSON(file=here::here(\"data\", \"gis\", \"africa_countries.geo.json\")) -->\n\n<!-- ## Here are some of the properties for each element of the object -->\n<!-- head(geoJSON$features[[1]]$properties) -->\n\n<!-- ``` -->\n\n\n<!-- This is the tricky part. For {**plotly**} to match your incidence data to GeoJSON, the countries in the geoJSON need an id in a specific place in the list of lists. For this we need to build a basic function: -->\n<!-- ```{r} -->\n<!-- ## The property column we need to choose here is \"sovereignt\" as it is the names for each country -->\n<!-- give_id <- function(x){ -->\n\n<!--   x$id <- x$properties$sovereignt  ## Take sovereignt from properties and set it as the id -->\n\n<!--   return(x) -->\n<!-- } -->\n\n<!-- ## Use {purrr} to apply this function to every element of the features list of the geoJSON object -->\n<!-- geoJSON$features <- purrr::map(.x = geoJSON$features, give_id) -->\n<!-- ``` -->\n\n<!-- <!-- ======================================================= --> -->\n<!-- ### Maps - plot {  } -->\n\n<!-- UNDER CONSTRUCTION -->\n\n<!-- ```{r, echo=FALSE, eval=FALSE, out.width=c('95%'), out.height=c('500px'),warning=F} -->\n<!-- plotly::plot_ly() %>%  -->\n<!--   plotly::add_trace(                    #The main plot mapping functionn -->\n<!--     type=\"choropleth\", -->\n<!--     geojson=geoJSON, -->\n<!--     locations=df$Name,          #The column with the names (must match id) -->\n<!--     z=df$Cumulative_incidence,  #The column with the incidence values -->\n<!--     zmin=0, -->\n<!--     zmax=57008, -->\n<!--     colorscale=\"Viridis\", -->\n<!--     marker=list(line=list(width=0)) -->\n<!--   ) %>% -->\n<!--   colorbar(title = \"Cases per million\") %>% -->\n<!--   layout(title = \"Covid-19 cumulative incidence\", -->\n<!--                  geo = list(scope = 'africa')) %>%  -->\n<!--   config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove) -->\n<!-- ``` -->\n\n<!-- ======================================================= -->\n## Resources {  }\n\nPlotly is not just for R, but also works well with Python (and really any data science language as it's built in JavaScript). You can read more about it on the [plotly website](https://plotly.com/r/)\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"interactive_plots.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}