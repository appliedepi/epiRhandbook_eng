{"title":"Reports with R Markdown","markdown":{"headingText":"Reports with R Markdown","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/rmarkdown_overview.png\"))\n```\n\nR Markdown is a widely-used tool for creating automated, reproducible, and share-worthy outputs, such as reports. It can generate static or interactive outputs, in Word, pdf, html, powerpoint, and other formats. \n\nAn R Markdown script intersperces R code and text such that the script actually  *becomes your output document*. You can create an entire formatted document, including narrative text (can be dynamic to change based on your data), tables, figures, bullets/numbers, bibliographies, etc. \n\nSuch documents can be produced to update on a routine basis (e.g. daily surveillance reports) and/or run on subsets of data (e.g. reports for each jurisdiction).  \n\nOther pages in this handbook expand on this topic:  \n\n* The page [Organizing routine reports] demonstrates how to routinize your report production with auto-generated time-stamped folders.  \n* The page [Dashboards with R Markdown] explains how to format a R Markdown report as a dashboard.  \n\n\nOf note, the [R4Epis](https://r4epis.netlify.app/) project has developed template R Markdown scripts for common outbreaks and surveys scenarios encountered at MSF project locations.  \n\n\n<!-- ======================================================= -->\n## Preparation {  }\n\n**Background to R Markdown**\n\nTo explain some of the concepts and packages involved:\n\n* **Markdown** is a “language” that allows you to write a document using plain text, that can be converted to html and other formats. It is not specific to R. Files written in Markdown have a ‘.md’ extension.\n* **R Markdown**: is a variation on markdown that _is specific to R_ - it allows you to write a document using markdown to produce text *and to embed R code and display their outputs*. R Markdown files have '.Rmd' extension.  \n* **rmarkdown - the package**: This is used by R to render the .Rmd file into the desired output. It's focus is converting the markdown (text) syntax, so we also need...\n* **knitr**: This R package will read the code chunks, execute it, and 'knit' it back into the document. This is how tables and graphs are included alongside the text.\n* **Pandoc**: Finally, pandoc actually convert the output into word/pdf/powerpoint etc. It is a software separate from R but is installed automatically with RStudio.  \n\nIn sum, the process that happens *in the background* (you do not need to know all these steps!) involves feeding the .Rmd file to **knitr**, which executes the R code chunks and creates a new .md (markdown) file which includes the R code and its rendered output. The .md file is then processed by pandoc to create the finished product: a Microsoft Word document, HTML file, powerpoint document, pdf, etc.  \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/0_rmd.png\"))\n```\n\n(source: https://rmarkdown.rstudio.com/authoring_quick_tour.html):\n\n**Installation**\n\nTo create a R Markdown output, you need to have the following installed:\n\n* The **rmarkdown** package (**knitr** will also be installed automatically)  \n* Pandoc, which should come installed with RStudio. If you are not using RStudio, you can download Pandoc here: http://pandoc.org. \n* If you want to generate PDF output (a bit trickier), you will need to install LaTeX. For R Markdown users who have not installed LaTeX before, we recommend that you install TinyTeX (https://yihui.name/tinytex/). You can use the following commands: \n\n```{r, eval=F}\npacman::p_load(tinytex)     # install tinytex package\ntinytex::install_tinytex()  # R command to install TinyTeX software\n```\n\n<!-- ======================================================= -->\n## Getting started {  }\n\n### Install rmarkdown R package {.unnumbered}\n\nInstall the **rmarkdown** R package. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n```{r, eval=F}\npacman::p_load(rmarkdown)\n```\n\n### Starting a new Rmd file {.unnumbered}\n\nIn RStudio, open a new R markdown file, starting with ‘File’, then ‘New file’ then ‘R markdown…’. \n\n```{r out.width = \"50%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/1_gettingstarted.png\"))\n```\n\nR Studio will give you some output options to pick from. In the example below we select \"HTML\" because we want to create an html document. The title and the author names are not important. If the output document type you want is not one of these, don't worry - you can just pick any one and change it in the script later. \n\n```{r out.width = \"50%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/1_gettingstartedB.png\"))\n```\n\nThis will open up a new .Rmd script.\n\n### Important to know {.unnumbered}\n \n**The working directory**\n\nThe working directory of a markdown file is wherever the Rmd file itself is saved. For instance, if the R project is within `~/Documents/projectX ` and the Rmd file itself is in a subfolder `~/Documents/projectX/markdownfiles/markdown.Rmd`, the code `read.csv(“data.csv”)` within the markdown will look for a csv file in the `markdownfiles` folder, and not the root project folder where scripts within projects would normally automatically look.\n\nTo refer to files elsewhere, you will either need to use the full file path or use the **here** package. The **here** package sets the working directory to the root folder of the R project and is explained in detail in the [R projects] and [Import and export] pages of this handbook. For instance, to import a file called \"data.csv\" from within the `projectX` folder, the code would be `import(here(“data.csv”))`. \n\nNote that use of `setwd()` in R Markdown scripts is not recommended – it only applies to the code chunk that it is written in. \n\n**Working on a drive vs your computer**\n\nBecause R Markdown can run into pandoc issues when running on a shared network drive, it is recommended that your folder is on your local machine, e.g. in a project within ‘My Documents’. If you use Git (much recommended!), this will be familiar. For more details, see the handbook pages on [R on network drives] and [Errors and help].  \n\n\n<!-- ======================================================= -->\n## R Markdown components {  }\n\nAn R Markdown document can be edited in RStudio just like a standard R script. When you start a new R Markdown script, RStudio tries to be helpful by showing a template which explains the different section of an R Markdown script. \n\nThe below is what appears when starting a new Rmd script intended to produce an html output (as per previous section). \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/2_defaultRMD.png\"))\n```\n\nAs you can see, there are three basic components to an Rmd file: YAML, Markdown text, and R code chunks.  \n\nThese will *create and become your document output*. See the diagram below:  \n\n```{r out.width = \"100%\", out.height=\"150%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/rmarkdown_translation.png\"))\n```\n\n\n\n### YAML metadata {.unnumbered}\n\nReferred to as the ‘YAML metadata’ or just ‘YAML’, this is at the top of the R Markdown document. This section of the script will tell your Rmd file what type of output to produce, formatting preferences, and other metadata such as document title, author, and date. There are other uses not mentioned here (but referred to in ‘Producing an output’). Note that indentation matters; tabs are not accepted but spaces are. \n\nThis section must begin with a line containing just three dashes `---` and must close with a line containing just three dashes `---`. YAML parameters comes in `key:value` pairs. The placement of colons in YAML is important - the `key:value` pairs are separated by colons (not equals signs!).  \n\nThe YAML should begin with metadata for the document. The order of these primary YAML parameters (not indented) does not matter. For example:  \n\n```yaml\ntitle: \"My document\"\nauthor: \"Me\"\ndate: \"`r Sys.Date()`\"\n```\n\nYou can use R code in YAML values by writing it as in-line code (preceded by `r` within back-ticks) but also within quotes (see above example for `date: `).  \n\nIn the image above, because we clicked that our default output would be an html file, we can see that the YAML says `output: html_document`. However we can also change this to say `powerpoint_presentation` or `word_document` or even `pdf_document`.  \n\n\n### Text {.unnumbered}\n\nThis is the narrative of your document, including the titles and headings. It is written in the \"markdown\" language, which is used across many different software.  \n\nBelow are the core ways to write this text. See more extensive documentation available on R Markdown \"cheatsheet\" at the [RStudio website](https://rstudio.com/resources/cheatsheets/).  \n\n#### New lines {.unnumbered}  \n\nUniquely in R Markdown, to initiate a new line, enter *two spaces** at the end of the previous line and then Enter/Return.  \n\n\n\n#### Case {.unnumbered}  \n\nSurround your normal text with these character to change how it appears in the output.  \n\n* Underscores (`_text_`) or single asterisk (`*text*`) to _italicise_\n* Double asterisks (`**text**`) for **bold text**\n* Back-ticks (````text````) to display text as code  \n\nThe actual appearance of the font can be set by using specific templates (specified in the YAML metadata; see example tabs).  \n\n#### Color {.unnumbered}  \n\nThere is no simple mechanism to change the color of text in R Markdown. One work-around, *IF your output is an HTML file*, is to add an HTML line into the markdown text. The below HTML code will print a line of text in bold red.  \n\n```md\n<span style=\"color: red;\">**_DANGER:_** This is a warning.</span>  \n```\n\n<span style=\"color: red;\">**_DANGER:_** This is a warning.</span>  \n\n\n#### Titles and headings {.unnumbered}  \n\nA hash symbol in a text portion of a R Markdown script creates a heading. This is different than in a chunk of R code in the script, in which a hash symbol is a mechanism to comment/annotate/de-activate, as in a normal R script.  \n\nDifferent heading levels are established with different numbers of hash symbols at the start of a new line. One hash symbol is a title or primary heading. Two hash symbols are a second-level heading. Third- and fourth-level headings can be made with successively more hash symbols.\n\n```md\n# First-level heading / title\n\n## Second level heading  \n\n### Third-level heading\n```\n\n\n#### Bullets and numbering {.unnumbered}  \n\nUse asterisks (`*`) to created a bullets list. Finish the previous sentence, enter two spaces, Enter/Return *twice*, and then start your bullets. Include a space between the asterisk and your bullet text. After each bullet enter two spaces and then Enter/Return. Sub-bullets work the same way but are indented. Numbers work the same way but instead of an asterisk, write 1), 2), etc. Below is how your R Markdown script text might look.  \n\n\n```md\nHere are my bullets (there are two spaces after this colon):  \n\n* Bullet 1 (followed by two spaces and Enter/Return)  \n* Bullet 2 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 1 (followed by two spaces and Enter/Return)  \n  * Sub-bullet 2 (followed by two spaces and Enter/Return)  \n  \n```\n\n\n#### Comment out text {.unnumbered}\n\nYou can \"comment out\" R Markdown text just as you can use the \"#\" to comment out a line of R code in an R chunk. Simply highlight the text and press Ctrl+Shift+c (Cmd+Shift+c for Mac). The text will be surrounded by arrows and turn green. It will not appear in your output.  \n\n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/rmarkdown_hide_text.png\"))\n```\n\n\n### Code chunks {.unnumbered}\n\nSections of the script that are dedicated to running R code are called \"chunks\". This is where you may load packages, import data, and perform the actual data management and visualisation. There may be many code chunks, so they can help you organize your R code into parts, perhaps interspersed with text. To note:\nThese ‘chunks’ will appear to have a slightly different background colour from the narrative part of the document.  \n\nEach chunk is opened with a line that starts with three back-ticks, and curly brackets that contain parameters for the chunk (`{ }`). The chunk ends with three more back-ticks.  \n\nYou can create a new chunk by typing it out yourself, by using the keyboard shortcut \"Ctrl + Alt + i\" (or Cmd + Shift + r in Mac), or by clicking the green 'insert a new code chunk' icon at the top of your script editor.\n\nSome notes about the contents of the curly brackets `{ }`:\n\n*\tThey start with ‘r’ to indicate that the language name within the chunk is R\n*\tAfter the r you can optionally write a chunk \"name\" – these are not necessary but can help you organise your work. Note that if you name your chunks, you should ALWAYS use unique names or else R will complain when you try to render.  \n*\tThe curly brackets can include other options too, written as `tag=value`, such as:  \n  * `eval = FALSE` to not run the R code  \n  * `echo = FALSE` to not print the chunk's R source code in the output document  \n  * `warning = FALSE` to not print warnings produced by the R code  \n  * `message = FALSE` to not print any messages produced by the R code  \n  * `include =` either TRUE/FALSE whether to include chunk outputs (e.g. plots) in the document\n  * `out.width = ` and `out.height =` - provide in style `out.width = \"75%\"`  \n  * `fig.align = \"center\"` adjust how a figure is aligned across the page  \n  * `fig.show='hold'` if your chunk prints multiple figures and you want them printed next to each other (pair with `out.width = c(\"33%\", \"67%\")`. Can also set as `fig.show='asis'` to show them below the code that generates them, `'hide'` to hide, or `'animate'` to concatenate multiple into an animation.  \n* A chunk header must be written in *one line*  \n* Try to avoid periods, underscores, and spaces. Use hyphens ( - ) instead if you need a separator.  \n\nRead more extensively about the **knitr** options [here](https://yihui.org/knitr/options/).  \n\nSome of the above options can be configured with point-and-click using the setting buttons at the top right of the chunk. Here, you can specify which parts of the chunk you want the rendered document to include, namely the code, the outputs, and the warnings. This will come out as written preferences within the curly brackets, e.g. `echo=FALSE` if you specify you want to ‘Show output only’.  \n\n\n```{r out.width = \"80%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/3_chunk.png\"))\n```\n\nThere are also two arrows at the top right of each chunk, which are useful to run code within a chunk, or all code in prior chunks. Hover over them to see what they do.\n\n\nFor global options to be applied to all chunks in the script, you can set this up within your very first R code chunk in the script. For instance, so that only the outputs are shown for each code chunk and not the code itself, you can include this command in the R code chunk:  \n\n```{r, eval=F}\nknitr::opts_chunk$set(echo = FALSE) \n```\n\n\n\n#### In-text R code {.unnumbered}  \n\nYou can also include minimal R code within back-ticks. Within the back-ticks, begin the code with \"r\" and a space, so RStudio knows to evaluate the code as R code. See the example below.  \n\nThe example below shows multiple heading levels, bullets, and uses R code for the current date (`Sys.Date()`) to evaluate into a printed date.\n\n```{r out.width = \"80%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/2_text.png\"))\n```\n\n\n\n  \nThe example above is simple (showing the current date), but using the same syntax you can display values produced by more complex R code (e.g. to calculate the min, median, max of a column). You can also integrate R objects or values that were created in R code chunks earlier in the script.  \n\nAs an example, the script below calculates the proportion of cases that are aged less than 18 years old, using **tidyverse** functions, and creates the objects `less18`, `total`, and `less18prop`. This dynamic value is inserted into subsequent text. We see how it looks when knitted to a word document.\n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/3_chunktext.png\"))\n```\n\n\n### Images {.unnumbered}  \n\nYou can include images in your R Markdown one of two ways:  \n\n```{r, eval=F}\n![](\"path/to/image.png\")  \n```\n\nIf the above does not work, try using `knitr::include_graphics()`  \n\n```{r, eval=F}\nknitr::include_graphics(\"path/to/image.png\")\n```\n\n(remember, your file path could be written using the **here** package)\n\n```{r, eval=F}\nknitr::include_graphics(here::here(\"path\", \"to\", \"image.png\"))\n```\n\n\n### Tables {.unnumbered}  \n\nCreate a table using hyphens ( - ) and bars ( | ). The number of hyphens before/between bars allow the number of spaces in the cell before the text begins to wrap.  \n\n\n```md\nColumn 1 |Column  2 |Column 3\n---------|----------|--------\nCell A   |Cell B    |Cell C\nCell D   |Cell E    |Cell F\n```\n\nThe above code produces the table below:  \n\nColumn 1 |Column  2 |Column 3\n---------|----------|--------\nCell A   |Cell B    |Cell C\nCell D   |Cell E    |Cell F\n\n\n### Tabbed sections {.unnumbered}  \n\nFor HTML outputs, you can arrange the sections into \"tabs\". Simply add `.tabset` in the curly brackets `{ }` that are placed *after a heading*. Any sub-headings beneath that heading (until another heading of the same level) will appear as tabs that the user can click through. Read more [here](https://bookdown.org/yihui/rmarkdown-cookbook/html-tabs.html)  \n\n\n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/tabbed_script.png\"))\nknitr::include_graphics(here::here(\"images\", \"markdown/tabbed_view.gif\"))\n\n```\n\n\nYou can add an additional option `.tabset-pills` after `.tabset` to give the tabs themselves a \"pilled\" appearance. Be aware that when viewing the tabbed HTML output, the Ctrl+f search functionality will only search \"active\" tabs, not hidden tabs.  \n\n\n\n\n\n<!-- ======================================================= -->\n## File structure {}\n\nThere are several ways to structure your R Markdown and any associated R scripts. Each has advantages and disadvantages:  \n\n* Self-contained R Markdown - everything needed for the report is imported or created within the R Markdown  \n  * Source other files - You can run external R scripts with the `source()` command and use their outputs in the Rmd  \n  * Child scripts - an alternate mechanism for `source()`  \n* Utilize a \"runfile\" - Run commands in an R script *prior to* rendering the R Markdown  \n\n\n### Self-contained Rmd {.unnumbered}  \n\nFor a relatively simple report, you may elect to organize your R Markdown script such that it is \"self-contained\" and does not involve any external scripts.  \n\nEverything you need to run the R markdown is imported or created within the Rmd file, including all the code chunks and package loading. This \"self-contained\" approach is appropriate when you do not need to do much data processing (e.g. it brings in a clean or semi-clean data file) and the rendering of the R Markdown will not take too long.\n\nIn this scenario, one logical organization of the R Markdown script might be:  \n\n1) Set global **knitr** options  \n2) Load packages  \n3) Import data  \n4) Process data  \n5) Produce outputs (tables, plots, etc.)  \n6) Save outputs, if applicable (.csv, .png, etc.)  \n\n#### Source other files {.unnumbered}\n\nOne variation of the \"self-contained\" approach is to have R Markdown code chunks \"source\" (run) other R scripts. This can make your R Markdown script less cluttered, more simple, and easier to organize. It can also help if you want to display final figures at the beginning of the report. In this approach, the final R Markdown script simply combines pre-processed outputs into a document.  \n\nOne way to do this is by providing the R scripts (file path and name with extension) to the **base** R command `source()`.  \n\n```{r, eval=F}\nsource(\"your-script.R\", local = knitr::knit_global())\n# or sys.source(\"your-script.R\", envir = knitr::knit_global())\n```\n\nNote that when using `source()` *within* the R Markdown, the external files will still be run *during the course of rendering your Rmd file*. Therefore, each script is run every time you render the report. Thus, having these `source()` commands *within* the R Markdown does not speed up your run time, nor does it greatly assist with de-bugging, as error produced will still be printed when producing the R Markdown.  \n\nAn alternative is to utilize the `child = ` **knitr** option. EXPLAIN MORE TO DO\n\nYou must be aware of various R *environments*. Objects created within an environment will not necessarily be available to the environment used by the R Markdown.  \n\n\n\n### Runfile {.unnumbered}  \n\nThis approach involves utilizing the R script that contains the `render()` command(s) to pre-process objects that feed into the R markdown.  \n\nFor instance, you can load the packages, load and clean the data, and even create the graphs of interest prior to `render()`. These steps can occur in the R script, or in other scripts that are sourced. As long as these commands occur in the same RStudio session and objects are saved to the environment, the objects can then be called within the Rmd content. Then the R markdown itself will only be used for the final step - to produce the output with all the pre-processed objects. This is much easier to de-bug if something goes wrong.\n\nThis approach is helpful for the following reasons:  \n\n* More informative error messages - these messages will be generated from the R script, not the R Markdown. R Markdown errors tend to tell you which chunk had a problem, but will not tell you which line.  \n* If applicable, you can run long processing steps in advance of the `render()` command - they will run only once. \n\n\nIn the example below, we have a separate R script in which we pre-process a `data` object into the R Environment and then render the \"create_output.Rmd\" using `render()`.  \n\n```{r, eval=F}\ndata <- import(\"datafile.csv\") %>%       # Load data and save to environment\n  select(age, hospital, weight)          # Select limited columns\n\nrmarkdown::render(input = \"create_output.Rmd\")   # Create Rmd file\n```\n\n\n\n\n\n### Folder strucutre {.unnumbered}  \n\nWorkflow also concerns the overall folder structure, such as having an 'output' folder for created documents and figures, and 'data' or 'inputs' folders for cleaned data. We do not go into further detail here, but check out the [Organizing routine reports] page.  \n\n\n\n\n\n\n\n## Producing the document  \n\nYou can produce the document in the following ways:  \n\n* Manually by pressing the \"Knit\" button at the top of the RStudio script editor (fast and easy)  \n* Run the `render()` command (executed outside the R Markdown script)  \n\n\n### Option 1: \"Knit\" button {.unnumbered}  \n\nWhen you have the Rmd file open, press the 'Knit' icon/button at the top of the file. \n\nR Studio will you show the progress within an ‘R Markdown’ tab near your R console. The document will automatically open when complete.  \n\nThe document will be saved in the same folder as your R markdown script, and with the same file name (aside from the extension). This is obviously not ideal for version control (it will be over-written each tim you knit, unless moved manually), as you may then need to rename the file yourself (e.g. add a date).  \n\nThis is RStudio’s shortcut button for the `render()` function from **rmarkdown**. This approach only compatible with a self-contained R markdown, where all the needed components exist or are sourced within the file.  \n\n```{r out.width = \"90%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/4_progress.png\"))\n```\n\n\n\n### Option 2: `render()` command {.unnumbered}\n\nAnother way to produce your R Markdown output is to run the `render()` function (from the **rmarkdown** package). You must execute this command *outside* the R Markdown script - so either in a separate R script (often called a \"run file\"), or as a stand-alone command in the R Console. \n\n```{r, eval=F}\nrmarkdown::render(input = \"my_report.Rmd\")\n```\n\nAs with \"knit\", the default settings will save the Rmd output to the same folder as the Rmd script, with the same file name (aside from the file extension). For instance “my_report.Rmd” when knitted will create “my_report.docx” if you are knitting to a word document. However, by using `render()` you have the option to use different settings. `render()` can accept arguments including:  \n\n* `output_format = ` This is the output format to convert to (e.g. `\"html_document\"`, `\"pdf_document\"`, `\"word_document\"`, or `\"all\"`). You can also specify this in the YAML inside the R Markdown script.  \n* `output_file = ` This is the name of the output file (and file path). This can be created via R functions like `here()` or `str_glue()` as demonstrated below.  \n* `output_dir = ` This is an output directory (folder) to save the file. This allows you to chose an alternative other than the directory the Rmd file is saved to.  \n* `output_options = ` You can provide a list of options that will override those in the script YAML (e.g. )\n* `output_yaml = ` You can provide path to a .yml file that contains YAML specifications  \n* `params = ` See the section on parameters below  \n* See the complete list [here](https://pkgs.rstudio.com/rmarkdown/reference/render.html)  \n\nAs one example, to improve version control, the following command will save the output file within an ‘outputs’ sub-folder, with the current date in the file name. To create the file name, the function `str_glue()` from the **stringr** package is use to 'glue' together static strings (written plainly) with dynamic R code (written in curly brackets). For instance if it is April 10th 2021, the file name from below will be “Report_2021-04-10.docx”. See the page on [Characters and strings] for more details on `str_glue()`.  \n\n```{r, eval=F}\nrmarkdown::render(\n  input = \"create_output.Rmd\",\n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\")) \n```\n\nAs the file renders, the RStudio Console will show you the rendering progress up to 100%, and a final message to indicate that the rendering is complete. \n\n\n\n###  Options 3: **reportfactory**  package {.unnumbered}  \n\nThe R package **reportfactory** offers an alternative method of organising and compiling R Markdown reports *catered to scenarios where you run reports routinely (e.g. daily, weekly...).* It eases the compilation of multiple R Markdown files and the organization of their outputs. In essence, it provides a \"factory\" from which you can run the R Markdown reports, get automatically date- and time-stamped folders for the outputs, and have \"light\" version control.  \n\nRead more about this work flow in the page on [Organizing routine reports].  \n\n\n\n<!-- ======================================================= -->\n## Parameterised reports {  }\n\nYou can use parameterisation to make a report dynamic, such that it can be run with specific setting (e.g. a specific date or place or with certain knitting options). Below, we focus on the basics, but there is more [detail online](https://bookdown.org/yihui/rmarkdown/parameterized-reports.html) about parameterized reports.\n\nUsing the Ebola linelist as an example, let’s say we want to run a standard surveillance report for each hospital each day. We show how one can do this using parameters.\n\n*Important: dynamic reports are also possible without the formal parameter structure (without `params:`), using simple R objects in an adjacent R script. This is explained at the end of this section.*\n\n\n\n### Setting parameters {.unnumbered}\n\nYou have several options for specifying parameter values for your R Markdown output.  \n\n#### Option 1: Set parameters within YAML {.unnumbered}\n\nEdit the YAML to include a `params: ` option, with indented statements for each parameter you want to define. In this example we create parameters `date` and `hospital`, for which we specify values. These values are subject to change each time the report is run. If you use the \"Knit\" button to produce the output, the parameters will have these default values. Likewise, if you use `render()` the parameters will have these default values unless otherwise specified in the `render()` command.  \n\n\n```yaml\n---\ntitle: Surveillance report\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: Central Hospital\n---\n```\n\nIn the background, these parameter values are contained within a read-only list called `params`. Thus, you can insert the parameter values in R code as you would another R object/value in your environment. Simply type `params$` followed by the parameter name. For example `params$hospital` to represent the hospital name (\"Central Hospital\" by default).  \n\nNote that parameters can also hold values `true` or `false`, and so these can be included in your **knitr** options for a R chunk. For example, you can set `{r, eval=params$run}` instead of `{r, eval=FALSE}`, and now whether the chunk runs or not depends on the value of a parameter `run:`.  \n\nNote that for parameters that are dates, they will be input as a string. So for `params$date` to be interpreted in R code it will likely need to be wrapped with `as.Date()` or a similar function to convert to class Date.  \n\n\n\n\n#### Option 2: Set parameters within `render()` {.unnumbered}  \n\nAs mentioned above, as alternative to pressing the \"Knit\" button to produce the output is to execute the `render()` function from a separate script. In this later case, you can specify the parameters to be used in that rendering to the `params = ` argument of `render()`. \n\nNote than any parameter values provided here will *overwrite* their default values if written within the YAML. We write the values in quotation marks as in this case they should be defined as character/string values.  \n\nThe below command renders \"surveillance_report.Rmd\", specifies a dynamic output file name and folder, and provides a `list()` of two parameters and their values to the argument `params = `.  \n\n```{r, eval=F}\nrmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = list(date = \"2021-04-10\", hospital  = \"Central Hospital\"))\n```\n\n\n#### Option 3: Set parameters using a Graphical User Interface {.unnumbered}  \n\nFor a more interactive feel, you can also use the Graphical User Interface (GUI) to manually select values for parameters. To do this we can click the drop-down menu next to the ‘Knit’ button and choose ‘Knit with parameters’. \n\nA pop-up will appear allowing you to type in values for the parameters that are established in the document's YAML. \n\n```{r out.width = \"50%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/5_parametersGUI.png\"))\n```\n\nYou can achieve the same through a `render()` command by specifying `params = \"ask\"`, as demonstrated below.  \n\n```{r, eval=F}\nrmarkdown::render(\n  input = \"surveillance_report.Rmd\",  \n  output_file = stringr::str_glue(\"outputs/Report_{Sys.Date()}.docx\"),\n  params = “ask”)\n```\n\n\nHowever, typing values into this pop-up window is subject to error and spelling mistakes. You may prefer to add restrictions to the values that can be entered through drop-down menus. You can do this by adding in the YAML several specifications for each `params: ` entry. \n\n* `label: ` is how the title for that particular drop-down menu  \n* `value: ` is the default (starting) value  \n* `input: ` set to `select` for drop-down menu  \n* `choices: ` Give the eligible values in the drop-down menu  \n\nBelow, these specifications are written for the `hospital` parameter.  \n\n```yaml\n---\ntitle: Surveillance report\noutput: html_document\nparams:\n date: 2021-04-10\n hospital: \n  label: “Town:”\n  value: Central Hospital\n  input: select\n  choices: [Central Hospital, Military Hospital, Port Hospital, St. Mark's Maternity Hospital (SMMH)]\n---\n```\n\nWhen knitting (either via the 'knit with parameters' button or by `render()`), the pop-up window will have drop-down options to select from.  \n\n```{r out.width = \"50%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/5_parametersGUIB.png\"))\n```\n\n\n\n\n### Parameterized example {.unnumbered} \n\nThe following code creates parameters for `date` and `hospital`, which are used in the R Markdown as `params$date` and `params$hospital`, respectively.  \n\nIn the resulting report output, see how the data are filtered to the specific hospital, and the plot title refers to the correct hospital and date. We use the \"linelist_cleaned.rds\" file here, but it would be particularly appropriate if the linelist itself also had a datestamp within it to align with parameterised date. \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/6_Rmdexample.png\"))\n```\n\nKnitting this produces the final output with the default font and layout.\n\n```{r out.width = \"80%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/6_RmdexampleB.png\"))\n```\n\n\n### Parameterisation without `params` {.unnumbered}\n\nIf you are rendering a R Markdown file with `render()` from a separate script, you can actually create the impact of parameterization without using the `params:` functionality.  \n\nFor instance, in the *R script* that contains the `render()` command, you can simply define `hospital` and `date` as two R objects (values) before the `render()` command. In the R Markdown, you would not need to have a `params:` section in the YAML, and we would refer to the `date` object rather than `params$date` and `hospital` rather than `params$hospital`. \n\n```{r, eval=F}\n# This is a R script that is separate from the R Markdown\n\n# define R objects\nhospital <- \"Central Hospital\"\ndate <- \"2021-04-10\"\n\n# Render the R markdown\nrmarkdown::render(input = \"create_output.Rmd\") \n```\n\nFollowing this approach means means you can not “knit with parameters”, use the GUI, or include knitting options within the parameters. However it allows for simpler code, which may be advantageous.  \n\n\n<!-- ======================================================= -->\n\n## Looping reports  {  }\n\nWe may want to run a report multiple times, varying the input parameters, to produce a report for each jurisdictions/unit. This can be done using tools for *iteration*, which are explained in detail in the page on [Iteration, loops, and lists]. Options include the **purrr** package, or use of a *for loop* as explained below.  \n\nBelow, we use a simple *for loop* to generate a surveillance report for all hospitals of interest. This is done with one command (instead of manually changing the hospital parameter one-at-a-time). The command to render the reports must exist in a separate script *outside* the report Rmd. This script will also contain defined objects to \"loop through\" - today’s date, and a vector of hospital names to loop through.  \n\n\n\n```{r, eval=F}\nhospitals <- c(\"Central Hospital\",\n                \"Military Hospital\", \n                \"Port Hospital\",\n                \"St. Mark's Maternity Hospital (SMMH)\") \n```\n\nWe then feed these values one-at-a-time into the `render()` command using a loop, which runs the command once for each value in the `hospitals` vector. The letter `i` represents the index position (1 through 4) of the hospital currently being used in that iteration, such that `hospital_list[1]` would be “Central Hospital”. This information is supplied in two places in the `render()` command:  \n\n1) To the file name, such that the file name of the first iteration if produced on 10th April 2021 would be “Report_Central Hospital_2021-04-10.docx”, saved in the ‘output’ subfolder of the working directory.  \n2) To `params = ` such that the Rmd uses the hospital name internally whenever the `params$hospital` value is called (e.g. to filter the dataset to the particular hospital only). In this example, four files would be created - one for each hospital.\n\n```{r, eval=F}\nfor(i in 1:length(hospitals)){\n  rmarkdown::render(\n    input = \"surveillance_report.Rmd\",\n    output_file = str_glue(\"output/Report_{hospitals[i]}_{Sys.Date()}.docx\"),\n    params = list(hospital  = hospitals[i]))\n}       \n```\n\n\n\n<!-- In the scenario where you are f not using this strict form of parameterisation but saving objects to the environment, as discussed at the end of the parameterisation section, the render function would look like this: -->\n\n<!-- ```md -->\n<!-- for(i in 1:length(hospital_list)){ -->\n<!-- rmarkdown::render(\"surveillance_report.Rmd\", -->\n<!--                   output_file = paste0(\"output/Report_\", hospital_list[i], refdate, \".docx\") -->\n<!-- }        -->\n<!-- ``` -->\n<!-- The text within the markdown would then need to refer to `hospital_list[i]` and `refdate`.  -->\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Templates  \n\nBy using a template document that contains any desired formatting, you can adjust the aesthetics of how the Rmd output will look. You can create for instance an MS Word or Powerpoint file that contains pages/slides with the desired dimensions, watermarks, backgrounds, and fonts. \n\n### Word documents {.unnumbered}\n\nTo create a template, start a new word document (or use an existing output with  formatting the suits you), and edit fonts by defining the Styles. In Style,Headings 1, 2, and 3 refer to the various markdown header levels (`# Header 1`, `## Header 2` and `### Header 3` respectively). Right click on the style and click 'modify' to change the font formatting as well as the paragraph (e.g. you can introduce page breaks before certain styles which can help with spacing). Other aspects of the word document such as margins, page size, headers etc, can be changed like a usual word document you are working directly within. \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/7_template.png\"))\n```\n\n### Powerpoint documents {.unnumbered}\n\nAs above, create a new slideset or use an existing powerpoint file with the desired formatting. For further editing, click on 'View' and 'Slide Master'. From here you can change the 'master' slide appearance by editing the text formatting in the text boxes, as well as the background/page dimensions for the overall page. \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/8_ppttemplate.png\"))\n```\n\nUnfortunately, editing powerpoint files is slightly less flexible:\n\n* A first level header (`# Header 1`) will automatically become the title of a new slide,\n* A `## Header 2` text will not come up as a subtitle but text within the slide's main textbox (unless you find a way to maniuplate the Master view). \n* Outputted plots and tables will automatically go into new slides. You will need to combine them, for instance the the **patchwork** function to combine ggplots, so that they show up on the same page. See this [blog post](https://mattherman.info/blog/ppt-patchwork/) about using the **patchwork** package to put multiple images on one slide.  \n\nSee the [**officer** package](https://davidgohel.github.io/officer/) for a tool to work more in-depth with powerpoint presentations.  \n\n\n\n\n### Integrating templates into the YAML {.unnumbered}\n\nOnce a template is prepared, the detail of this can be added in the YAML of the Rmd underneath the 'output' line and underneath where the document type is specified (which goes to a separate line itself). Note `reference_doc` can be used for powerpoint slide templates.\n\nIt is easiest to save the template in the same folder as where the Rmd file is (as in the example below), or in a subfolder within. \n\n```yaml\n---\ntitle: Surveillance report\noutput: \n word_document:\n  reference_docx: \"template.docx\"\nparams:\n date: 2021-04-10\n hospital: Central Hospital\ntemplate:\n \n---\n```\n\n### Formatting HTML files {.unnumbered}\n\nHTML files do not use templates, but can have the styles configured within the YAML. HTMLs are interactive documents, and are particularly flexible. We cover some basic options here. \n\n* Table of contents: We can add a table of contents with `toc: true` below, and also specify that it remains viewable (\"floats\") as you scroll, with `toc_float: true`.\n\n* Themes: We can refer to some pre-made themes, which come from a Bootswatch theme library. In the below example we use cerulean. Other options include: journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, and yeti. \n\n* Highlight: Configuring this changes the look of highlighted text (e.g. code within chunks that are shown). Supported styles include default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, breezedark, and textmate.  \n\nHere is an example of how to integrate the above options into the YAML.\n\n```yaml\n---\ntitle: \"HTML example\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    theme: cerulean\n    highlight: kate\n    \n---\n```\n\nBelow are two examples of HTML outputs which both have floating tables of contents, but different theme and highlight styles selected:\n\n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/9_html.png\"))\n```\n\n\n## Dynamic content  \n\nIn an HTML output, your report content can be dynamic. Below are some examples:  \n\n### Tables {.unnumbered}  \n\nIn an HTML report, you can print data frame / tibbles such that the content is dynamic, with filters and scroll bars. There are several packages that offer this capability.  \n\nTo do this with the **DT** package, as is used throughout this handbook, you can insert a code chunk like this:  \n\n```{r out.width = \"100%\", fig.align = \"center\", echo=F}\nknitr::include_graphics(here::here(\"images\", \"markdown/10_dynamictable.png\"))\n```\n\nThe function `datatable()` will print the provided data frame as a dynamic table for the reader. You can set `rownames = FALSE` to simplify the far left-side of the table. `filter = \"top\"` provides a filter over each column. In the `option()` argument provide a list of other specifications. Below we include two: `pageLength = 5` set the number of rows that appear as 5 (the remaining rows can be viewed by paging through arrows), and `scrollX=TRUE` enables a scrollbar on the bottom of the table (for columns that extend too far to the right).  \n\nIf your dataset is very large, consider only showing the top X rows by wrapping the data frame in `head()`.  \n\n\n### HTML widgets {.unnumbered}\n\n[HTML widgets for R](http://www.htmlwidgets.org/) are a special class of R packages that enable increased interactivity by utilizing JavaScript libraries. You can embed them in HTML R Markdown outputs.  \n\nSome common examples of these widgets include:  \n\n* Plotly (used in this handbook page and in the [Interative plots] page)\n* visNetwork (used in the [Transmission Chains] page of this handbook)  \n* Leaflet (used in the [GIS Basics] page of this handbook)  \n* dygraphs (useful for interactively showing time series data)  \n* DT (`datatable()`) (used to show dynamic tables with filter, sort, etc.)  \n\nThe `ggplotly()` function from **plotly** is particularly easy to use. See the [Interactive plots] page. \n\n\n## Resources {  }\n\nFurther information can be found via:\n\n* https://bookdown.org/yihui/rmarkdown/\n* https://rmarkdown.rstudio.com/articles_intro.html\n\nA good explainer of markdown vs knitr vs Rmarkdown is here: https://stackoverflow.com/questions/40563479/relationship-between-r-markdown-knitr-pandoc-and-bookdown\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"rmarkdown.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}