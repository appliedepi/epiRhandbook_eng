{"title":"Organizing routine reports","markdown":{"headingText":"Organizing routine reports","headingAttr":{"id":"","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\nThis page covers the **reportfactory** package, which is an *accompaniment to using R Markdown for reports*. \n\nIn scenarios where you run reports routinely (daily, weekly, etc.), it eases the compilation of multiple R Markdown files and the organization of their outputs. In essence, it provides a \"factory\" from which you can run the R Markdown reports, get automatically date- and time-stamped folders for the outputs, and have \"light\" version control.  \n\n**reportfactory** is one of the packages developed by RECON (R Epidemics Consortium). Here is their [website](https://www.repidemicsconsortium.org/) and [Github](https://github.com/reconverse).  \n\n\n## Preparation\n\n### Load packages {.unnumbered}  \n\nFrom within RStudio, install the latest version of the **reportfactory** package from Github.  \n\nYou can do this via the **pacman** package with `p_load_current_gh()` which will force intall of the latest version from Github. Provide the character string \"reconverse/reportfactory\", which specifies the Github organization (reconverse) and repository (reportfactory). You can also use `install_github()` from the **remotes** package, as an alternative.\n\n```{r, eval=FALSE}\n# Install and load the latest version of the package from Github\npacman::p_load_current_gh(\"reconverse/reportfactory\")\n#remotes::install_github(\"reconverse/reportfactory\") # alternative\n```\n\n\n## New factory  \n\nTo create a new factory, run the function `new_factory()`. This will create a new self-contained R project folder. By default:  \n\n* The factory will be added to your working directory\n* The name of the factory R project will be called \"new_factory.Rproj\"  \n* Your RStudio session will \"move in\" to this R project  \n\n```{r, eval=F}\n# This will create the factory in the working directory\nnew_factory()\n```\n\nLooking inside the factory, you can see that sub-folders and some files were created automatically.  \n\n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_new2.png\"))\n```\n\n* The *report_sources* folder will hold your R Markdown scripts, which generate your reports  \n* The *outputs* folder will hold the report outputs (e.g. HTML, Word, PDF, etc.)  \n* The *scripts* folder can be used to store other R scripts (e.g. that are sourced by your Rmd scripts)  \n* The *data* folder can be used to hold your data (\"raw\" and \"clean\" subfolders are included)  \n* A *.here* file, so you can use the **here** package to call files in sub-folders by their relation to this root folder (see [R projects] page for details)  \n* A *gitignore* file was created in case you link this R project to a Github repository (see [Version control and collaboration with Github])  \n* An empty README file, for if you use a Github repository  \n\n\n<span style=\"color: orange;\">**_CAUTION:_** depending on your computer's setting, files such as \".here\" may exist but be invisible.</span>  \n\nOf the default settings, below are several that you might want to adjust within the `new_factory()` command:  \n\n* `factory = ` - Provide a name for the factory folder (default is \"new_factory\")  \n* `path = ` - Designate a file path for the new factory (default is the working directory)  \n* `report_sources = ` Provide an alternate name for the subfolder which holds the R Markdown scripts (default is \"report_sources\")  \n* `outputs = ` Provide an alternate name for the folder which holds the report outputs (default is \"outputs\")  \n\nSee `?new_factory` for a complete list of the arguments.  \n\n\nWhen you create the new factory, your R session is transferred to the new R project, so you should again load the **reportfactory** package.  \n\n```{r, eval=FALSE}\npacman::p_load(reportfactory)\n```\n\nNow you can run a the `factory_overview()` command to see the internal structure (all folders and files) in the factory.  \n\n```{r, eval=F}\nfactory_overview()            # print overview of the factory to console\n```\n\nThe following \"tree\" of the factory's folders and files is printed to the R console. Note that in the \"data\" folder there are sub-folders for \"raw\" and \"clean\" data, and example CSV data. There is also \"example_report.Rmd\" in the \"report_sources\" folder.    \n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_overview.png\"))\n```\n\n\n## Create a report  \n\nFrom within the factory R project, create a R Markdown report just as you would normally, and save it into the \"report_sources\" folder. See the [R Markdown][Reports with R Markdown] page for instructions. For purposes of example, we have added the following to the factory:  \n\n* A new R markdown script entitled \"daily_sitrep.Rmd\", saved within the \"report_sources\" folder  \n* Data for the report (\"linelist_cleaned.rds\"), saved to the \"clean\" sub-folder within the \"data\" folder  \n\nWe can see using `factory_overview()` our R Markdown in the \"report_sources\" folder and the data file in the \"clean\" data folder (highlighted):\n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_overview2.png\"))\n```\n\nBelow is a screenshot of the beginning of the R Markdown \"daily_sitrep.Rmd\". You can see that the output format is set to be HTML, via the YAML header `output: html_document`. \n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_new_rmd.png\"))\n```\n\nIn this simple script, there are commands to:  \n\n* Load necessary packages  \n* Import the linelist data using a filepath from the **here** package (read more in the page on [Import and export])  \n\n```{r, eval=F}\nlinelist <- import(here(\"data\", \"clean\", \"linelist_cleaned.rds\"))\n```\n\n* Print a summary table of cases, and export it with `export()` as a .csv file  \n* Print an epicurve, and export it with `ggsave()` as a .png file  \n\n\nYou can review just the list of R Markdown reports in the \"report_sources\" folder with this command:  \n\n```{r, eval=F}\nlist_reports()\n```\n\n\n\n## Compile  \n\nIn a report factory, to \"compile\" a R Markdown report means that the .Rmd script will be run and the output will be produced (as specified in the script YAML e.g. as HTML, Word, PDF, etc).  \n\n*The factory will automatically create a date- and time-stamped folder for the outputs in the \"outputs\" folder.*  \n\nThe report itself and any exported files produced by the script (e.g. csv, png, xlsx) will be saved into this folder. In addition, the Rmd script itself will be saved in this folder, so you have a record of that version of the script.  \n\nThis contrasts with the normal behavior of a \"knitted\" R Markdown, which saves outputs to the location of the Rmd script. This default behavior can result in crowded, messy folders. The factory aims to improve organization when one needs to run reports frequently.  \n\n### Compile by name {.unnumbered}  \n\nYou can compile a specific report by running `compile_reports()` and providing the Rmd script name (without .Rmd extension) to `reports = `. For simplicity, you can skip the `reports = ` and just write the R Markdown name in quotes, as below.  \n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_compile1.png\"))\n```\n\n\nThis command would compile only the \"daily_sitrep.Rmd\" report, saving the HTML report, and the .csv table and .png epicurve exports into a date- and time-stamped sub-folder specific to the report, within the \"outputs\" folder.  \n\nNote that if you choose to provide the .Rmd extension, you must correctly type the extension as it is saved in the file name (.rmd vs. .Rmd).  \n\nAlso note that when you compile, you may see several files temporarily appear in the \"report_sources\" folder - but they will soon disappear as they are transferred to the correct \"outputs\" folder. \n\n### Compile by number {.unnumbered}\n\nYou can also specify the Rmd script to compile by providing a number or vector of numbers to `reports = `. The numbers must align with the order the reports appear when you run `list_reports()`.  \n\n```{r, eval=F}\n# Compile the second and fourth Rmds in the \"report_sources\" folder\ncompile_reports(reports = c(2, 4))\n```\n\n\n\n### Compile all {.unnumbered}\n\nYou can compile *all* the R Markdown reports in the \"report_sources\" folder by setting the `reports = ` argument to TRUE.  \n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_compile_all.png\"))\n```\n\n\n### Compile from sub-folder {.unnumbered}  \n\nYou can add sub-folders to the \"report_sources\" folder. To run an R Markdown report from a subfolder, simply provide the name of the folder to `subfolder = `. Below is an example of code to compile a Rmd report that lives in a sub_folder of \"report_sources\".  \n\n```{r, eval=F}\ncompile_reports(\n     reports = \"summary_for_partners.Rmd\",\n     subfolder = \"for_partners\")\n```\n\nYou can compile all Rmd reports within a subfolder by providing the subfolder name to `reports = `, with a slash on the end, as below.  \n\n```{r, eval=F}\ncompile_reports(reports = \"for_partners/\")\n```\n\n\n### Parameterization {.unnumbered}\n\nAs noted in the page on [Reports with R Markdown], you can run reports with specified parameters. You can pass these parameters as a list to `compile_reports()` via the `params = ` argument. For example, in this fictional report there are three parameters provided to the R Markdown reports.  \n\n```{r, eval=F}\ncompile_reports(\n  reports = \"daily_sitrep.Rmd\",\n  params = list(most_recent_data = TRUE,\n                region = \"NORTHERN\",\n                rates_denominator = 10000),\n  subfolder = \"regional\"\n)\n```\n\n\n### Using a \"run-file\" {.unnumbered}  \n\nIf you have multiple reports to run, consider creating a R script that contains all the `compile_reports()` commands. A user can simply run all the commands in this R script and all the reports will compile. You can save this \"run-file\" to the \"scripts\" folder.  \n\n\n\n## Outputs  \n\nAfter we have compiled the reports a few times, the \"outputs\" folder might look like this (highlights added for clarity):  \n\n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_overview_all.png\"))\n```\n\n\n* Within \"outputs\", sub-folders have been created for each Rmd report  \n* Within those, further sub-folders have been created for each unique compiling  \n  * These are date- and time-stamped (\"2021-04-23_T11-07-36\" means 23rd April 2021 at 11:07:36)  \n  * You can edit the date/time-stamp format. See `?compile_reports`\n* Within each date/time compiled folder, the report output is stored (e.g. HTML, PDF, Word) along with the Rmd script (version control!) and any other exported files (e.g. table.csv, epidemic_curve.png)  \n\nHere is a view inside one of the date/time-stamped folders, for the \"daily_sitrep\" report. The file path is highlighted in yellow for emphasis.  \n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_compile_folder.png\"))\n```\n\n\nFinally, below is a screenshot of the HTML report output.  \n\n\n```{r, warning=F, message=F, echo=F}\nknitr::include_graphics(here::here(\"images\", \"factory_html.png\"))\n```\n\nYou can use `list_outputs()` to review a list of the outputs.  \n\n\n\n\n## Miscellaneous  \n\n### Knit {.unnumbered} \n\nYou can still \"knit\" one of your R Markdown reports by pressing the \"Knit\" button, if you want. If you do this, as by default, the outputs will appear in the folder where the Rmd is saved - the \"report_sources\" folder. In prior versions of **reportfactory**, having any non-Rmd files in \"report_sources\" would prevent compiling, but this is no longer the case. You can run `compile_reports()` and no error will occur.  \n\n### Scripts {.unnumbered}  \n\nWe encourage you to utilize the \"scripts\" folder to store \"runfiles\" or .R scripts that are sourced by your .Rmd scripts. See the page on [R Markdown][Reports with R Markdown] for tips on how to structure your code across several files.  \n\n\n### Extras {.unnumbered} \n\n* With **reportfactory**, you can use the function `list_deps()` to list all packages required across all the reports in the entire factory.  \n\n* There is an accompanying package in development called **rfextras** that offers more helper functions to assist you in building reports, such as:  \n  * `load_scripts()` - sources/loads all .R scripts in a given folder (the \"scripts\" folder by default)  \n  * `find_latest()` - finds the latest version of a file (e.g. the latest dataset)\n\n\n\n\n<!-- ======================================================= -->\n## Resources {  }\n\nSee the **reportfactory** package's [Github page](https://github.com/reconverse/reportfactory)\n\nSee the **rfextras** package's [Github page](https://github.com/reconhub/rfextras)  \n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"reportfactory.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","lightbox":true,"theme":{"light":"cosmo","dark":["cosmo","theme-dark.scss"]}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}