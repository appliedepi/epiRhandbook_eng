{
  "hash": "3ad56b95ebd82fd7af65fd3ff27ad872",
  "result": {
    "markdown": "\n# Characters and strings { }  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/Characters_Strings_1500x500.png){width=100%}\n:::\n:::\n\n\n\n\nThis page demonstrates use of the **stringr** package to evaluate and handle character values (\"strings\").  \n\n1. Combine, order, split, arrange - `str_c()`, `str_glue()`, `str_order()`, `str_split()`  \n2. Clean and standardise  \n    * Adjust length - `str_pad()`, `str_trunc()`, `str_wrap()`  \n    * Change case - `str_to_upper()`, `str_to_title()`, `str_to_lower()`, `str_to_sentence()`  \n3. Evaluate and extract by position - `str_length()`, `str_sub()`, `word()`  \n4. Patterns  \n    * Detect and locate - `str_detect()`, `str_subset()`, `str_match()`, `str_extract()`  \n    * Modify and replace - `str_sub()`, `str_replace_all()`  \n7. Regular expressions (\"regex\")\n\n\nFor ease of display most examples are shown acting on a short defined character vector, however they can easily be adapted to a column within a data frame.  \n\nThis [stringr vignette](\nhttps://cran.r-project.org/web/packages/stringr/vignettes/stringr.html) provided much of the inspiration for this page.  \n\n\n\n<!-- ======================================================= -->\n## Preparation { }\n\n### Load packages {.unnumbered}  \n\nInstall or load the **stringr** and other **tidyverse** packages.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install/load packages\npacman::p_load(\n  stringr,    # many functions for handling strings\n  tidyverse,  # for optional data manipulation\n  tools)      # alternative for converting to title case\n```\n:::\n\n\n\n### Import data  {.unnumbered}  \n\n\nIn this page we will occassionally reference the cleaned `linelist` of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import data with the `import()` function from the **rio** package (it handles many file types like .xlsx, .csv, .rds - see the [Import and export] page for details).  \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# import case linelist \nlinelist <- import(\"linelist_cleaned.rds\")\n```\n:::\n\n\nThe first 50 rows of the linelist are displayed below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-03ef608df957155581a1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-03ef608df957155581a1\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"2\\\" data-max=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399075200000\\\" data-max=\\\"1406419200000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399939200000\\\" data-max=\\\"1.407024e+12\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400025600000\\\" data-max=\\\"1407110400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400371200000\\\" data-max=\\\"1410566400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\" disabled=\\\"\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-29&quot;,&quot;30-49&quot;,&quot;50-69&quot;,&quot;70+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-24&quot;,&quot;25-29&quot;,&quot;30-34&quot;,&quot;35-39&quot;,&quot;40-44&quot;,&quot;45-49&quot;,&quot;50-54&quot;,&quot;55-59&quot;,&quot;60-64&quot;,&quot;65-69&quot;,&quot;70-74&quot;,&quot;75-79&quot;,&quot;80-84&quot;,&quot;85+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"-13.2697246824573\\\" data-max=\\\"-13.209391925612\\\" data-scale=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"8.45171855856465\\\" data-max=\\\"8.48802917129884\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"100\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"11\\\" data-max=\\\"241\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"20\\\" data-max=\\\"24\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"35.9\\\" data-max=\\\"38\\\" data-scale=\\\"1\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"428.994082840237\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"2\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\",\"2978ac\",\"57a565\",\"fc15ef\",\"2eaa9a\",\"bbfa93\",\"c97dd9\",\"f50e8a\",\"3a7673\",\"7f5a01\",\"ddddee\",\"99e8fa\",\"567136\",\"9371a9\",\"bc2adf\",\"403057\",\"8bd1e8\",\"f327be\",\"42e1a9\",\"90e5fe\",\"959170\",\"8ebf6e\",\"e56412\",\"6d788e\",\"a47529\",\"67be4e\",\"da8ecb\",\"148f18\",\"2cb9a5\",\"f5c142\",\"70a9fe\",\"3ad520\",\"062638\",\"c76676\",\"baacc1\",\"497372\",\"23e499\",\"38cc4a\",\"3789ee\",\"c71dcd\",\"6b70f0\"],[4,4,2,3,3,3,4,4,4,4,4,4,6,5,6,9,10,8,7,6,7,6,8,6,10,8,6,12,5,8,7,9,11,5,8,5,6,11,7,9,7,8,9,12,13,9,8,10,8,7],[\"2014-05-08\",null,null,\"2014-05-04\",\"2014-05-18\",\"2014-05-03\",\"2014-05-22\",\"2014-05-28\",null,null,\"2014-05-30\",\"2014-05-28\",\"2014-06-14\",\"2014-06-07\",\"2014-06-09\",null,null,null,\"2014-06-23\",\"2014-06-18\",\"2014-06-24\",null,null,\"2014-07-03\",null,\"2014-07-10\",\"2014-06-14\",null,\"2014-06-18\",\"2014-06-29\",\"2014-07-02\",\"2014-07-12\",\"2014-07-12\",\"2014-06-13\",\"2014-07-15\",\"2014-06-20\",null,null,\"2014-07-20\",null,\"2014-07-12\",\"2014-07-19\",\"2014-07-18\",\"2014-07-18\",\"2014-07-27\",null,\"2014-07-19\",\"2014-07-26\",\"2014-07-24\",null],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\",\"2014-06-06\",\"2014-06-13\",\"2014-06-16\",\"2014-06-17\",\"2014-06-18\",\"2014-06-19\",\"2014-06-22\",\"2014-06-23\",\"2014-06-25\",\"2014-06-26\",\"2014-06-28\",\"2014-07-02\",\"2014-07-08\",\"2014-07-09\",\"2014-07-09\",\"2014-07-10\",\"2014-07-12\",\"2014-07-12\",\"2014-07-13\",\"2014-07-13\",\"2014-07-14\",\"2014-07-15\",\"2014-07-16\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-22\",\"2014-07-22\",\"2014-07-24\",\"2014-07-24\",\"2014-07-25\",\"2014-07-25\",\"2014-07-27\",\"2014-07-29\",\"2014-07-30\",null,\"2014-08-01\",\"2014-08-02\",\"2014-08-03\"],[\"2014-05-15\",\"2014-05-14\",\"2014-05-18\",\"2014-05-20\",\"2014-05-22\",\"2014-05-23\",\"2014-05-29\",\"2014-06-03\",\"2014-06-06\",\"2014-06-07\",\"2014-06-08\",\"2014-06-15\",\"2014-06-17\",\"2014-06-17\",\"2014-06-20\",\"2014-06-19\",\"2014-06-23\",\"2014-06-24\",\"2014-06-27\",\"2014-06-28\",\"2014-06-29\",\"2014-07-03\",\"2014-07-09\",\"2014-07-09\",\"2014-07-11\",\"2014-07-11\",\"2014-07-13\",\"2014-07-14\",\"2014-07-14\",\"2014-07-13\",\"2014-07-14\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-20\",\"2014-07-20\",\"2014-07-22\",\"2014-07-24\",\"2014-07-26\",\"2014-07-24\",\"2014-07-27\",\"2014-07-25\",\"2014-07-27\",\"2014-07-31\",\"2014-08-01\",\"2014-08-03\",\"2014-08-02\",\"2014-08-02\",\"2014-08-04\"],[null,\"2014-05-18\",\"2014-05-30\",null,\"2014-05-29\",\"2014-05-24\",\"2014-06-01\",\"2014-06-07\",\"2014-06-18\",\"2014-06-09\",\"2014-06-15\",null,\"2014-07-09\",null,\"2014-06-30\",\"2014-07-11\",\"2014-07-01\",\"2014-06-25\",\"2014-07-06\",\"2014-07-02\",\"2014-07-09\",\"2014-07-07\",\"2014-07-20\",null,\"2014-07-22\",\"2014-07-16\",\"2014-07-14\",\"2014-07-20\",\"2014-07-16\",\"2014-07-19\",\"2014-07-27\",\"2014-07-19\",null,\"2014-07-26\",\"2014-08-14\",\"2014-08-01\",\"2014-07-23\",\"2014-08-28\",\"2014-07-28\",\"2014-07-19\",null,\"2014-08-03\",null,null,null,\"2014-08-06\",\"2014-08-21\",\"2014-09-13\",\"2014-08-04\",null],[null,\"Recover\",\"Recover\",null,\"Recover\",\"Recover\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Death\",\"Death\",\"Recover\",\"Recover\",null,\"Recover\",null,null,\"Death\",\"Death\",\"Recover\",null,null,null,\"Death\",null,\"Death\",\"Death\",null,\"Death\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Recover\",null,\"Death\",\"Recover\",\"Recover\",\"Death\",null,null,\"Death\",\"Death\",\"Death\",\"Death\",\"Recover\",null,\"Death\",\"Death\"],[\"m\",\"f\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"0-4\",\"0-4\",\"50-69\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"50-69\",\"20-29\",\"10-14\",\"30-49\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"30-49\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-69\",\"10-14\",\"20-29\",\"5-9\",\"0-4\",\"30-49\",\"5-9\",\"50-69\",\"10-14\",\"10-14\",\"20-29\",\"20-29\",\"30-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-29\",\"30-49\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-29\",\"20-29\",\"10-14\"],[\"0-4\",\"0-4\",\"55-59\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"60-64\",\"25-29\",\"10-14\",\"40-44\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"35-39\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-54\",\"10-14\",\"25-29\",\"5-9\",\"0-4\",\"30-34\",\"5-9\",\"65-69\",\"10-14\",\"10-14\",\"20-24\",\"20-24\",\"45-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-24\",\"35-39\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-24\",\"25-29\",\"10-14\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Port Hospital\",\"Military Hospital\",\"Missing\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Military Hospital\",\"Port Hospital\",\"Central Hospital\",\"Military Hospital\",\"Central Hospital\",\"Missing\",\"Military Hospital\",\"Other\",\"Missing\",\"Missing\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Central Hospital\",\"Military Hospital\",\"Other\",\"Other\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\"],[-13.2157351064963,-13.2152339775486,-13.212910703914,-13.2363711169728,-13.2228638912441,-13.222625321098,-13.2331547837254,-13.2320975453153,-13.2225511595637,-13.2572163655863,-13.2206286746001,-13.253989309478,-13.2385127873491,-13.209391925612,-13.2157278814899,-13.2243437095992,-13.2336087079551,-13.21422143145,-13.2339681355349,-13.2535640411465,-13.2250089377786,-13.2160657166043,-13.2680671272333,-13.2266742923612,-13.2160179088168,-13.2482584611565,-13.2156319199566,-13.2142410663192,-13.2614879104088,-13.2452992638476,-13.2630592726116,-13.2343341712241,-13.2199077448676,-13.2227293309912,-13.2343062806506,-13.218781651651,-13.2483677722899,-13.2097478342339,-13.2680867723786,-13.2587535457526,-13.262635786914,-13.2697246824573,-13.2209026809759,-13.2330734719715,-13.2680923666905,-13.2547212675054,-13.2573683214693,-13.2137356012883,-13.2175973322257,-13.2486407324245],[8.46897295100924,8.45171855856465,8.46481700596819,8.4754761613651,8.46082377490923,8.461830626007281,8.462729314626459,8.461443675342711,8.46191259217774,8.472923276435059,8.48401630165138,8.458371253408441,8.477617055125091,8.47570184950483,8.477799468789719,8.47145134147474,8.478048406853629,8.48528034195779,8.469575303958671,8.45957352078114,8.474048895115439,8.488029171298839,8.473437335922,8.484082637344621,8.46242233645879,8.470268221265719,8.463984474805329,8.464134789434199,8.456230946296071,8.48334624336805,8.47493999153642,8.47832062438022,8.469393389176499,8.48480589906514,8.47121232619015,8.48438437371817,8.484661585743391,8.477141599844281,8.462381270106089,8.455685978131131,8.4632880274758,8.47940722413856,8.46353857052336,8.461789681588639,8.47508713872833,8.458258081280711,8.4532568143863,8.4732571907655,8.479115866419329,8.48480340615605],[\"f547d6\",null,null,\"f90f5f\",\"11f8ea\",\"aec8ec\",\"893f25\",\"133ee7\",null,null,\"996f3a\",\"133ee7\",\"37a6f6\",\"9f6884\",\"4802b1\",null,null,null,\"a75c7f\",\"8e104d\",\"ab634e\",null,null,\"b799eb\",null,\"5d9e4d\",\"a15e13\",null,\"ea3740\",\"beb26e\",\"567136\",\"894024\",\"36e2e7\",\"a2086d\",\"7baf73\",\"eb2277\",null,null,\"d6584f\",null,\"312ecf\",\"52ea64\",\"cfd79c\",\"d145b7\",\"174288\",null,\"53608c\",\"3b096b\",\"f5c142\",null],[\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,null,\"other\",\"other\",\"other\",null,null,\"other\",null,\"other\",\"other\",null,\"other\",\"funeral\",\"other\",\"funeral\",\"other\",\"other\",\"other\",\"funeral\",null,null,\"other\",null,\"other\",\"other\",\"other\",\"other\",\"other\",null,\"funeral\",\"other\",\"other\",null],[27,25,91,41,36,56,47,0,86,69,67,84,68,44,34,66,78,47,53,47,71,86,53,69,38,46,68,37,100,56,50,57,65,72,29,69,37,48,54,71,47,61,47,35,53,16,13,59,69,67],[48,59,238,135,71,116,87,11,226,174,112,186,174,90,91,152,214,137,117,131,150,241,131,161,80,69,188,66,233,142,110,182,164,214,26,157,39,154,133,168,100,125,123,67,134,31,36,125,183,169],[22,22,21,23,23,21,21,22,22,22,22,22,22,21,23,22,23,21,22,23,21,23,21,24,23,22,24,23,20,24,24,20,24,21,22,21,23,22,23,23,23,22,23,22,22,22,23,22,22,22],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"yes\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"yes\",\"yes\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"yes\",\"yes\",null],[36.8,36.9,36.9,36.8,36.9,37.6,37.3,37,36.4,35.9,36.5,36.9,36.5,37.1,36.5,37.3,37,38,38,36,37,36.7,36.9,36.5,37,36.5,37.6,36.6,36.6,36.2,36.4,37.1,37.5,37.5,37.4,36.9,36.4,37.3,37,37.8,36.5,37.5,36.7,37,37.3,36.6,36.5,36.6,37.6,36.8],[null,\"09:36\",\"16:48\",\"11:22\",\"12:60\",\"14:13\",\"14:33\",\"09:25\",\"11:16\",\"10:55\",\"16:03\",\"11:14\",\"12:42\",\"11:06\",\"09:10\",\"08:45\",null,\"15:41\",\"13:34\",\"18:58\",\"12:43\",\"16:33\",\"14:29\",\"07:18\",\"08:11\",\"16:32\",\"16:17\",\"07:32\",\"17:45\",null,\"13:24\",\"14:43\",\"02:33\",\"11:36\",\"17:28\",\"16:27\",null,\"20:49\",null,\"11:38\",\"14:25\",\"13:42\",\"21:22\",\"13:33\",\"19:06\",\"17:14\",\"20:09\",null,\"10:23\",\"09:09\"],[117.1875,71.81844297615629,16.06524962926347,22.49657064471879,71.41440190438405,41.61712247324614,62.09538908706566,0,16.83765369253662,22.79032897344431,53.41198979591836,24.28026361429067,22.46003435064077,54.32098765432099,41.05784325564545,28.56648199445983,17.03205520132763,25.04129149128882,38.7172182043977,27.3876813705495,31.55555555555556,14.80690759456621,30.88398111998135,26.61934338952972,59.37499999999999,96.61835748792272,19.23947487550928,84.94031221303948,18.41993774061044,27.77226740726046,41.32231404958677,17.20806665861611,24.16716240333135,15.72189710891781,428.9940828402366,27.99302202929125,243.2610124917817,20.23950075898128,30.52744643563797,25.15589569160998,47,39.04,31.06616432017979,77.96836711962574,29.51659612385831,166.4932362122789,100.3086419753086,37.76,20.60378034578518,23.45856237526698],[2,1,2,2,1,1,2,1,1,2,2,2,1,0,2,0,1,1,2,2,1,1,1,0,2,1,1,2,1,0,0,2,1,1,2,2,1,0,2,2,0,2,0,0,2,2,null,1,0,1]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>generation<\\/th>\\n      <th>date_infection<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>date_hospitalisation<\\/th>\\n      <th>date_outcome<\\/th>\\n      <th>outcome<\\/th>\\n      <th>gender<\\/th>\\n      <th>age<\\/th>\\n      <th>age_unit<\\/th>\\n      <th>age_years<\\/th>\\n      <th>age_cat<\\/th>\\n      <th>age_cat5<\\/th>\\n      <th>hospital<\\/th>\\n      <th>lon<\\/th>\\n      <th>lat<\\/th>\\n      <th>infector<\\/th>\\n      <th>source<\\/th>\\n      <th>wt_kg<\\/th>\\n      <th>ht_cm<\\/th>\\n      <th>ct_blood<\\/th>\\n      <th>fever<\\/th>\\n      <th>chills<\\/th>\\n      <th>cough<\\/th>\\n      <th>aches<\\/th>\\n      <th>vomit<\\/th>\\n      <th>temp<\\/th>\\n      <th>time_admission<\\/th>\\n      <th>bmi<\\/th>\\n      <th>days_onset_hosp<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,8,10,14,15,18,19,20,26,28,29]},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"generation\",\"targets\":1},{\"name\":\"date_infection\",\"targets\":2},{\"name\":\"date_onset\",\"targets\":3},{\"name\":\"date_hospitalisation\",\"targets\":4},{\"name\":\"date_outcome\",\"targets\":5},{\"name\":\"outcome\",\"targets\":6},{\"name\":\"gender\",\"targets\":7},{\"name\":\"age\",\"targets\":8},{\"name\":\"age_unit\",\"targets\":9},{\"name\":\"age_years\",\"targets\":10},{\"name\":\"age_cat\",\"targets\":11},{\"name\":\"age_cat5\",\"targets\":12},{\"name\":\"hospital\",\"targets\":13},{\"name\":\"lon\",\"targets\":14},{\"name\":\"lat\",\"targets\":15},{\"name\":\"infector\",\"targets\":16},{\"name\":\"source\",\"targets\":17},{\"name\":\"wt_kg\",\"targets\":18},{\"name\":\"ht_cm\",\"targets\":19},{\"name\":\"ct_blood\",\"targets\":20},{\"name\":\"fever\",\"targets\":21},{\"name\":\"chills\",\"targets\":22},{\"name\":\"cough\",\"targets\":23},{\"name\":\"aches\",\"targets\":24},{\"name\":\"vomit\",\"targets\":25},{\"name\":\"temp\",\"targets\":26},{\"name\":\"time_admission\",\"targets\":27},{\"name\":\"bmi\",\"targets\":28},{\"name\":\"days_onset_hosp\",\"targets\":29}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n<!-- ======================================================= -->\n## Unite, split, and arrange { }\n\n\nThis section covers:  \n\n* Using `str_c()`, `str_glue()`, and `unite()` to combine strings  \n* Using `str_order()` to arrange strings  \n* Using `str_split()` and `separate()` to split strings  \n\n\n\n<!-- ======================================================= -->\n### Combine strings {.unnumbered}\n\nTo combine or concatenate multiple strings into one string, we suggest using `str_c` from **stringr**. If you have distinct character values to combine, simply provide them as unique arguments, separated by commas.     \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"String1\", \"String2\", \"String3\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"String1String2String3\"\n```\n:::\n:::\n\n\nThe argument `sep = ` inserts a character value between each of the arguments you provided (e.g. inserting a comma, space, or newline `\"\\n\"`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"String1\", \"String2\", \"String3\", sep = \", \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"String1, String2, String3\"\n```\n:::\n:::\n\n\nThe argument `collapse = ` is relevant if you are inputting multiple *vectors* as arguments to `str_c()`. It is used to separate the elements of what would be an *output* vector, such that the output vector only has one long character element.   \n\nThe example below shows the combination of two vectors into one (first names and last names). Another similar example might be jurisdictions and their case counts. In this example:  \n\n* The `sep = ` value appears between each first and last name  \n* The `collapse = ` value appears between each person  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_names <- c(\"abdul\", \"fahruk\", \"janice\") \nlast_names  <- c(\"hussein\", \"akinleye\", \"okeke\")\n\n# sep displays between the respective input strings, while collapse displays between the elements produced\nstr_c(first_names, last_names, sep = \" \", collapse = \";  \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abdul hussein;  fahruk akinleye;  janice okeke\"\n```\n:::\n:::\n\n\nNote: Depending on your desired display context, when printing such a combined string with newlines, you may need to wrap the whole phrase in `cat()` for the newlines to print properly:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# For newlines to print correctly, the phrase may need to be wrapped in cat()\ncat(str_c(first_names, last_names, sep = \" \", collapse = \";\\n\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabdul hussein;\nfahruk akinleye;\njanice okeke\n```\n:::\n:::\n\n\n\n\n<!-- ======================================================= -->\n### Dynamic strings {.unnumbered}\n\nUse `str_glue()` to insert dynamic R code into a string. This is a very useful function for creating dynamic plot captions, as demonstrated below.  \n\n* All content goes between double quotation marks `str_glue(\"\")`  \n* Any dynamic code or references to pre-defined values are placed within curly brackets `{}` within the double quotation marks. There can be many curly brackets in the same `str_glue()` command.  \n* To display character quotes '', use *single* quotes within the surrounding double quotes (e.g. when providing date format - see example below)  \n* Tip: You can use `\\n` to force a new line  \n* Tip: You use `format()` to adjust date display, and use `Sys.Date()` to display the current date  \n\nA simple example, of a dynamic plot caption:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_glue(\"Data include {nrow(linelist)} cases and are current to {format(Sys.Date(), '%d %b %Y')}.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData include 5888 cases and are current to 18 Feb 2024.\n```\n:::\n:::\n\n\nAn alternative format is to use placeholders within the brackets and define the code in separate arguments at the end of the `str_glue()` function, as below. This can improve code readability if the text is long.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_glue(\"Linelist as of {current_date}.\\nLast case hospitalized on {last_hospital}.\\n{n_missing_onset} cases are missing date of onset and not shown\",\n         current_date = format(Sys.Date(), '%d %b %Y'),\n         last_hospital = format(as.Date(max(linelist$date_hospitalisation, na.rm=T)), '%d %b %Y'),\n         n_missing_onset = nrow(linelist %>% filter(is.na(date_onset)))\n         )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinelist as of 18 Feb 2024.\nLast case hospitalized on 30 Apr 2015.\n256 cases are missing date of onset and not shown\n```\n:::\n:::\n\n\n\n**Pulling from a data frame**  \n\nSometimes, it is useful to pull data from a data frame and have it pasted together in sequence. Below is an example data frame. We will use it to to make a summary statement about the jurisdictions and the new and total case counts.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make case data frame\ncase_table <- data.frame(\n  zone        = c(\"Zone 1\", \"Zone 2\", \"Zone 3\", \"Zone 4\", \"Zone 5\"),\n  new_cases   = c(3, 0, 7, 0, 15),\n  total_cases = c(40, 4, 25, 10, 103)\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6d76456791a559fb1854\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6d76456791a559fb1854\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Zone 1\",\"Zone 2\",\"Zone 3\",\"Zone 4\",\"Zone 5\"],[3,0,7,0,15],[40,4,25,10,103]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>zone<\\/th>\\n      <th>new_cases<\\/th>\\n      <th>total_cases<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"name\":\"zone\",\"targets\":0},{\"name\":\"new_cases\",\"targets\":1},{\"name\":\"total_cases\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nUse `str_glue_data()`, which is specially made for taking data from data frame rows:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncase_table %>% \n  str_glue_data(\"{zone}: {new_cases} ({total_cases} total cases)\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZone 1: 3 (40 total cases)\nZone 2: 0 (4 total cases)\nZone 3: 7 (25 total cases)\nZone 4: 0 (10 total cases)\nZone 5: 15 (103 total cases)\n```\n:::\n:::\n\n\n\n**Combine strings across rows**  \n\nIf you are trying to \"roll-up\" values in a data frame column, e.g. combine values from multiple rows into just one row by pasting them together with a separator, see the section of the [De-duplication] page on [\"rolling-up\" values](#str_rollup).  \n\n**Data frame to one line**  \n\nYou can make the statement appear in one line using `str_c()` (specifying the data frame and column names), and providing `sep = ` and `collapse = ` arguments.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(case_table$zone, case_table$new_cases, sep = \" = \", collapse = \";  \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Zone 1 = 3;  Zone 2 = 0;  Zone 3 = 7;  Zone 4 = 0;  Zone 5 = 15\"\n```\n:::\n:::\n\n\nYou could add the pre-fix text \"New Cases:\" to the beginning of the statement by wrapping with a separate `str_c()` (if \"New Cases:\" was within the original `str_c()` it would appear multiple times).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_c(\"New Cases: \", str_c(case_table$zone, case_table$new_cases, sep = \" = \", collapse = \";  \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"New Cases: Zone 1 = 3;  Zone 2 = 0;  Zone 3 = 7;  Zone 4 = 0;  Zone 5 = 15\"\n```\n:::\n:::\n\n\n\n\n\n\n### Unite columns  {#str_unite .unnumbered}\n\nWithin a data frame, bringing together character values from multiple columns can be achieved with `unite()` from **tidyr**. This is the opposite of `separate()`.  \n\nProvide the name of the new united column. Then provide the names of the columns you wish to unite.  \n\n* By default, the separator used in the united column is underscore `_`, but this can be changed with the `sep = ` argument.  \n* `remove = ` removes the input columns from the data frame (TRUE by default)  \n* `na.rm = ` removes missing values while uniting (FALSE by default)  \n\nBelow, we define a mini-data frame to demonstrate with:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  case_ID = c(1:6),\n  symptoms  = c(\"jaundice, fever, chills\",     # patient 1\n                \"chills, aches, pains\",        # patient 2 \n                \"fever\",                       # patient 3\n                \"vomiting, diarrhoea\",         # patient 4\n                \"bleeding from gums, fever\",   # patient 5\n                \"rapid pulse, headache\"),      # patient 6\n  outcome = c(\"Recover\", \"Death\", \"Death\", \"Recover\", \"Recover\", \"Recover\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_split <- separate(df, symptoms, into = c(\"sym_1\", \"sym_2\", \"sym_3\"), extra = \"merge\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 3 pieces. Missing pieces filled with `NA` in 2 rows [3, 4].\n```\n:::\n:::\n\n\nHere is the example data frame:  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-d8cf8e8938e5c04ef71e\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d8cf8e8938e5c04ef71e\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[1,2,3,4,5,6],[\"jaundice\",\"chills\",\"fever\",\"vomiting\",\"bleeding\",\"rapid\"],[\"fever\",\"aches\",null,\"diarrhoea\",\"from\",\"pulse\"],[\"chills\",\"pains\",null,null,\"gums, fever\",\"headache\"],[\"Recover\",\"Death\",\"Death\",\"Recover\",\"Recover\",\"Recover\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_ID<\\/th>\\n      <th>sym_1<\\/th>\\n      <th>sym_2<\\/th>\\n      <th>sym_3<\\/th>\\n      <th>outcome<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":0},{\"name\":\"case_ID\",\"targets\":0},{\"name\":\"sym_1\",\"targets\":1},{\"name\":\"sym_2\",\"targets\":2},{\"name\":\"sym_3\",\"targets\":3},{\"name\":\"outcome\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nBelow, we unite the three symptom columns:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_split %>% \n  unite(\n    col = \"all_symptoms\",         # name of the new united column\n    c(\"sym_1\", \"sym_2\", \"sym_3\"), # columns to unite\n    sep = \", \",                   # separator to use in united column\n    remove = TRUE,                # if TRUE, removes input cols from the data frame\n    na.rm = TRUE                  # if TRUE, missing values are removed before uniting\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  case_ID                all_symptoms outcome\n1       1     jaundice, fever, chills Recover\n2       2        chills, aches, pains   Death\n3       3                       fever   Death\n4       4         vomiting, diarrhoea Recover\n5       5 bleeding, from, gums, fever Recover\n6       6      rapid, pulse, headache Recover\n```\n:::\n:::\n\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Split {.unnumbered}  \n\nTo split a string based on a pattern, use `str_split()`. It evaluates the string(s) and returns a `list` of character vectors consisting of the newly-split values.\n\nThe simple example below evaluates one string and splits it into three. By default it returns an object of class `list` with one element (a character vector) for each string initially provided. If `simplify = TRUE` it returns a character matrix.  \n\nIn this example, one string is provided, and the function returns a list with one element - a character vector with three values.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(string = \"jaundice, fever, chills\",\n          pattern = \",\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"jaundice\" \" fever\"   \" chills\" \n```\n:::\n:::\n\n\nIf the output is saved, you can then access the nth split value with bracket syntax. To access a specific value you can use syntax like this: `the_returned_object[[1]][2]`, which would access the second value from the first evaluated string (\"fever\"). See the [R basics] page for more detail on accessing elements.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\npt1_symptoms <- str_split(\"jaundice, fever, chills\", \",\")\n\npt1_symptoms[[1]][2]  # extracts 2nd value from 1st (and only) element of the list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" fever\"\n```\n:::\n:::\n\n\nIf multiple strings are provided by `str_split()`, there will be more than one element in the returned list.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsymptoms <- c(\"jaundice, fever, chills\",     # patient 1\n              \"chills, aches, pains\",        # patient 2 \n              \"fever\",                       # patient 3\n              \"vomiting, diarrhoea\",         # patient 4\n              \"bleeding from gums, fever\",   # patient 5\n              \"rapid pulse, headache\")       # patient 6\n\nstr_split(symptoms, \",\")                     # split each patient's symptoms\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"jaundice\" \" fever\"   \" chills\" \n\n[[2]]\n[1] \"chills\" \" aches\" \" pains\"\n\n[[3]]\n[1] \"fever\"\n\n[[4]]\n[1] \"vomiting\"   \" diarrhoea\"\n\n[[5]]\n[1] \"bleeding from gums\" \" fever\"            \n\n[[6]]\n[1] \"rapid pulse\" \" headache\"  \n```\n:::\n:::\n\n\n\nTo return a \"character matrix\" instead, which may be useful if creating data frame columns, set the argument `simplify = TRUE` as shown below:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(symptoms, \",\", simplify = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                 [,2]         [,3]     \n[1,] \"jaundice\"           \" fever\"     \" chills\"\n[2,] \"chills\"             \" aches\"     \" pains\" \n[3,] \"fever\"              \"\"           \"\"       \n[4,] \"vomiting\"           \" diarrhoea\" \"\"       \n[5,] \"bleeding from gums\" \" fever\"     \"\"       \n[6,] \"rapid pulse\"        \" headache\"  \"\"       \n```\n:::\n:::\n\n\nYou can also adjust the number of splits to create with the `n = ` argument. For example, this restricts the number of splits to 2. Any further commas remain within the second values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split(symptoms, \",\", simplify = TRUE, n = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]                 [,2]            \n[1,] \"jaundice\"           \" fever, chills\"\n[2,] \"chills\"             \" aches, pains\" \n[3,] \"fever\"              \"\"              \n[4,] \"vomiting\"           \" diarrhoea\"    \n[5,] \"bleeding from gums\" \" fever\"        \n[6,] \"rapid pulse\"        \" headache\"     \n```\n:::\n:::\n\n\n*Note - the same outputs can be achieved with `str_split_fixed()`, in which you do not give the `simplify` argument, but must instead designate the number of columns (`n`).* \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split_fixed(symptoms, \",\", n = 2)\n```\n:::\n\n\n\n\n\n### Split columns {.unnumbered}  \n\nIf you are trying to split data frame column, it is best to use the `separate()` function from **dplyr**. It is used to split one character column into other columns.  \n\nLet's say we have a simple data frame `df` (defined and united in the [unite section](#str_unite)) containing a `case_ID` column, one character column with many symptoms, and one outcome column. Our goal is to separate the `symptoms` column into many columns - each one containing one symptom.  \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-27d5802fe149aed084af\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-27d5802fe149aed084af\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[1,2,3,4,5,6],[\"jaundice, fever, chills\",\"chills, aches, pains\",\"fever\",\"vomiting, diarrhoea\",\"bleeding from gums, fever\",\"rapid pulse, headache\"],[\"Recover\",\"Death\",\"Death\",\"Recover\",\"Recover\",\"Recover\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_ID<\\/th>\\n      <th>symptoms<\\/th>\\n      <th>outcome<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":0},{\"name\":\"case_ID\",\"targets\":0},{\"name\":\"symptoms\",\"targets\":1},{\"name\":\"outcome\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAssuming the data are piped into `separate()`, first provide the column to be separated. Then provide `into = ` as a vector `c( )` containing the *new* columns names, as shown below.  \n\n* `sep = ` the separator, can be a character, or a number (interpreted as the character position to split at) \n* `remove = ` FALSE by default, removes the input column  \n* `convert = ` FALSE by default, will cause string \"NA\"s to become `NA`  \n* `extra = ` this controls what happens if there are more values created by the separation than new columns named.  \n     * `extra = \"warn\"` means you will see a warning but it will drop excess values (**the default**)  \n     * `extra = \"drop\"` means the excess values will be dropped with no warning  \n     * **`extra = \"merge\"` will only split to the number of new columns listed in `into` - *this setting will preserve all your data***  \n\n\nAn example with `extra = \"merge\"` is below - no data is lost. Two new columns are defined but any third symptoms are left in the second new column:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# third symptoms combined into second new column\ndf %>% \n  separate(symptoms, into = c(\"sym_1\", \"sym_2\"), sep=\",\", extra = \"merge\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [3].\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  case_ID              sym_1          sym_2 outcome\n1       1           jaundice  fever, chills Recover\n2       2             chills   aches, pains   Death\n3       3              fever           <NA>   Death\n4       4           vomiting      diarrhoea Recover\n5       5 bleeding from gums          fever Recover\n6       6        rapid pulse       headache Recover\n```\n:::\n:::\n\n\nWhen the default `extra = \"drop\"` is used below, a warning is given but the third symptoms are lost:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# third symptoms are lost\ndf %>% \n  separate(symptoms, into = c(\"sym_1\", \"sym_2\"), sep=\",\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Additional pieces discarded in 2 rows [1, 2].\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [3].\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  case_ID              sym_1      sym_2 outcome\n1       1           jaundice      fever Recover\n2       2             chills      aches   Death\n3       3              fever       <NA>   Death\n4       4           vomiting  diarrhoea Recover\n5       5 bleeding from gums      fever Recover\n6       6        rapid pulse   headache Recover\n```\n:::\n:::\n\n\n\n<span style=\"color: orange;\">**_CAUTION:_** If you do not provide enough `into` values for the new columns, your data may be truncated.</span>  \n\n\n\n\n\n\n<!-- ======================================================= -->\n### Arrange alphabetically {.unnumbered} \n\nSeveral strings can be sorted by alphabetical order. `str_order()` returns the order, while `str_sort()` returns the strings in that order.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# strings\nhealth_zones <- c(\"Alba\", \"Takota\", \"Delta\")\n\n# return the alphabetical order\nstr_order(health_zones)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2\n```\n:::\n\n```{.r .cell-code}\n# return the strings in alphabetical order\nstr_sort(health_zones)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Alba\"   \"Delta\"  \"Takota\"\n```\n:::\n:::\n\n\nTo use a different alphabet, add the argument `locale = `. See the full list of locales by entering `stringi::stri_locale_list()` in the R console.  \n\n\n\n\n\n<!-- ======================================================= -->\n### base R functions {.unnumbered}\n\nIt is common to see **base** R functions `paste()` and `paste0()`, which concatenate vectors after converting all parts to character. They act similarly to `str_c()` but the syntax is arguably more complicated - in the parentheses each part is separated by a comma. The parts are either character text (in quotes) or pre-defined code objects (no quotes). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_beds <- 10\nn_masks <- 20\n\npaste0(\"Regional hospital needs \", n_beds, \" beds and \", n_masks, \" masks.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Regional hospital needs 10 beds and 20 masks.\"\n```\n:::\n:::\n\n\n`sep = ` and `collapse = ` arguments can be specified. `paste()` is simply `paste0()` with a default `sep = \" \"` (one space).  \n\n\n\n\n\n\n## Clean and standardise  \n\n\n<!-- ======================================================= -->\n### Change case {.unnumbered}\n\nOften one must alter the case/capitalization of a string value, for example names of jursidictions. Use `str_to_upper()`, `str_to_lower()`, and `str_to_title()`, from **stringr**, as shown below:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_upper(\"California\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CALIFORNIA\"\n```\n:::\n\n```{.r .cell-code}\nstr_to_lower(\"California\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"california\"\n```\n:::\n:::\n\n\nUsing *base** R, the above can also be achieved with `toupper()`, `tolower()`.  \n\n\n**Title case**  \n\nTransforming the string so each word is capitalized can be achieved with `str_to_title()`:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_title(\"go to the US state of california \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Go To The Us State Of California \"\n```\n:::\n:::\n\n\nUse `toTitleCase()` from the **tools** package to achieve more nuanced capitalization (words like \"to\", \"the\", and \"of\" are not capitalized).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntools::toTitleCase(\"This is the US state of california\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"This is the US State of California\"\n```\n:::\n:::\n\n\nYou can also use `str_to_sentence()`, which capitalizes only the first letter of the string.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_sentence(\"the patient must be transported\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The patient must be transported\"\n```\n:::\n:::\n\n\n\n\n### Pad length  {#str_pad .unnumbered}\n\nUse `str_pad()` to add characters to a string, to a minimum length. By default spaces are added, but you can also pad with other characters using the `pad = ` argument.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ICD codes of differing length\nICD_codes <- c(\"R10.13\",\n               \"R10.819\",\n               \"R17\")\n\n# ICD codes padded to 7 characters on the right side\nstr_pad(ICD_codes, 7, \"right\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R10.13 \" \"R10.819\" \"R17    \"\n```\n:::\n\n```{.r .cell-code}\n# Pad with periods instead of spaces\nstr_pad(ICD_codes, 7, \"right\", pad = \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R10.13.\" \"R10.819\" \"R17....\"\n```\n:::\n:::\n\n\nFor example, to pad numbers with leading zeros (such as for hours or minutes), you can pad the number to minimum length of 2 with `pad = \"0\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add leading zeros to two digits (e.g. for times minutes/hours)\nstr_pad(\"4\", 2, pad = \"0\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"04\"\n```\n:::\n\n```{.r .cell-code}\n# example using a numeric column named \"hours\"\n# hours <- str_pad(hours, 2, pad = \"0\")\n```\n:::\n\n\n\n### Truncate {.unnumbered} \n\n`str_trunc()` sets a maximum length for each string. If a string exceeds this length, it is truncated (shortened) and an ellipsis (...) is included to indicate that the string was previously longer. Note that the ellipsis *is* counted in the length. The ellipsis characters can be changed with the argument `ellipsis = `.  The optional `side = ` argument specifies which where the ellipsis will appear within the truncated string (\"left\", \"right\", or \"center\").  \n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginal <- \"Symptom onset on 4/3/2020 with vomiting\"\nstr_trunc(original, 10, \"center\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Symp...ing\"\n```\n:::\n:::\n\n\n\n### Standardize length {.unnumbered}\n\nUse `str_trunc()` to set a maximum length, and then use `str_pad()` to expand the very short strings to that truncated length. In the example below, 6 is set as the maximum length (one value is truncated), and then one very short value is padded to achieve length of 6.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ICD codes of differing length\nICD_codes   <- c(\"R10.13\",\n                 \"R10.819\",\n                 \"R17\")\n\n# truncate to maximum length of 6\nICD_codes_2 <- str_trunc(ICD_codes, 6)\nICD_codes_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R10.13\" \"R10...\" \"R17\"   \n```\n:::\n\n```{.r .cell-code}\n# expand to minimum length of 6\nICD_codes_3 <- str_pad(ICD_codes_2, 6, \"right\")\nICD_codes_3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"R10.13\" \"R10...\" \"R17   \"\n```\n:::\n:::\n\n\n\n### Remove leading/trailing whitespace {.unnumbered}  \n\nUse `str_trim()` to remove spaces, newlines (`\\n`) or tabs (`\\t`) on sides of a string input. Add `\"right\"` `\"left\"`, or `\"both\"` to the command to specify which side to trim (e.g. `str_trim(x, \"right\")`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ID numbers with excess spaces on right\nIDs <- c(\"provA_1852  \", # two excess spaces\n         \"provA_2345\",   # zero excess spaces\n         \"provA_9460 \")  # one excess space\n\n# IDs trimmed to remove excess spaces on right side only\nstr_trim(IDs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"provA_1852\" \"provA_2345\" \"provA_9460\"\n```\n:::\n:::\n\n\n\n### Remove repeated whitespace within {.unnumbered}  \n\nUse `str_squish()` to remove repeated spaces that appear *inside* a string. For example, to convert double spaces into single spaces. It also removes spaces, newlines, or tabs on the outside of the string like `str_trim()`.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# original contains excess spaces within string\nstr_squish(\"  Pt requires   IV saline\\n\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Pt requires IV saline\"\n```\n:::\n:::\n\n\nEnter `?str_trim`, `?str_pad` in your R console to see further details.  \n\n\n### Wrap into paragraphs {.unnumbered}  \n\nUse `str_wrap()` to wrap a long unstructured text into a structured paragraph with fixed line length. Provide the ideal character length for each line, and it applies an algorithm to insert newlines (`\\n`) within the paragraph, as seen in the example below.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\npt_course <- \"Symptom onset 1/4/2020 vomiting chills fever. Pt saw traditional healer in home village on 2/4/2020. On 5/4/2020 pt symptoms worsened and was admitted to Lumta clinic. Sample was taken and pt was transported to regional hospital on 6/4/2020. Pt died at regional hospital on 7/4/2020.\"\n\nstr_wrap(pt_course, 40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Symptom onset 1/4/2020 vomiting chills\\nfever. Pt saw traditional healer in\\nhome village on 2/4/2020. On 5/4/2020\\npt symptoms worsened and was admitted\\nto Lumta clinic. Sample was taken and pt\\nwas transported to regional hospital on\\n6/4/2020. Pt died at regional hospital\\non 7/4/2020.\"\n```\n:::\n:::\n\n\nThe **base** function `cat()` can be wrapped around the above command in order to print the output, displaying the new lines added.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(str_wrap(pt_course, 40))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSymptom onset 1/4/2020 vomiting chills\nfever. Pt saw traditional healer in\nhome village on 2/4/2020. On 5/4/2020\npt symptoms worsened and was admitted\nto Lumta clinic. Sample was taken and pt\nwas transported to regional hospital on\n6/4/2020. Pt died at regional hospital\non 7/4/2020.\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Handle by position { }\n\n\n### Extract by character position {.unnumbered}  \n\nUse `str_sub()` to return only a part of a string. The function takes three main arguments:  \n\n1) the character vector(s)  \n2) start position  \n3) end position  \n\nA few notes on position numbers:  \n\n* If a position number is positive, the position is counted starting from the left end of the string.  \n* If a position number is negative, it is counted starting from the right end of the string.  \n* Position numbers are inclusive.  \n* Positions extending beyond the string will be truncated (removed).  \n\nBelow are some examples applied to the string \"pneumonia\":  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# start and end third from left (3rd letter from left)\nstr_sub(\"pneumonia\", 3, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"e\"\n```\n:::\n\n```{.r .cell-code}\n# 0 is not present\nstr_sub(\"pneumonia\", 0, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"\"\n```\n:::\n\n```{.r .cell-code}\n# 6th from left, to the 1st from right\nstr_sub(\"pneumonia\", 6, -1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"onia\"\n```\n:::\n\n```{.r .cell-code}\n# 5th from right, to the 2nd from right\nstr_sub(\"pneumonia\", -5, -2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"moni\"\n```\n:::\n\n```{.r .cell-code}\n# 4th from left to a position outside the string\nstr_sub(\"pneumonia\", 4, 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"umonia\"\n```\n:::\n:::\n\n\n\n\n### Extract by word position {.unnumbered} \n\nTo extract the nth 'word', use `word()`, also from **stringr**. Provide the string(s), then the first word position to extract, and the last word position to extract.  \n\nBy default, the separator between 'words' is assumed to be a space, unless otherwise indicated with `sep = ` (e.g. `sep = \"_\"` when words are separated by underscores.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# strings to evaluate\nchief_complaints <- c(\"I just got out of the hospital 2 days ago, but still can barely breathe.\",\n                      \"My stomach hurts\",\n                      \"Severe ear pain\")\n\n# extract 1st to 3rd words of each string\nword(chief_complaints, start = 1, end = 3, sep = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"I just got\"       \"My stomach hurts\" \"Severe ear pain\" \n```\n:::\n:::\n\n\n\n### Replace by character position {.unnumbered} \n\n`str_sub()` paired with the assignment operator (`<-`) can be used to modify a part of a string: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nword <- \"pneumonia\"\n\n# convert the third and fourth characters to X \nstr_sub(word, 3, 4) <- \"XX\"\n\n# print\nword\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pnXXmonia\"\n```\n:::\n:::\n\n\nAn example applied to multiple strings (e.g. a column). Note the expansion in length of \"HIV\".  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- c(\"pneumonia\", \"tubercolosis\", \"HIV\")\n\n# convert the third and fourth characters to X \nstr_sub(words, 3, 4) <- \"XX\"\n\nwords\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pnXXmonia\"    \"tuXXrcolosis\" \"HIXX\"        \n```\n:::\n:::\n\n\n\n\n### Evaluate length  {.unnumbered}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_length(\"abc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nAlternatively, use `nchar()` from **base** R\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Patterns { }\n\nMany **stringr** functions work to detect, locate, extract, match, replace, and split based on a specified *pattern*.  \n\n\n\n<!-- ======================================================= -->\n### Detect a pattern {.unnumbered}\n\nUse `str_detect()` as below to detect presence/absence of a pattern within a string. First provide the string or vector to search in (`string = `), and then the pattern to look for (`pattern = `). Note that by default the search *is case sensitive*!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(string = \"primary school teacher\", pattern = \"teach\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nThe argument `negate = ` can be included and set to `TRUE` if you want to know if the pattern is NOT present.  \n \n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(string = \"primary school teacher\", pattern = \"teach\", negate = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nTo ignore case/capitalization, wrap the pattern within `regex()`, and *within* `regex()` add the argument `ignore_case = TRUE` (or `T` as shorthand).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(string = \"Teacher\", pattern = regex(\"teach\", ignore_case = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nWhen `str_detect()` is applied to a character vector or a data frame column, it will return TRUE or FALSE for each of the values. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a vector/column of occupations \noccupations <- c(\"field laborer\",\n                 \"university professor\",\n                 \"primary school teacher & tutor\",\n                 \"tutor\",\n                 \"nurse at regional hospital\",\n                 \"lineworker at Amberdeen Fish Factory\",\n                 \"physican\",\n                 \"cardiologist\",\n                 \"office worker\",\n                 \"food service\")\n\n# Detect presence of pattern \"teach\" in each string - output is vector of TRUE/FALSE\nstr_detect(occupations, \"teach\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\nIf you need to count the `TRUE`s, simply `sum()` the output. This counts the number `TRUE`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(str_detect(occupations, \"teach\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nTo search inclusive of multiple terms, include them separated by OR bars (`|`) within the `pattern = ` argument, as shown below:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(str_detect(string = occupations, pattern = \"teach|professor|tutor\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nIf you need to build a long list of search terms, you can combine them using `str_c()` and `sep = |`, then define this is a character object, and then reference the vector later more succinctly. The example below includes possible occupation search terms for front-line medical providers.     \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# search terms\noccupation_med_frontline <- str_c(\"medical\", \"medicine\", \"hcw\", \"healthcare\", \"home care\", \"home health\",\n                                \"surgeon\", \"doctor\", \"doc\", \"physician\", \"surgery\", \"peds\", \"pediatrician\",\n                               \"intensivist\", \"cardiologist\", \"coroner\", \"nurse\", \"nursing\", \"rn\", \"lpn\",\n                               \"cna\", \"pa\", \"physician assistant\", \"mental health\",\n                               \"emergency department technician\", \"resp therapist\", \"respiratory\",\n                                \"phlebotomist\", \"pharmacy\", \"pharmacist\", \"hospital\", \"snf\", \"rehabilitation\",\n                               \"rehab\", \"activity\", \"elderly\", \"subacute\", \"sub acute\",\n                                \"clinic\", \"post acute\", \"therapist\", \"extended care\",\n                                \"dental\", \"dential\", \"dentist\", sep = \"|\")\n\noccupation_med_frontline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"medical|medicine|hcw|healthcare|home care|home health|surgeon|doctor|doc|physician|surgery|peds|pediatrician|intensivist|cardiologist|coroner|nurse|nursing|rn|lpn|cna|pa|physician assistant|mental health|emergency department technician|resp therapist|respiratory|phlebotomist|pharmacy|pharmacist|hospital|snf|rehabilitation|rehab|activity|elderly|subacute|sub acute|clinic|post acute|therapist|extended care|dental|dential|dentist\"\n```\n:::\n:::\n\n\nThis command returns the number of occupations which contain any one of the search terms for front-line medical providers (`occupation_med_frontline`):  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(str_detect(string = occupations, pattern = occupation_med_frontline))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n\n\n**Base R string search functions**  \n\nThe **base** function `grepl()` works similarly to `str_detect()`, in that it searches for matches to a pattern and returns a logical vector. The basic syntax is `grepl(pattern, strings_to_search, ignore.case = FALSE, ...)`. One advantage is that the `ignore.case` argument is easier to write (there is no need to involve the `regex()` function).  \n\nLikewise, the **base** functions `sub()` and `gsub()` act similarly to `str_replace()`. Their basic syntax is: `gsub(pattern, replacement, strings_to_search, ignore.case = FALSE)`. `sub()` will replace the first instance of the pattern, whereas `gsub()` will replace all instances of the pattern.  \n\n\n#### Convert commas to periods {.unnumbered}  \n\nHere is an example of using `gsub()` to convert commas to periods in a vector of numbers. This could be useful if your data come from parts of the world other than the United States or Great Britain.  \n\nThe inner `gsub()` which acts first on `lengths` is converting any periods to no space \"\". The period character  \".\" has to be \"escaped\" with two slashes to actually signify a period, because \".\" in regex means \"any character\". Then, the result (with only commas) is passed to the outer `gsub()` in which commas are replaced by periods.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlengths <- c(\"2.454,56\", \"1,2\", \"6.096,5\")\n\nas.numeric(gsub(pattern = \",\",                # find commas     \n                replacement = \".\",            # replace with periods\n                x = gsub(\"\\\\.\", \"\", lengths)  # vector with other periods removed (periods escaped)\n                )\n           )                                  # convert outcome to numeric\n```\n:::\n\n\n\n\n\n\n### Replace all {.unnumbered}  \n\nUse `str_replace_all()` as a \"find and replace\" tool. First, provide the strings to be evaluated to `string = `, then the pattern to be replaced to `pattern = `, and then the replacement value to `replacement = `. The example below replaces all instances of \"dead\" with \"deceased\". Note, this IS case sensitive.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\noutcome <- c(\"Karl: dead\",\n            \"Samantha: dead\",\n            \"Marco: not dead\")\n\nstr_replace_all(string = outcome, pattern = \"dead\", replacement = \"deceased\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Karl: deceased\"      \"Samantha: deceased\"  \"Marco: not deceased\"\n```\n:::\n:::\n\n\nNotes:  \n\n* To replace a pattern with `NA`, use `str_replace_na()`.  \n* The function `str_replace()` replaces only the first instance of the pattern within each evaluated string.  \n\n\n\n\n\n<!-- ======================================================= -->\n### Detect within logic {.unnumbered}\n\n\n**Within `case_when()`**  \n\n`str_detect()` is often used within `case_when()` (from **dplyr**). Let's say `occupations` is a column in the linelist. The `mutate()` below creates a new column called `is_educator` by using conditional logic via `case_when()`. See the page on data cleaning to learn more about `case_when()`.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  mutate(is_educator = case_when(\n    # term search within occupation, not case sensitive\n    str_detect(occupations,\n               regex(\"teach|prof|tutor|university\",\n                     ignore_case = TRUE))              ~ \"Educator\",\n    # all others\n    TRUE                                               ~ \"Not an educator\"))\n```\n:::\n\n\nAs a reminder, it may be important to add exclusion criteria to the conditional logic (`negate = F`):  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df %>% \n  # value in new column is_educator is based on conditional logic\n  mutate(is_educator = case_when(\n    \n    # occupation column must meet 2 criteria to be assigned \"Educator\":\n    # it must have a search term AND NOT any exclusion term\n    \n    # Must have a search term\n    str_detect(occupations,\n               regex(\"teach|prof|tutor|university\", ignore_case = T)) &              \n    \n    # AND must NOT have an exclusion term\n    str_detect(occupations,\n               regex(\"admin\", ignore_case = T),\n               negate = TRUE                        ~ \"Educator\"\n    \n    # All rows not meeting above criteria\n    TRUE                                            ~ \"Not an educator\"))\n```\n:::\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Locate pattern position {.unnumbered}  \n\nTo locate the *first* position of a pattern, use `str_locate()`. It outputs a start and end position.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_locate(\"I wish\", \"sh\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     start end\n[1,]     5   6\n```\n:::\n:::\n\n\nLike other `str` functions, there is an \"_all\" version (`str_locate_all()`) which will return the positions of *all* instances of the pattern within each string. This outputs as a `list`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nphrases <- c(\"I wish\", \"I hope\", \"he hopes\", \"He hopes\")\n\nstr_locate(phrases, \"h\" )     # position of *first* instance of the pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     start end\n[1,]     6   6\n[2,]     3   3\n[3,]     1   1\n[4,]     4   4\n```\n:::\n\n```{.r .cell-code}\nstr_locate_all(phrases, \"h\" ) # position of *every* instance of the pattern\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n     start end\n[1,]     6   6\n\n[[2]]\n     start end\n[1,]     3   3\n\n[[3]]\n     start end\n[1,]     1   1\n[2,]     4   4\n\n[[4]]\n     start end\n[1,]     4   4\n```\n:::\n:::\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Extract a match {.unnumbered}  \n\n`str_extract_all()` returns the matching patterns themselves, which is most useful when you have offered several patterns via \"OR\" conditions. For example, looking in the string vector of occupations (see previous tab) for *either* \"teach\", \"prof\", or \"tutor\".\n\n`str_extract_all()` returns a `list` which contains *all matches* for each evaluated string. See below how occupation 3 has two pattern matches within it.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(occupations, \"teach|prof|tutor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\ncharacter(0)\n\n[[2]]\n[1] \"prof\"\n\n[[3]]\n[1] \"teach\" \"tutor\"\n\n[[4]]\n[1] \"tutor\"\n\n[[5]]\ncharacter(0)\n\n[[6]]\ncharacter(0)\n\n[[7]]\ncharacter(0)\n\n[[8]]\ncharacter(0)\n\n[[9]]\ncharacter(0)\n\n[[10]]\ncharacter(0)\n```\n:::\n:::\n\n\n\n`str_extract()` extracts *only the first match* in each evaluated string, producing a character vector with one element for each evaluated string. It returns `NA` where there was no match. The `NA`s can be removed by wrapping the returned vector with `na.exclude()`. Note how the second of occupation 3's matches is not shown.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(occupations, \"teach|prof|tutor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] NA      \"prof\"  \"teach\" \"tutor\" NA      NA      NA      NA      NA     \n[10] NA     \n```\n:::\n:::\n\n\n<!-- ======================================================= -->\n### Subset and count {.unnumbered}  \n\nAligned functions include `str_subset()` and `str_count()`.  \n\n`str_subset()` returns the actual values which contained the pattern: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_subset(occupations, \"teach|prof|tutor\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"university professor\"           \"primary school teacher & tutor\"\n[3] \"tutor\"                         \n```\n:::\n:::\n\n\n`str_count()` returns a vector of numbers: the **number of times** a search term appears in each evaluated value.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(occupations, regex(\"teach|prof|tutor\", ignore_case = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 1 2 1 0 0 0 0 0 0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Regex groups {.unnumbered}\n\nUNDER CONSTRUCTION\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Special characters  \n\n**Backslash `\\` as escape**  \n\nThe backslash `\\` is used to \"escape\" the meaning of the next character. This way, a backslash can be used to have a quote mark display *within* other quote marks (`\\\"`) - the middle quote mark will not \"break\" the surrounding quote marks.  \n\nNote - thus, if you want to *display* a backslash, you must escape it's meaning with *another* backslash. So you must write two backslashes `\\\\` to display one.  \n\n**Special characters**  \n\nSpecial character | Represents  \n----------------- | --------------------------------------------------------------    \n`\"\\\\\"` | backslash  \n`\"\\n\"` | a new line (newline)   \n`\"\\\"\"` | double-quote *within* double quotes  \n`'\\''` | single-quote *within* single quotes  \n`\"\\`\"` | grave accent  \n`\"\\r\"` | carriage return  \n`\"\\t\"` | tab  \n`\"\\v\"` | vertical tab \n`\"\\b\"` | backspace  \n\n\nRun `?\"'\"` in the R Console to display a complete list of these special characters (it will appear in the RStudio Help pane). \n\n\n\n<!-- ======================================================= -->\n## Regular expressions (regex) \n\n\n<!-- ======================================================= -->\n## Regex and special characters { } \n\nRegular expressions, or \"regex\", is a concise language for describing patterns in strings. If you are not familiar with it, a regular expression can look like an alien language. Here we try to de-mystify this language a little bit.  \n\n*Much of this section is adapted from [this tutorial](https://towardsdatascience.com/a-gentle-introduction-to-regular-expressions-with-r-df5e897ca432) and [this cheatsheet](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf)*. We selectively adapt here knowing that this handbook might be viewed by people without internet access to view the other tutorials.    \n\n\nA regular expression is often applied to extract specific patterns from \"unstructured\" text - for example medical notes, chief complaints, patient history, or other free text columns in a data frame  \n\nThere are four basic tools one can use to create a basic regular expression:  \n\n1) Character sets  \n2) Meta characters  \n3) Quantifiers  \n4) Groups  \n\n\n**Character sets**  \n\nCharacter sets, are a way of expressing listing options for a character match, within brackets. So any a match will be triggered if any of the characters within the brackets are found in the string. For example, to look for vowels one could use this character set: \"[aeiou]\". Some other common character sets are:  \n\nCharacter set | Matches for  \n----------------- | --------------------------------------------------------------    \n`\"[A-Z]\"` | any single capital letter  \n`\"[a-z]\"` | any single lowercase letter  \n`\"[0-9]\"` | any digit  \n`[:alnum:]` | any alphanumeric character  \n`[:digit:]` | any numeric digit  \n`[:alpha:]` | any letter (upper or lowercase)  \n`[:upper:]` | any uppercase letter  \n`[:lower:]` | any lowercase letter  \n\n\nCharacter sets can be combined within one bracket (no spaces!), such as `\"[A-Za-z]\"` (any upper or lowercase letter), or another example `\"[t-z0-5]\"` (lowercase t through z OR number 0 through 5).  \n\n\n\n**Meta characters**  \n\nMeta characters are shorthand for character sets. Some of the important ones are listed below:  \n\nMeta character | Represents  \n----------------- | --------------------------------------------------------------    \n`\"\\\\s\"` | a single space  \n`\"\\\\w\"` | any single alphanumeric character (A-Z, a-z, or 0-9)  \n`\"\\\\d\"` | any single numeric digit (0-9)  \n\n\n**Quantifiers**  \n\nTypically you do not want to search for a match on only one character. Quantifiers allow you to designate the length of letters/numbers to allow for the match.  \n\nQuantifiers are numbers written within curly brackets `{ }` *after* the character they are quantifying, for example,  \n\n* `\"A{2}\"` will return instances of **two** capital A letters.  \n* `\"A{2,4}\"` will return instances of **between two and four** capital A letters *(do not put spaces!)*.  \n* `\"A{2,}\"` will return instances of **two or more** capital A letters.  \n* `\"A+\"` will return instances of **one or more** capital A letters (group extended until a different character is encountered).  \n* Precede with an `*` asterisk to return **zero or more** matches (useful if you are not sure the pattern is present)  \n\n\nUsing the `+` plus symbol as a quantifier, the match will occur until a different character is encountered. For example, this expression will return all *words* (alpha characters: `\"[A-Za-z]+\"`  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# test string for quantifiers\ntest <- \"A-AA-AAA-AAAA\"\n```\n:::\n\n\nWhen a quantifier of {2} is used, only pairs of consecutive A's are returned. Two pairs are identified within `AAAA`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(test, \"A{2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"AA\" \"AA\" \"AA\" \"AA\"\n```\n:::\n:::\n\n\nWhen a quantifier of {2,4} is used, groups of consecutive A's that are two to four in length are returned.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(test, \"A{2,4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"AA\"   \"AAA\"  \"AAAA\"\n```\n:::\n:::\n\n\nWith the quantifier `+`, groups of **one or more** are returned:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(test, \"A+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"A\"    \"AA\"   \"AAA\"  \"AAAA\"\n```\n:::\n:::\n\n\n**Relative position**  \n\nThese express requirements for what precedes or follows a pattern. For example, to extract sentences, \"two numbers that are followed by a period\" (`\"\"`).  (?<=\\\\.)\\\\s(?=[A-Z]) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(test, \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"A\" \"-\" \"A\" \"A\" \"-\" \"A\" \"A\" \"A\" \"-\" \"A\" \"A\" \"A\" \"A\"\n```\n:::\n:::\n\n\nPosition statement | Matches to  \n----------------- | --------------------------------------------------------------    \n`\"(?<=b)a\"` | \"a\" that **is preceded** by a \"b\"  \n`\"(?<!b)a\"` | \"a\" that **is NOT preceded** by a \"b\"  \n`\"a(?=b)\"` | \"a\" that **is followed** by a \"b\"  \n`\"a(?!b)\"` | \"a\" that **is NOT followed** by a \"b\"  \n\n\n\n\n\n**Groups**  \n\nCapturing groups in your regular expression is a way to have a more organized output upon extraction.  \n\n\n\n\n**Regex examples**  \n\nBelow is a free text for the examples. We will try to extract useful information from it using a regular expression search term.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\npt_note <- \"Patient arrived at Broward Hospital emergency ward at 18:00 on 6/12/2005. Patient presented with radiating abdominal pain from LR quadrant. Patient skin was pale, cool, and clammy. Patient temperature was 99.8 degrees farinheit. Patient pulse rate was 100 bpm and thready. Respiratory rate was 29 per minute.\"\n```\n:::\n\n\nThis expression matches to all words (any character until hitting non-character such as a space):  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(pt_note, \"[A-Za-z]+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"Patient\"     \"arrived\"     \"at\"          \"Broward\"     \"Hospital\"   \n [6] \"emergency\"   \"ward\"        \"at\"          \"on\"          \"Patient\"    \n[11] \"presented\"   \"with\"        \"radiating\"   \"abdominal\"   \"pain\"       \n[16] \"from\"        \"LR\"          \"quadrant\"    \"Patient\"     \"skin\"       \n[21] \"was\"         \"pale\"        \"cool\"        \"and\"         \"clammy\"     \n[26] \"Patient\"     \"temperature\" \"was\"         \"degrees\"     \"farinheit\"  \n[31] \"Patient\"     \"pulse\"       \"rate\"        \"was\"         \"bpm\"        \n[36] \"and\"         \"thready\"     \"Respiratory\" \"rate\"        \"was\"        \n[41] \"per\"         \"minute\"     \n```\n:::\n:::\n\n\nThe expression `\"[0-9]{1,2}\"` matches to consecutive numbers that are 1 or 2 digits in length. It could also be written `\"\\\\d{1,2}\"`, or `\"[:digit:]{1,2}\"`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(pt_note, \"[0-9]{1,2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"18\" \"00\" \"6\"  \"12\" \"20\" \"05\" \"99\" \"8\"  \"10\" \"0\"  \"29\"\n```\n:::\n:::\n\n\n<!-- This expression will extract all sentences (assuming first letter is capitalized, and the sentence ends with a period). The pattern reads in English as: \"A capital letter followed by some lowercase letters, a space, some letters, a space,     -->\n\n<!-- ```{r} -->\n<!-- str_extract_all(pt_note, \"[A-Z][a-z]+\\\\s\\\\w+\\\\s\\\\d{1,2}\\\\s\\\\w+\\\\s*\\\\w*\") -->\n<!-- ``` -->\n\n\nYou can view a useful list of regex expressions and tips on page 2 of [this cheatsheet](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf)  \n\nAlso see this [tutorial](https://towardsdatascience.com/a-gentle-introduction-to-regular-expressions-with-r-df5e897ca432).  \n\n\n\n\n<!-- ======================================================= -->\n## Resources { }\n\nA reference sheet for **stringr** functions can be found [here](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf)\n\n\nA vignette on **stringr** can be found [here](\nhttps://cran.r-project.org/web/packages/stringr/vignettes/stringr.html)\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.js\"></script>\r\n<link href=\"../site_libs/selectize-0.12.0/selectize.bootstrap3.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/selectize-0.12.0/selectize.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}