{
  "hash": "0ef3110998c9a10d4f90255bef9ff1be",
  "result": {
    "markdown": "# Version control and collaboration with Git and Github\n\nThis chapter presents an overview of using Git to collaborate with others.\nMore extensive tutorials can be\nfound at the bottom in the Resources section.\n\n## What is Git?\n\nGit is a **version control** software that allows tracking changes in a\nfolder. It can be used like the \"track change\" option in Word, LibreOffice or\nGoogle docs, but for all types of files. It is one of the most powerful\nand most used options for version control.\n\n**Why have I never heard of it? -** While people with a developer\nbackground routinely learn to use version control software (Git,\nMercurial, Subversion or others), few of us from\nquantitative disciplines are taught these skills. Consequently, most epidemiologists never\nhear of it during their studies, and have to learn it on the fly.\n\n**Wait, I heard of Github, is it the same?** - Not exactly, but you\noften use them together, and we will show you how to. In short:\n\n-   **Git** is the version control system, a piece of software. You can use it\n    locally on your computer or to synchronize a folder with a\n    host **website**. By default, one uses a terminal to give Git\n    instructions in command-line.\n\n-   You can use a **Git client/interface** to avoid the command-line and\n    perform the same actions (at least for the simple, super common\n    ones).\n\n-   If you want to store your folder in a **host website** to\n    collaborate with others, you may create an account at Github,\n    Gitlab, Bitbucket or others.\n\nSo you could use the client/interface **Github Desktop**, which uses\n**Git** in the background to manage your files, both locally on your\ncomputer, and remotely on a **Github** server.\n\n## Why use the combo Git and Github?\n\nUsing **Git** facilitates:\n\n1)  Archiving documented versions with incremental changes so that you\n    can easily revert backwards to any previous state\n2)  Having parallel *branches*, i.e. developing/\"working\" versions with\n    structured ways to integrate the changes after review\n\nThis can be done locally on your computer, even if you don't collaborate\nwith other people. Have you ever:\n\n-   regretted having deleted a section of code, only to realize two\n    months later that you actually needed it?\n\n\n-   come back on a project that had been on pause and attempted to\n    remember whether you had made that tricky modification in one of the\n    models?\n\n-   had a *file model_1.R* and another file *model_1\\_test.R* and a file\n    *model_1\\_not_working.R* to try things out?\n\n-   had a file *report.Rmd*, a file *report_full.Rmd*, a file\n    *report_true_final.Rmd*, a file *report_final_20210304.Rmd*, a file\n    *report_final_20210402.Rmd* and cursed your archiving skills?\n\nGit will help with all that, and is worth to learn for that alone.\n\n\nHowever, it becomes even more powerful when used with a online repository\nsuch as Github to support **collaborative projects**. This facilitates:\n\n-   Collaboration: others can review, comment on, and\n    accept/decline changes\n\n-   Sharing your code, data, and outputs, and invite feedback\n    from the public (or privately, with your team)\n\nand avoids:\n\n-   \"Oops, I forgot to send the last version and now you need to\n    redo two days worth of work on this new file\"\n\n-   Mina, Henry and Oumar all worked at the same time on one script and\n    need to manually merge their changes\n\n-   Two people try to modify the same file on Dropbox and Sharepoint \n    and this creates a synchronization error.\n\n### This sounds complicated, I am not a programmer {-}\n\nIt can be. Examples of advanced uses can be quite scary. However, much\nlike R, or even Excel, you don't need to become an expert to reap the\nbenefits of the tool. Learning a *small number of functions and notions*\nlets you track your changes, synchronize your files on a online\nrepository and collaborate with your colleagues in a very short amount\nof time.\n\nDue to the learning curve, emergency context may not be the best of time\nto learn these tools. But learning can be achieved by steps. Once you acquire \na couple of notions, your workflow can be quite efficient and fast.\nIf you are not working on a project where collaborating with people\nthrough Git is a necessity, **it is actually a good time to get\nconfident using it** in solo before diving in collaboration.\n\n## Setup\n\n### Install Git {.unnumbered}\n\n*Git* is the engine behind the scenes on your computer, which tracks\nchanges, branches (versions), merges, and reverting. **You must first\ninstall *Git* from <https://git-scm.com/downloads>.**\n\n### Install an interface (optional but recommended) {.unnumbered}\n\nGit has its own language of commands, which can be typed into a command\nline terminal. However, there are many clients/interfaces and as non-developpers, in your\nday-to-day use, you will rarely _need_ to interact with Git directly and \ninterface usually provide nice visualisation tools for file modifications or branches. \n\nMany options exist, on all OS, from beginner friendly to more complex ones. \nGood options for beginners include the RStudio Git pane and \n[Github Desktop](https://desktop.github.com/), which we will showcase in \nthis chapter.\nIntermediate (more powerfull, but more complex) options include Source Tree, \nGitkracken, Smart Git and others.\n\nQuick explanation on [Git clients](https:/happygitwithr.com/git-client.html#git-client).\n\n*Note: since interfaces actually all use Git internally, you can try several of\nthem, switch from one to another on a given project, use the console punctually \nfor an action your interface does not support, or even perform any number of \nactions online on Github.*\n\nAs noted below, you may occasionally have to write Git commands into a\nterminal such as the RStudio terminal pane (a tab adjacent to the R\nConsole) or the Git Bash terminal.\n\n\n### Github account {.unnumbered}\n\nSign-up for a free account at [github.com](github.com).\n\nYou may be offered to set-up two-factor authentication with an app on\nyour phone. Read more in the Github [help\ndocuments](https://docs.github.com/en/github/authenticating-to-github/securing-your-account-with-two-factor-authentication-2fa).\n\nIf you use Github Desktop, you can enter your Gitub credentials after\ninstallation following these\n[steps](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/authenticating-to-github).\nIf you don't do it know, credentials will be asked later when you try to\nclone a project from Github.\n\n## Vocabulary, concepts and basic functions\n\nAs when learning R, there is a bit of vocabulary to remember to\nunderstand Git. Here are the [basics to get you\ngoing](https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/)\n/ [interactive tutorial](learngitbranching.js.org). In the next\nsections, we will show how to use interfaces, but it is good\nto have the vocabulary and concepts in mind, to build your mental model,\nand as you'll need them when using interfaces anyway.\n\n### Repository {.unnumbered}\n\nA Git *repository* (\"*repo*\") is a folder that contains all the\nsub-folders and files for your project (data, code, images, etc.) and\ntheir revision histories. When you begin tracking changes in the\nrepository with it, Git will create a hidden folder that contains\nall tracking information. A typical Git repository is\nyour *R Project* folder (see handbook page on [R projects]).\n\nWe will show how to create (_initialize_) a Git repository \nfrom Github, Github Desktop or Rstudio in the next\nsections.\n\n### Commits {.unnumbered}\n\nA *commit* is a **snapshot** of the project at a given time. \nWhen you make a change to the project, you will make a new commit\nto track the changes (the delta) made to your\nfiles. For example, perhaps you edited some lines of code and updated a\nrelated dataset. Once your changes are saved, you can bundle these\nchanges together into one \"commit\".\n\nEach commit has a unique ID (a *hash*). For version control purposes,\nyou can revert your project back in time based on commits, so it is best\nto keep them relatively small and coherent. You will also attach a brief\ndescription of the changes called the \"commit message\".\n\n*Staged changes*? To stage changes is to add them to the *staging area*\nin preparation for the next commit. The idea is that you can finely\ndecide which changes to include in a given commit. For example, if you\nworked on model specification in one script, and later on a figure in\nanother script, it would make sense to have two different commits (it would be easier\nin case you wanted to revert the changes on the figure but not the model).\n\n\n### Branches {.unnumbered}\n\nA branch represents an *independent line* of changes in your repo, a\nparallel, alternate version of your project files. \n\n\nBranches are useful to test changes before they are incorporated into\nthe *main* branch, which is usually the primary/final/\"live\" version of\nyour project. When you are done experimenting on a branch, you can bring\nthe changes into your *main* branch, by *merging* it, or delete it, if\nthe changes were not so successful.\n\n*Note: you do not have to collaborate with other people to use branches,\nnor need to have a remote online repository.*\n\n\n\n### Local and remote repositories {.unnumbered}\n\nTo *clone* is to create a copy of a Git repository in another place.\n\nFor example, you can *clone* a online repository _from_ Github locally on\nyour computer, or begin with a local repository and clone\nit online _to_ Github.\n\nWhen you have cloned a repository, the project files exist in\ntwo places:\n\n-   the *LOCAL* repository on your physical computer. This\n    is where you make the actual changes to the files/code.\n\n-   the *REMOTE*, online repository: the versions of your project files\n    in the Github repository (or on any other web\n    host).\n\nTo synchronize these repositories, we will use more functions. Indeed,\nunlike Sharepoint, Dropbox or other synchronizing software, Git does\nnot automatically update your local repository based or what's online,\nor vice-versa. You get to choose when and how to synchronize.\n\n-   `git fetch` downloads the new changes from the remote repository but does not \nchange your local repository. Think of it as checking the state of the remote repository.\n\n-   `git pull` downloads the new changes from the remote repositories\n    and update your local repository.\n\n-   When you have made one or several commits locally, you can\n    `git push` the commits to the remote repository. This sends your\n    changes on Github so that other people can see and pull them if\n    they want to.\n\n\n## Get started: create a new repository\n\nThere are many ways to create new repositories. You can do it from the\nconsole, from Github, from an interface.\n\nTwo general approaches to set-up are:\n\n\n-   Create a new R Project from an existing or new Github repository\n    (*preferred for beginners*), or\n-   Create a Github repository for an existing R project\n\n\n### Start-up files {.unnumbered}\n\nWhen you create a new repository, you can optionally create \nall of the below files, or you can add them to your repository at a later stage.\nThey would typically live in the \"root\" folder of the repository.\n\n-   A *README* file is a file that someone can read to understand why\n    your project exists and what else they should know to use it. It\n    will be empty at first, but you should complete it later.\n\n-   A *.gitignore* file is a text file where each line would contain\n    folders or files that Git should ignore (not track changes). Read\n    more about it and see examples\n    [here](https://www.freecodecamp.org/news/gitignore-what-is-it-and-how-to-add-to-repo/).\n\n-   You can choose a *license* for your work, so that other people\n    know under which conditions they can use or reproduce your work. For more\n    information, see the [Creative Commons\n    licenses](https://creativecommons.org/licenses/).\n\n### Create a new repository in Github {.unnumbered}\n\nTo create a new repository, log into Github and look for the green\nbutton to create a new repository. This now empty repository can be\ncloned locally to your computer (see next section).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_new.png){fig-align='center' width=276}\n:::\n:::\n\n\nYou must choose if you want your repository to be **public** (visible to\neveryone on the internet) or **private** (only visible to those with\npermission). This has important implications if your data are sensitive.\nIf your repository is private you will encounter some quotas in advanced\nspecial circumstances, such as if you are using Github *actions* to\nautomatically run your code in the cloud.\n \n### Clone from a Github repository {.unnumbered}\n\nYou can *clone* an existing Github repository to create\na new local R project on your computer.\n\nThe Github repository could be one that already exists and contains\ncontent, or could be an empty repository that you just created. In this\nlatter case you are essentially creating the Github repo and local R\nproject at the same time (see instructions above).\n\n_Note_: if you do not have contributing rights on a Github repository, \nit is possible to first _fork_ the repository to your profile, and then\nproceed with the other actions. Forking is explained at the end of this \nchapter, but we recommend that you read the other sections first.\n\nStep 1: Navigate in Github to the repository, click on the green \"**Code**\"\nbutton and copy the **HTTPS clone URL** (see image below)\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_clone.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\nThe next step can be performed in any interface. We will illustrate with\nRstudio and Github desktop.\n\n#### In Rstudio {.unnumbered}\n\nIn RStudio, start a new R project by clicking *File \\> New Project \\>\nVersion Control \\> Git*\n\n-   When prompted for the \"Repository URL\", paste the HTTPS URL from\n    Github\\\n-   Assign the R project a short, informative name\\\n-   Choose where the new R Project will be saved locally\\\n-   Check \"Open in new session\" and click \"Create project\"\n\n\nYou are now in a new, local, RStudio project that is a clone of the\nGithub repository. This local project and the Github repository are now\nlinked.\n\n#### In Github Desktop {.unnumbered}\n\n-   Click on *File \\> Clone a repository*\n\n-   Select the URL tab\n\n-   Paste the HTTPS URL from Github in the first box\n\n-   Select the folder in which you want to have your local repository\n\n-   Click \"CLONE\"\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_clone_desktop.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n### New Github repo from existing R project {.unnumbered}\n\nAn alternative setup scenario is that you have an existing R project\nwith content, and you want to create a Github repository for it.\n\n1)  Create a new, empty Github repository for the project (see\n    instructions above)\\\n2)  Clone this repository locally (see HTTPS instructions above)\\\n3)  Copy all the content from your pre-existing R\n    project (codes, data, etc.) into this new empty, local, repository (e.g. use copy and paste).\\\n4)  Open your new project in RStudio, and go to the Git pane. The new files should\n    register as file changes, now tracked by Git. Therefore, you can\n    bundle these changes as a *commit* and *push* them up to Github.\n    Once *pushed*, the repository on Github will reflect all the files.\n    \nSee the Github workflow section below for details on this process.\n\n### What does it look like now? {.unnumbered}\n\n#### In RStudio {-}\n\nOnce you have cloned a Github repository to a new R project, \nyou now see in RStudio a \"Git\" tab. This tab appears in the same RStudio pane\nas your R Environment:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/Git_console.png){fig-align='center' width=75% height=75%}\n:::\n:::\n\n\nPlease note the buttons circled in the image above, as they will be\nreferenced later (from left to right):\n\n-   Button to *commit* the saved file changes to the local\n    branch (this will open a new window)\n-   Blue arrow to *pull* (update your local version of the branch with\n    any changes made on the remote/Github version of that branch)\n-   Green arrow to *push* (send any commits/changes for your local\n    version of the branch to the remote/Github version of that branch)\n-   The Git tab in RStudio\n-   Button to create a NEW branch using whichever local branch is shown\n    to the right as the base. *You almost always want to branch off from\n    the main branch (after you first pull to update the main branch)*\n-   The branch you are currently working in\n-   Changes you made to code or other files will appear below\n\n#### In Github Desktop {-}\n\nGithub Desktop is an independent application that allows you to manage\nall your repositories. When you open it, the interface allows you to\nchoose the repository you want to work on, and then to perform basic Git\nactions from there.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_interface.png){fig-align='center' width=75% height=75%}\n:::\n:::\n\n\n\n## Git + Github workflow\n\n### Process overview {.unnumbered}\n\nOnce you have completed the setup (described above), you will have a\nGithub repo that is connected (*cloned*) to a local R project. The\n*main* branch (created by default) is the so-called \"live\" version of\n*all* the files. When you want to make modifications, it is a good\npractice to create a *new branch* from the *main* branch (like \"Make a\nCopy\"). This is a typical workflow in Git because creating a branch is\neasy and fast.\n\n\nA typical workflow is as follow:\n\n1.  Make sure that your local repository is up-to-date, update it if\n    not\n\n2.  Go to the branch you were working on previously, or create a new\n    branch to try out some things\n\n\n3.  Work on the files locally on your computer, make one or several\n    commits to this branch\n\n4.  Update the remote version of the branch with your changes (push)\n\n5.  When you are satisfied with your branch, you can merge the online\n    version of the working branch into the online \"main\" branch to\n    transfer the changes\n\nOther team members may be doing the same thing with their own branches,\nor perhaps contributing commits into your working branch as well. \n\nWe go through the above process step-by-step in more detail below.\nHere is a schematic we've developed - it's in the format of a two-way\ntable so it should help epidemiologists understand.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_table.png){fig-align='center' width=100% height=150%}\n:::\n:::\n\n\nHere's [another diagram](https://build5nines.com/introduction-to-git-version-control-workflow/).\n\n*Note: until recently, the term \"master\" branch was used, but it is now\nreferred to as \"main\" branch.*\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/GitHub-Flow.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\nImage\n[source](https://build5nines.com/introduction-to-git-version-control-workflow/)\n\n## Create a new branch\n\nWhen you select a branch to work on, **Git resets your working directory\nthe way it was the last time you were on this branch**.\n\n### In Rstudio Git pane {.unnumbered}\n\nEnsure you are in the \"main\" branch, and then click on the purple icon to\ncreate a new branch (see image above).\n\n-   You will be prompted to name your branch with a one-word descriptive\n    name (can use underscores if needed).\n-   You will see that locally, you are still in the same R project, but\n    you are no longer working on the \"main\" branch.\n-   Once created, the new branch will also appear in the Github website\n    as a branch.\n    \nYou can visualize branches in the Git Pane in Rstudio after clicking on \"History\"\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_rstudio_branchs.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n\n### In Github Desktop {.unnumbered}\n\nThe process is very much similar, you are prompted to give your branch\na name. After, you will be prompted to \"Publish you branch to Github\" to\nmake the new branch appear in the remote repo as well.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_new_branch.png){fig-align='center' width=100% height=100%}\n:::\n:::\n\n\n### In console {.unnumbered}\n\nWhat is actually happening behind the scenes is that you create a new\nbranch with `git branch`, then go to the branch with\n`git checkout` (_i.e._ tell Git that your next commits will occur there). \nFrom your git repository:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit branch my-new-branch  # Create the new branch branch\ngit checkout my-new-branch # Go to the branch\ngit checkout -b my-new-branch # Both at once (shortcut)\n```\n:::\n\n\n\nFor more information about using the console, see the section on\nGit commands at the end.\n\n## Commit changes\n\nNow you can edit code, add new files, update datasets, etc.\n\n\nEvery one of your changes is tracked, *once the respective file is\nsaved*. Changed files will appear in the RStudio Git tab, in Github\nDesktop, or using the command `git status` in the terminal (see below).\n\nWhenever you make substantial changes (e.g. adding or updating a section of\ncode), pause and *commit* those changes. Think of a commit as a \"batch\"\nof changes related to a common purpose. You can always continue to\nrevise a file after having committed changes on it.\n\n*Advice on commits*: generally, it is better to make small commits, that\ncan be easily reverted if a problem arises, to commit together\nmodifications related to a common purpose. To achieve this, you will\nfind that *you should commit often*. At the beginning, you'll probably\nforget to commit often, but then the habit kicks in.\n\n### In Rstudio {.unnumbered}\n\nThe example below shows that, since the last commit, the R Markdown script \"collaboration.Rmd\" has changed, \nand several PNG images were added.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_tracking2.png){fig-align='center' width=232}\n:::\n:::\n\n\nYou might be wondering what the yellow, blue, green, and red squares next to\nthe file names represent. Here is a snapshot from the [RStudio\ncheatsheet](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf)\nthat explains their meaning. Note that changes with yellow \"?\" can still\nbe staged, committed, and pushed.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_tracking.png){fig-align='center' width=90}\n:::\n:::\n\n\n-   Press the \"Commit\" button in the Git tab, which will open a new\n    window (shown below)\n\n-   Click on a file name in the upper-left box\n\n-   Review the changes you made to that file (highlighted below in green\n    or red)\n\n-   \"Stage\" the file, which will include those changes in the commit. Do\n    this by checking the box next to the file name. Alternatively, you\n    can highlight multiple file names and then click \"Stage\"\n\n-   Write a commit message that is short but descriptive (required)\n\n-   Press the \"Commit\" button. A pop-up box will appear showing success\n    or an error message.\n\n\nNow you can make more changes and more commits, as many times as you would like\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_commit.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\n### In Github Desktop {.unnumbered}\n\nYou can see the list of the files that were changed on the left. If\nyou select a text file, you will see a summary of the modifications that were made\nin the right pane (the view will not work on more complex files like .docs or .xlsx).\n\nTo stage the changes, just tick the little box near file names. When you\nhave selected the files you want to add to this commit, give the commit\na name, optionally a description and then click on the **commit**\nbutton.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_commit.png){fig-align='center' width=988}\n:::\n:::\n\n\n### In console {.unnumbered}\n\nThe two functions used behind the scenes are `git add` to select/stage\nfiles and `git commit` to actually do the commit.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit status # see the changes \n\ngit add new_pages/collaboration.Rmd  # select files to commit (= stage the changes)\n\ngit commit -m \"Describe commit from Github Desktop\" # commit the changes with a message\n\ngit log  # view information on past commits\n```\n:::\n\n\n\n### Amend a previous commit {.unnumbered}\n\nWhat happens if you commit some changes, carry on working, and realize\nthat you made changes that should \"belong\" to the past commit (in your opinion). \nFear not! You can append these changes to your previous commit.\n\nIn Rstudio, it should be pretty obvious as there is a \"Amend previous commit\" \nbox on the same line as the COMMIT button. \n\nFor some unclear reason, the functionality has not been implemented \nas such in Github Desktop, but there is a (conceptually awkward but easy)\nway around. If you have committed **but not pushed** your changes yet, \nan \"UNDO\" button appears just under the COMMIT button. Click on it and \nit will revert your commit (but keep your staged files and your commit message). \nSave your changes, add new files to the commit if necessary and commit again.\n\nIn the console:  \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit add [YOUR FILES] # Stage your new changes\n\ngit commit --amend  # Amend the previous commit\n\ngit commit --amend -m \"An updated commit message\"  # Amend the previous commit AND update the commit message\n```\n:::\n\n\n\n_Note: think before modifying commits that are already public and shared with your collaborators_.\n\n\n## Pull and push changes up to Github\n\n\"First PULL, then PUSH\"\n\nIt is good practice to *fetch* and *pull* before you begin working on\nyour project, to update the branch version on your local computer with\nany changes that have been made to it in the remote/Github version.\n\nPULL often. Don't hesitate. *Always pull before pushing*.\n\nWhen your changes are made and committed and you are happy with the \nstate of your project, you can *push* your commits up\nto the remote/Github version of your branch.\n\n\nRince and repeat while you are working on the repository.\n\n**Note:** it is much easier to revert changes that were committed but not \npushed (i.e. are still local) than to revert changes that were pushed to the\nremote repository (and perhaps already pulled by someone else), so it is better \nto push when you are done with introducing changes on the task that \nyou were working on.\n\n\n#### In Rstudio {.unnumbered}\n\n*PULL* - First, click the \"Pull\" icon (downward arrow) which fetches and\npulls at the same time.\n\n*PUSH* - Clicking the green \"Pull\" icon (upward arrow). You may be asked\nto enter your Github username and password. The first time you are\nasked, you may need to enter two Git command lines into the *Terminal*:\n\n-   **git config --global user.email\n    \"[you\\@example.com](mailto:you@example.com){.email}\"** (your Github\n    email address), and\\\n-   **git config --global user.name \"Your Github username\"**\n\nTo learn more about how to enter these commands, see the section below\non Git commands.\n\n***TIP:*** Asked to provide your password too often? See these chapters\n10 & 11 of this\n[tutorial](https://happygitwithr.com/credential-caching.html#credential-caching)\nto connect to a repository using a SSH key (more\ncomplicated)  \n\n\n#### In Github Desktop {.unnumbered}\n\nClick on the \"Fetch origin\" button to check if there are new commits on\nthe remote repository.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_fetch_button.png){fig-align='center' width=817}\n:::\n:::\n\n\nIf Git finds new commits on the remote repository, the button will\nchange into a \"Pull\" button. Because the same button is used to push and\npull, you cannot push your changes if you don't pull before.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_pull_button.png){fig-align='center' width=496}\n:::\n:::\n\n\nYou can go to the \"History\" tab (near the \"Changes\" tab) to see all\ncommits (yours and others). This is a nice way of acquainting yourself\nwith what your collaborators did. You can read the commit message, the\ndescription if there is one, and compare the code of the two files using\nthe *diff* pane.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_history.png){fig-align='center' width=993}\n:::\n:::\n\n\nOnce all remote changes have been pulled, and at least one local change\nhas been committed, you can push by clicking on the same button.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_push_button.png){fig-align='center' width=816}\n:::\n:::\n\n\n#### Console {.unnumbered}\n\nWithout surprise, the commands are *fetch*, *pull* and *push*.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit fetch  # are there new commits in the remote directory?\ngit pull   # Bring remote commits into your local branch\ngit push   # Puch local commits of this branch to the remote branch\n```\n:::\n\n\n\n### I want to pull but I have local work {.unnumbered}\n\nThis can happen sometimes: \nyou made some changes on your local repository, but the remote\nrepository has commits that you didn't pull. \n\n\nGit will refuse to pull because it might overwrite your changes. \nThere are several strategies to keep your changes, \nwell described in [Happy Git with R](https://happygitwithr.com/pull-tricky.html), \namong which the two main ones are:\n- commit your changes, fetch remote changes, pull them in, resolve conflicts \nif needed (see section below), and push everything online\n- `stash` your changes, which sort of stores them aside, pull, unstash \n(restore), and then commit, solve any conflicts, and push. \n\nIf the files concerned by the remote changes and the files concerned \nby your local changes do not overlap, Git may solve conflicts automatically.\n\nIn Github Desktop, this can be done with buttons. To stash, go to _Branch > Stash all changes_.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_stash.png){fig-align='center' width=922}\n:::\n:::\n\n\n\n\n## Merge branch into Main \n\nIf you have finished making changes, you can begin the process of\nmerging those changes into the main branch. Depending on your situation,\nthis may be fast, or you may have deliberate review and approval\nsteps involving teammates.\n\n### Locally in Github Desktop {.unnumbered}\n\nOne can merge branches locally using Github Desktop. First, go to\n(checkout) the branch that will be the recipient of the commits, in other words, the\nbranch you want to update. Then go to the menu *Branch \\> Merge into\ncurrent branch* and click. A box will allow you to select the branch you\nwant to import from.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_desktop_merge.png){fig-align='center' width=623}\n:::\n:::\n\n\n### In console {.unnumbered}\n\nFirst move back to the branch that will be the recipient of the changes.\nThis is usually *master*, but it could be another branch. Then merge your\nworking branch into master.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit checkout master  # Go back to master (or to the branch you want to move your )\ngit merge this_fancy_new_branch\n```\n:::\n\n\n[This\npage](https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)\nshows a more advanced example of branching and explains a bit what is\nhappening behind the scenes.\n\n### In Github: submitting pull requests {.unnumbered}\n\n\nWhile it is totally possible to merge two branches locally, or without\ninforming anybody, a merge may be discussed or investigated by several\npeople before being integrated to the master branch. To help with the\nprocess, Github offers some discussion features around the merge: the\n**pull request**.\n\nA pull request (a \"PR\") is a request to merge one branch into another \n(in other words, a request that _your working branch be pulled into the \"main\" branch_). \nA pull request typically involves multiple commits. A pull request usually begins a conversation and review \nprocess before it is accepted and the branch is merged. For example, \nyou can read pull request discussions on [dplyr's\ngithub](https://github.com/tidyverse/dplyr/pulls).\n\n\nYou can submit a pull request (PR) directly form the website (as\nillustrated bellow) or from Github Desktop.\n\n-   Go to Github repository (online)\n-   View the tab \"Pull Requests\" and click the \"New pull request\" button\n-   Select from the drop-down menu to merge your branch into main\n-   Write a detailed Pull Request comment and click \"Create Pull\n    Request\".\n\nIn the image below, the branch \"forests\" has been selected to be merged\ninto \"main\":\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_pull_request2.png){fig-align='center' width=100% height=150%}\n:::\n:::\n\n\nNow you should be able to see the pull request (example image below):\n\n-   Review the tab \"Files changed\" to see how the \"main\" branch would\n    change if the branch were merged.\\\n-   On the right, you can request a review from members of your team by\n    tagging their Github ID. If you like, you can set the repository\n    settings to require one approving review in order to merge into\n    main.\\\n-   Once the pull request is approved, a button to\n    \"Merge pull request\" will become active. Click this.\\\n-   Once completed, delete your branch as explained below.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_pull_request.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\n### Resolving conflicts {.unnumbered}\n\nWhen two people modified the same line(s) at the same time, a\nmerge conflict arises. Indeed, Git refuses to make a decision about\nwhich version to keep, but it helps you find where the\nconflict is. **DO NOT PANIC**. Most of the time, it is pretty straightforward\nto resolve.\n\nFor example, on Github:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_conflict2.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\n\nAfter the merge raised a conflict, open the file in your favorite editor.\nThe conflict will be indicated by series of characters:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_conflict3.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\nThe text between *\\<\\<\\<\\<\\<\\<\\< HEAD* and *=======* comes from your\nlocal repository, and the one between *=======* and *\\>\\>\\>\\>\\>\\>\\>* from the\nthe other branch (which may be origin, master or any branch of\nyour choice).\n\nYou need to decide which version of the code you prefer (or even write a\nthird, including changes from both sides if pertinent), delete the rest\nand remove all the marks that Git added *(\\<\\<\\<\\<\\<\\<\\< HEAD, =======,\n\\>\\>\\>\\>\\>\\>\\> origin/master/your_branch_name*). \n\nThen, save the file, stage it and commit it : this is the commit \nthat makes the merged version \"official\". Do not forget to push afterwards.\n\nThe more often you and your collaborators pull and push, the smaller the\nconflicts will be.\n\n\n*Note: If you feel at ease with the console, there are more [advanced\nmerging\noptions](https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging)\n(e.g. ignoring whitespace, giving a collaborator priority etc.).*\n\n### Delete your branch {.unnumbered}\n\nOnce a branch was merged into master and is no longer needed, you can\ndelete it.\n\n#### Github + Rstudio\n\nGo to the repository on Github and click the button to view all the\nbranches (next to the drop-down to select branches). Now find your\nbranch and click the trash icon next to it. Read more detail on deleting\na branch\n[here](https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-and-deleting-branches-within-your-repository#deleting-a-branch).\n\nBe sure to also delete the branch locally on your computer. This will\nnot happen automatically.\n\n-   From RStudio, make sure you are in the Main branch\n-   Switch to typing Git commands in the RStudio \"Terminal\" (the tab\n    adjacent to the R console), and type: **git branch -d\n    branch_name**, where \"branch_name\" is the name of your branch to be\n    deleted\n-   Refresh your Git tab and the branch should be gone\n\n\n#### In Github Desktop\n\nJust checkout the branch you want to delete, and go to the menu\n*Branch \\> Delete*.\n\n\n### Forking {.unnumbered}\n\nYou can fork a project if you would like to contribute to it but \ndo not have the rights to do so, or if you just \nwant to modify it for your personal use. A \nshort description of forking can be found [here](https://guides.github.com/activities/forking/).\n\nOn Github, click on the \"Fork\" button:  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_fork_1.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\nThis will clone the original repository, but in your own profile. So now, \nthere are two versions of the repository **on Github**: the original one,\nthat you cannot modify, and the cloned version in your profile.\n\nThen, you can proceed to clone your version of the online repository locally \non your computer, using any of the methods described in previous sections. \nThen, you can create a new branch, make changes, commit and push them \n_to your remote repository_.\n\nOnce you are happy with the result you can create a Pull Request \nfrom Github or Github Desktop to begin the conversation with the \nowners/maintainers of the original repository.\n\n\n**What if you need some newer commits from the official repository?**\n\nImagine that someone makes a critical modification to the official repository,\nwhich you want to include to your cloned version.\nIt is possible to synchronize your fork with the official repository. \nIt involves using the terminal, but it is not too complicated. \nYou mostly need to remember that:\n- _upstream_ = the official repository, the one that you could not modify\n- _origin_ = your version of the repository on your Github profile\n\n\nYou can read [this tutorial](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork) or follow along below: \n\n\nFirst, type in your Git terminal (inside your repo):  \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit remote -v\n```\n:::\n\n \nIf you have not yet configured the upstream repository you should \nsee two lines, beginning by _origin_. They show the remote repo \nthat `fetch` and `push` point to. Remember, _origin_ is the conventional\nnickname for your own version of the repository on Github. For example:  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_fork_2.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\nNow, add a new remote repository:  \n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit remote add upstream https://github.com/appliedepi/epirhandbook_eng.git\n```\n:::\n\n \nHere the address is the address that Github generates when you clone\na repository (see section on cloning). Now you will have four remote pointers:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_fork_3.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\nNow that the setup is done, whenever you want to get the changes from \nthe original (_upstream_) repository, you just have to go (_checkout_) to \nthe branch you want to update and type:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\ngit fetch upstream # Get the new commits from the remote repository\ngit checkout the_branch_you_want_to_update\ngit merge upstream/the_branch_you_want_to_update  # Merge the upstream branch into your branch.\ngit push # Update your own version of the remote repo\n```\n:::\n\n\nIf there are conflicts, you will have to solve them, as explained \nin the Resolving conflicts section. \n\n\n**Summary**: forking is cloning, but on the Github server side. \nThe rest of the actions are typical collaboration workflow actions \n(clone, push, pull, commit, merge, submit pull requests...).\n\n_Note: while forking is a concept, not a Git command, it also exist on other Web hosts, like [Bitbucket](https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow)._\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_fork_4.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\n\n## What we learned\n\nYou have learned how to:  \n\n- setup Git to track modifications in your folders,  \n- connect your local repository to a remote online repository,  \n- commit changes,  \n- synchronize your local and remote repositories.  \n\nAll this should get you going and be enough for most of your needs as \nepidemiologists. We usually do not have as advanced usage as developers. \n\nHowever, know that should you want (or need) to go further, Git offers more power to simplify \ncommit histories, revert one or several commits, cherry-pick commits, etc. \nSome of it may sound like pure wizardry, but now that you have the basics, \nit is easier to build on it.\n\n\nNote that while the Git pane in Rstudio and Github Desktop are good for \nbeginners / day-to-day usage in our line of work, they do not offer an \ninterface to some of the intermediate / advanced Git functions. \nSome more complete interfaces allows you to do more with point-and-click \n(usually at the cost of a more complex layout). \n\nRemember that since you can use any tool at any point to track your repository, \nyou can very easily install an interface to try it out sometimes, \nor to perform some less common complex task occasionally, \nwhile preferring a simplified interface for the rest of time (e.g. using \nGithub Desktop most of the time, and switching to SourceTree or Gitbash for some specific tasks).\n\n\n## Git commands {#git}\n\n\n### Recommended learning {.unnumbered}\n\nTo learn Git commands in an interactive tutorial, see [this\nwebsite](https://learngitbranching.js.org/).\n\n### Where to enter commands {.unnumbered}\n\nYou enter commands in a Git shell.\n\n*Option 1* You can open a new Terminal in RStudio. This tab is next to\nthe R Console. If you cannot type any text in it, click on the\ndrop-down menu below \"Terminal\" and select \"New terminal\". Type the\ncommands at the blinking space in front of the dollar sign \"\\$\".\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/github_terminal.png){fig-align='center' width=100% height=200%}\n:::\n:::\n\n\n*Option 2* You can also open a *shell* (a terminal to enter commands) by\nclicking the blue \"gears\" icon in the Git tab (near the RStudio\nEnvironment). Select \"Shell\" from the drop-down menu. A new window will\nopen where you can type the commands after the dollar sign \"\\$\".\n\n*Option 3* Right click to open \"Git Bash here\" which will open the same\nsort of terminal, or open *Git Bash* form your application list.\n[More beginner-friendly informations on Git Bash](https://happygitwithr.com/shell.html), \nhow to find it and some bash commands you will need.\n\n### Sample commands {.unnumbered}\n\nBelow we present a few common git commands. When you use them, keep in mind\nwhich branch is active (checked-out), as that will change the action!\n\nIn the commands below, <name> represents a branch name. \n<commit_hash> represents the hash ID of a specific\ncommit. <num> represents a number. Do not type the\n\\< or \\> symbols.\n\n| Git command              | Action                                                                   |\n|--------------------------|--------------------------------------------------------------------------|\n| `git branch <name>`      | Create a new branch with the name <name>                                 |\n| `git checkout <name>`    | Switch current branch to <name>                                          |\n| `git checkout -b <name>` | Shortcut to create new branch *and* switch to it                         |\n| `git status`             | See untracked changes                                                    |\n| `git add <file>`         | Stage a file                                                             |\n| `git commit -m <message>`| Commit currently staged changes to current branch with message |\n| `git fetch`              | Fetch commits from remote repository                                     |\n| `git pull`               | Pull commits from remote repository in current branch                    |\n| `git push`               | Push local commits to remote directory                          |\n| `git switch`             | An alternative to `git checkout` that is being phased in to Git |\n| `git merge <name>`       | Merge <name> branch into current branch                         |\n| `git rebase <name>`      | Append commits from current branch on to <name> branch          |\n\n\n\n<!-- ======================================================= -->\n\n## Resources\n\nMuch of this page was informed by [this \"Happy Git with R\"\nwebsite](https://happygitwithr.com/) by Jenny Bryan. There is a very helpful\nsection of this website that helps you troubleshoot common Git and\nR-related errors.\n\nThe [Github.com documentation and start\nguide](https://docs.github.com/en/github).\n\nThe RStudio [\"IDE\"\ncheatsheet](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf)\nwhich includes tips on Git with RStudio.\n\n<https://ohi-science.org/news/github-going-back-in-time>\n\n**Git commands for beginners**\n\nAn [interactive\ntutorial](learngitbranching.js.org) to learn\nGit commands.\n\n<https://www.freecodecamp.org/news/an-introduction-to-git-for-absolute-beginners-86fa1d32ff71/>:\ngood for learning the absolute basics to track changes in one folder on\nyou own computer.\n\nNice schematics to understand branches:\n<https://speakerdeck.com/alicebartlett/git-for-humans>\n\n\n**Tutorials covering both basic and more advanced subjects**\n\n<https://tutorialzine.com/2016/06/learn-git-in-30-minutes>\n\n<https://dzone.com/articles/git-tutorial-commands-and-operations-in-git>\n<https://swcarpentry.github.io/git-novice/> (short course)\n<https://rsjakob.gitbooks.io/git/content/chapter1.html>\n\nThe [Pro Git book](https://git-scm.com/book/en/v2) is considered an official reference. \nWhile some chapters are ok, it is usually a bit _technical_. It is probably a good resource \nonce you have used Git a bit and want to learn a bit more precisely \nwhat happens and how to go further.\n",
    "supporting": [
      "collaboration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}