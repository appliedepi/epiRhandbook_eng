{
  "hash": "b8448f2f877ef88a81dcb8e9e910a45f",
  "result": {
    "markdown": "\n# ggplot basics {}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/ggplot_basics_top.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n**ggplot2** is the most popular data visualisation R package. Its `ggplot()` function is at the core of this package, and this whole approach is colloquially known as *\"ggplot\"* with the resulting figures sometimes affectionately called \"ggplots\". The \"gg\" in these names reflects the \"**g**rammar of **g**raphics\" used to construct the figures. **ggplot2** benefits from a wide variety of supplementary R packages that further enhance its functionality.  \n\nThe syntax is significantly different from **base** `R` plotting, and has a learning curve associated with it. Using **ggplot2** generally requires the user to format their data in a way that is highly **tidyverse** compatible, which ultimately makes using these packages together very effective.\n\nIn this page we will cover the fundamentals of plotting with **ggplot2**. See the page [ggplot tips] for suggestions and advanced techniques to make your plots really look nice.  \n\nThere are several extensive **ggplot2** tutorials linked in the resources section. You can also download this [data visualization with ggplot cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf) from the RStudio website. If you want inspiration for ways to creatively visualise your data, we suggest reviewing websites like the [R graph gallery](https://www.r-graph-gallery.com/) and [Data-to-viz](https://www.data-to-viz.com/caveats.html). \n\n\n\n<!-- ======================================================= -->\n## Preparation {}\n\n### Load packages {.unnumbered}\n\nThis code chunk shows the loading of packages required for the analyses. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,      # includes ggplot2 and other data management tools\n  janitor,        # cleaning and summary tables\n  ggforce,        # ggplot extras\n  rio,            # import/export\n  here,           # file locator\n  stringr         # working with characters   \n)\n```\n:::\n\n\n### Import data {.unnumbered}  \n\nWe import the dataset of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import your data with the `import()` function from the **rio** package (it accepts many file types like .xlsx, .rds, .csv - see the [Import and export] page for details).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- rio::import(\"linelist_cleaned.rds\")\n```\n:::\n\n\nThe first 50 rows of the linelist are displayed below. We will focus on the continuous variables `age`, `wt_kg` (weight in kilos), `ct_blood` (CT values), and `days_onset_hosp` (difference between onset date and hospitalisation).  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-1ff6523e234dbad5d678\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1ff6523e234dbad5d678\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"2\\\" data-max=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399075200000\\\" data-max=\\\"1406419200000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399939200000\\\" data-max=\\\"1.407024e+12\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400025600000\\\" data-max=\\\"1407110400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400371200000\\\" data-max=\\\"1410566400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\" disabled=\\\"\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-29&quot;,&quot;30-49&quot;,&quot;50-69&quot;,&quot;70+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-24&quot;,&quot;25-29&quot;,&quot;30-34&quot;,&quot;35-39&quot;,&quot;40-44&quot;,&quot;45-49&quot;,&quot;50-54&quot;,&quot;55-59&quot;,&quot;60-64&quot;,&quot;65-69&quot;,&quot;70-74&quot;,&quot;75-79&quot;,&quot;80-84&quot;,&quot;85+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"-13.2697246824573\\\" data-max=\\\"-13.209391925612\\\" data-scale=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"8.45171855856465\\\" data-max=\\\"8.48802917129884\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"100\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"11\\\" data-max=\\\"241\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"20\\\" data-max=\\\"24\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"35.9\\\" data-max=\\\"38\\\" data-scale=\\\"1\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"428.994082840237\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"2\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\",\"2978ac\",\"57a565\",\"fc15ef\",\"2eaa9a\",\"bbfa93\",\"c97dd9\",\"f50e8a\",\"3a7673\",\"7f5a01\",\"ddddee\",\"99e8fa\",\"567136\",\"9371a9\",\"bc2adf\",\"403057\",\"8bd1e8\",\"f327be\",\"42e1a9\",\"90e5fe\",\"959170\",\"8ebf6e\",\"e56412\",\"6d788e\",\"a47529\",\"67be4e\",\"da8ecb\",\"148f18\",\"2cb9a5\",\"f5c142\",\"70a9fe\",\"3ad520\",\"062638\",\"c76676\",\"baacc1\",\"497372\",\"23e499\",\"38cc4a\",\"3789ee\",\"c71dcd\",\"6b70f0\"],[4,4,2,3,3,3,4,4,4,4,4,4,6,5,6,9,10,8,7,6,7,6,8,6,10,8,6,12,5,8,7,9,11,5,8,5,6,11,7,9,7,8,9,12,13,9,8,10,8,7],[\"2014-05-08\",null,null,\"2014-05-04\",\"2014-05-18\",\"2014-05-03\",\"2014-05-22\",\"2014-05-28\",null,null,\"2014-05-30\",\"2014-05-28\",\"2014-06-14\",\"2014-06-07\",\"2014-06-09\",null,null,null,\"2014-06-23\",\"2014-06-18\",\"2014-06-24\",null,null,\"2014-07-03\",null,\"2014-07-10\",\"2014-06-14\",null,\"2014-06-18\",\"2014-06-29\",\"2014-07-02\",\"2014-07-12\",\"2014-07-12\",\"2014-06-13\",\"2014-07-15\",\"2014-06-20\",null,null,\"2014-07-20\",null,\"2014-07-12\",\"2014-07-19\",\"2014-07-18\",\"2014-07-18\",\"2014-07-27\",null,\"2014-07-19\",\"2014-07-26\",\"2014-07-24\",null],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\",\"2014-06-06\",\"2014-06-13\",\"2014-06-16\",\"2014-06-17\",\"2014-06-18\",\"2014-06-19\",\"2014-06-22\",\"2014-06-23\",\"2014-06-25\",\"2014-06-26\",\"2014-06-28\",\"2014-07-02\",\"2014-07-08\",\"2014-07-09\",\"2014-07-09\",\"2014-07-10\",\"2014-07-12\",\"2014-07-12\",\"2014-07-13\",\"2014-07-13\",\"2014-07-14\",\"2014-07-15\",\"2014-07-16\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-22\",\"2014-07-22\",\"2014-07-24\",\"2014-07-24\",\"2014-07-25\",\"2014-07-25\",\"2014-07-27\",\"2014-07-29\",\"2014-07-30\",null,\"2014-08-01\",\"2014-08-02\",\"2014-08-03\"],[\"2014-05-15\",\"2014-05-14\",\"2014-05-18\",\"2014-05-20\",\"2014-05-22\",\"2014-05-23\",\"2014-05-29\",\"2014-06-03\",\"2014-06-06\",\"2014-06-07\",\"2014-06-08\",\"2014-06-15\",\"2014-06-17\",\"2014-06-17\",\"2014-06-20\",\"2014-06-19\",\"2014-06-23\",\"2014-06-24\",\"2014-06-27\",\"2014-06-28\",\"2014-06-29\",\"2014-07-03\",\"2014-07-09\",\"2014-07-09\",\"2014-07-11\",\"2014-07-11\",\"2014-07-13\",\"2014-07-14\",\"2014-07-14\",\"2014-07-13\",\"2014-07-14\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-20\",\"2014-07-20\",\"2014-07-22\",\"2014-07-24\",\"2014-07-26\",\"2014-07-24\",\"2014-07-27\",\"2014-07-25\",\"2014-07-27\",\"2014-07-31\",\"2014-08-01\",\"2014-08-03\",\"2014-08-02\",\"2014-08-02\",\"2014-08-04\"],[null,\"2014-05-18\",\"2014-05-30\",null,\"2014-05-29\",\"2014-05-24\",\"2014-06-01\",\"2014-06-07\",\"2014-06-18\",\"2014-06-09\",\"2014-06-15\",null,\"2014-07-09\",null,\"2014-06-30\",\"2014-07-11\",\"2014-07-01\",\"2014-06-25\",\"2014-07-06\",\"2014-07-02\",\"2014-07-09\",\"2014-07-07\",\"2014-07-20\",null,\"2014-07-22\",\"2014-07-16\",\"2014-07-14\",\"2014-07-20\",\"2014-07-16\",\"2014-07-19\",\"2014-07-27\",\"2014-07-19\",null,\"2014-07-26\",\"2014-08-14\",\"2014-08-01\",\"2014-07-23\",\"2014-08-28\",\"2014-07-28\",\"2014-07-19\",null,\"2014-08-03\",null,null,null,\"2014-08-06\",\"2014-08-21\",\"2014-09-13\",\"2014-08-04\",null],[null,\"Recover\",\"Recover\",null,\"Recover\",\"Recover\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Death\",\"Death\",\"Recover\",\"Recover\",null,\"Recover\",null,null,\"Death\",\"Death\",\"Recover\",null,null,null,\"Death\",null,\"Death\",\"Death\",null,\"Death\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Recover\",null,\"Death\",\"Recover\",\"Recover\",\"Death\",null,null,\"Death\",\"Death\",\"Death\",\"Death\",\"Recover\",null,\"Death\",\"Death\"],[\"m\",\"f\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"0-4\",\"0-4\",\"50-69\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"50-69\",\"20-29\",\"10-14\",\"30-49\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"30-49\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-69\",\"10-14\",\"20-29\",\"5-9\",\"0-4\",\"30-49\",\"5-9\",\"50-69\",\"10-14\",\"10-14\",\"20-29\",\"20-29\",\"30-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-29\",\"30-49\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-29\",\"20-29\",\"10-14\"],[\"0-4\",\"0-4\",\"55-59\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"60-64\",\"25-29\",\"10-14\",\"40-44\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"35-39\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-54\",\"10-14\",\"25-29\",\"5-9\",\"0-4\",\"30-34\",\"5-9\",\"65-69\",\"10-14\",\"10-14\",\"20-24\",\"20-24\",\"45-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-24\",\"35-39\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-24\",\"25-29\",\"10-14\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Port Hospital\",\"Military Hospital\",\"Missing\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Military Hospital\",\"Port Hospital\",\"Central Hospital\",\"Military Hospital\",\"Central Hospital\",\"Missing\",\"Military Hospital\",\"Other\",\"Missing\",\"Missing\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Central Hospital\",\"Military Hospital\",\"Other\",\"Other\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\"],[-13.2157351064963,-13.2152339775486,-13.212910703914,-13.2363711169728,-13.2228638912441,-13.222625321098,-13.2331547837254,-13.2320975453153,-13.2225511595637,-13.2572163655863,-13.2206286746001,-13.253989309478,-13.2385127873491,-13.209391925612,-13.2157278814899,-13.2243437095992,-13.2336087079551,-13.21422143145,-13.2339681355349,-13.2535640411465,-13.2250089377786,-13.2160657166043,-13.2680671272333,-13.2266742923612,-13.2160179088168,-13.2482584611565,-13.2156319199566,-13.2142410663192,-13.2614879104088,-13.2452992638476,-13.2630592726116,-13.2343341712241,-13.2199077448676,-13.2227293309912,-13.2343062806506,-13.218781651651,-13.2483677722899,-13.2097478342339,-13.2680867723786,-13.2587535457526,-13.262635786914,-13.2697246824573,-13.2209026809759,-13.2330734719715,-13.2680923666905,-13.2547212675054,-13.2573683214693,-13.2137356012883,-13.2175973322257,-13.2486407324245],[8.46897295100924,8.45171855856465,8.46481700596819,8.4754761613651,8.46082377490923,8.461830626007281,8.462729314626459,8.461443675342711,8.46191259217774,8.472923276435059,8.48401630165138,8.458371253408441,8.477617055125091,8.47570184950483,8.477799468789719,8.47145134147474,8.478048406853629,8.48528034195779,8.469575303958671,8.45957352078114,8.474048895115439,8.488029171298839,8.473437335922,8.484082637344621,8.46242233645879,8.470268221265719,8.463984474805329,8.464134789434199,8.456230946296071,8.48334624336805,8.47493999153642,8.47832062438022,8.469393389176499,8.48480589906514,8.47121232619015,8.48438437371817,8.484661585743391,8.477141599844281,8.462381270106089,8.455685978131131,8.4632880274758,8.47940722413856,8.46353857052336,8.461789681588639,8.47508713872833,8.458258081280711,8.4532568143863,8.4732571907655,8.479115866419329,8.48480340615605],[\"f547d6\",null,null,\"f90f5f\",\"11f8ea\",\"aec8ec\",\"893f25\",\"133ee7\",null,null,\"996f3a\",\"133ee7\",\"37a6f6\",\"9f6884\",\"4802b1\",null,null,null,\"a75c7f\",\"8e104d\",\"ab634e\",null,null,\"b799eb\",null,\"5d9e4d\",\"a15e13\",null,\"ea3740\",\"beb26e\",\"567136\",\"894024\",\"36e2e7\",\"a2086d\",\"7baf73\",\"eb2277\",null,null,\"d6584f\",null,\"312ecf\",\"52ea64\",\"cfd79c\",\"d145b7\",\"174288\",null,\"53608c\",\"3b096b\",\"f5c142\",null],[\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,null,\"other\",\"other\",\"other\",null,null,\"other\",null,\"other\",\"other\",null,\"other\",\"funeral\",\"other\",\"funeral\",\"other\",\"other\",\"other\",\"funeral\",null,null,\"other\",null,\"other\",\"other\",\"other\",\"other\",\"other\",null,\"funeral\",\"other\",\"other\",null],[27,25,91,41,36,56,47,0,86,69,67,84,68,44,34,66,78,47,53,47,71,86,53,69,38,46,68,37,100,56,50,57,65,72,29,69,37,48,54,71,47,61,47,35,53,16,13,59,69,67],[48,59,238,135,71,116,87,11,226,174,112,186,174,90,91,152,214,137,117,131,150,241,131,161,80,69,188,66,233,142,110,182,164,214,26,157,39,154,133,168,100,125,123,67,134,31,36,125,183,169],[22,22,21,23,23,21,21,22,22,22,22,22,22,21,23,22,23,21,22,23,21,23,21,24,23,22,24,23,20,24,24,20,24,21,22,21,23,22,23,23,23,22,23,22,22,22,23,22,22,22],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"yes\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"yes\",\"yes\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"yes\",\"yes\",null],[36.8,36.9,36.9,36.8,36.9,37.6,37.3,37,36.4,35.9,36.5,36.9,36.5,37.1,36.5,37.3,37,38,38,36,37,36.7,36.9,36.5,37,36.5,37.6,36.6,36.6,36.2,36.4,37.1,37.5,37.5,37.4,36.9,36.4,37.3,37,37.8,36.5,37.5,36.7,37,37.3,36.6,36.5,36.6,37.6,36.8],[null,\"09:36\",\"16:48\",\"11:22\",\"12:60\",\"14:13\",\"14:33\",\"09:25\",\"11:16\",\"10:55\",\"16:03\",\"11:14\",\"12:42\",\"11:06\",\"09:10\",\"08:45\",null,\"15:41\",\"13:34\",\"18:58\",\"12:43\",\"16:33\",\"14:29\",\"07:18\",\"08:11\",\"16:32\",\"16:17\",\"07:32\",\"17:45\",null,\"13:24\",\"14:43\",\"02:33\",\"11:36\",\"17:28\",\"16:27\",null,\"20:49\",null,\"11:38\",\"14:25\",\"13:42\",\"21:22\",\"13:33\",\"19:06\",\"17:14\",\"20:09\",null,\"10:23\",\"09:09\"],[117.1875,71.81844297615629,16.06524962926347,22.49657064471879,71.41440190438405,41.61712247324614,62.09538908706566,0,16.83765369253662,22.79032897344431,53.41198979591836,24.28026361429067,22.46003435064077,54.32098765432099,41.05784325564545,28.56648199445983,17.03205520132763,25.04129149128882,38.7172182043977,27.3876813705495,31.55555555555556,14.80690759456621,30.88398111998135,26.61934338952972,59.37499999999999,96.61835748792272,19.23947487550928,84.94031221303948,18.41993774061044,27.77226740726046,41.32231404958677,17.20806665861611,24.16716240333135,15.72189710891781,428.9940828402366,27.99302202929125,243.2610124917817,20.23950075898128,30.52744643563797,25.15589569160998,47,39.04,31.06616432017979,77.96836711962574,29.51659612385831,166.4932362122789,100.3086419753086,37.76,20.60378034578518,23.45856237526698],[2,1,2,2,1,1,2,1,1,2,2,2,1,0,2,0,1,1,2,2,1,1,1,0,2,1,1,2,1,0,0,2,1,1,2,2,1,0,2,2,0,2,0,0,2,2,null,1,0,1]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>generation<\\/th>\\n      <th>date_infection<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>date_hospitalisation<\\/th>\\n      <th>date_outcome<\\/th>\\n      <th>outcome<\\/th>\\n      <th>gender<\\/th>\\n      <th>age<\\/th>\\n      <th>age_unit<\\/th>\\n      <th>age_years<\\/th>\\n      <th>age_cat<\\/th>\\n      <th>age_cat5<\\/th>\\n      <th>hospital<\\/th>\\n      <th>lon<\\/th>\\n      <th>lat<\\/th>\\n      <th>infector<\\/th>\\n      <th>source<\\/th>\\n      <th>wt_kg<\\/th>\\n      <th>ht_cm<\\/th>\\n      <th>ct_blood<\\/th>\\n      <th>fever<\\/th>\\n      <th>chills<\\/th>\\n      <th>cough<\\/th>\\n      <th>aches<\\/th>\\n      <th>vomit<\\/th>\\n      <th>temp<\\/th>\\n      <th>time_admission<\\/th>\\n      <th>bmi<\\/th>\\n      <th>days_onset_hosp<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,8,10,14,15,18,19,20,26,28,29]},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"generation\",\"targets\":1},{\"name\":\"date_infection\",\"targets\":2},{\"name\":\"date_onset\",\"targets\":3},{\"name\":\"date_hospitalisation\",\"targets\":4},{\"name\":\"date_outcome\",\"targets\":5},{\"name\":\"outcome\",\"targets\":6},{\"name\":\"gender\",\"targets\":7},{\"name\":\"age\",\"targets\":8},{\"name\":\"age_unit\",\"targets\":9},{\"name\":\"age_years\",\"targets\":10},{\"name\":\"age_cat\",\"targets\":11},{\"name\":\"age_cat5\",\"targets\":12},{\"name\":\"hospital\",\"targets\":13},{\"name\":\"lon\",\"targets\":14},{\"name\":\"lat\",\"targets\":15},{\"name\":\"infector\",\"targets\":16},{\"name\":\"source\",\"targets\":17},{\"name\":\"wt_kg\",\"targets\":18},{\"name\":\"ht_cm\",\"targets\":19},{\"name\":\"ct_blood\",\"targets\":20},{\"name\":\"fever\",\"targets\":21},{\"name\":\"chills\",\"targets\":22},{\"name\":\"cough\",\"targets\":23},{\"name\":\"aches\",\"targets\":24},{\"name\":\"vomit\",\"targets\":25},{\"name\":\"temp\",\"targets\":26},{\"name\":\"time_admission\",\"targets\":27},{\"name\":\"bmi\",\"targets\":28},{\"name\":\"days_onset_hosp\",\"targets\":29}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n### General cleaning {.unnumbered}\n\nWhen preparing data to plot, it is best to make the data adhere to [\"tidy\" data standards](https://r4ds.had.co.nz/tidy-data.html) as much as possible. How to achieve this is expanded on in the data management pages of this handbook, such as [Cleaning data and core functions]. \n\nSome simple ways we can prepare our data to make it better for plotting can include making the contents of the data better for display - which does not necessarily equate to better for data manipulation. For example:  \n\n* Replace `NA` values in a character column with the character string \"Unknown\"  \n* Consider converting column to class *factor* so their values have prescribed ordinal levels  \n* Clean some columns so that their \"data friendly\" values with underscores etc are changed to normal text or title case (see [Characters and strings])  \n\nHere are some examples of this in action:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make display version of columns with more friendly names\nlinelist <- linelist %>%\n  mutate(\n    gender_disp = case_when(gender == \"m\" ~ \"Male\",        # m to Male \n                            gender == \"f\" ~ \"Female\",      # f to Female,\n                            is.na(gender) ~ \"Unknown\"),    # NA to Unknown\n    \n    outcome_disp = replace_na(outcome, \"Unknown\")          # replace NA outcome with \"unknown\"\n  )\n```\n:::\n\n\n### Pivoting longer {.unnumbered}\n\nAs a matter of data structure, for **ggplot2** we often also want to pivot our data into *longer* formats. Read more about this is the page on [Pivoting data].  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/pivoting/pivot_longer_new.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\nFor example, say that we want to plot data that are in a \"wide\" format, such as for each case in the `linelist` and their symptoms. Below we create a mini-linelist called `symptoms_data` that contains only the `case_id` and symptoms columns.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsymptoms_data <- linelist %>% \n  select(c(case_id, fever, chills, cough, aches, vomit))\n```\n:::\n\n\nHere is how the first 50 rows of this mini-linelist look - see how they are formatted \"wide\" with each symptom as a column: \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-4a35e83019f33e2e8ec1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4a35e83019f33e2e8ec1\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\",\"2978ac\",\"57a565\",\"fc15ef\",\"2eaa9a\",\"bbfa93\",\"c97dd9\",\"f50e8a\",\"3a7673\",\"7f5a01\",\"ddddee\",\"99e8fa\",\"567136\",\"9371a9\",\"bc2adf\",\"403057\",\"8bd1e8\",\"f327be\",\"42e1a9\",\"90e5fe\",\"959170\",\"8ebf6e\",\"e56412\",\"6d788e\",\"a47529\",\"67be4e\",\"da8ecb\",\"148f18\",\"2cb9a5\",\"f5c142\",\"70a9fe\",\"3ad520\",\"062638\",\"c76676\",\"baacc1\",\"497372\",\"23e499\",\"38cc4a\",\"3789ee\",\"c71dcd\",\"6b70f0\"],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"yes\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"yes\",\"yes\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"yes\",\"yes\",null]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>fever<\\/th>\\n      <th>chills<\\/th>\\n      <th>cough<\\/th>\\n      <th>aches<\\/th>\\n      <th>vomit<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"name\":\"case_id\",\"targets\":0},{\"name\":\"fever\",\"targets\":1},{\"name\":\"chills\",\"targets\":2},{\"name\":\"cough\",\"targets\":3},{\"name\":\"aches\",\"targets\":4},{\"name\":\"vomit\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nIf we wanted to plot the number of cases with specific symptoms, we are limited by the fact that each symptom is a specific column. However, we can *pivot* the symptoms columns to a longer format like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsymptoms_data_long <- symptoms_data %>%    # begin with \"mini\" linelist called symptoms_data\n  \n  pivot_longer(\n    cols = -case_id,                       # pivot all columns except case_id (all the symptoms columns)\n    names_to = \"symptom_name\",             # assign name for new column that holds the symptoms\n    values_to = \"symptom_is_present\") %>%  # assign name for new column that holds the values (yes/no)\n  \n  mutate(symptom_is_present = replace_na(symptom_is_present, \"unknown\")) # convert NA to \"unknown\"\n```\n:::\n\n\n\nHere are the first 50 rows. Note that case has 5 rows - one for each possible symptom. The new columns `symptom_name` and `symptom_is_present` are the result of the pivot. Note that this format may not be very useful for other operations, but is useful for plotting.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-ca6f8e8b2dde824be0a2\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ca6f8e8b2dde824be0a2\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"5fe599\",\"5fe599\",\"5fe599\",\"5fe599\",\"5fe599\",\"8689b7\",\"8689b7\",\"8689b7\",\"8689b7\",\"8689b7\",\"11f8ea\",\"11f8ea\",\"11f8ea\",\"11f8ea\",\"11f8ea\",\"b8812a\",\"b8812a\",\"b8812a\",\"b8812a\",\"b8812a\",\"893f25\",\"893f25\",\"893f25\",\"893f25\",\"893f25\",\"be99c8\",\"be99c8\",\"be99c8\",\"be99c8\",\"be99c8\",\"07e3e8\",\"07e3e8\",\"07e3e8\",\"07e3e8\",\"07e3e8\",\"369449\",\"369449\",\"369449\",\"369449\",\"369449\",\"f393b4\",\"f393b4\",\"f393b4\",\"f393b4\",\"f393b4\",\"1389ca\",\"1389ca\",\"1389ca\",\"1389ca\",\"1389ca\"],[\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\",\"fever\",\"chills\",\"cough\",\"aches\",\"vomit\"],[\"no\",\"no\",\"yes\",\"no\",\"yes\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"yes\",\"no\",\"yes\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"unknown\",\"no\",\"no\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"yes\",\"no\",\"no\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>symptom_name<\\/th>\\n      <th>symptom_is_present<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"scrollX\":true,\"columnDefs\":[{\"name\":\"case_id\",\"targets\":0},{\"name\":\"symptom_name\",\"targets\":1},{\"name\":\"symptom_is_present\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n## Basics of ggplot {}\n\n**\"Grammar of graphics\" - ggplot2**  \n\nPlotting with **ggplot2** is based on \"adding\" plot layers and design elements on top of one another, with each command added to the previous ones with a plus symbol (`+`). The result is a multi-layer plot object that can be saved, modified, printed, exported, etc.  \n\nggplot objects can be highly complex, but the basic order of layers will usually look like this:  \n\n1. Begin with the baseline `ggplot()` command - this \"opens\" the ggplot and allow subsequent functions to be added with `+`. Typically the dataset is also specified in this command  \n2. Add \"geom\" layers - these functions visualize the data as *geometries* (*shapes*), e.g. as a bar graph, line plot, scatter plot, histogram (or a combination!). These functions all start with `geom_` as a prefix.  \n3. Add design elements to the plot such as axis labels, title, fonts, sizes, color schemes, legends, or axes rotation  \n\nA simple example of skeleton code is as follows. We will explain each component in the sections below.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot data from my_data columns as red points\nggplot(data = my_data)+                   # use the dataset \"my_data\"\n  geom_point(                             # add a layer of points (dots)\n    mapping = aes(x = col1, y = col2),    # \"map\" data column to axes\n    color = \"red\")+                       # other specification for the geom\n  labs()+                                 # here you add titles, axes labels, etc.\n  theme()                                 # here you adjust color, font, size etc of non-data plot elements (axes, title, etc.) \n```\n:::\n\n\n \n\n\n## `ggplot()`  \n\nThe opening command of any ggplot2 plot is `ggplot()`. This command simply creates a blank canvas upon which to add layers. It \"opens\" the way for further layers to be added with a `+` symbol.\n\nTypically, the command `ggplot()` includes the `data = ` argument for the plot. This sets the default dataset to be used for subsequent layers of the plot.  \n\nThis command will end with a `+` after its closing parentheses. This leaves the command \"open\". The ggplot will only execute/appear when the full command includes a final layer *without* a `+` at the end.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This will create plot that is a blank canvas\nggplot(data = linelist)\n```\n:::\n\n\n\n## Geoms  \n\nA blank canvas is certainly not sufficient - we need to create geometries (shapes) from our data (e.g. bar plots, histograms, scatter plots, box plots).  \n\nThis is done by adding layers \"geoms\" to the initial `ggplot()` command. There are many **ggplot2** functions that create \"geoms\". Each of these functions begins with \"geom_\", so we will refer to them generically as `geom_XXXX()`. There are over 40 geoms in **ggplot2** and many others created by fans. View them at the [ggplot2 gallery](https://exts.ggplot2.tidyverse.org/gallery/). Some common geoms are listed below:  \n\n* Histograms - `geom_histogram()`  \n* Bar charts - `geom_bar()` or `geom_col()` (see [\"Bar plot\" section](#ggplot_basics_bars))  \n* Box plots - `geom_boxplot()`  \n* Points (e.g. scatter plots) - `geom_point()`  \n* Line graphs - `geom_line()` or `geom_path()`  \n* Trend lines - `geom_smooth()`  \n\nIn one plot you can display one or multiple geoms. Each is added to previous **ggplot2** commands with a `+`, and they are plotted sequentially such that later geoms are plotted on top of previous ones.  \n\n\n\n## Mapping data to the plot {#ggplot_basics_mapping}  \n\nMost geom functions must be told *what to use* to create their shapes - so you must tell them how they should *map (assign) columns in your data* to components of the plot like the axes, shape colors, shape sizes, etc. For most geoms, the *essential* components that must be mapped to columns in the data are the x-axis, and (if necessary) the y-axis.  \n\nThis \"mapping\" occurs with the `mapping = ` argument. The mappings you provide to `mapping` must be wrapped in the `aes()` function, so you would write something like `mapping = aes(x = col1, y = col2)`, as shown below.\n\nBelow, in the `ggplot()` command the data are set as the case `linelist`. In the `mapping = aes()` argument the column `age` is mapped to the x-axis, and the column `wt_kg` is mapped to the y-axis.  \n\nAfter a `+`, the plotting commands continue. A shape is created with the \"geom\" function `geom_point()`. This geom *inherits* the mappings from the `ggplot()` command above - it knows the axis-column assignments and proceeds to visualize those relationships as *points* on the canvas.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nAs another example, the following commands utilize the same data, a slightly different mapping, and a different geom. The `geom_histogram()` function only requires a column mapped to the x-axis, as the counts y-axis is generated automatically.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### Plot aesthetics {.unnumbered}  \n\nIn ggplot terminology a plot \"aesthetic\" has a specific meaning. It refers to a visual property of *plotted data*. Note that \"aesthetic\" here refers to the *data being plotted in geoms/shapes* - not the surrounding display such as titles, axis labels, background color, that you might associate with the word \"aesthetics\" in common English. In ggplot those details are called \"themes\" and are adjusted within a `theme()` command (see [this section](#ggplot_basics_themes)).  \n\nTherefore, plot object *aesthetics* can be colors, sizes, transparencies, placement, etc. *of the plotted data*. Not all geoms will have the same aesthetic options, but many can be used by most geoms. Here are some examples:  \n\n* `shape =` Display a point with `geom_point()` as a dot, star, triangle, or square...  \n* `fill = ` The interior color (e.g. of a bar or boxplot)  \n* `color =` The exterior line of a bar, boxplot, etc., or the point color if using `geom_point()`  \n* `size = ` Size (e.g. line thickness, point size)  \n* `alpha = ` Transparency (1 = opaque, 0 = invisible)  \n* `binwidth = ` Width of histogram bins  \n* `width = ` Width of \"bar plot\" columns  \n* `linetype =` Line type (e.g. solid, dashed, dotted) \n\nThese plot object aesthetics can be assigned values in two ways:  \n\n1) Assigned a static value (e.g. `color = \"blue\"`) to apply across all plotted observations  \n2) Assigned to a column of the data (e.g. `color = hospital`) such that display of each observation depends on its value in that column  \n\n<!-- *These non-axis aesthetics can be assigned static values (e.g. `size = 1`) or can be mapped to a column (e.g. `size = age`).* If you want the aesthetic to be assigned a static value, the assignment is placed *outside* the `mapping = aes()`. If you want the aesthetic to be scaled/depend on the value in each row of data, the assignment is made *inside* the `mapping = aes()`.   -->\n\n### Set to a static value {.unnumbered}  \n\nIf you want the plot object aesthetic to be static, that is - to be the same for every observation in the data, you write its assignment within the geom but *outside* of any `mapping = aes()` statement. These assignments could look like `size = 1` or `color = \"blue\"`. Here are two examples:  \n\n* In the first example, the `mapping = aes()` is in the `ggplot()` command and the axes are mapped to age and weight columns in the data. The plot aesthetics `color = `, `size = `, and `alpha = ` (transparency) are assigned to static values. For clarity, this is done in the `geom_point()` function, as you may add other geoms afterward that would take different values for their plot aesthetics.  \n* In the second example, the histogram requires only the x-axis mapped to a column. The histogram `binwidth = `, `color = `, `fill = ` (internal color), and `alpha = ` are again set within the geom to static values.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatterplot\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  # set data and axes mapping\n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)         # set static point aesthetics\n\n# histogram\nggplot(data = linelist, mapping = aes(x = age))+       # set data and axes\n  geom_histogram(              # display histogram\n    binwidth = 7,                # width of bins\n    color = \"red\",               # bin line color\n    fill = \"blue\",               # bin interior color\n    alpha = 0.1)                 # bin transparency\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-16-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-16-2.png){width=50%}\n:::\n:::\n\n\n\n### Scaled to column values {.unnumbered}  \n\nThe alternative is to scale the plot object aesthetic by the values in a column. In this approach, the display of this aesthetic will depend on that observation's value in that column of the data. If the column values are continuous, the display scale (legend) for that aesthetic will be continuous. If the column values are discrete, the legend will display each value and the plotted data will appear as distinctly \"grouped\" (read more in the [grouping](#ggplotgroups) section of this page).  \n\nTo achieve this, you map that plot aesthetic to a *column name* (not in quotes). This must be done *within a `mapping = aes()` function* (note: there are several places in the code you can make these mapping assignments, as discussed [below](##ggplot_basics_map_loc)).  \n\nTwo examples are below.  \n\n* In the first example, the `color = ` aesthetic (of each point) is mapped to the column `age` - and a scale has appeared in a legend! For now just note that the scale exists - we will show how to modify it in later sections.  \n* In the second example two new plot aesthetics are also mapped to columns (`color = ` and `size = `), while the plot aesthetics `shape = ` and `alpha = ` are mapped to static values outside of any `mapping = aes()` function.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age)\n       )+     # map color to age\n  geom_point()         # display data as points \n\n# scatterplot\nggplot(data = linelist,   # set data\n       mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age,       # map color to age\n         size = age))+      # map size to age\n  geom_point(             # display data as points\n    shape = \"diamond\",      # points display as diamonds\n    alpha = 0.3)            # point transparency at 30%\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-17-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-17-2.png){width=50%}\n:::\n:::\n\n\n\n\nNote: Axes assignments are always assigned to columns in the data (not to static values), and this is always done within `mapping = aes()`.  \n\n\nIt becomes important to keep track of your plot layers and aesthetics when making more complex plots - for example plots with multiple geoms. In the example below, the `size = ` aesthetic is assigned twice - once for `geom_point()` and once for `geom_smooth()` - both times as a static value.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = linelist,\n       mapping = aes(           # map aesthetics to columns\n         x = age,\n         y = wt_kg,\n         color = age_years)\n       ) + \n  geom_point(                   # add points for each row of data\n    size = 1,\n    alpha = 0.5) +  \n  geom_smooth(                  # add a trend line \n    method = \"lm\",              # with linear method\n    size = 2)                   # size (width of line) of 2\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n### Where to make mapping assignments {#ggplot_basics_map_loc .unnumbered}\n\n\nAesthetic mapping within `mapping = aes()` can be written in several places in your plotting commands and can even be written more than once. This can be written in the top `ggplot()` command, and/or for each individual geom beneath. The nuances include:  \n\n* Mapping assignments made in the top `ggplot()` command will be inherited as defaults across any geom below, like how `x = ` and `y = ` are inherited \n* Mapping assignments made within one geom apply only to that geom  \n\nLikewise, `data = ` specified in the top `ggplot()` will apply by default to any geom below, but you could also specify data for each geom (but this is more difficult).  \n\nThus, each of the following commands will create the same plot:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# These commands will produce the exact same plot\nggplot(data = linelist, mapping = aes(x = age))+\n  geom_histogram()\n\nggplot(data = linelist)+\n  geom_histogram(mapping = aes(x = age))\n\nggplot()+\n  geom_histogram(data = linelist, mapping = aes(x = age))\n```\n:::\n\n\n\n\n\n### Groups {#ggplotgroups .unnumbered}  \n\nYou can easily group the data and \"plot by group\". In fact, you have already done this!  \n\nAssign the \"grouping\" column to the appropriate plot aesthetic, within a `mapping = aes()`. Above, we demonstrated this using continuous values when we assigned point `size = ` to the column `age`. However this works the same way for discrete/categorical columns.  \n\nFor example, if you want points to be displayed by gender, you would set `mapping = aes(color = gender)`. A legend automatically appears. This assignment can be made within the `mapping = aes()` in the top `ggplot()` command (and be inherited by the geom), or it could be set in a separate `mapping = aes()` within the geom. Both approaches are shown below:  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg, color = gender))+\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# This alternative code produces the same plot\nggplot(data = linelist,\n       mapping = aes(x = age, y = wt_kg))+\n  geom_point(\n    mapping = aes(color = gender),\n    alpha = 0.5)\n```\n:::\n\n\n\nNote that depending on the geom, you will need to use different arguments to group the data. For `geom_point()` you will most likely use `color =`, `shape = ` or `size = `. Whereas for `geom_bar()` you are more likely to use `fill = `. This just depends on the geom and what plot aesthetic you want to reflect the groupings.  \n\nFor your information - the most basic way of grouping the data is by using only the `group = ` argument within `mapping = aes()`. However, this by itself will not change the colors, fill, or shapes. Nor will it create a legend. Yet the data are grouped, so statistical displays may be affected.  \n\nTo adjust the order of groups in a plot, see the [ggplot tips] page or the page on [Factors]. There are many examples of grouped plots in the sections below on plotting continuous and categorical data.   \n\n\n\n## Facets / Small-multiples {#ggplot_basics_facet}  \n\nFacets, or \"small-multiples\", are used to split one plot into a multi-panel figure, with one panel (\"facet\") per group of data. The same type of plot is created multiple times, each one using a sub-group of the same dataset.  \n\nFaceting is a functionality that comes with **ggplot2**, so the legends and axes of the facet \"panels\" are automatically aligned. There are other packages discussed in the [ggplot tips] page that are used to combine completely different plots (**cowplot** and **patchwork**) into one figure.  \n\nFaceting is done with one of the following **ggplot2** functions:\n\n  1. `facet_wrap()` To show a different panel for each level of a *single* variable. One example of this could be showing a different epidemic curve for each hospital in a region. Facets are ordered alphabetically, unless the variable is a factor with other ordering defined.  \n  + You can invoke certain options to determine the layout of the facets, e.g. `nrow = 1` or `ncol = 1` to control the number of rows or columns that the faceted plots are arranged within.  \n  \n  2. `facet_grid()` This is used when you want to bring a second variable into the faceting arrangement. Here each panel of a grid shows the intersection between values in *two columns*. For example, epidemic curves for each hospital-age group combination with hospitals along the top (columns) and age groups along the sides (rows).  \n  + `nrow` and `ncol` are not relevant, as the subgroups are presented in a grid  \n\nEach of these functions accept a formula syntax to specify the column(s) for faceting. Both accept up to two columns, one on each side of a tilde `~`.  \n\n* For `facet_wrap()` most often you will write only one column preceded by a tilde `~` like `facet_wrap(~hospital)`. However you can write two columns `facet_wrap(outcome ~ hospital)` - each unique combination will display in a separate panel, but they will not be arranged in a grid. The headings will show combined terms and these won't be specific logic to the columns vs. rows.  If you are providing only one faceting variable, a period `.` is used as a placeholder on the other side of the formula - see the code examples.  \n\n* For `facet_grid()` you can also specify one or two columns to the formula (grid `rows ~ columns`). If you only want to specify one, you can place a period `.` on the other side of the tilde like `facet_grid(. ~ hospital)` or `facet_grid(hospital ~ .)`.  \n\nFacets can quickly contain an overwhelming amount of information - its good to ensure you don't have too many levels of each variable that you choose to facet by. Here are some quick examples with the malaria dataset (see [Download handbook and data]) which consists of daily case counts of malaria for facilities, by age group.  \n\nBelow we import and do some quick modifications for simplicity:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# These data are daily counts of malaria cases, by facility-day\nmalaria_data <- import(here(\"data\", \"malaria_facility_count_data.rds\")) %>%  # import\n  select(-submitted_date, -Province, -newid)                                 # remove unneeded columns\n```\n:::\n\n\nThe first 50 rows of the malaria data are below. Note there is a column `malaria_tot`, but also columns for counts by age group (these will be used in the second, `facet_grid()` example).  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-eaa627f163d0b0186e4f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-eaa627f163d0b0186e4f\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1596499200000\\\" data-max=\\\"1597190400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"81\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"56\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"96\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"233\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"Facility 1\",\"Facility 2\",\"Facility 3\",\"Facility 4\",\"Facility 5\",\"Facility 6\",\"Facility 6\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 7\",\"Facility 8\",\"Facility 9\",\"Facility 10\",\"Facility 11\",\"Facility 12\",\"Facility 13\",\"Facility 14\",\"Facility 15\",\"Facility 16\",\"Facility 17\",\"Facility 18\",\"Facility 19\",\"Facility 19\",\"Facility 20\",\"Facility 21\",\"Facility 19\",\"Facility 22\",\"Facility 23\",\"Facility 23\",\"Facility 24\",\"Facility 25\",\"Facility 26\",\"Facility 27\",\"Facility 28\",\"Facility 29\",\"Facility 30\",\"Facility 30\",\"Facility 31\",\"Facility 31\",\"Facility 32\",\"Facility 33\",\"Facility 33\",\"Facility 7\",\"Facility 30\",\"Facility 30\",\"Facility 30\",\"Facility 30\",\"Facility 34\",\"Facility 35\"],[\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-10\",\"2020-08-10\",\"2020-08-09\",\"2020-08-08\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-10\",\"2020-08-11\",\"2020-08-11\",\"2020-08-09\",\"2020-08-11\",\"2020-08-11\",\"2020-08-12\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-06\",\"2020-08-04\",\"2020-08-11\",\"2020-08-10\",\"2020-08-11\",\"2020-08-11\",\"2020-08-10\",\"2020-08-10\",\"2020-08-07\",\"2020-08-09\",\"2020-08-10\",\"2020-08-11\",\"2020-08-11\",\"2020-08-10\"],[\"Spring\",\"Bolo\",\"Dingo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Dingo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Spring\",\"Bolo\",\"Spring\",\"Bolo\",\"Spring\",\"Dingo\",\"Bolo\",\"Dingo\",\"Barnard\",\"Barnard\",\"Barnard\",\"Bolo\",\"Bolo\",\"Bolo\",\"Barnard\",\"Bolo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Dingo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Spring\",\"Spring\",\"Dingo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Dingo\",\"Spring\",\"Barnard\",\"Barnard\",\"Spring\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Spring\"],[11,11,8,16,9,3,4,15,11,19,12,7,27,0,17,36,0,5,6,9,4,7,12,4,14,28,5,11,8,8,21,7,3,7,9,19,28,9,11,7,26,0,4,8,5,25,21,9,4,81],[12,10,5,16,2,1,0,14,11,15,7,1,8,10,15,36,0,1,3,9,4,0,2,7,9,18,3,4,7,7,0,3,2,4,7,4,14,8,2,10,35,2,4,9,9,14,25,20,9,56],[23,5,5,17,6,4,3,13,13,15,13,20,18,24,28,62,0,10,2,16,1,6,18,41,14,5,24,13,16,16,41,13,5,11,33,23,54,10,11,16,30,8,2,11,29,31,38,26,17,96],[46,26,18,49,17,8,7,42,35,49,32,28,53,34,60,134,0,16,11,34,9,13,32,52,37,51,32,28,31,31,62,23,10,22,49,46,96,27,24,33,91,10,10,28,43,70,84,55,30,233]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>location_name<\\/th>\\n      <th>data_date<\\/th>\\n      <th>District<\\/th>\\n      <th>malaria_rdt_0-4<\\/th>\\n      <th>malaria_rdt_5-14<\\/th>\\n      <th>malaria_rdt_15<\\/th>\\n      <th>malaria_tot<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5,6]},{\"name\":\"location_name\",\"targets\":0},{\"name\":\"data_date\",\"targets\":1},{\"name\":\"District\",\"targets\":2},{\"name\":\"malaria_rdt_0-4\",\"targets\":3},{\"name\":\"malaria_rdt_5-14\",\"targets\":4},{\"name\":\"malaria_rdt_15\",\"targets\":5},{\"name\":\"malaria_tot\",\"targets\":6}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n### `facet_wrap()` {.unnumbered}\n\nFor the moment, let's focus on the columns `malaria_tot` and `District`. Ignore the age-specific count columns for now. We will plot epidemic curves with `geom_col()`, which produces a column for each day at the specified y-axis height given in column `malaria_tot` (the data are already daily counts, so we use `geom_col()` - see [the \"Bar plot\" section below](#ggplot_basics_bars)).  \n\nWhen we add the command `facet_wrap()`, we specify a tilde and then the column to facet on (`District` in this case). You can place another column on the left side of the tilde, - this will create one facet for each combination - but we recommend you do this with `facet_grid()` instead. In this use case, one facet is created for each unique value of `District`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A plot with facets by district\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district\") +\n  facet_wrap(~District)                       # the facets are created\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### `facet_grid()` {.unnumbered}  \n\nWe can use a `facet_grid()` approach to cross two variables. Let's say we want to cross `District` and age. Well, we need to do some data transformations on the age columns to get these data into ggplot-preferred \"long\" format. The age groups all have their own columns - we want them in a single column called `age_group` and another called `num_cases`. See the page on [Pivoting data] for more information on this process.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmalaria_age <- malaria_data %>%\n  select(-malaria_tot) %>% \n  pivot_longer(\n    cols = c(starts_with(\"malaria_rdt_\")),  # choose columns to pivot longer\n    names_to = \"age_group\",      # column names become age group\n    values_to = \"num_cases\"      # values to a single column (num_cases)\n  ) %>%\n  mutate(\n    age_group = str_replace(age_group, \"malaria_rdt_\", \"\"),\n    age_group = forcats::fct_relevel(age_group, \"5-14\", after = 1))\n```\n:::\n\n\nNow the first 50 rows of data look like this:  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-85483f67de3ccf35c249\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-85483f67de3ccf35c249\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1596844800000\\\" data-max=\\\"1.597104e+12\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-14&quot;,&quot;15&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"integer\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"62\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"Facility 1\",\"Facility 1\",\"Facility 1\",\"Facility 2\",\"Facility 2\",\"Facility 2\",\"Facility 3\",\"Facility 3\",\"Facility 3\",\"Facility 4\",\"Facility 4\",\"Facility 4\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 6\",\"Facility 6\",\"Facility 6\",\"Facility 6\",\"Facility 6\",\"Facility 6\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 5\",\"Facility 7\",\"Facility 7\",\"Facility 7\",\"Facility 8\",\"Facility 8\",\"Facility 8\",\"Facility 9\",\"Facility 9\",\"Facility 9\",\"Facility 10\",\"Facility 10\",\"Facility 10\",\"Facility 11\",\"Facility 11\",\"Facility 11\",\"Facility 12\",\"Facility 12\",\"Facility 12\",\"Facility 13\",\"Facility 13\"],[\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-10\",\"2020-08-10\",\"2020-08-10\",\"2020-08-10\",\"2020-08-10\",\"2020-08-10\",\"2020-08-09\",\"2020-08-09\",\"2020-08-09\",\"2020-08-08\",\"2020-08-08\",\"2020-08-08\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\",\"2020-08-11\"],[\"Spring\",\"Spring\",\"Spring\",\"Bolo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Dingo\",\"Dingo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Dingo\",\"Dingo\",\"Dingo\",\"Dingo\",\"Dingo\",\"Dingo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Bolo\",\"Spring\",\"Spring\",\"Spring\",\"Bolo\",\"Bolo\",\"Bolo\",\"Spring\",\"Spring\",\"Spring\",\"Bolo\",\"Bolo\",\"Bolo\",\"Spring\",\"Spring\",\"Spring\",\"Dingo\",\"Dingo\",\"Dingo\",\"Bolo\",\"Bolo\"],[\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\",\"15\",\"0-4\",\"5-14\"],[11,12,23,11,10,5,8,5,5,16,16,17,9,2,6,3,1,4,4,0,3,15,14,13,11,11,13,19,15,15,12,7,13,7,1,20,27,8,18,0,10,24,17,15,28,36,36,62,0,0]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>location_name<\\/th>\\n      <th>data_date<\\/th>\\n      <th>District<\\/th>\\n      <th>age_group<\\/th>\\n      <th>num_cases<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":4},{\"name\":\"location_name\",\"targets\":0},{\"name\":\"data_date\",\"targets\":1},{\"name\":\"District\",\"targets\":2},{\"name\":\"age_group\",\"targets\":3},{\"name\":\"num_cases\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nWhen you pass the two variables to `facet_grid()`, easiest is to use formula notation (e.g. `x ~ y`) where x is rows and y is columns. Here is the plot, using `facet_grid()` to show the plots for each combination of the columns `age_group` and `District`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(malaria_age, aes(x = data_date, y = num_cases)) +\n  geom_col(fill = \"darkred\", width = 1) +\n  theme_minimal()+\n  labs(\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district and age group\"\n  ) +\n  facet_grid(District ~ age_group)\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### Free or fixed axes {.unnumbered}  \n\nThe axes scales displayed when faceting are by default the same (fixed) across all the facets. This is helpful for cross-comparison, but not always appropriate.  \n\nWhen using `facet_wrap()` or `facet_grid()`, we can add `scales = \"free_y\"` to \"free\" or release the y-axes of the panels to scale appropriately to their data subset. This is particularly useful if the actual counts are small for one of the subcategories and trends are otherwise hard to see. Instead of \"free_y\" we can also write \"free_x\" to do the same for the x-axis (e.g. for dates) or \"free\" for both axes. Note that in `facet_grid`, the y scales will be the same for facets in the same row, and the x scales will be the same for facets in the same column.\n\nWhen using `facet_grid` only, we can add `space = \"free_y\"` or `space = \"free_x\"` so that the actual height or width of the facet is weighted to the values of the figure within. This only works if `scales = \"free\"` (y or x) is already applied. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Free y-axis\nggplot(malaria_data, aes(x = data_date, y = malaria_tot)) +\n  geom_col(width = 1, fill = \"darkred\") +       # plot the count data as columns\n  theme_minimal()+                              # simplify the background panels\n  labs(                                         # add plot labels, title, etc.\n    x = \"Date of report\",\n    y = \"Malaria cases\",\n    title = \"Malaria cases by district - 'free' x and y axes\") +\n  facet_wrap(~District, scales = \"free\")        # the facets are created\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n<!-- ```{r fig.show='hold', message=FALSE, warning=FALSE, out.width=c('50%', '50%')} -->\n<!-- # A) Facet hospitalsation date by hospital, free y axis -->\n<!-- ggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital -->\n<!--        aes(x = date_hospitalisation ))+ -->\n<!--   geom_histogram(binwidth=7) + # Bindwidth = 7 days -->\n<!--   labs(title = \"A) Histogram with free y axis scales\")+ -->\n<!--   facet_grid(hospital~., # Facet with hospital as the row  -->\n<!--              scales = \"free_y\") # Free the y scale of each facet -->\n\n<!-- # B) Facet hospitalisation date by hospital, free y axis and vertical spacing -->\n<!-- ggplot(data = linelist %>% filter(hospital != \"Missing\"), # filter removes unknown hospital -->\n<!--        aes(x = date_hospitalisation ))+ -->\n<!--   geom_histogram(binwidth=7) + # Bindwidth = 7 days -->\n<!--   labs(title = \"B) Histogram with free y axis scales and spacing\")+ -->\n<!--   facet_grid(hospital~., # Facet with hospital as the row  -->\n<!--              scales = \"free_y\", # Free the y scale of each facet -->\n<!--              space = \"free_y\") # Free the vertical spacing of each facet to optimise space -->\n\n<!-- ``` -->\n\n### Factor level order in facets {.unnumbered}  \n\nSee this [post](https://juliasilge.com/blog/reorder-within/) on how to re-order factor levels *within* facets.  \n\n\n## Storing plots  \n\n### Saving plots {.unnumbered}\n\nBy default when you run a `ggplot()` command, the plot will be printed to the Plots RStudio pane. However, you can also save the plot as an object by using the assignment operator `<-` and giving it a name. Then it will not print unless the object name itself is run. You can also print it by wrapping the plot name with `print()`, but this is only necessary in certain circumstances such as if the plot is created inside a *for loop* used to print multiple plots at once (see [Iteration, loops, and lists] page).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define plot\nage_by_wt <- ggplot(data = linelist, mapping = aes(x = age_years, y = wt_kg, color = age_years))+\n  geom_point(alpha = 0.1)\n\n# print\nage_by_wt    \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n### Modifying saved plots {.unnumbered}  \n\nOne nice thing about **ggplot2** is that you can define a plot (as above), and then add layers to it starting with its name. You do not have to repeat all the commands that created the original plot! \n\nFor example, to modify the plot `age_by_wt` that was defined above, to include a vertical line at age 50, we would just add a `+` and begin adding additional layers to the plot.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_by_wt+\n  geom_vline(xintercept = 50)\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n### Exporting plots {.unnumbered}   \n\nExporting ggplots is made easy with the `ggsave()` function from **ggplot2**. It can work in two ways, either:  \n\n* Specify the name of the plot object, then the file path and name with extension  \n  * For example: `ggsave(my_plot, here(\"plots\", \"my_plot.png\"))`  \n* Run the command with only a file path, to save the last plot that was printed  \n  * For example: `ggsave(here(\"plots\", \"my_plot.png\"))`  \n  \nYou can export as png, pdf, jpeg, tiff, bmp, svg, or several other file types, by specifying the file extension in the file path.  \n\nYou can also specify the arguments `width = `, `height = `, and `units = ` (either \"in\", \"cm\", or \"mm\"). You can also specify `dpi = ` with a number for plot resolution (e.g. 300). See the function details by entering `?ggsave` or reading the [documentation online](https://ggplot2.tidyverse.org/reference/ggsave.html). \n\nRemember that you can use `here()` syntax to provide the desired file path. See the [Import and export] page for more information.  \n\n\n## Labels \n\nSurely you will want to add or adjust the plot's labels. These are most easily done within the `labs()` function which is added to the plot with `+` just as the geoms were.  \n\nWithin `labs()` you can provide character strings to these arguements:  \n\n* `x = ` and `y = ` The x-axis and y-axis title (labels)  \n* `title = ` The main plot title  \n* `subtitle = ` The subtitle of the plot, in smaller text below the title  \n* `caption = ` The caption of the plot, in bottom-right by default  \n\nHere is a plot we made earlier, but with nicer labels:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_by_wt <- ggplot(\n  data = linelist,   # set data\n  mapping = aes(     # map aesthetics to column values\n         x = age,           # map x-axis to age            \n         y = wt_kg,         # map y-axis to weight\n         color = age))+     # map color to age\n  geom_point()+           # display data as points\n  labs(\n    title = \"Age and weight distribution\",\n    subtitle = \"Fictional Ebola outbreak, 2014\",\n    x = \"Age in years\",\n    y = \"Weight in kilos\",\n    color = \"Age\",\n    caption = stringr::str_glue(\"Data as of {max(linelist$date_hospitalisation, na.rm=T)}\"))\n\nage_by_wt\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nNote how in the caption assignment we used `str_glue()` from the **stringr** package to implant dynamic R code within the string text. The caption will show the \"Data as of: \" date that reflects the maximum hospitalization date in the linelist. Read more about this in the page on [Characters and strings].  \n\nA note on specifying the *legend* title: There is no one \"legend title\" argument, as you could have multiple scales in your legend. Within `labs()`, you can write the argument for the plot aesthetic used to create the legend, and provide the title this way. For example, above we assigned `color = age` to create the legend. Therefore, we provide `color = ` to `labs()` and assign the legend title desired (\"Age\" with capital A). If you create the legend with `aes(fill = COLUMN)`, then in `labs()` you would write `fill = ` to adjust the title of that legend. The section on color scales in the [ggplot tips] page provides more details on editing legends, and an alternative approach using `scales_()` functions.  \n\n\n\n## Themes {#ggplot_basics_themes} \n\nOne of the best parts of **ggplot2** is the amount of control you have over the plot - you can define anything! As mentioned above, the design of the plot that is *not* related to the data shapes/geometries are adjusted within the `theme()` function. For example, the plot background color, presence/absence of gridlines, and the font/size/color/alignment of text (titles, subtitles, captions, axis text...). These adjustments can be done in one of two ways:  \n\n* Add a [*complete theme*](https://ggplot2.tidyverse.org/reference/ggtheme.html) `theme_()` function to make sweeping adjustments - these include `theme_classic()`, `theme_minimal()`, `theme_dark()`, `theme_light()` `theme_grey()`, `theme_bw()` among others  \n* Adjust each tiny aspect of the plot individually within `theme()`  \n\n\n### Complete themes {.unnumbered}  \n\nAs they are quite straight-forward, we will demonstrate the complete theme functions below and will not describe them further here. Note that any micro-adjustments with `theme()` should be made *after* use of a complete theme.  \n\nWrite them with empty parentheses.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme classic\")+\n  theme_classic()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme bw\")+\n  theme_bw()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme minimal\")+\n  theme_minimal()\n\nggplot(data = linelist, mapping = aes(x = age, y = wt_kg))+  \n  geom_point(color = \"darkgreen\", size = 0.5, alpha = 0.2)+\n  labs(title = \"Theme gray\")+\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-32-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-32-2.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-32-3.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-32-4.png){width=50%}\n:::\n:::\n\n\n### Modify theme {.unnumbered}  \n\nThe `theme()` function can take a large number of arguments, each of which edits a very specific aspect of the plot. There is no way we could cover all of the arguments, but we will describe the general pattern for them and show you how to find the argument name that you need. The basic syntax is this:\n\n1. Within `theme()` write the argument name for the plot element you want to edit, like `plot.title = `  \n3. Provide an `element_()` function to the argument  \n  + Most often, use `element_text()`, but others include `element_rect()` for canvas background colors, or `element_blank()` to remove plot elements  \n4. Within the `element_()` function, write argument assignments to make the fine adjustments you desire  \n\nSo, that description was quite abstract, so here are some examples.  \n\nThe below plot looks quite silly, but it serves to show you a variety of the ways you can adjust your plot.  \n\n* We begin with the plot `age_by_wt` defined just above and add `theme_classic()`  \n* For finer adjustments we add `theme()` and include one argument for each plot element to adjust  \n\nIt can be nice to organize the arguments in logical sections. To describe just some of those used below:  \n\n* `legend.position = ` is unique in that it accepts simple values like \"bottom\", \"top\", \"left\", and \"right\". But generally, text-related arguments require that you place the details *within* `element_text()`.  \n* Title size with `element_text(size = 30)`  \n* The caption horizontal alignment with `element_text(hjust = 0)` (from right to left)  \n* The subtitle is italicized with `element_text(face = \"italic\")`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_by_wt + \n  theme_classic()+                                 # pre-defined theme adjustments\n  theme(\n    legend.position = \"bottom\",                    # move legend to bottom\n    \n    plot.title = element_text(size = 30),          # size of title to 30\n    plot.caption = element_text(hjust = 0),        # left-align caption\n    plot.subtitle = element_text(face = \"italic\"), # italicize subtitle\n    \n    axis.text.x = element_text(color = \"red\", size = 15, angle = 90), # adjusts only x-axis text\n    axis.text.y = element_text(size = 15),         # adjusts only y-axis text\n    \n    axis.title = element_text(size = 20)           # adjusts both axes titles\n    )     \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nHere are some especially common `theme()` arguments. You will recognize some patterns, such as appending `.x` or `.y` to apply the change only to one axis.  \n\n\n`theme()` argument                 |What it adjusts\n-----------------------------------|----------------------------------\n`plot.title = element_text()`      |The title\n`plot.subtitle = element_text()`   |The subtitle\n`plot.caption = element_text()`    |The caption (family, face, color, size, angle, vjust, hjust...) \n`axis.title = element_text()`      |Axis titles (both x and y) (size, face, angle, color...)\n`axis.title.x = element_text()`    |Axis title x-axis only (use `.y` for y-axis only)\n`axis.text = element_text()`       |Axis text (both x and y)\n`axis.text.x = element_text()`     |Axis text x-axis only (use `.y` for y-axis only)  \n`axis.ticks = element_blank()`     |Remove axis ticks\n`axis.line = element_line()`       |Axis lines (colour, size, linetype: solid dashed dotted etc)\n`strip.text = element_text()`      |Facet strip text (colour, face, size, angle...)\n`strip.background = element_rect()`|facet strip (fill, colour, size...)  \n\nBut there are so many theme arguments! How could I remember them all? Do not worry - it is impossible to remember them all. Luckily there are a few tools to help you:  \n\nThe **tidyverse** documentation on [modifying theme](https://ggplot2.tidyverse.org/reference/theme.html), which has a complete list.  \n\n<span style=\"color: darkgreen;\">**_TIP:_** Run `theme_get()` from **ggplot2** to print a list of all 90+ `theme()` arguments to the console.</span>  \n\n<span style=\"color: darkgreen;\">**_TIP:_** If you ever want to remove an element of a plot, you can also do it through `theme()`. Just pass `element_blank()` to an argument to have it disappear completely. For legends, set `legend.position = \"none\".`</span>  \n\n\n\n\n## Colors  \n\n\nPlease see this [section on color scales of the ggplot tips page](#ggplot_tips_colors).  \n\n\n\n## Piping into **ggplot2**   \n\nWhen using pipes to clean and transform your data, it is easy to pass the transformed data into `ggplot()`.  \n\nThe pipes that pass the dataset from function-to-function will transition to `+` once the `ggplot()` function is called. Note that in this case, there is no need to specify the `data = ` argument, as this is automatically defined as the piped-in dataset.  \n\nThis is how that might look:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist %>%                                                     # begin with linelist\n  select(c(case_id, fever, chills, cough, aches, vomit)) %>%     # select columns\n  pivot_longer(                                                  # pivot longer\n    cols = -case_id,                                  \n    names_to = \"symptom_name\",\n    values_to = \"symptom_is_present\") %>%\n  mutate(                                                        # replace missing values\n    symptom_is_present = replace_na(symptom_is_present, \"unknown\")) %>% \n  \n  ggplot(                                                        # begin ggplot!\n    mapping = aes(x = symptom_name, fill = symptom_is_present))+\n  geom_bar(position = \"fill\", col = \"black\") +                    \n  theme_classic() +\n  labs(\n    x = \"Symptom\",\n    y = \"Symptom status (proportion)\"\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n## Plot continuous data\n\nThroughout this page, you have already seen many examples of plotting continuous data. Here we briefly consolidate these and present a few variations.  \nVisualisations covered here include:\n\n* Plots for one continuous variable:  \n  * **Histogram**, a classic graph to present the distribution of a continuous variable. \n  * **Box plot** (also called box and whisker), to show the 25th, 50th, and 75th percentiles, tail ends of the distribution, and outliers ([important limitations](https://www.data-to-viz.com/caveat/boxplot.html)).  \n  * **Jitter plot**, to show all values as points that are 'jittered' so they can (mostly) all be seen, even where two have the same value.  \n  * **Violin plot**, show the distribution of a continuous variable based on the symmetrical width of the 'violin'. \n  * **Sina plot**, are a combination of jitter and violin plots, where individual points are shown but in the symmetrical shape of the distribution (via **ggforce** package).  \n* **Scatter plot** for two continuous variables.  \n* **Heat plots** for three continuous variables (linked to [Heat plots] page)  \n\n\n\n### Histograms {.unnumbered}\n\nHistograms may look like bar charts, but are distinct because they measure the distribution of a *continuous* variable. There are no spaces between the \"bars\", and only one column is provided to `geom_histogram()`.\n\nBelow is code for generating **histograms**, which group continuous data into ranges and display in adjacent bars of varying height. This is done using `geom_histogram()`. See the [\"Bar plot\" section](#ggplot_basics_bars) of the ggplot basics page to understand difference between `geom_histogram()`, `geom_bar()`, and `geom_col()`.  \n\nWe will show the distribution of ages of cases. Within `mapping = aes()` specify which column you want to see the distribution of. You can assign this column to either the x or the y axis. \n\nThe rows will be assigned to \"bins\" based on their numeric age, and these bins will be graphically represented by bars. If you specify a number of bins with the `bins = ` plot aesthetic, the break points are evenly spaced between the minimum and maximum values of the histogram. If `bins = ` is unspecified, an appropriate number of bins will be guessed and this message displayed after the plot:  \n\n```\n## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n``` \n\nIf you do not want to specify a number of bins to `bins = `, you could alternatively specify `binwidth = ` in the units of the axis. We give a few examples showing different bins and bin widths:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A) Regular histogram\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram()+\n  labs(title = \"A) Default histogram (30 bins)\")\n\n# B) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 50)+\n  labs(title = \"B) Set to 50 bins\")\n\n# C) Fewer bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(bins = 5)+\n  labs(title = \"C) Set to 5 bins\")\n\n\n# D) More bins\nggplot(data = linelist, aes(x = age))+  # provide x variable\n  geom_histogram(binwidth = 1)+\n  labs(title = \"D) binwidth of 1\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-35-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-35-2.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-35-3.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-35-4.png){width=50%}\n:::\n:::\n\n\n\n\nTo get smoothed proportions, you can use `geom_density()`:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional density\")\n\n# Stacked frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_density(size = 2, alpha = 0.2, position = \"stack\")+\n  labs(title = \"'Stacked' proportional densities\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-36-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-36-2.png){width=50%}\n:::\n:::\n\n\n\nTo get a \"stacked\" histogram (of a continuous column of data), you can do one of the following:  \n\n1) Use `geom_histogram()` with the `fill = ` argument within `aes()` and assigned to the grouping column, or  \n2) Use `geom_freqpoly()`, which is likely easier to read (you can still set `binwidth = `)  \n3) To see proportions of all values, set the `y = after_stat(density)` (use this syntax exactly - not changed for your data). Note: these proportions will show *per group*.  \n\nEach is shown below (*note use of `color = ` vs. `fill = ` in each):  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \"Stacked\" histogram\nggplot(data = linelist, mapping = aes(x = age, fill = gender)) +\n  geom_histogram(binwidth = 2)+\n  labs(title = \"'Stacked' histogram\")\n\n# Frequency \nggplot(data = linelist, mapping = aes(x = age, color = gender)) +\n  geom_freqpoly(binwidth = 2, size = 2)+\n  labs(title = \"Freqpoly\")\n\n# Frequency with proportion axis\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), color = gender)) +\n  geom_freqpoly(binwidth = 5, size = 2)+\n  labs(title = \"Proportional freqpoly\")\n\n# Frequency with proportion axis, smoothed\nggplot(data = linelist, mapping = aes(x = age, y = after_stat(density), fill = gender)) +\n  geom_density(size = 2, alpha = 0.2)+\n  labs(title = \"Proportional, smoothed with geom_density()\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-37-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-37-2.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-37-3.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-37-4.png){width=50%}\n:::\n:::\n\n\nIf you want to have some fun, try `geom_density_ridges` from the **ggridges** package ([vignette here](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html).  \n\nRead more in detail about histograms at the **tidyverse** [page on geom_histogram()](https://ggplot2.tidyverse.org/reference/geom_histogram.html).  \n\n\n\n### Box plots {.unnumbered}\n\nBox plots are common, but have important limitations. They can obscure the actual distribution - e.g. a bi-modal distribution. See this [R graph gallery](https://www.r-graph-gallery.com/boxplot.html) and this [data-to-viz article](https://www.data-to-viz.com/caveat/boxplot.html) for more details. However, they do nicely display the inter-quartile range and outliers - so they can be overlaid on top of other types of plots that show the distribution in more detail.  \n\nBelow we remind you of the various components of a boxplot:  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/boxplot.png){fig-align='center' width=100%}\n:::\n:::\n\n\nWhen using `geom_boxplot()` to create a box plot, you generally map only one axis (x or y) within `aes()`. The axis specified determines if the plots are horizontal or vertical. \n\nIn most geoms, you create a plot per group by mapping an aesthetic like `color = ` or `fill = ` to a column within `aes()`. However, for box plots achieve this by assigning the grouping column to the un-assigned axis (x or y). Below is code for a boxplot of *all* age values in the dataset, and second is code to display one box plot for each (non-missing) gender in the dataset. Note that `NA` (missing) values will appear as a separate box plot unless removed. In this example we also set the `fill` to the column `outcome` so each plot is a different color - but this is not necessary.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A) Overall boxplot\nggplot(data = linelist)+  \n  geom_boxplot(mapping = aes(y = age))+   # only y axis mapped (not x)\n  labs(title = \"A) Overall boxplot\")\n\n# B) Box plot by group\nggplot(data = linelist, mapping = aes(y = age, x = gender, fill = gender)) + \n  geom_boxplot()+                     \n  theme(legend.position = \"none\")+   # remove legend (redundant)\n  labs(title = \"B) Boxplot by gender\")      \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-39-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-39-2.png){width=50%}\n:::\n:::\n\n\nFor code to add a box plot to the edges of a scatter plot (\"marginal\" plots) see the page [ggplot tips].  \n\n\n\n\n\n### Violin, jitter, and sina plots {.unnumbered}\n\nBelow is code for creating **violin plots** (`geom_violin`) and **jitter plots** (`geom_jitter`) to show distributions. You can specify that the fill or color is also determined by the data, by inserting these options within `aes()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A) Jitter plot by group\nggplot(data = linelist %>% drop_na(outcome),      # remove missing values\n       mapping = aes(y = age,                     # Continuous variable\n           x = outcome,                           # Grouping variable\n           color = outcome))+                     # Color variable\n  geom_jitter()+                                  # Create the violin plot\n  labs(title = \"A) jitter plot by gender\")     \n\n\n\n# B) Violin plot by group\nggplot(data = linelist %>% drop_na(outcome),       # remove missing values\n       mapping = aes(y = age,                      # Continuous variable\n           x = outcome,                            # Grouping variable\n           fill = outcome))+                       # fill variable (color)\n  geom_violin()+                                   # create the violin plot\n  labs(title = \"B) violin plot by gender\")    \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-40-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-40-2.png){width=50%}\n:::\n:::\n\n\n\nYou can combine the two using the `geom_sina()` function from the **ggforce** package. The sina plots the jitter points in the shape of the violin plot. When overlaid on the violin plot (adjusting the transparencies) this can be easier to visually interpret.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A) Sina plot by group\nggplot(\n  data = linelist %>% drop_na(outcome), \n  aes(y = age,           # numeric variable\n      x = outcome)) +    # group variable\n  geom_violin(\n    aes(fill = outcome), # fill (color of violin background)\n    color = \"white\",     # white outline\n    alpha = 0.2)+        # transparency\n  geom_sina(\n    size=1,                # Change the size of the jitter\n    aes(color = outcome))+ # color (color of dots)\n  scale_fill_manual(       # Define fill for violin background by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  scale_color_manual(      # Define colours for points by death/recover\n    values = c(\"Death\" = \"#bf5300\", \n              \"Recover\" = \"#11118c\")) + \n  theme_minimal() +                                # Remove the gray background\n  theme(legend.position = \"none\") +                # Remove unnecessary legend\n  labs(title = \"B) violin and sina plot by gender, with extra formatting\")      \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n### Two continuous variables  {.unnumbered}\n\nFollowing similar syntax, `geom_point()` will allow you to plot two continuous variables against each other in a **scatter plot**. This is useful for showing actual values rather than their distributions. A basic scatter plot of age vs weight is shown in (A). In (B) we again use `facet_grid()` to show the relationship between two continuous variables in the linelist. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic scatter plot of weight and age\nggplot(data = linelist, \n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"A) Scatter plot of weight and age\")\n\n# Scatter plot of weight and age by gender and Ebola outcome\nggplot(data = linelist %>% drop_na(gender, outcome), # filter retains non-missing gender/outcome\n       mapping = aes(y = wt_kg, x = age))+\n  geom_point() +\n  labs(title = \"B) Scatter plot of weight and age faceted by gender and outcome\")+\n  facet_grid(gender ~ outcome) \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-42-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-42-2.png){width=50%}\n:::\n:::\n\n\n\n### Three continuous variables {.unnumbered}  \n\nYou can display three continuous variables by utilizing the `fill = ` argument to create a *heat plot*. The color of each \"cell\" will reflect the value of the third continuous column of data. See the [ggplot tips] page and the page on on [Heat plots] for more details and several examples. \n\nThere are ways to make 3D plots in R, but for applied epidemiology these are often difficult to interpret and therefore less useful for decision-making.  \n\n\n\n\n\n\n\n\n\n## Plot categorical data  \n\nCategorical data can be character values, could be logical (TRUE/FALSE), or factors (see the [Factors] page). \n\n### Preparation  {.unnumbered}\n\n#### Data structure {.unnumbered}  \n\nThe first thing to understand about your categorical data is whether it exists as raw observations like a linelist of cases, or as a summary or aggregate data frame that holds counts or proportions. The state of your data will impact which plotting function you use:  \n\n* If your data are raw observations with one row per observation, you will likely use `geom_bar()`  \n* If your data are already aggregated into counts or proportions, you will likely use `geom_col()`  \n\n\n#### Column class and value ordering {.unnumbered}  \n\nNext, examine the class of the columns you want to plot. We look at `hospital`, first with `class()` from **base** R, and with `tabyl()` from **janitor**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View class of hospital column - we can see it is a character\nclass(linelist$hospital)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# Look at values and proportions within hospital column\nlinelist %>% \n  tabyl(hospital)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             hospital    n    percent\n                     Central Hospital  454 0.07710598\n                    Military Hospital  896 0.15217391\n                              Missing 1469 0.24949049\n                                Other  885 0.15030571\n                        Port Hospital 1762 0.29925272\n St. Mark's Maternity Hospital (SMMH)  422 0.07167120\n```\n:::\n:::\n\n\nWe can see the values within are characters, as they are hospital names, and by default they are ordered alphabetically. There are 'other' and 'missing' values, which we would prefer to be the last subcategories when presenting breakdowns. So we change this column into a factor and re-order it. This is covered in more detail in the [Factors] page.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to factor and define level order so \"Other\" and \"Missing\" are last\nlinelist <- linelist %>% \n  mutate(\n    hospital = fct_relevel(hospital, \n      \"St. Mark's Maternity Hospital (SMMH)\",\n      \"Port Hospital\", \n      \"Central Hospital\",\n      \"Military Hospital\",\n      \"Other\",\n      \"Missing\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(linelist$hospital)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"St. Mark's Maternity Hospital (SMMH)\"\n[2] \"Port Hospital\"                       \n[3] \"Central Hospital\"                    \n[4] \"Military Hospital\"                   \n[5] \"Other\"                               \n[6] \"Missing\"                             \n```\n:::\n:::\n\n\n### `geom_bar()` {#ggplot_basics_bars .unnumbered}  \n\nUse `geom_bar()` if you want bar height (or the height of stacked bar components) to reflect *the number of relevant rows in the data*. These bars will have gaps between them, unless the `width = ` plot aesthetic is adjusted.  \n\n* Provide only one axis column assignment (typically x-axis). If you provide x and y, you will get `Error: stat_count() can only have an x or y aesthetic.`  \n* You can create stacked bars by adding a `fill = ` column assignment within `mapping = aes()`  \n* The opposite axis will be titled \"count\" by default, because it represents the number of rows  \n\nBelow, we have assigned outcome to the y-axis, but it could just as easily be on the x-axis. If you have longer character values, it can sometimes look better to flip the bars sideways and put the legend on the bottom. This may impact how your factor levels are ordered - in this case we reverse them with `fct_rev()` to put missing and other at the bottom.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A) Outcomes in all cases\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital)), width = 0.7) +\n  theme_minimal()+\n  labs(title = \"A) Number of cases by hospital\",\n       y = \"Hospital\")\n\n\n# B) Outcomes in all cases by hosptial\nggplot(linelist %>% drop_na(outcome)) + \n  geom_bar(aes(y = fct_rev(hospital), fill = outcome), width = 0.7) +\n  theme_minimal()+\n  theme(legend.position = \"bottom\") +\n  labs(title = \"B) Number of recovered and dead Ebola cases, by hospital\",\n       y = \"Hospital\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-46-1.png){width=50%}\n:::\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-46-2.png){width=50%}\n:::\n:::\n\n\n\n\n\n\n### `geom_col()` {.unnumbered}  \n\nUse `geom_col()` if you want bar height (or height of stacked bar components) to reflect pre-calculated *values* that exists in the data. Often, these are summary or \"aggregated\" counts, or proportions.  \n\nProvide column assignments for *both* axes to `geom_col()`. Typically your x-axis column is discrete and your y-axis column is numeric. \n\nLet's say we have this dataset `outcomes`:  \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  outcome     n proportion\n  <chr>   <int>      <dbl>\n1 Death    1022       56.2\n2 Recover   796       43.8\n```\n:::\n:::\n\n\n\n\nBelow is code using `geom_col` for creating  simple bar charts to show the distribution of Ebola patient outcomes. With geom_col, both x and y need to be specified. Here x is the categorical variable along the x axis, and y is the generated proportions column `proportion`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Outcomes in all cases\nggplot(outcomes) + \n  geom_col(aes(x=outcome, y = proportion)) +\n  labs(subtitle = \"Number of recovered and dead Ebola cases\")\n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-48-1.png){width=432}\n:::\n:::\n\n\nTo show breakdowns by hospital, we would need our table to contain more information, and to be in \"long\" format. We create this table with the frequencies of the combined categories `outcome` and `hospital` (see [Grouping data] page for grouping tips). \n\n\n::: {.cell}\n\n```{.r .cell-code}\noutcomes2 <- linelist %>% \n  drop_na(outcome) %>% \n  count(hospital, outcome) %>%  # get counts by hospital and outcome\n  group_by(hospital) %>%        # Group so proportions are out of hospital total\n  mutate(proportion = n/sum(n)*100) # calculate proportions of hospital total\n\nhead(outcomes2) # Preview data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n# Groups:   hospital [3]\n  hospital                             outcome     n proportion\n  <fct>                                <chr>   <int>      <dbl>\n1 St. Mark's Maternity Hospital (SMMH) Death     199       61.2\n2 St. Mark's Maternity Hospital (SMMH) Recover   126       38.8\n3 Port Hospital                        Death     785       57.6\n4 Port Hospital                        Recover   579       42.4\n5 Central Hospital                     Death     193       53.9\n6 Central Hospital                     Recover   165       46.1\n```\n:::\n:::\n\n\nWe then create the ggplot with some added formatting:\n\n  * **Axis flip**: Swapped the axis around with `coord_flip()` so that we can read the hospital names.\n  * **Columns side-by-side**: Added a `position = \"dodge\"` argument so that the bars for death and recover are presented side by side rather than stacked. Note stacked bars are the default.\n  * **Column width**: Specified 'width', so the columns are half as thin as the full possible width.\n  * **Column order**: Reversed the order of the categories on the y axis so that 'Other' and 'Missing' are at the bottom, with `scale_x_discrete(limits=rev)`. Note that we used that rather than `scale_y_discrete` because hospital is stated in the `x` argument of `aes()`, even if visually it is on the y axis. We do this because Ggplot seems to present categories backwards unless we tell it not to.  \n  * **Other details**: Labels/titles and colours added within `labs` and `scale_fill_color` respectively.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# Outcomes in all cases by hospital\nggplot(outcomes2) +  \n  geom_col(\n    mapping = aes(\n      x = proportion,                 # show pre-calculated proportion values\n      y = fct_rev(hospital),          # reverse level order so missing/other at bottom\n      fill = outcome),                # stacked by outcome\n    width = 0.5)+                    # thinner bars (out of 1)\n  theme_minimal() +                  # Minimal theme \n  theme(legend.position = \"bottom\")+\n  labs(subtitle = \"Number of recovered and dead Ebola cases, by hospital\",\n       fill = \"Outcome\",             # legend title\n       y = \"Count\",                  # y axis title\n       x = \"Hospital of admission\")+ # x axis title\n  scale_fill_manual(                 # adding colors manually\n    values = c(\"Death\"= \"#3B1c8C\",\n               \"Recover\" = \"#21908D\" )) \n```\n\n::: {.cell-output-display}\n![](ggplot_basics_files/figure-html/unnamed-chunk-50-1.png){width=768}\n:::\n:::\n\n\n\nNote that the proportions are binary, so we may prefer to drop 'recover' and just show the proportion who died. This is just for illustration purposes.  \n\n\nIf using `geom_col()` with dates data (e.g. an epicurve from aggregated data) - you will want to adjust the `width = ` argument to remove the \"gap\" lines between the bars. If using daily data set `width = 1`. If weekly, `width = 7`. Months are not possible because each month has a different number of days.  \n\n\n### `geom_histogram()` {.unnumbered}  \n\nHistograms may look like bar charts, but are distinct because they measure the distribution of a *continuous* variable. There are no spaces between the \"bars\", and only one column is provided to `geom_histogram()`. There are arguments specific to histograms such as `bin_width = ` and `breaks = ` to specify how the data should be binned. The section above on continuous data and the page on [Epidemic curves] provide additional detail.  \n\n\n\n## Resources  \n\nThere is a huge amount of help online, especially with ggplot. See:\n\n* [ggplot2 cheat sheet](http://r-statistics.co/ggplot2-cheatsheet.html)\n* [another cheat sheet](https://biostats.w.uib.no/the-ggplot2-cheat-sheet-by-rstudio/)\n* [tidyverse ggplot basics page](https://ggplot2.tidyverse.org/reference/)  \n* [plotting continuous variables](http://www.sthda.com/english/articles/32-r-graphics-essentials/131-plot-two-continuous-variables-scatter-graph-and-alternatives/)  \n* R for Data Science pages on [data visualization](https://r4ds.had.co.nz/data-visualisation.html)\n* [graphics for communicaton](https://r4ds.had.co.nz/graphics-for-communication.html)  \n\n",
    "supporting": [
      "ggplot_basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.js\"></script>\r\n<link href=\"../site_libs/selectize-0.12.0/selectize.bootstrap3.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/selectize-0.12.0/selectize.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}