{
  "hash": "12071748334d23f8f00560ac754ac51f",
  "result": {
    "markdown": "\n# R projects {}  \n\n\nAn R project enables your work to be bundled in a portable, self-contained folder. Within the project, all the relevant scripts, data files, figures/outputs, and history are stored in sub-folders and importantly - the *working directory* is the project's root folder.  \n\n\n## Suggested use  \n\nA common, efficient, and trouble-free way to use R is to combine these 3 elements. One discrete work project is hosted within one R project. Each element is described in the sections below.  \n\n1) An **R project**  \n     - A self-contained working environment with folders for data, scripts, outputs, etc.  \n2) The **here** package for relative filepaths  \n     - Filepaths are written relative to the root folder of the R project - see [Import and export] for more information  \n3) The **rio** package for importing/exporting  \n     - `import()` and `export()` handle any file type by by its extension (e.g. .csv, .xlsx, .png)  \n     \n     \n\n\n<!-- ======================================================= -->\n## Creating an R project {}\n\nTo create an R project, select \"New Project\" from the File menu.\n\n* If you want to create a new folder for the project, select \"New directory\" and indicate where you want it to be created.  \n* If you want to create the project within an existing folder, click \"Existing directory\" and indicate the folder.  \n* If you want to clone a Github repository, select the third option \"Version Control\" and then \"Git\". See the page on [Version control and collaboration with Git and Github] for further details.  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/create_project.png){fig-align='center' width=75%}\n:::\n:::\n\n\n\nThe R project you create will come in the form of a folder containing a *.Rproj* file. This file is a shortcut and likely the primary way you will open your project. You can also open a project by selecting \"Open Project\" from the File menu. Alternatively on the far upper right side of RStudio you will see an R project icon and a drop-down menu of available R projects. \n\nTo exit from an R project, either open a new project, or close the project (File - Close Project).  \n\n\n### Switch projects {.unnumbered}\n\nTo switch between projects, click the R project icon and drop-down menu at the very top-right of RStudio. You will see options to Close Project, Open Project, and a list of recent projects.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/Rproject_dropdown.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n### Settings {.unnumbered}  \n\nIt is generally advised that you start RStudio each time with a \"clean slate\" - that is, with your workspace **not** preserved from your previous session. This will mean that your objects and results will not persist session-to-session (you must re-create them by running your scripts). This is good, because it will force you to write better scripts and avoid errors in the long run.  \n\nTo set RStudio to have a \"clean slate\" each time at start-up:  \n\n* Select \"Project Options\" from the Tools menu.  \n* In the \"General\" tab, set RStudio to **not** restore .RData into workspace at startup, and to **not** save workspace to .RData on exit.  \n\n\n\n### Organization {.unnumbered}  \n\nIt is common to have subfolders in your project. Consider having folders such as \"data\", \"scripts\", \"figures\", \"presentations\". You can add folders in the typical way you would add a new folder for your computer. Alternatively, see the page on [Directory interactions] to learn how to create new folders with R commands.  \n\n\n### Version control {.unnumbered}  \n\nConsider a version control system. It could be something as simple as having dates on the names of scripts (e.g. \"transmission_analysis_2020-10-03.R\") and an \"archive\" folder. Consider also having commented header text at the top of each script with a description, tags, authors, and change log.  \n\nA more complicated method would involve using Github or a similar platform for version control. See the page on [Version control and collaboration with Git and Github].  \n\nOne tip is that you can search across an entire project or folder using the \"Find in Files\" tool (Edit menu). It can search and even replace strings across multiple files.  \n\n\n\n\n\n\n## Examples  \n\nBelow are some examples of import/export/saving using `here()` from within an R projct. Read more about using the **here** package in the [Import and export] page.  \n\n\n*Importing `linelist_raw.xlsx` from the \"data\" folder in your R project*  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- import(here(\"data\", \"linelist_raw.xlsx\"))\n```\n:::\n\n\n*Exporting the R object `linelist` as \"my_linelist.rds\" to the \"clean\" folder within the \"data\" folder in your R project.*   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nexport(linelist, here(\"data\",\"clean\", \"my_linelist.rds\"))\n```\n:::\n\n\n*Saving the most recently printed plot as \"epicurve_2021-02-15.png\" within the \"epicurves\" folder in \"outputs\" folder in your R project.*  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(here(\"outputs\", \"epicurves\", \"epicurve_2021-02-15.png\"))\n```\n:::\n\n\n\n\n\n<!-- ======================================================= -->\n## Resources {}\n\nRStudio webpage on [using R projects](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}