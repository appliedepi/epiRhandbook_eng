{
  "hash": "05759b2244dfa1d19ce9fc40aaac2871",
  "result": {
    "markdown": "\n# Directory interactions { }  \n\nIn this page we cover common scenarios where you create, interact with, save, and import with directories (folders).  \n\n\n## Preparation  \n\n### **fs** package {.unnumbered}  \n\nThe **fs** package is a **tidyverse** package that facilitate directory interactions, improving on some of the **base** R functions. In the sections below we will often use functions from **fs**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  fs,             # file/directory interactions\n  rio,            # import/export\n  here,           # relative file pathways\n  tidyverse)      # data management and visualization\n```\n:::\n\n\n\n### Print directory as a dendrogram tree {.unnumbered}  \n\nUse the function `dir_tree()` from **fs**.  \n\nProvide the folder filepath to `path = ` and decide whether you want to show only one level (`recurse = FALSE`) or all files in all sub-levels (`recurse = TRUE`). Below we use `here()` as shorthand for the R project and specify its sub-folder \"data\", which contains all the data used for this R handbook. We set it to display all files within \"data\" and its sub-folders (e.g. \"cache\", \"epidemic models\", \"population\", \"shp\", and \"weather\").  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_tree(path = here(\"data\"), recurse = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD:/Book Writing/epiRhandbook_eng/data\n├── africa_countries.geo.json\n├── cache\n│   └── epidemic_models\n│       ├── 2015-04-30\n│       │   ├── estimated_reported_cases_samples.rds\n│       │   ├── estimate_samples.rds\n│       │   ├── latest_date.rds\n│       │   ├── reported_cases.rds\n│       │   ├── summarised_estimated_reported_cases.rds\n│       │   ├── summarised_estimates.rds\n│       │   └── summary.rds\n│       ├── epinow_res.rds\n│       ├── epinow_res_small.rds\n│       ├── generation_time.rds\n│       └── incubation_period.rds\n├── case_linelists\n│   ├── cleaning_dict.csv\n│   ├── fluH7N9_China_2013.csv\n│   ├── linelist_cleaned.rds\n│   ├── linelist_cleaned.xlsx\n│   └── linelist_raw.xlsx\n├── country_demographics.csv\n├── covid_example_data\n│   ├── covid_example_data.xlsx\n│   └── covid_shapefile\n│       ├── FultonCountyZipCodes.cpg\n│       ├── FultonCountyZipCodes.dbf\n│       ├── FultonCountyZipCodes.prj\n│       ├── FultonCountyZipCodes.sbn\n│       ├── FultonCountyZipCodes.sbx\n│       ├── FultonCountyZipCodes.shp\n│       ├── FultonCountyZipCodes.shp.xml\n│       └── FultonCountyZipCodes.shx\n├── covid_incidence.csv\n├── covid_incidence_map.R\n├── district_count_data.xlsx\n├── example\n│   ├── Central Hospital.csv\n│   ├── district_weekly_count_data.xlsx\n│   ├── fluH7N9_China_2013.csv\n│   ├── hospital_linelists.xlsx\n│   ├── linelists\n│   │   ├── 20201007linelist.csv\n│   │   ├── case_linelist20201006.csv\n│   │   ├── case_linelist_2020-10-02.csv\n│   │   ├── case_linelist_2020-10-03.csv\n│   │   ├── case_linelist_2020-10-04.csv\n│   │   ├── case_linelist_2020-10-05.csv\n│   │   └── case_linelist_2020-10-08.xlsx\n│   ├── Military Hospital.csv\n│   ├── Missing.csv\n│   ├── Other.csv\n│   ├── Port Hospital.csv\n│   └── St. Mark's Maternity Hospital (SMMH).csv\n├── facility_count_data.rds\n├── flexdashboard\n│   ├── outbreak_dashboard.html\n│   ├── outbreak_dashboard.Rmd\n│   ├── outbreak_dashboard_shiny.Rmd\n│   ├── outbreak_dashboard_test.html\n│   └── outbreak_dashboard_test.Rmd\n├── fluH7N9_China_2013.csv\n├── gis\n│   ├── africa_countries.geo.json\n│   ├── covid_incidence.csv\n│   ├── covid_incidence_map.R\n│   ├── linelist_cleaned_with_adm3.rds\n│   ├── population\n│   │   ├── sle_admpop_adm3_2020.csv\n│   │   └── sle_population_statistics_sierraleone_2020.xlsx\n│   └── shp\n│       ├── README.txt\n│       ├── sle_adm3.CPG\n│       ├── sle_adm3.dbf\n│       ├── sle_adm3.prj\n│       ├── sle_adm3.sbn\n│       ├── sle_adm3.sbx\n│       ├── sle_adm3.shp\n│       ├── sle_adm3.shp.xml\n│       ├── sle_adm3.shx\n│       ├── sle_hf.CPG\n│       ├── sle_hf.dbf\n│       ├── sle_hf.prj\n│       ├── sle_hf.sbn\n│       ├── sle_hf.sbx\n│       ├── sle_hf.shp\n│       └── sle_hf.shx\n├── godata\n│   ├── cases_clean.rds\n│   ├── contacts_clean.rds\n│   ├── followups_clean.rds\n│   └── relationships_clean.rds\n├── likert_data.csv\n├── linelist_cleaned.rds\n├── linelist_cleaned.xlsx\n├── linelist_raw.xlsx\n├── make_evd_dataset-DESKTOP-JIEUMMI.R\n├── make_evd_dataset.R\n├── malaria_app\n│   ├── app.R\n│   ├── data\n│   │   └── facility_count_data.rds\n│   ├── funcs\n│   │   └── plot_epicurve.R\n│   ├── global.R\n│   ├── malaria_app.Rproj\n│   ├── server.R\n│   └── ui.R\n├── malaria_facility_count_data.rds\n├── phylo\n│   ├── sample_data_Shigella_tree.csv\n│   ├── Shigella_subtree_2.nwk\n│   ├── Shigella_subtree_2.txt\n│   └── Shigella_tree.txt\n├── rmarkdown\n│   ├── outbreak_report.docx\n│   ├── outbreak_report.html\n│   ├── outbreak_report.pdf\n│   ├── outbreak_report.pptx\n│   ├── outbreak_report.Rmd\n│   ├── report_tabbed_example.html\n│   └── report_tabbed_example.Rmd\n├── standardization\n│   ├── country_demographics.csv\n│   ├── country_demographics_2.csv\n│   ├── deaths_countryA.csv\n│   ├── deaths_countryB.csv\n│   └── world_standard_population_by_sex.csv\n├── surveys\n│   ├── population.xlsx\n│   ├── survey_data.xlsx\n│   └── survey_dict.xlsx\n└── time_series\n    ├── campylobacter_germany.xlsx\n    └── weather\n        ├── germany_weather2002.nc\n        ├── germany_weather2003.nc\n        ├── germany_weather2004.nc\n        ├── germany_weather2005.nc\n        ├── germany_weather2006.nc\n        ├── germany_weather2007.nc\n        ├── germany_weather2008.nc\n        ├── germany_weather2009.nc\n        ├── germany_weather2010.nc\n        └── germany_weather2011.nc\n```\n:::\n:::\n\n\n\n## List files in a directory  \n\nTo list just the file names in a directory you can use `dir()` from **base** R. For example, this command lists the file names of the files in the \"population\" subfolder of the \"data\" folder in an R project. The relative filepath is provided using `here()` (which you can read about more in the [Import and export] page).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# file names\ndir(here(\"data\", \"gis\", \"population\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sle_admpop_adm3_2020.csv\"                       \n[2] \"sle_population_statistics_sierraleone_2020.xlsx\"\n```\n:::\n:::\n\n\nTo list the full file paths of the directory's files, you can use you can use `dir_ls()` from **fs**. A **base** R alternative is `list.files()`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# file paths\ndir_ls(here(\"data\", \"gis\", \"population\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD:/Book Writing/epiRhandbook_eng/data/gis/population/sle_admpop_adm3_2020.csv\nD:/Book Writing/epiRhandbook_eng/data/gis/population/sle_population_statistics_sierraleone_2020.xlsx\n```\n:::\n:::\n\n\nTo get all the metadata information about each file in a directory, (e.g. path, modification date, etc.) you can use `dir_info()` from **fs**.  \n\nThis can be particularly useful if you want to extract the last modification time of the file, for example if you want to import the most recent version of a file. For an example of this, see the [Import and export] page.     \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# file info\ndir_info(here(\"data\", \"gis\", \"population\"))\n```\n:::\n\n\nHere is the data frame returned. Scroll to the right to see all the columns.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-ee8bd15f48d7c0351c1a\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ee8bd15f48d7c0351c1a\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"D:/Book Writing/epiRhandbook_eng/data/gis/population/sle_admpop_adm3_2020.csv\",\"D:/Book Writing/epiRhandbook_eng/data/gis/population/sle_population_statistics_sierraleone_2020.xlsx\"],[\"file\",\"file\"],[26939,57850],[33206,33206],[\"2024-02-18T13:56:17Z\",\"2024-02-18T13:56:17Z\"],[null,null],[null,null],[1724206208,1724206208],[1,1],[0,0],[844424930327714,844424930327715],[4096,4096],[56,120],[0,0],[0,0],[\"2024-02-18T14:41:13Z\",\"2024-02-18T13:56:17Z\"],[\"2024-02-18T13:56:17Z\",\"2024-02-18T13:56:17Z\"],[\"2024-02-18T13:56:17Z\",\"2024-02-18T13:56:17Z\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>path<\\/th>\\n      <th>type<\\/th>\\n      <th>size<\\/th>\\n      <th>permissions<\\/th>\\n      <th>modification_time<\\/th>\\n      <th>user<\\/th>\\n      <th>group<\\/th>\\n      <th>device_id<\\/th>\\n      <th>hard_links<\\/th>\\n      <th>special_device_id<\\/th>\\n      <th>inode<\\/th>\\n      <th>block_size<\\/th>\\n      <th>blocks<\\/th>\\n      <th>flags<\\/th>\\n      <th>generation<\\/th>\\n      <th>access_time<\\/th>\\n      <th>change_time<\\/th>\\n      <th>birth_time<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,7,8,9,10,11,12,13,14]},{\"name\":\"path\",\"targets\":0},{\"name\":\"type\",\"targets\":1},{\"name\":\"size\",\"targets\":2},{\"name\":\"permissions\",\"targets\":3},{\"name\":\"modification_time\",\"targets\":4},{\"name\":\"user\",\"targets\":5},{\"name\":\"group\",\"targets\":6},{\"name\":\"device_id\",\"targets\":7},{\"name\":\"hard_links\",\"targets\":8},{\"name\":\"special_device_id\",\"targets\":9},{\"name\":\"inode\",\"targets\":10},{\"name\":\"block_size\",\"targets\":11},{\"name\":\"blocks\",\"targets\":12},{\"name\":\"flags\",\"targets\":13},{\"name\":\"generation\",\"targets\":14},{\"name\":\"access_time\",\"targets\":15},{\"name\":\"change_time\",\"targets\":16},{\"name\":\"birth_time\",\"targets\":17}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## File information  \n\nTo extract metadata information about a specific file, you can use `file_info()` from **fs** (or `file.info()` from **base** R).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_info(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-183dfbb4533e020a96d8\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-183dfbb4533e020a96d8\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"D:/Book Writing/epiRhandbook_eng/data/case_linelists/linelist_cleaned.rds\"],[\"file\"],[290215],[33206],[\"2024-02-18T13:56:16Z\"],[null],[null],[1724206208],[1],[0],[844424930327664],[4096],[568],[0],[0],[\"2024-02-18T14:50:08Z\"],[\"2024-02-18T13:56:16Z\"],[\"2024-02-18T13:56:16Z\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>path<\\/th>\\n      <th>type<\\/th>\\n      <th>size<\\/th>\\n      <th>permissions<\\/th>\\n      <th>modification_time<\\/th>\\n      <th>user<\\/th>\\n      <th>group<\\/th>\\n      <th>device_id<\\/th>\\n      <th>hard_links<\\/th>\\n      <th>special_device_id<\\/th>\\n      <th>inode<\\/th>\\n      <th>block_size<\\/th>\\n      <th>blocks<\\/th>\\n      <th>flags<\\/th>\\n      <th>generation<\\/th>\\n      <th>access_time<\\/th>\\n      <th>change_time<\\/th>\\n      <th>birth_time<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,7,8,9,10,11,12,13,14]},{\"name\":\"path\",\"targets\":0},{\"name\":\"type\",\"targets\":1},{\"name\":\"size\",\"targets\":2},{\"name\":\"permissions\",\"targets\":3},{\"name\":\"modification_time\",\"targets\":4},{\"name\":\"user\",\"targets\":5},{\"name\":\"group\",\"targets\":6},{\"name\":\"device_id\",\"targets\":7},{\"name\":\"hard_links\",\"targets\":8},{\"name\":\"special_device_id\",\"targets\":9},{\"name\":\"inode\",\"targets\":10},{\"name\":\"block_size\",\"targets\":11},{\"name\":\"blocks\",\"targets\":12},{\"name\":\"flags\",\"targets\":13},{\"name\":\"generation\",\"targets\":14},{\"name\":\"access_time\",\"targets\":15},{\"name\":\"change_time\",\"targets\":16},{\"name\":\"birth_time\",\"targets\":17}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nHere we use the `$` to index the result and return only the `modification_time` value.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_info(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))$modification_time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-18 14:56:16 CET\"\n```\n:::\n:::\n\n\n\n\n\n## Check if exists  \n\n### R objects {.unnumbered}  \n\nYou can use `exists()` from **base** R to check whether an R object exists *within* R (supply the object name in quotes).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nexists(\"linelist\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nNote that some **base** R packages use generic object names like \"data\" behind the scenes, that will appear as TRUE unless `inherit = FALSE` is specified. This is one reason to not name your dataset \"data\".  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nexists(\"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nexists(\"data\", inherit = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nIf you are writing a function, you should use `missing()` from **base** R to check if an argument is present or not, instead of `exists()`.  \n\n\n\n### Directories {.unnumbered}  \n\nTo check whether a directory exists, provide the file path (and file name) to `is_dir()` from **fs**. Scroll to the right to see that `TRUE` is printed.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_dir(here(\"data\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD:/Book Writing/epiRhandbook_eng/data \n                                 TRUE \n```\n:::\n:::\n\n\nAn alternative is `file.exists()` from **base** R.  \n\n\n### Files {.unnumbered}  \n\nTo check if a specific file exists, use `is_file()` from **fs**. Scroll to the right to see that `TRUE` is printed.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_file(here(\"data\", \"case_linelists\", \"linelist_cleaned.rds\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nD:/Book Writing/epiRhandbook_eng/data/case_linelists/linelist_cleaned.rds \n                                                                     TRUE \n```\n:::\n:::\n\n\nA **base** R alternative is `file.exists()`.  \n\n\n\n## Create  \n\n### Directories {.unnumbered}  \n\nTo create a new directory (folder) you can use `dir_create()` from **fs**. If the directory already exists, it will not be overwritten and no error will be returned. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndir_create(here(\"data\", \"test\"))\n```\n:::\n\n\nAn alternative is `dir.create()` from **base** R, which will show an error if the directory already exists. In contrast, `dir_create()` in this scenario will be silent.  \n\n### Files {.unnumbered}  \n\nYou can create an (empty) file with `file_create()` from **fs**. If the file already exists, it will not be over-written or changed.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_create(here(\"data\", \"test.rds\"))\n```\n:::\n\n\nA **base** R alternative is `file.create()`. But if the file already exists, this option will truncate it. If you use `file_create()` the file will be left unchanged.  \n\n\n### Create if does not exists {.unnumbered}  \n\nUNDER CONSTRUCTION  \n\n\n## Delete\n\n### R objects {.unnumbered}  \n\nUse `rm()` from **base** R to remove an R object.  \n\n### Directories {.unnumbered}  \n\nUse `dir_delete()` from **fs**. \n\n\n### Files {.unnumbered}  \n\nYou can delete files with `file_delete()` from **fs**.  \n\n\n\n## Running other files  \n\n### `source()` {.unnumbered}  \n\nTo run one R script from another R script, you can use the `source()` command (from **base** R).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(here(\"scripts\", \"cleaning_scripts\", \"clean_testing_data.R\"))\n```\n:::\n\n\nThis is equivalent to viewing the above R script and clicking the \"Source\" button in the upper-right of the script. This will execute the script but will do it silently (no output to the R console) unless specifically intended. See the page on [Interactive console] for examples of using `source()` to interact with a user via the R console in question-and-answer mode.  \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/source_button.png){fig-align='center' width=82 height=300%}\n:::\n:::\n\n\n\n### `render()` {.unnumbered}  \n\n`render()` is a variation on `source()` most often used for R markdown scripts. You provide the `input = ` which is the R markdown file, and also the `output_format = ` (typically either \"html_document\", \"pdf_document\", \"word_document\", \"\") \n\nSee the page on [Reports with R Markdown] for more details. Also see the documentation for `render()` [here](https://rmarkdown.rstudio.com/docs/reference/render.html) or by entering `?render`.  \n\n\n\n### Run files in a directory {.unnumbered}\n\nYou can create a *for loop* and use it to `source()` every file in a directory, as identified with `dir()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(script in dir(here(\"scripts\"), pattern = \".R$\")) {   # for each script name in the R Project's \"scripts\" folder (with .R extension)\n  source(here(\"scripts\", script))                        # source the file with the matching name that exists in the scripts folder\n}\n```\n:::\n\n\nIf you only want to run certain scripts, you can identify them by name like this:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nscripts_to_run <- c(\n     \"epicurves.R\",\n     \"demographic_tables.R\",\n     \"survival_curves.R\"\n)\n\nfor(script in scripts_to_run) {\n  source(here(\"scripts\", script))\n}\n```\n:::\n\n\n\n\nHere is a [comparison](https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html) of the **fs** and **base** R functions.  \n\n### Import files in a directory  {.unnumbered}\n\nSee the page on [Import and export] for importing and exporting individual files.  \n\nAlso see the [Import and export] page for methods to automatically import the most recent file, based on a date in the file name *or* by looking at the file meta-data.  \n\nSee the page on [Iteration, loops, and lists] for an example with the package **purrr** demonstrating:  \n\n* Splitting a data frame and saving it out as multiple CSV files  \n* Splitting a data frame and saving each part as a separate sheet within one Excel workbook  \n* Importing multiple CSV files and combining them into one dataframe  \n* Importing an Excel workbook with multiple sheets and combining them into one dataframe  \n\n\n\n\n## **base** R  \n\nSee below the functions `list.files()` and `dir()`, which perform the same operation of listing files within a specified directory. You can specify `ignore.case =` or a specific pattern to look for. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path = here(\"data\"))\n\nlist.files(path = here(\"data\"), pattern = \".csv\")\n# dir(path = here(\"data\"), pattern = \".csv\")\n\nlist.files(path = here(\"data\"), pattern = \"evd\", ignore.case = TRUE)\n```\n:::\n\n\nIf a file is currently \"open\", it will display in your folder with a tilde in front, like \"~$hospital_linelists.xlsx\".  \n\n\n<!-- ======================================================= -->\n## Resources {  }\n\nhttps://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}