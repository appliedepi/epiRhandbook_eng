{
  "hash": "b8ad4776ddfe573cd76e52c557865f51",
  "result": {
    "markdown": "\n# Joining data { }  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/left-join.gif){width=50%}\n:::\n:::\n\n\n*Above: an animated example of a left join ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))*  \n\n\nThis page describes ways to \"join\", \"match\", \"link\" \"bind\", and otherwise combine data frames.  \n\nIt is uncommon that your epidemiological analysis or workflow does not involve multiple sources of data, and the linkage of multiple datasets. Perhaps you need to connect laboratory data to patient clinical outcomes, or Google mobility data to infectious disease trends, or even a dataset at one stage of analysis to a transformed version of itself.\n\nIn this page we demonstrate code to:  \n\n* Conduct *joins* of two data frames such that rows are matched based on common values in identifier columns  \n* Join two data frames based on *probabilistic* (likely) matches between values  \n* Expand a data frame by directly *binding* or (\"appending\") rows or columns from another data frame  \n\n\n<!-- ======================================================= -->\n## Preparation { }\n\n### Load packages {.unnumbered}\n\nThis code chunk shows the loading of packages required for the analyses. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  rio,            # import and export\n  here,           # locate files \n  tidyverse,      # data management and visualisation\n  RecordLinkage,  # probabilistic matches\n  fastLink        # probabilistic matches\n)\n```\n:::\n\n\n\n\n### Import data {.unnumbered}\n\nTo begin, we import the cleaned linelist of cases from a simulated Ebola epidemic. If you want to follow along, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the \"clean\" linelist</a> (as .rds file). Import data with the `import()` function from the **rio** package (it handles many file types like .xlsx, .csv, .rds - see the [Import and export] page for details).  \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# import case linelist \nlinelist <- import(\"linelist_cleaned.rds\")\n```\n:::\n\n\nThe first 50 rows of the linelist are displayed below.\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5a0ccbf25a3463903bd5\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5a0ccbf25a3463903bd5\">{\"x\":{\"filter\":\"top\",\"vertical\":false,\"filterHTML\":\"<tr>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"2\\\" data-max=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399075200000\\\" data-max=\\\"1406419200000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1399939200000\\\" data-max=\\\"1.407024e+12\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400025600000\\\" data-max=\\\"1407110400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"date\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"1400371200000\\\" data-max=\\\"1410566400000\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\" disabled=\\\"\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"67\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-29&quot;,&quot;30-49&quot;,&quot;50-69&quot;,&quot;70+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"factor\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"width: 100%; display: none;\\\">\\n      <select multiple=\\\"multiple\\\" style=\\\"width: 100%;\\\" data-options=\\\"[&quot;0-4&quot;,&quot;5-9&quot;,&quot;10-14&quot;,&quot;15-19&quot;,&quot;20-24&quot;,&quot;25-29&quot;,&quot;30-34&quot;,&quot;35-39&quot;,&quot;40-44&quot;,&quot;45-49&quot;,&quot;50-54&quot;,&quot;55-59&quot;,&quot;60-64&quot;,&quot;65-69&quot;,&quot;70-74&quot;,&quot;75-79&quot;,&quot;80-84&quot;,&quot;85+&quot;]\\\"><\\/select>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"-13.2697246824573\\\" data-max=\\\"-13.209391925612\\\" data-scale=\\\"13\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"8.45171855856465\\\" data-max=\\\"8.48802917129884\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"100\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"11\\\" data-max=\\\"241\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"20\\\" data-max=\\\"24\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"35.9\\\" data-max=\\\"38\\\" data-scale=\\\"1\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"character\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"428.994082840237\\\" data-scale=\\\"14\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n  <td data-type=\\\"number\\\" style=\\\"vertical-align: top;\\\">\\n    <div class=\\\"form-group has-feedback\\\" style=\\\"margin-bottom: auto;\\\">\\n      <input type=\\\"search\\\" placeholder=\\\"All\\\" class=\\\"form-control\\\" style=\\\"width: 100%;\\\"/>\\n      <span class=\\\"glyphicon glyphicon-remove-circle form-control-feedback\\\"><\\/span>\\n    <\\/div>\\n    <div style=\\\"display: none;position: absolute;width: 200px;opacity: 1\\\">\\n      <div data-min=\\\"0\\\" data-max=\\\"2\\\"><\\/div>\\n      <span style=\\\"float: left;\\\"><\\/span>\\n      <span style=\\\"float: right;\\\"><\\/span>\\n    <\\/div>\\n  <\\/td>\\n<\\/tr>\",\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\",\"2978ac\",\"57a565\",\"fc15ef\",\"2eaa9a\",\"bbfa93\",\"c97dd9\",\"f50e8a\",\"3a7673\",\"7f5a01\",\"ddddee\",\"99e8fa\",\"567136\",\"9371a9\",\"bc2adf\",\"403057\",\"8bd1e8\",\"f327be\",\"42e1a9\",\"90e5fe\",\"959170\",\"8ebf6e\",\"e56412\",\"6d788e\",\"a47529\",\"67be4e\",\"da8ecb\",\"148f18\",\"2cb9a5\",\"f5c142\",\"70a9fe\",\"3ad520\",\"062638\",\"c76676\",\"baacc1\",\"497372\",\"23e499\",\"38cc4a\",\"3789ee\",\"c71dcd\",\"6b70f0\"],[4,4,2,3,3,3,4,4,4,4,4,4,6,5,6,9,10,8,7,6,7,6,8,6,10,8,6,12,5,8,7,9,11,5,8,5,6,11,7,9,7,8,9,12,13,9,8,10,8,7],[\"2014-05-08\",null,null,\"2014-05-04\",\"2014-05-18\",\"2014-05-03\",\"2014-05-22\",\"2014-05-28\",null,null,\"2014-05-30\",\"2014-05-28\",\"2014-06-14\",\"2014-06-07\",\"2014-06-09\",null,null,null,\"2014-06-23\",\"2014-06-18\",\"2014-06-24\",null,null,\"2014-07-03\",null,\"2014-07-10\",\"2014-06-14\",null,\"2014-06-18\",\"2014-06-29\",\"2014-07-02\",\"2014-07-12\",\"2014-07-12\",\"2014-06-13\",\"2014-07-15\",\"2014-06-20\",null,null,\"2014-07-20\",null,\"2014-07-12\",\"2014-07-19\",\"2014-07-18\",\"2014-07-18\",\"2014-07-27\",null,\"2014-07-19\",\"2014-07-26\",\"2014-07-24\",null],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\",\"2014-06-06\",\"2014-06-13\",\"2014-06-16\",\"2014-06-17\",\"2014-06-18\",\"2014-06-19\",\"2014-06-22\",\"2014-06-23\",\"2014-06-25\",\"2014-06-26\",\"2014-06-28\",\"2014-07-02\",\"2014-07-08\",\"2014-07-09\",\"2014-07-09\",\"2014-07-10\",\"2014-07-12\",\"2014-07-12\",\"2014-07-13\",\"2014-07-13\",\"2014-07-14\",\"2014-07-15\",\"2014-07-16\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-22\",\"2014-07-22\",\"2014-07-24\",\"2014-07-24\",\"2014-07-25\",\"2014-07-25\",\"2014-07-27\",\"2014-07-29\",\"2014-07-30\",null,\"2014-08-01\",\"2014-08-02\",\"2014-08-03\"],[\"2014-05-15\",\"2014-05-14\",\"2014-05-18\",\"2014-05-20\",\"2014-05-22\",\"2014-05-23\",\"2014-05-29\",\"2014-06-03\",\"2014-06-06\",\"2014-06-07\",\"2014-06-08\",\"2014-06-15\",\"2014-06-17\",\"2014-06-17\",\"2014-06-20\",\"2014-06-19\",\"2014-06-23\",\"2014-06-24\",\"2014-06-27\",\"2014-06-28\",\"2014-06-29\",\"2014-07-03\",\"2014-07-09\",\"2014-07-09\",\"2014-07-11\",\"2014-07-11\",\"2014-07-13\",\"2014-07-14\",\"2014-07-14\",\"2014-07-13\",\"2014-07-14\",\"2014-07-17\",\"2014-07-17\",\"2014-07-18\",\"2014-07-19\",\"2014-07-20\",\"2014-07-20\",\"2014-07-22\",\"2014-07-24\",\"2014-07-26\",\"2014-07-24\",\"2014-07-27\",\"2014-07-25\",\"2014-07-27\",\"2014-07-31\",\"2014-08-01\",\"2014-08-03\",\"2014-08-02\",\"2014-08-02\",\"2014-08-04\"],[null,\"2014-05-18\",\"2014-05-30\",null,\"2014-05-29\",\"2014-05-24\",\"2014-06-01\",\"2014-06-07\",\"2014-06-18\",\"2014-06-09\",\"2014-06-15\",null,\"2014-07-09\",null,\"2014-06-30\",\"2014-07-11\",\"2014-07-01\",\"2014-06-25\",\"2014-07-06\",\"2014-07-02\",\"2014-07-09\",\"2014-07-07\",\"2014-07-20\",null,\"2014-07-22\",\"2014-07-16\",\"2014-07-14\",\"2014-07-20\",\"2014-07-16\",\"2014-07-19\",\"2014-07-27\",\"2014-07-19\",null,\"2014-07-26\",\"2014-08-14\",\"2014-08-01\",\"2014-07-23\",\"2014-08-28\",\"2014-07-28\",\"2014-07-19\",null,\"2014-08-03\",null,null,null,\"2014-08-06\",\"2014-08-21\",\"2014-09-13\",\"2014-08-04\",null],[null,\"Recover\",\"Recover\",null,\"Recover\",\"Recover\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Death\",\"Death\",\"Recover\",\"Recover\",null,\"Recover\",null,null,\"Death\",\"Death\",\"Recover\",null,null,null,\"Death\",null,\"Death\",\"Death\",null,\"Death\",\"Recover\",\"Death\",\"Recover\",\"Death\",\"Recover\",null,\"Death\",\"Recover\",\"Recover\",\"Death\",null,null,\"Death\",\"Death\",\"Death\",\"Death\",\"Recover\",null,\"Death\",\"Death\"],[\"m\",\"f\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"m\",\"m\",\"f\",\"f\",\"m\",\"f\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"f\",\"f\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\",\"f\",\"m\",\"f\",\"m\",\"m\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\",\"years\"],[2,3,56,18,3,16,16,0,61,27,12,42,19,7,7,13,35,17,11,11,19,54,14,28,6,3,31,6,67,14,10,21,20,45,1,12,3,15,20,36,7,13,14,3,10,1,0,20,26,14],[\"0-4\",\"0-4\",\"50-69\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"50-69\",\"20-29\",\"10-14\",\"30-49\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"30-49\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-69\",\"10-14\",\"20-29\",\"5-9\",\"0-4\",\"30-49\",\"5-9\",\"50-69\",\"10-14\",\"10-14\",\"20-29\",\"20-29\",\"30-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-29\",\"30-49\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-29\",\"20-29\",\"10-14\"],[\"0-4\",\"0-4\",\"55-59\",\"15-19\",\"0-4\",\"15-19\",\"15-19\",\"0-4\",\"60-64\",\"25-29\",\"10-14\",\"40-44\",\"15-19\",\"5-9\",\"5-9\",\"10-14\",\"35-39\",\"15-19\",\"10-14\",\"10-14\",\"15-19\",\"50-54\",\"10-14\",\"25-29\",\"5-9\",\"0-4\",\"30-34\",\"5-9\",\"65-69\",\"10-14\",\"10-14\",\"20-24\",\"20-24\",\"45-49\",\"0-4\",\"10-14\",\"0-4\",\"15-19\",\"20-24\",\"35-39\",\"5-9\",\"10-14\",\"10-14\",\"0-4\",\"10-14\",\"0-4\",\"0-4\",\"20-24\",\"25-29\",\"10-14\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Port Hospital\",\"Military Hospital\",\"Missing\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Military Hospital\",\"Port Hospital\",\"Central Hospital\",\"Military Hospital\",\"Central Hospital\",\"Missing\",\"Military Hospital\",\"Other\",\"Missing\",\"Missing\",\"Port Hospital\",\"Port Hospital\",\"Port Hospital\",\"Missing\",\"Central Hospital\",\"Military Hospital\",\"Other\",\"Other\",\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"St. Mark's Maternity Hospital (SMMH)\",\"Missing\"],[-13.2157351064963,-13.2152339775486,-13.212910703914,-13.2363711169728,-13.2228638912441,-13.222625321098,-13.2331547837254,-13.2320975453153,-13.2225511595637,-13.2572163655863,-13.2206286746001,-13.253989309478,-13.2385127873491,-13.209391925612,-13.2157278814899,-13.2243437095992,-13.2336087079551,-13.21422143145,-13.2339681355349,-13.2535640411465,-13.2250089377786,-13.2160657166043,-13.2680671272333,-13.2266742923612,-13.2160179088168,-13.2482584611565,-13.2156319199566,-13.2142410663192,-13.2614879104088,-13.2452992638476,-13.2630592726116,-13.2343341712241,-13.2199077448676,-13.2227293309912,-13.2343062806506,-13.218781651651,-13.2483677722899,-13.2097478342339,-13.2680867723786,-13.2587535457526,-13.262635786914,-13.2697246824573,-13.2209026809759,-13.2330734719715,-13.2680923666905,-13.2547212675054,-13.2573683214693,-13.2137356012883,-13.2175973322257,-13.2486407324245],[8.46897295100924,8.45171855856465,8.46481700596819,8.4754761613651,8.46082377490923,8.461830626007281,8.462729314626459,8.461443675342711,8.46191259217774,8.472923276435059,8.48401630165138,8.458371253408441,8.477617055125091,8.47570184950483,8.477799468789719,8.47145134147474,8.478048406853629,8.48528034195779,8.469575303958671,8.45957352078114,8.474048895115439,8.488029171298839,8.473437335922,8.484082637344621,8.46242233645879,8.470268221265719,8.463984474805329,8.464134789434199,8.456230946296071,8.48334624336805,8.47493999153642,8.47832062438022,8.469393389176499,8.48480589906514,8.47121232619015,8.48438437371817,8.484661585743391,8.477141599844281,8.462381270106089,8.455685978131131,8.4632880274758,8.47940722413856,8.46353857052336,8.461789681588639,8.47508713872833,8.458258081280711,8.4532568143863,8.4732571907655,8.479115866419329,8.48480340615605],[\"f547d6\",null,null,\"f90f5f\",\"11f8ea\",\"aec8ec\",\"893f25\",\"133ee7\",null,null,\"996f3a\",\"133ee7\",\"37a6f6\",\"9f6884\",\"4802b1\",null,null,null,\"a75c7f\",\"8e104d\",\"ab634e\",null,null,\"b799eb\",null,\"5d9e4d\",\"a15e13\",null,\"ea3740\",\"beb26e\",\"567136\",\"894024\",\"36e2e7\",\"a2086d\",\"7baf73\",\"eb2277\",null,null,\"d6584f\",null,\"312ecf\",\"52ea64\",\"cfd79c\",\"d145b7\",\"174288\",null,\"53608c\",\"3b096b\",\"f5c142\",null],[\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,\"other\",\"other\",\"other\",\"other\",\"other\",null,null,null,\"other\",\"other\",\"other\",null,null,\"other\",null,\"other\",\"other\",null,\"other\",\"funeral\",\"other\",\"funeral\",\"other\",\"other\",\"other\",\"funeral\",null,null,\"other\",null,\"other\",\"other\",\"other\",\"other\",\"other\",null,\"funeral\",\"other\",\"other\",null],[27,25,91,41,36,56,47,0,86,69,67,84,68,44,34,66,78,47,53,47,71,86,53,69,38,46,68,37,100,56,50,57,65,72,29,69,37,48,54,71,47,61,47,35,53,16,13,59,69,67],[48,59,238,135,71,116,87,11,226,174,112,186,174,90,91,152,214,137,117,131,150,241,131,161,80,69,188,66,233,142,110,182,164,214,26,157,39,154,133,168,100,125,123,67,134,31,36,125,183,169],[22,22,21,23,23,21,21,22,22,22,22,22,22,21,23,22,23,21,22,23,21,23,21,24,23,22,24,23,20,24,24,20,24,21,22,21,23,22,23,23,23,22,23,22,22,22,23,22,22,22],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"no\",\"yes\",\"no\",null,\"no\",\"no\",\"yes\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"yes\",\"yes\",\"yes\",\"no\",null],[\"no\",null,null,\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"no\",null,\"no\",\"no\",null,null,\"yes\",\"yes\",null,\"no\",\"no\",null,\"no\",\"no\",\"no\",\"no\",\"no\",\"no\",null],[\"yes\",null,null,\"no\",\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"no\",\"no\",\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"yes\",\"no\",\"no\",\"no\",null,\"no\",\"no\",\"no\",null,null,\"no\",\"yes\",null,\"yes\",\"yes\",null,null,\"yes\",\"yes\",null,\"yes\",\"yes\",null,\"yes\",\"yes\",\"no\",\"yes\",\"yes\",\"yes\",null],[36.8,36.9,36.9,36.8,36.9,37.6,37.3,37,36.4,35.9,36.5,36.9,36.5,37.1,36.5,37.3,37,38,38,36,37,36.7,36.9,36.5,37,36.5,37.6,36.6,36.6,36.2,36.4,37.1,37.5,37.5,37.4,36.9,36.4,37.3,37,37.8,36.5,37.5,36.7,37,37.3,36.6,36.5,36.6,37.6,36.8],[null,\"09:36\",\"16:48\",\"11:22\",\"12:60\",\"14:13\",\"14:33\",\"09:25\",\"11:16\",\"10:55\",\"16:03\",\"11:14\",\"12:42\",\"11:06\",\"09:10\",\"08:45\",null,\"15:41\",\"13:34\",\"18:58\",\"12:43\",\"16:33\",\"14:29\",\"07:18\",\"08:11\",\"16:32\",\"16:17\",\"07:32\",\"17:45\",null,\"13:24\",\"14:43\",\"02:33\",\"11:36\",\"17:28\",\"16:27\",null,\"20:49\",null,\"11:38\",\"14:25\",\"13:42\",\"21:22\",\"13:33\",\"19:06\",\"17:14\",\"20:09\",null,\"10:23\",\"09:09\"],[117.1875,71.81844297615629,16.06524962926347,22.49657064471879,71.41440190438405,41.61712247324614,62.09538908706566,0,16.83765369253662,22.79032897344431,53.41198979591836,24.28026361429067,22.46003435064077,54.32098765432099,41.05784325564545,28.56648199445983,17.03205520132763,25.04129149128882,38.7172182043977,27.3876813705495,31.55555555555556,14.80690759456621,30.88398111998135,26.61934338952972,59.37499999999999,96.61835748792272,19.23947487550928,84.94031221303948,18.41993774061044,27.77226740726046,41.32231404958677,17.20806665861611,24.16716240333135,15.72189710891781,428.9940828402366,27.99302202929125,243.2610124917817,20.23950075898128,30.52744643563797,25.15589569160998,47,39.04,31.06616432017979,77.96836711962574,29.51659612385831,166.4932362122789,100.3086419753086,37.76,20.60378034578518,23.45856237526698],[2,1,2,2,1,1,2,1,1,2,2,2,1,0,2,0,1,1,2,2,1,1,1,0,2,1,1,2,1,0,0,2,1,1,2,2,1,0,2,2,0,2,0,0,2,2,null,1,0,1]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>generation<\\/th>\\n      <th>date_infection<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>date_hospitalisation<\\/th>\\n      <th>date_outcome<\\/th>\\n      <th>outcome<\\/th>\\n      <th>gender<\\/th>\\n      <th>age<\\/th>\\n      <th>age_unit<\\/th>\\n      <th>age_years<\\/th>\\n      <th>age_cat<\\/th>\\n      <th>age_cat5<\\/th>\\n      <th>hospital<\\/th>\\n      <th>lon<\\/th>\\n      <th>lat<\\/th>\\n      <th>infector<\\/th>\\n      <th>source<\\/th>\\n      <th>wt_kg<\\/th>\\n      <th>ht_cm<\\/th>\\n      <th>ct_blood<\\/th>\\n      <th>fever<\\/th>\\n      <th>chills<\\/th>\\n      <th>cough<\\/th>\\n      <th>aches<\\/th>\\n      <th>vomit<\\/th>\\n      <th>temp<\\/th>\\n      <th>time_admission<\\/th>\\n      <th>bmi<\\/th>\\n      <th>days_onset_hosp<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,8,10,14,15,18,19,20,26,28,29]},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"generation\",\"targets\":1},{\"name\":\"date_infection\",\"targets\":2},{\"name\":\"date_onset\",\"targets\":3},{\"name\":\"date_hospitalisation\",\"targets\":4},{\"name\":\"date_outcome\",\"targets\":5},{\"name\":\"outcome\",\"targets\":6},{\"name\":\"gender\",\"targets\":7},{\"name\":\"age\",\"targets\":8},{\"name\":\"age_unit\",\"targets\":9},{\"name\":\"age_years\",\"targets\":10},{\"name\":\"age_cat\",\"targets\":11},{\"name\":\"age_cat5\",\"targets\":12},{\"name\":\"hospital\",\"targets\":13},{\"name\":\"lon\",\"targets\":14},{\"name\":\"lat\",\"targets\":15},{\"name\":\"infector\",\"targets\":16},{\"name\":\"source\",\"targets\":17},{\"name\":\"wt_kg\",\"targets\":18},{\"name\":\"ht_cm\",\"targets\":19},{\"name\":\"ct_blood\",\"targets\":20},{\"name\":\"fever\",\"targets\":21},{\"name\":\"chills\",\"targets\":22},{\"name\":\"cough\",\"targets\":23},{\"name\":\"aches\",\"targets\":24},{\"name\":\"vomit\",\"targets\":25},{\"name\":\"temp\",\"targets\":26},{\"name\":\"time_admission\",\"targets\":27},{\"name\":\"bmi\",\"targets\":28},{\"name\":\"days_onset_hosp\",\"targets\":29}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"orderCellsTop\":true,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n<!-- ======================================================= -->\n### Example datasets {.unnumbered}\n\nIn the joining section below, we will use the following datasets:  \n\n1) A \"miniature\" version of the case `linelist`, containing only the columns `case_id`, `date_onset`, and `hospital`, and only the first 10 rows  \n2) A separate data frame named `hosp_info`, which contains more details about each hospital  \n\nIn the section on probabilistic matching, we will use two different small datasets. The code to create those datasets is given in that section.  \n\n\n\n\n#### \"Miniature\" case linelist {#joins_llmini .unnumbered}  \n\nBelow is the the miniature case linelist, which contains only 10 rows and only columns `case_id`, `date_onset`, and `hospital`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini <- linelist %>%                 # start with original linelist\n  select(case_id, date_onset, hospital) %>%   # select columns\n  head(10)                                    # only take the first 10 rows\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b50a64b3f40b6d023f6c\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b50a64b3f40b6d023f6c\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\"],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n#### Hospital information data frame {#joins_hosp_info .unnumbered}  \n\nBelow is the code to create a separate data frame with additional information about seven hospitals (the catchment population, and the level of care available). Note that the name \"Military Hospital\" belongs to two different hospitals - one a primary level serving 10000 residents and the other a secondary level serving 50280 residents.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make the hospital information data frame\nhosp_info = data.frame(\n  hosp_name     = c(\"central hospital\", \"military\", \"military\", \"port\", \"St. Mark's\", \"ignace\", \"sisters\"),\n  catchment_pop = c(1950280, 40500, 10000, 50280, 12000, 5000, 4200),\n  level         = c(\"Tertiary\", \"Secondary\", \"Primary\", \"Secondary\", \"Secondary\", \"Primary\", \"Primary\")\n)\n```\n:::\n\n\nHere is this data frame:  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5cca1cd2233c7d54d0f3\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5cca1cd2233c7d54d0f3\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"central hospital\",\"military\",\"military\",\"port\",\"St. Mark's\",\"ignace\",\"sisters\"],[1950280,40500,10000,50280,12000,5000,4200],[\"Tertiary\",\"Secondary\",\"Primary\",\"Secondary\",\"Secondary\",\"Primary\",\"Primary\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hosp_name<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":7,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"hosp_name\",\"targets\":0},{\"name\":\"catchment_pop\",\"targets\":1},{\"name\":\"level\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[7,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Pre-cleaning {.unnumbered}\n\nTraditional joins (non-probabilistic) are case-sensitive and require exact character matches between values in the two data frames. To demonstrate some of the cleaning steps you might need to do before initiating a join, we will clean and align the `linelist_mini` and `hosp_info` datasets now.  \n\n**Identify differences**  \n\nWe need the values of the `hosp_name` column in the `hosp_info` data frame to match the values of the `hospital` column in the `linelist_mini` data frame.  \n\nHere are the values in the `linelist_mini` data frame, printed with the **base** R function `unique()`:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(linelist_mini$hospital)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Other\"                               \n[2] \"Missing\"                             \n[3] \"St. Mark's Maternity Hospital (SMMH)\"\n[4] \"Port Hospital\"                       \n[5] \"Military Hospital\"                   \n```\n:::\n:::\n\n\nand here are the values in the `hosp_info` data frame:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hosp_info$hosp_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"central hospital\" \"military\"         \"port\"             \"St. Mark's\"      \n[5] \"ignace\"           \"sisters\"         \n```\n:::\n:::\n\n\nYou can see that while some of the hospitals exist in both data frames, there are many differences in spelling.  \n\n\n\n**Align values**  \n\nWe begin by cleaning the values in the `hosp_info` data frame. As explained in the [Cleaning data and core functions] page, we can re-code values with logical criteria using **dplyr**'s `case_when()` function. For the four hospitals that exist in both data frames we change the values to align with the values in `linelist_mini`. The other hospitals we leave the values as they are (`TRUE ~ hosp_name`).   \n\n<span style=\"color: orange;\">**_CAUTION:_** Typically when cleaning one should create a new column (e.g. `hosp_name_clean`), but for ease of demonstration we show modification of the old column</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp_info <- hosp_info %>% \n  mutate(\n    hosp_name = case_when(\n      # criteria                         # new value\n      hosp_name == \"military\"          ~ \"Military Hospital\",\n      hosp_name == \"port\"              ~ \"Port Hospital\",\n      hosp_name == \"St. Mark's\"        ~ \"St. Mark's Maternity Hospital (SMMH)\",\n      hosp_name == \"central hospital\"  ~ \"Central Hospital\",\n      TRUE                             ~ hosp_name\n      )\n    )\n```\n:::\n\n\nThe hospital names that appear in both data frames are aligned. There are two hospitals in `hosp_info` that are not present in `linelist_mini` - we will deal with these later, in the join.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(hosp_info$hosp_name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Central Hospital\"                    \n[2] \"Military Hospital\"                   \n[3] \"Port Hospital\"                       \n[4] \"St. Mark's Maternity Hospital (SMMH)\"\n[5] \"ignace\"                              \n[6] \"sisters\"                             \n```\n:::\n:::\n\n\nPrior to a join, it is often easiest to convert a column to all lowercase or all uppercase. If you need to convert all values in a column to UPPER or lower case, use `mutate()` and wrap the column with one of these functions from **stringr**, as shown in the page on [Characters and strings].  \n\n`str_to_upper()`  \n`str_to_upper()`  \n`str_to_title()`  \n\n\n\n\n<!-- ======================================================= -->\n## **dplyr** joins { }\n\nThe **dplyr** package offers several different join functions. **dplyr** is included in the **tidyverse** package. These join functions are described below, with simple use cases.  \n\nMany thanks to [https://github.com/gadenbuie](https://github.com/gadenbuie/tidyexplain/tree/master/images) for the informative gifs!  \n\n\n\n\n<!-- ======================================================= -->\n### General syntax {.unnumbered}\n\nThe join commands can be run as standalone commands to join two data frames into a new object, or they can be used within a pipe chain (`%>%`) to merge one data frame into another as it is being cleaned or otherwise modified.  \n\nIn the example below, the function `left_join()` is used as a standalone command to create the a new `joined_data` data frame. The inputs are data frames 1 and 2 (`df1` and `df2`). The first data frame listed is the baseline data frame, and the second one listed is joined *to* it.  \n\nThe third argument `by = ` is where you specify the columns in each data frame that will be used to aligns the rows in the two data frames. If the names of these columns are different, provide them within a `c()` vector as shown below, where the rows are matched on the basis of common values between the column `ID` in `df1` and the column `identifier` in `df2`.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join based on common values between column \"ID\" (first data frame) and column \"identifier\" (second data frame)\njoined_data <- left_join(df1, df2, by = c(\"ID\" = \"identifier\"))\n```\n:::\n\n\nIf the `by` columns in both data frames have the exact same name, you can just provide this one name, within quotes.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Joint based on common values in column \"ID\" in both data frames\njoined_data <- left_join(df1, df2, by = \"ID\")\n```\n:::\n\n\nIf you are joining the data frames based on common values across multiple fields, list these fields within the `c()` vector. This example joins rows if the values in three columns in each dataset align exactly.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# join based on same first name, last name, and age\njoined_data <- left_join(df1, df2, by = c(\"name\" = \"firstname\", \"surname\" = \"lastname\", \"Age\" = \"age\"))\n```\n:::\n\n\n\nThe join commands can also be run within a pipe chain. This will modify the data frame being piped. \n\nIn the example below, `df1` is is passed through the pipes, `df2` is joined to it, and `df` is thus modified and re-defined.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- df1 %>%\n  filter(date_onset < as.Date(\"2020-03-05\")) %>% # miscellaneous cleaning \n  left_join(df2, by = c(\"ID\" = \"identifier\"))    # join df2 to df1\n```\n:::\n\n\n\n<span style=\"color: orange;\">**_CAUTION:_** Joins are case-specific! Therefore it is useful to convert all values to lowercase or uppercase prior to joining. See the page on characters/strings.</span>\n\n\n\n\n\n<!-- ======================================================= -->\n### Left and right joins {.unnumbered}  \n\n**A left or right join is commonly used to add information to a data frame** - new information is added only to rows that already existed in the baseline data frame. These are common joins in epidemiological work as they are used to add information from one dataset into another. \n\nIn using these joins, the written order of the data frames in the command is important*.  \n\n* In a *left join*, the *first* data frame written is the baseline  \n* In a *right join*, the *second* data frame written is the baseline  \n\n**All rows of the baseline data frame are kept.** Information in the other (secondary) data frame is joined to the baseline data frame *only if there is a match via the identifier column(s)*. In addition:  \n\n* Rows in the secondary data frame that do not match are dropped.  \n* If there are many baseline rows that match to one row in the secondary data frame (many-to-one), the secondary information is added to *each matching baseline row*.  \n* If a baseline row matches to multiple rows in the secondary data frame (one-to-many), all combinations are given, meaning *new rows may be added to your returned data frame!*  \n\nAnimated examples of left and right joins ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/left-join.gif){width=50%}\n:::\n\n::: {.cell-output-display}\n![](../images/right-join.gif){width=50%}\n:::\n:::\n\n\n**Example**  \n\nBelow is the output of a `left_join()` of `hosp_info` (secondary data frame, [view here](#joins_hosp_info))  *into* `linelist_mini` (baseline data frame, [view here](#joins_llmini)). The original `linelist_mini` has ` nrow(linelist_mini)` rows. The modified `linelist_mini` is displayed. Note the following:  \n\n* Two new columns, `catchment_pop` and `level` have been added on the left side of `linelist_mini`  \n* All original rows of the baseline data frame `linelist_mini` are kept  \n* Any original rows of `linelist_mini` for \"Military Hospital\" are duplicated because it matched to *two* rows in the secondary data frame, so both combinations are returned  \n* The join identifier column of the secondary dataset (`hosp_name`) has disappeared because it is redundant with the identifier column in the primary dataset (`hospital`)  \n* When a baseline row did not match to any secondary row (e.g. when `hospital` is \"Other\" or \"Missing\"), `NA` (blank) fills in the columns from the secondary data frame  \n* Rows in the secondary data frame with no match to the baseline data frame (\"sisters\" and \"ignace\" hospitals) were dropped  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini %>% \n  left_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(., hosp_info, by = c(hospital = \"hosp_name\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 4 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-3d6e114ced51e0e43b23\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-3d6e114ced51e0e43b23\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\"],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\"],[null,null,12000,50280,40500,10000,50280,null,null,null,null],[null,null,\"Secondary\",\"Secondary\",\"Secondary\",\"Primary\",\"Secondary\",null,null,null,null]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":11,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2},{\"name\":\"catchment_pop\",\"targets\":3},{\"name\":\"level\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,11,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n#### \"Should I use a right join, or a left join?\" {.unnumbered}  \n\nTo answer the above question, ask yourself \"which data frame should retain all of its rows?\" - use this one as the baseline. A *left join* keep all the rows in the first data frame written in the command, whereas a *right join* keeps all the rows in the second data frame.  \n\nThe two commands below achieve the same output - 10 rows of `hosp_info` joined *into* a `linelist_mini` baseline, but they use different joins. The result is that the column order will differ based on whether `hosp_info` arrives from the right (in the left join) or arrives from the left (in the right join). The order of the rows may also shift accordingly. But both of these consequences can be subsequently addressed, using `select()` to re-order columns or `arrange()` to sort rows.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The two commands below achieve the same data, but with differently ordered rows and columns\nleft_join(linelist_mini, hosp_info, by = c(\"hospital\" = \"hosp_name\"))\nright_join(hosp_info, linelist_mini, by = c(\"hosp_name\" = \"hospital\"))\n```\n:::\n\n\nHere is the result of `hosp_info` into `linelist_mini` via a left join (new columns incoming from the right)\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in left_join(linelist_mini, hosp_info, by = c(hospital = \"hosp_name\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 4 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5725882fdb34e4e0a35c\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5725882fdb34e4e0a35c\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\"],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\"],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\"],[null,null,12000,50280,40500,10000,50280,null,null,null,null],[null,null,\"Secondary\",\"Secondary\",\"Secondary\",\"Primary\",\"Secondary\",null,null,null,null]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":11,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2},{\"name\":\"catchment_pop\",\"targets\":3},{\"name\":\"level\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,11,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nHere is the result of `hosp_info` into  `linelist_mini` via a right join (new columns incoming from the left)  \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in right_join(hosp_info, linelist_mini, by = c(hosp_name = \"hospital\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 4 of `x` matches multiple rows in `y`.\nℹ Row 5 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-555000572c7134e34d5b\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-555000572c7134e34d5b\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Military Hospital\",\"Military Hospital\",\"Port Hospital\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\",\"Other\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Missing\"],[40500,10000,50280,50280,12000,null,null,null,null,null,null],[\"Secondary\",\"Primary\",\"Secondary\",\"Secondary\",\"Secondary\",null,null,null,null,null,null],[\"893f25\",\"893f25\",\"b8812a\",\"be99c8\",\"11f8ea\",\"5fe599\",\"8689b7\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\"],[\"2014-05-21\",\"2014-05-21\",\"2014-05-18\",\"2014-05-22\",\"2014-05-16\",\"2014-05-13\",\"2014-05-13\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hosp_name<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":11,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"hosp_name\",\"targets\":0},{\"name\":\"catchment_pop\",\"targets\":1},{\"name\":\"level\",\"targets\":2},{\"name\":\"case_id\",\"targets\":3},{\"name\":\"date_onset\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,11,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAlso consider whether your use-case is within a pipe chain (`%>%`). If the dataset in the pipes is the baseline, you will likely use a left join to add data to it.\n\n\n<!-- ======================================================= -->\n### Full join {.unnumbered} \n\n**A full join is the most *inclusive* of the joins** - it returns all rows from both data frames.  \n\nIf there are any rows present in one and not the other (where no match was found), the data frame will include them and become longer. `NA` missing values are used to fill-in any gaps created. As you join, watch the number of columns and rows carefully to troubleshoot case-sensitivity and exact character matches. \n\nThe \"baseline\" data frame is the one written first in the command. Adjustment of this will not impact which records are returned by the join, but it can impact the resulting column order, row order, and which identifier columns are retained.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/full-join.gif){width=50%}\n:::\n:::\n\n\nAnimated example of a full join ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))\n\n**Example**  \n\nBelow is the output of a `full_join()` of `hosp_info` (originally ` nrow(hosp_info)`, [view here](#joins_hosp_info))  *into* `linelist_mini` (originally ` nrow(linelist_mini)`, [view here](#joins_llmini)). Note the following:  \n\n* All baseline rows are kept (`linelist_mini`)  \n* Rows in the secondary that do not match to the baseline are kept (\"ignace\" and \"sisters\"), with values in the corresponding baseline columns  `case_id` and `onset` filled in with missing values  \n* Likewise, rows in the baseline data frame that do not match to the secondary (\"Other\" and \"Missing\") are kept, with secondary columns ` catchment_pop` and `level` filled-in with missing values  \n* In the case of one-to-many or many-to-one matches (e.g. rows for \"Military Hospital\"), all possible combinations are returned (lengthening the final data frame)  \n* Only the identifier column from the baseline is kept (`hospital`)  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini %>% \n  full_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in full_join(., hosp_info, by = c(hospital = \"hosp_name\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 4 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-d6cd09160a8f5965b617\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d6cd09160a8f5965b617\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"5fe599\",\"8689b7\",\"11f8ea\",\"b8812a\",\"893f25\",\"893f25\",\"be99c8\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\",null,null,null],[\"2014-05-13\",\"2014-05-13\",\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-21\",\"2014-05-22\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\",null,null,null],[\"Other\",\"Missing\",\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Military Hospital\",\"Port Hospital\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Central Hospital\",\"ignace\",\"sisters\"],[null,null,12000,50280,40500,10000,50280,null,null,null,null,1950280,5000,4200],[null,null,\"Secondary\",\"Secondary\",\"Secondary\",\"Primary\",\"Secondary\",null,null,null,null,\"Tertiary\",\"Primary\",\"Primary\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":15,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2},{\"name\":\"catchment_pop\",\"targets\":3},{\"name\":\"level\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,15,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Inner join {.unnumbered} \n\n**An inner join is the most *restrictive* of the joins** - it returns only rows with matches across both data frames.  \nThis means that the number of rows in the baseline data frame may actually *reduce*. Adjustment of which data frame is the \"baseline\" (written first in the function) will not impact which rows are returned, but it will impact the column order, row order, and which identifier columns are retained.   \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/inner-join.gif){width=50%}\n:::\n:::\n\n\nAnimated example of an inner join ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))\n\n\n**Example**  \n\nBelow is the output of an `inner_join()` of `linelist_mini` (baseline) with `hosp_info` (secondary). Note the following:  \n\n* Baseline rows with no match to the secondary data are removed (rows where `hospital` is \"Missing\" or \"Other\")  \n* Likewise, rows from the secondary data frame that had no match in the baseline are removed (rows where `hosp_name` is \"sisters\" or \"ignace\")  \n* Only the identifier column from the baseline is kept (`hospital`)  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in inner_join(., hosp_info, by = c(hospital = \"hosp_name\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 4 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-548ba2d53cc96c190e46\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-548ba2d53cc96c190e46\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"11f8ea\",\"b8812a\",\"893f25\",\"893f25\",\"be99c8\"],[\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-21\",\"2014-05-22\"],[\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Military Hospital\",\"Port Hospital\"],[12000,50280,40500,10000,50280],[\"Secondary\",\"Secondary\",\"Secondary\",\"Primary\",\"Secondary\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":12,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2},{\"name\":\"catchment_pop\",\"targets\":3},{\"name\":\"level\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,12,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n\n\n\n<!-- ======================================================= -->\n### Semi join {.unnumbered} \n\nA semi join is a \"filtering join\" which uses another dataset *not to add rows or columns, but to perform filtering*.  \n\nA **semi-join keeps all observations in the baseline data frame that have a match in the secondary data frame** (but does not add new columns nor duplicate any rows for multiple matches). Read more about these \"filtering\" joins [here](https://towardsdatascience.com/level-up-with-semi-joins-in-r-a068426096e0).  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/semi-join.gif){width=50%}\n:::\n:::\n\n\nAnimated example of a semi join ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))\n\nAs an example, the below code returns rows from the `hosp_info` data frame that have matches in `linelist_mini` based on hospital name.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp_info %>% \n  semi_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                             hosp_name catchment_pop     level\n1                    Military Hospital         40500 Secondary\n2                    Military Hospital         10000   Primary\n3                        Port Hospital         50280 Secondary\n4 St. Mark's Maternity Hospital (SMMH)         12000 Secondary\n```\n:::\n:::\n\n\n\n\n<!-- ======================================================= -->\n### Anti join {.unnumbered} \n\n**The anti join is another \"filtering join\" that returns rows in the baseline data frame that *do not* have a match in the secondary data frame.**  \n\nRead more about filtering joins [here](https://towardsdatascience.com/level-up-with-semi-joins-in-r-a068426096e0).  \n\nCommon scenarios for an anti-join include identifying records not present in another data frame, troubleshooting spelling in a join (reviewing records that *should have* matched), and examining records that were excluded after another join.  \n\n**As with `right_join()` and `left_join()`, the *baseline* data frame (listed first) is important**. The returned rows are from the baseline data frame only. Notice in the gif below that row in the secondary data frame (purple row 4) is not returned even though it does not match with the baseline.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../images/anti-join.gif){width=50%}\n:::\n:::\n\n\nAnimated example of an anti join ([image source](https://github.com/gadenbuie/tidyexplain/tree/master/images))\n\n\n#### Simple `anti_join()` example {.unnumbered}  \n\nFor a simple example, let's find the `hosp_info` hospitals that do not have any cases present in `linelist_mini`. We list `hosp_info` first, as the baseline data frame. The hospitals which are not present in `linelist_mini` are returned.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nhosp_info %>% \n  anti_join(linelist_mini, by = c(\"hosp_name\" = \"hospital\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b7c121e435a50df0e620\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b7c121e435a50df0e620\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Central Hospital\",\"ignace\",\"sisters\"],[1950280,5000,4200],[\"Tertiary\",\"Primary\",\"Primary\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hosp_name<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":12,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"hosp_name\",\"targets\":0},{\"name\":\"catchment_pop\",\"targets\":1},{\"name\":\"level\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,12,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n#### Complex `anti_join()` example {.unnumbered}  \n\nFor another example, let us say we ran an `inner_join()` between `linelist_mini` and `hosp_info`. This returns only a subset of the original `linelist_mini` records, as some are not present in `hosp_info`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini %>% \n  inner_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning in inner_join(., hosp_info, by = c(hospital = \"hosp_name\")): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 4 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-8547c13c6e65ae3717ce\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8547c13c6e65ae3717ce\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"11f8ea\",\"b8812a\",\"893f25\",\"893f25\",\"be99c8\"],[\"2014-05-16\",\"2014-05-18\",\"2014-05-21\",\"2014-05-21\",\"2014-05-22\"],[\"St. Mark's Maternity Hospital (SMMH)\",\"Port Hospital\",\"Military Hospital\",\"Military Hospital\",\"Port Hospital\"],[12000,50280,40500,10000,50280],[\"Secondary\",\"Secondary\",\"Secondary\",\"Primary\",\"Secondary\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n      <th>catchment_pop<\\/th>\\n      <th>level<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":8,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":3},{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2},{\"name\":\"catchment_pop\",\"targets\":3},{\"name\":\"level\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[8,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nTo review the `linelist_mini` records that were excluded during the inner join, we can run an anti-join with the same settings (`linelist_mini` as the baseline).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist_mini %>% \n  anti_join(hosp_info, by = c(\"hospital\" = \"hosp_name\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b650787aaa03c8ed4bd9\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b650787aaa03c8ed4bd9\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"5fe599\",\"8689b7\",\"07e3e8\",\"369449\",\"f393b4\",\"1389ca\"],[\"2014-05-13\",\"2014-05-13\",\"2014-05-27\",\"2014-06-02\",\"2014-06-05\",\"2014-06-05\"],[\"Other\",\"Missing\",\"Missing\",\"Missing\",\"Missing\",\"Missing\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>case_id<\\/th>\\n      <th>date_onset<\\/th>\\n      <th>hospital<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":8,\"columnDefs\":[{\"name\":\"case_id\",\"targets\":0},{\"name\":\"date_onset\",\"targets\":1},{\"name\":\"hospital\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[8,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nTo see the `hosp_info` records that were excluded in the inner join, we could also run an anti-join with `hosp_info` as the baseline data frame.  \n\n\n\n<!-- ======================================================= -->\n## Probabalistic matching { }\n\nIf you do not have a unique identifier common across datasets to join on, consider using a probabilistic matching algorithm. This would find matches between records based on similarity (e.g. Jaro–Winkler string distance, or numeric distance).  Below is a simple example using the package **fastLink** .  \n\n**Load packages**  \n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  tidyverse,      # data manipulation and visualization\n  fastLink        # record matching\n  )\n```\n:::\n\n\n\nHere are two small example datasets that we will use to demonstrate the probabilistic matching (`cases` and `test_results`):  \n\nHere is the code used to make the datasets:  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make datasets\n\ncases <- tribble(\n  ~gender, ~first,      ~middle,     ~last,        ~yr,   ~mon, ~day, ~district,\n  \"M\",     \"Amir\",      NA,          \"Khan\",       1989,  11,   22,   \"River\",\n  \"M\",     \"Anthony\",   \"B.\",        \"Smith\",      1970, 09, 19,      \"River\", \n  \"F\",     \"Marialisa\", \"Contreras\", \"Rodrigues\",  1972, 04, 15,      \"River\",\n  \"F\",     \"Elizabeth\", \"Casteel\",   \"Chase\",      1954, 03, 03,      \"City\",\n  \"M\",     \"Jose\",      \"Sanchez\",   \"Lopez\",      1996, 01, 06,      \"City\",\n  \"F\",     \"Cassidy\",   \"Jones\",      \"Davis\",     1980, 07, 20,      \"City\",\n  \"M\",     \"Michael\",   \"Murphy\",     \"O'Calaghan\",1969, 04, 12,      \"Rural\", \n  \"M\",     \"Oliver\",    \"Laurent\",    \"De Bordow\" , 1971, 02, 04,     \"River\",\n  \"F\",      \"Blessing\",  NA,          \"Adebayo\",   1955,  02, 14,     \"Rural\"\n)\n\nresults <- tribble(\n  ~gender,  ~first,     ~middle,     ~last,          ~yr, ~mon, ~day, ~district, ~result,\n  \"M\",      \"Amir\",     NA,          \"Khan\",         1989, 11,   22,  \"River\", \"positive\",\n  \"M\",      \"Tony\",   \"B\",         \"Smith\",          1970, 09,   19,  \"River\", \"positive\",\n  \"F\",      \"Maria\",    \"Contreras\", \"Rodriguez\",    1972, 04,   15,  \"Cty\",   \"negative\",\n  \"F\",      \"Betty\",    \"Castel\",   \"Chase\",        1954,  03,   30,  \"City\",  \"positive\",\n  \"F\",      \"Andrea\",   NA,          \"Kumaraswamy\",  2001, 01,   05,  \"Rural\", \"positive\",      \n  \"F\",      \"Caroline\", NA,          \"Wang\",         1988, 12,   11,  \"Rural\", \"negative\",\n  \"F\",      \"Trang\",    NA,          \"Nguyen\",       1981, 06,   10,  \"Rural\", \"positive\",\n  \"M\",      \"Olivier\" , \"Laurent\",   \"De Bordeaux\",  NA,   NA,   NA,  \"River\", \"positive\",\n  \"M\",      \"Mike\",     \"Murphy\",    \"O'Callaghan\",  1969, 04,   12,  \"Rural\", \"negative\",\n  \"F\",      \"Cassidy\",  \"Jones\",     \"Davis\",        1980, 07,   02,  \"City\",  \"positive\",\n  \"M\",      \"Mohammad\", NA,          \"Ali\",          1942, 01,   17,  \"City\",  \"negative\",\n  NA,       \"Jose\",     \"Sanchez\",   \"Lopez\",        1995, 01,   06,  \"City\",  \"negative\",\n  \"M\",      \"Abubakar\", NA,          \"Abullahi\",     1960, 01,   01,  \"River\", \"positive\",\n  \"F\",      \"Maria\",    \"Salinas\",   \"Contreras\",    1955, 03,   03,  \"River\", \"positive\"\n  )\n```\n:::\n\n\n\n**The `cases` dataset has 9 records** of patients who are awaiting test results.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-68e505cf77740a512187\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-68e505cf77740a512187\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"M\",\"M\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"F\"],[\"Amir\",\"Anthony\",\"Marialisa\",\"Elizabeth\",\"Jose\",\"Cassidy\",\"Michael\",\"Oliver\",\"Blessing\"],[null,\"B.\",\"Contreras\",\"Casteel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null],[\"Khan\",\"Smith\",\"Rodrigues\",\"Chase\",\"Lopez\",\"Davis\",\"O'Calaghan\",\"De Bordow\",\"Adebayo\"],[1989,1970,1972,1954,1996,1980,1969,1971,1955],[11,9,4,3,1,7,4,2,2],[22,19,15,3,6,20,12,4,14],[\"River\",\"River\",\"River\",\"City\",\"City\",\"City\",\"Rural\",\"River\",\"Rural\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>gender<\\/th>\\n      <th>first<\\/th>\\n      <th>middle<\\/th>\\n      <th>last<\\/th>\\n      <th>yr<\\/th>\\n      <th>mon<\\/th>\\n      <th>day<\\/th>\\n      <th>district<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":9,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[4,5,6]},{\"name\":\"gender\",\"targets\":0},{\"name\":\"first\",\"targets\":1},{\"name\":\"middle\",\"targets\":2},{\"name\":\"last\",\"targets\":3},{\"name\":\"yr\",\"targets\":4},{\"name\":\"mon\",\"targets\":5},{\"name\":\"day\",\"targets\":6},{\"name\":\"district\",\"targets\":7}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[9,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n\n**The `test_results` dataset** has 14 records and contains the column `result`, which we want to add to the records in `cases` based on probabilistic matching of records.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5df376400da9d4da3868\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5df376400da9d4da3868\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"M\",\"M\",\"F\",\"F\",\"F\",\"F\",\"F\",\"M\",\"M\",\"F\",\"M\",null,\"M\",\"F\"],[\"Amir\",\"Tony\",\"Maria\",\"Betty\",\"Andrea\",\"Caroline\",\"Trang\",\"Olivier\",\"Mike\",\"Cassidy\",\"Mohammad\",\"Jose\",\"Abubakar\",\"Maria\"],[null,\"B\",\"Contreras\",\"Castel\",null,null,null,\"Laurent\",\"Murphy\",\"Jones\",null,\"Sanchez\",null,\"Salinas\"],[\"Khan\",\"Smith\",\"Rodriguez\",\"Chase\",\"Kumaraswamy\",\"Wang\",\"Nguyen\",\"De Bordeaux\",\"O'Callaghan\",\"Davis\",\"Ali\",\"Lopez\",\"Abullahi\",\"Contreras\"],[1989,1970,1972,1954,2001,1988,1981,null,1969,1980,1942,1995,1960,1955],[11,9,4,3,1,12,6,null,4,7,1,1,1,3],[22,19,15,30,5,11,10,null,12,2,17,6,1,3],[\"River\",\"River\",\"Cty\",\"City\",\"Rural\",\"Rural\",\"Rural\",\"River\",\"Rural\",\"City\",\"City\",\"City\",\"River\",\"River\"],[\"positive\",\"positive\",\"negative\",\"positive\",\"positive\",\"negative\",\"positive\",\"positive\",\"negative\",\"positive\",\"negative\",\"negative\",\"positive\",\"positive\"]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>gender<\\/th>\\n      <th>first<\\/th>\\n      <th>middle<\\/th>\\n      <th>last<\\/th>\\n      <th>yr<\\/th>\\n      <th>mon<\\/th>\\n      <th>day<\\/th>\\n      <th>district<\\/th>\\n      <th>result<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":14,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[4,5,6]},{\"name\":\"gender\",\"targets\":0},{\"name\":\"first\",\"targets\":1},{\"name\":\"middle\",\"targets\":2},{\"name\":\"last\",\"targets\":3},{\"name\":\"yr\",\"targets\":4},{\"name\":\"mon\",\"targets\":5},{\"name\":\"day\",\"targets\":6},{\"name\":\"district\",\"targets\":7},{\"name\":\"result\",\"targets\":8}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,14,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Probabilistic matching {.unnumbered}  \n\nThe `fastLink()` function from the **fastLink** package can be used to apply a matching algorithm. Here is the basic information. You can read more detail by entering `?fastLink` in your console.  \n\n* Define the two data frames for comparison to arguments `dfA = ` and `dfB = `  \n* In `varnames = ` give all column names to be used for matching. They must all exist in both `dfA` and `dfB`.  \n* In `stringdist.match = ` give columns from those in `varnames` to be evaluated on string \"distance\".  \n* In `numeric.match = ` give columns from those in `varnames` to be evaluated on numeric distance.  \n* Missing values are ignored  \n* By default, each row in either data frame is matched to at most one row in the other data frame. If you want to see all the evaluated matches, set `dedupe.matches = FALSE`. The deduplication is done using Winkler's linear assignment solution.  \n\n*Tip: split one date column into three separate numeric columns using `day()`, `month()`, and `year()` from **lubridate** package*  \n\nThe default threshold for matches is 0.94 (`threshold.match = `) but you can adjust it higher or lower. If you define the threshold, consider that higher thresholds could yield more false-negatives (rows that do not match which actually should match) and likewise a lower threshold could yield more false-positive matches.  \n\nBelow, the data are matched on string distance across the name and district columns, and on numeric distance for year, month, and day of birth. A match threshold of 95% probability is set.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfl_output <- fastLink::fastLink(\n  dfA = cases,\n  dfB = results,\n  varnames = c(\"gender\", \"first\", \"middle\", \"last\", \"yr\", \"mon\", \"day\", \"district\"),\n  stringdist.match = c(\"first\", \"middle\", \"last\", \"district\"),\n  numeric.match = c(\"yr\", \"mon\", \"day\"),\n  threshold.match = 0.95)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n==================== \nfastLink(): Fast Probabilistic Record Linkage\n==================== \n\nIf you set return.all to FALSE, you will not be able to calculate a confusion table as a summary statistic.\nCalculating matches for each variable.\nGetting counts for parameter estimation.\n    Parallelizing calculation using OpenMP. 1 threads out of 8 are used.\nRunning the EM algorithm.\nGetting the indices of estimated matches.\n    Parallelizing calculation using OpenMP. 1 threads out of 8 are used.\nDeduping the estimated matches.\nGetting the match patterns for each estimated match.\n```\n:::\n:::\n\n\n**Review matches**  \n\nWe defined the object returned from `fastLink()` as `fl_output`. It is of class `list`, and it actually contains several data frames within it, detailing the results of the matching. One of these data frames is `matches`, which contains the most likely matches across `cases` and `results`. You can access this \"matches\" data frame with `fl_output$matches`. Below, it is saved as `my_matches` for ease of accessing later.    \n\nWhen `my_matches` is printed, you see two column vectors: the pairs of row numbers/indices (also called \"rownames\") in `cases` (\"inds.a\") and in `results` (\"inds.b\") representing the best matches. If a row number from a datafrane is missing, then no match was found in the other data frame at the specified match threshold.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# print matches\nmy_matches <- fl_output$matches\nmy_matches\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  inds.a inds.b\n1      1      1\n2      2      2\n3      3      3\n4      4      4\n5      8      8\n6      7      9\n7      6     10\n8      5     12\n```\n:::\n:::\n\n\nThings to note:  \n\n* Matches occurred despite slight differences in name spelling and dates of birth:  \n  * \"Tony B. Smith\" matched to \"Anthony B Smith\"  \n  * \"Maria Rodriguez\" matched to \"Marialisa Rodrigues\"  \n  * \"Betty Chase\" matched to \"Elizabeth Chase\"  \n  * \"Olivier Laurent De Bordeaux\" matched to \"Oliver Laurent De Bordow\" (missing date of birth ignored)  \n* One row from `cases` (for \"Blessing Adebayo\", row 9) had no good match in `results`, so it is not present in `my_matches`.  \n\n\n\n\n**Join based on the probabilistic matches**  \n\nTo use these matches to join `results` to `cases`, one strategy is:  \n\n1) Use `left_join()` to join `my_matches` to `cases` (matching rownames in `cases` to \"inds.a\" in `my_matches`)  \n2) Then use another `left_join()` to join `results` to `cases` (matching the newly-acquired \"inds.b\" in `cases` to rownames in `results`)  \n\nBefore the joins, we should clean the three data frames:  \n\n* Both `dfA` and `dfB` should have their row numbers (\"rowname\") converted to a proper column.  \n* Both the columns in `my_matches` are converted to class character, so they can be joined to the character rownames  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean data prior to joining\n#############################\n\n# convert cases rownames to a column \ncases_clean <- cases %>% rownames_to_column()\n\n# convert test_results rownames to a column\nresults_clean <- results %>% rownames_to_column()  \n\n# convert all columns in matches dataset to character, so they can be joined to the rownames\nmatches_clean <- my_matches %>%\n  mutate(across(everything(), as.character))\n\n\n\n# Join matches to dfA, then add dfB\n###################################\n# column \"inds.b\" is added to dfA\ncomplete <- left_join(cases_clean, matches_clean, by = c(\"rowname\" = \"inds.a\"))\n\n# column(s) from dfB are added \ncomplete <- left_join(complete, results_clean, by = c(\"inds.b\" = \"rowname\"))\n```\n:::\n\n\nAs performed using the code above, the resulting data frame `complete` will contain *all* columns from both `cases` and `results`. Many will be appended with suffixes \".x\" and \".y\", because the column names would otherwise be duplicated.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-851f321130cf4968e759\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-851f321130cf4968e759\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],[\"M\",\"M\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"F\"],[\"Amir\",\"Anthony\",\"Marialisa\",\"Elizabeth\",\"Jose\",\"Cassidy\",\"Michael\",\"Oliver\",\"Blessing\"],[null,\"B.\",\"Contreras\",\"Casteel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null],[\"Khan\",\"Smith\",\"Rodrigues\",\"Chase\",\"Lopez\",\"Davis\",\"O'Calaghan\",\"De Bordow\",\"Adebayo\"],[1989,1970,1972,1954,1996,1980,1969,1971,1955],[11,9,4,3,1,7,4,2,2],[22,19,15,3,6,20,12,4,14],[\"River\",\"River\",\"River\",\"City\",\"City\",\"City\",\"Rural\",\"River\",\"Rural\"],[\"1\",\"2\",\"3\",\"4\",\"12\",\"10\",\"9\",\"8\",null],[\"M\",\"M\",\"F\",\"F\",null,\"F\",\"M\",\"M\",null],[\"Amir\",\"Tony\",\"Maria\",\"Betty\",\"Jose\",\"Cassidy\",\"Mike\",\"Olivier\",null],[null,\"B\",\"Contreras\",\"Castel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null],[\"Khan\",\"Smith\",\"Rodriguez\",\"Chase\",\"Lopez\",\"Davis\",\"O'Callaghan\",\"De Bordeaux\",null],[1989,1970,1972,1954,1995,1980,1969,null,null],[11,9,4,3,1,7,4,null,null],[22,19,15,30,6,2,12,null,null],[\"River\",\"River\",\"Cty\",\"City\",\"City\",\"City\",\"Rural\",\"River\",null],[\"positive\",\"positive\",\"negative\",\"positive\",\"negative\",\"positive\",\"negative\",\"positive\",null]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>rowname<\\/th>\\n      <th>gender.x<\\/th>\\n      <th>first.x<\\/th>\\n      <th>middle.x<\\/th>\\n      <th>last.x<\\/th>\\n      <th>yr.x<\\/th>\\n      <th>mon.x<\\/th>\\n      <th>day.x<\\/th>\\n      <th>district.x<\\/th>\\n      <th>inds.b<\\/th>\\n      <th>gender.y<\\/th>\\n      <th>first.y<\\/th>\\n      <th>middle.y<\\/th>\\n      <th>last.y<\\/th>\\n      <th>yr.y<\\/th>\\n      <th>mon.y<\\/th>\\n      <th>day.y<\\/th>\\n      <th>district.y<\\/th>\\n      <th>result<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":9,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[5,6,7,14,15,16]},{\"name\":\"rowname\",\"targets\":0},{\"name\":\"gender.x\",\"targets\":1},{\"name\":\"first.x\",\"targets\":2},{\"name\":\"middle.x\",\"targets\":3},{\"name\":\"last.x\",\"targets\":4},{\"name\":\"yr.x\",\"targets\":5},{\"name\":\"mon.x\",\"targets\":6},{\"name\":\"day.x\",\"targets\":7},{\"name\":\"district.x\",\"targets\":8},{\"name\":\"inds.b\",\"targets\":9},{\"name\":\"gender.y\",\"targets\":10},{\"name\":\"first.y\",\"targets\":11},{\"name\":\"middle.y\",\"targets\":12},{\"name\":\"last.y\",\"targets\":13},{\"name\":\"yr.y\",\"targets\":14},{\"name\":\"mon.y\",\"targets\":15},{\"name\":\"day.y\",\"targets\":16},{\"name\":\"district.y\",\"targets\":17},{\"name\":\"result\",\"targets\":18}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[9,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAlternatively, to achieve only the \"original\" 9 records in `cases` with the new column(s) from `results`, use `select()` on `results` before the joins, so that it contains only rownames and the columns that you want to add to `cases` (e.g. the column `result`).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_clean <- cases %>% rownames_to_column()\n\nresults_clean <- results %>%\n  rownames_to_column() %>% \n  select(rowname, result)    # select only certain columns \n\nmatches_clean <- my_matches %>%\n  mutate(across(everything(), as.character))\n\n# joins\ncomplete <- left_join(cases_clean, matches_clean, by = c(\"rowname\" = \"inds.a\"))\ncomplete <- left_join(complete, results_clean, by = c(\"inds.b\" = \"rowname\"))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-b1e7c01440cd4a949bbe\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b1e7c01440cd4a949bbe\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],[\"M\",\"M\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"F\"],[\"Amir\",\"Anthony\",\"Marialisa\",\"Elizabeth\",\"Jose\",\"Cassidy\",\"Michael\",\"Oliver\",\"Blessing\"],[null,\"B.\",\"Contreras\",\"Casteel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null],[\"Khan\",\"Smith\",\"Rodrigues\",\"Chase\",\"Lopez\",\"Davis\",\"O'Calaghan\",\"De Bordow\",\"Adebayo\"],[1989,1970,1972,1954,1996,1980,1969,1971,1955],[11,9,4,3,1,7,4,2,2],[22,19,15,3,6,20,12,4,14],[\"River\",\"River\",\"River\",\"City\",\"City\",\"City\",\"Rural\",\"River\",\"Rural\"],[\"1\",\"2\",\"3\",\"4\",\"12\",\"10\",\"9\",\"8\",null],[\"positive\",\"positive\",\"negative\",\"positive\",\"negative\",\"positive\",\"negative\",\"positive\",null]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>rowname<\\/th>\\n      <th>gender<\\/th>\\n      <th>first<\\/th>\\n      <th>middle<\\/th>\\n      <th>last<\\/th>\\n      <th>yr<\\/th>\\n      <th>mon<\\/th>\\n      <th>day<\\/th>\\n      <th>district<\\/th>\\n      <th>inds.b<\\/th>\\n      <th>result<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":9,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[5,6,7]},{\"name\":\"rowname\",\"targets\":0},{\"name\":\"gender\",\"targets\":1},{\"name\":\"first\",\"targets\":2},{\"name\":\"middle\",\"targets\":3},{\"name\":\"last\",\"targets\":4},{\"name\":\"yr\",\"targets\":5},{\"name\":\"mon\",\"targets\":6},{\"name\":\"day\",\"targets\":7},{\"name\":\"district\",\"targets\":8},{\"name\":\"inds.b\",\"targets\":9},{\"name\":\"result\",\"targets\":10}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[9,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nIf you want to subset either dataset to only the rows that matched, you can use the codes below:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_matched <- cases[my_matches$inds.a,]  # Rows in cases that matched to a row in results\nresults_matched <- results[my_matches$inds.b,]  # Rows in results that matched to a row in cases\n```\n:::\n\n\nOr, to see only the rows that did **not** match:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_not_matched <- cases[!rownames(cases) %in% my_matches$inds.a,]  # Rows in cases that did NOT match to a row in results\nresults_not_matched <- results[!rownames(results) %in% my_matches$inds.b,]  # Rows in results that did NOT match to a row in cases\n```\n:::\n\n\n\n### Probabilistic deduplication {.unnumbered}  \n\nProbabilistic matching can be used to deduplicate a dataset as well. See the page on deduplication for other methods of deduplication.  \n\nHere we began with the `cases` dataset, but are now calling it `cases_dup`, as it has 2 additional rows that could be duplicates of previous rows:\nSee \"Tony\" with \"Anthony\", and \"Marialisa Rodrigues\" with \"Maria Rodriguez\".  \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-71d13a22256bc761566e\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-71d13a22256bc761566e\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"M\",\"M\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"F\",\"M\",\"F\"],[\"Amir\",\"Anthony\",\"Marialisa\",\"Elizabeth\",\"Jose\",\"Cassidy\",\"Michael\",\"Oliver\",\"Blessing\",\"Tony\",\"Maria\"],[null,\"B.\",\"Contreras\",\"Casteel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null,\"B.\",\"Contreras\"],[\"Khan\",\"Smith\",\"Rodrigues\",\"Chase\",\"Lopez\",\"Davis\",\"O'Calaghan\",\"De Bordow\",\"Adebayo\",\"Smith\",\"Rodriguez\"],[1989,1970,1972,1954,1996,1980,1969,1971,1955,1970,1972],[11,9,4,3,1,7,4,2,2,9,4],[22,19,15,3,6,20,12,4,14,19,15],[\"River\",\"River\",\"River\",\"City\",\"City\",\"City\",\"Rural\",\"River\",\"Rural\",\"River\",\"River\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>gender<\\/th>\\n      <th>first<\\/th>\\n      <th>middle<\\/th>\\n      <th>last<\\/th>\\n      <th>yr<\\/th>\\n      <th>mon<\\/th>\\n      <th>day<\\/th>\\n      <th>district<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":11,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[4,5,6]},{\"name\":\"gender\",\"targets\":0},{\"name\":\"first\",\"targets\":1},{\"name\":\"middle\",\"targets\":2},{\"name\":\"last\",\"targets\":3},{\"name\":\"yr\",\"targets\":4},{\"name\":\"mon\",\"targets\":5},{\"name\":\"day\",\"targets\":6},{\"name\":\"district\",\"targets\":7}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,11,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nRun `fastLink()` like before, but compare the `cases_dup` data frame to itself. When the two data frames provided are identical, the function assumes you want to de-duplicate. Note we do not specify `stringdist.match = ` or `numeric.match = ` as we did previously.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Run fastLink on the same dataset\ndedupe_output <- fastLink(\n  dfA = cases_dup,\n  dfB = cases_dup,\n  varnames = c(\"gender\", \"first\", \"middle\", \"last\", \"yr\", \"mon\", \"day\", \"district\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n==================== \nfastLink(): Fast Probabilistic Record Linkage\n==================== \n\nIf you set return.all to FALSE, you will not be able to calculate a confusion table as a summary statistic.\ndfA and dfB are identical, assuming deduplication of a single data set.\nSetting return.all to FALSE.\n\nCalculating matches for each variable.\nGetting counts for parameter estimation.\n    Parallelizing calculation using OpenMP. 1 threads out of 8 are used.\nRunning the EM algorithm.\nGetting the indices of estimated matches.\n    Parallelizing calculation using OpenMP. 1 threads out of 8 are used.\nCalculating the posterior for each pair of matched observations.\nGetting the match patterns for each estimated match.\n```\n:::\n:::\n\n\nNow, you can review the potential duplicates with `getMatches()`. Provide the data frame as both `dfA = ` and `dfB = `, and provide the output of the `fastLink()` function as `fl.out = `.  `fl.out` must be of class `fastLink.dedupe`, or in other words, the result of `fastLink()`.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Run getMatches()\ncases_dedupe <- getMatches(\n  dfA = cases_dup,\n  dfB = cases_dup,\n  fl.out = dedupe_output)\n```\n:::\n\n\nSee the right-most column, which indicates the duplicate IDs - the final two rows are identified as being likely duplicates of rows 2 and 3.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-7790e032aaeacb9d0857\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7790e032aaeacb9d0857\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"M\",\"M\",\"F\",\"F\",\"M\",\"F\",\"M\",\"M\",\"F\",\"M\",\"F\"],[\"Amir\",\"Anthony\",\"Marialisa\",\"Elizabeth\",\"Jose\",\"Cassidy\",\"Michael\",\"Oliver\",\"Blessing\",\"Tony\",\"Maria\"],[null,\"B.\",\"Contreras\",\"Casteel\",\"Sanchez\",\"Jones\",\"Murphy\",\"Laurent\",null,\"B.\",\"Contreras\"],[\"Khan\",\"Smith\",\"Rodrigues\",\"Chase\",\"Lopez\",\"Davis\",\"O'Calaghan\",\"De Bordow\",\"Adebayo\",\"Smith\",\"Rodriguez\"],[1989,1970,1972,1954,1996,1980,1969,1971,1955,1970,1972],[11,9,4,3,1,7,4,2,2,9,4],[22,19,15,3,6,20,12,4,14,19,15],[\"River\",\"River\",\"River\",\"City\",\"City\",\"City\",\"Rural\",\"River\",\"Rural\",\"River\",\"River\"],[1,2,3,4,5,6,7,8,9,2,3]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>gender<\\/th>\\n      <th>first<\\/th>\\n      <th>middle<\\/th>\\n      <th>last<\\/th>\\n      <th>yr<\\/th>\\n      <th>mon<\\/th>\\n      <th>day<\\/th>\\n      <th>district<\\/th>\\n      <th>dedupe.ids<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":11,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[4,5,6,8]},{\"name\":\"gender\",\"targets\":0},{\"name\":\"first\",\"targets\":1},{\"name\":\"middle\",\"targets\":2},{\"name\":\"last\",\"targets\":3},{\"name\":\"yr\",\"targets\":4},{\"name\":\"mon\",\"targets\":5},{\"name\":\"day\",\"targets\":6},{\"name\":\"district\",\"targets\":7},{\"name\":\"dedupe.ids\",\"targets\":8}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[10,11,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nTo return the row numbers of rows which are likely duplicates, you can count the number of rows per unique value in the `dedupe.ids` column, and then filter to keep only those with more than one row. In this case this leaves rows 2 and 3.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_dedupe %>% \n  count(dedupe.ids) %>% \n  filter(n > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  dedupe.ids n\n1          2 2\n2          3 2\n```\n:::\n:::\n\n\nTo inspect the whole rows of the likely duplicates, put the row number in this command:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# displays row 2 and all likely duplicates of it\ncases_dedupe[cases_dedupe$dedupe.ids == 2,]   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   gender   first middle  last   yr mon day district dedupe.ids\n2       M Anthony     B. Smith 1970   9  19    River          2\n10      M    Tony     B. Smith 1970   9  19    River          2\n```\n:::\n:::\n\n\n\n\n## Binding and aligning  \n\nAnother method of combining two data frames is \"binding\" them together. You can also think of this as \"appending\" or \"adding\" rows or columns.  \n\nThis section will also discuss how to \"align\" the order of rows of one data frame to the order in another data frame. This topic is discussed below in the section on Binding columns.  \n\n\n\n### Bind rows {.unnumbered}\n\nTo bind rows of one data frame to the bottom of another data frame, use `bind_rows()` from **dplyr**. It is very inclusive, so any column present in either data frame will be included in the output. A few notes:  \n\n* Unlike the **base** R version `row.bind()`, **dplyr**'s `bind_rows()` does not require that the order of columns be the same in both data frames. As long as the column names are spelled identically, it will align them correctly.  \n* You can optionally specify the argument `.id = `. Provide a character column name. This will produce a new column that serves to identify which data frame each row originally came from.  \n* You can use `bind_rows()` on a `list` of similarly-structured data frames to combine them into one data frame. See an example in the [Iteration, loops, and lists] page involving the import of multiple linelists with **purrr**.  \n\nOne common example of row binding is to bind a \"total\" row onto a descriptive table made with **dplyr**'s `summarise()` function. Below we create a table of case counts and median CT values by hospital with a total row.  \n\nThe function `summarise()` is used on data grouped by hospital to return a summary data frame by hospital. But the function `summarise()` does not automatically produce a \"totals\" row, so we create it by summarising the data *again*, but with the data not grouped by hospital. This produces a second data frame of just one row. We can then bind these data frames together to achieve the final table.  \n\nSee other worked examples like this in the [Descriptive tables] and [Tables for presentation] pages.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create core table\n###################\nhosp_summary <- linelist %>% \n  group_by(hospital) %>%                        # Group data by hospital\n  summarise(                                    # Create new summary columns of indicators of interest\n    cases = n(),                                  # Number of rows per hospital-outcome group     \n    ct_value_med = median(ct_blood, na.rm=T))     # median CT value per group\n```\n:::\n\n\nHere is the `hosp_summary` data frame:  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-25679b4564fd4b49963e\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-25679b4564fd4b49963e\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Central Hospital\",\"Military Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\"],[454,896,1469,885,1762,422],[22,21,21,22,22,22]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hospital<\\/th>\\n      <th>cases<\\/th>\\n      <th>ct_value_med<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"name\":\"hospital\",\"targets\":0},{\"name\":\"cases\",\"targets\":1},{\"name\":\"ct_value_med\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nCreate a data frame with the \"total\" statistics (*not grouped by hospital*). This will return just one row.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create totals\n###############\ntotals <- linelist %>% \n  summarise(\n    cases = n(),                               # Number of rows for whole dataset     \n    ct_value_med = median(ct_blood, na.rm=T))  # Median CT for whole dataset\n```\n:::\n\n\nAnd below is that `totals` data frame. Note how there are only two columns. These columns are also in `hosp_summary`, but there is one column in `hosp_summary` that is not in `totals` (`hospital`).  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-31ef607b0146d42c39e1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-31ef607b0146d42c39e1\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[5888],[22]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>cases<\\/th>\\n      <th>ct_value_med<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[0,1]},{\"name\":\"cases\",\"targets\":0},{\"name\":\"ct_value_med\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNow we can bind the rows together with `bind_rows()`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bind data frames together\ncombined <- bind_rows(hosp_summary, totals)\n```\n:::\n\n\nNow we can view the result. See how in the final row, an empty `NA` value fills in for the column `hospital` that was not in `hosp_summary`. As explained in the [Tables for presentation] page, you could \"fill-in\" this cell with \"Total\" using `replace_na()`.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-aa0f1193082a7a08dfa3\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-aa0f1193082a7a08dfa3\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Central Hospital\",\"Military Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\",null],[454,896,1469,885,1762,422,5888],[22,21,21,22,22,22,22]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hospital<\\/th>\\n      <th>cases<\\/th>\\n      <th>ct_value_med<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"name\":\"hospital\",\"targets\":0},{\"name\":\"cases\",\"targets\":1},{\"name\":\"ct_value_med\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n### Bind columns {.unnumbered}\n\nThere is a similar **dplyr** function `bind_cols()` which you can use to combine two data frames sideways. Note that rows are matched to each other *by position* (not like a *join* above) - for example the 12th row in each data frame will be aligned.  \n\nFor an example, we bind several summary tables together. In order to do this, we also demonstrate how to re-arrange the order of rows in one data frame to match the order in another data frame, with `match()`.    \n\nHere we define `case_info` as a summary data frame of linelist cases, by hospital, with the number of cases and the number of deaths.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Case information\ncase_info <- linelist %>% \n  group_by(hospital) %>% \n  summarise(\n    cases = n(),\n    deaths = sum(outcome == \"Death\", na.rm=T)\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-2089a1e87b815ae757e7\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2089a1e87b815ae757e7\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Central Hospital\",\"Military Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\"],[454,896,1469,885,1762,422],[193,399,611,395,785,199]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hospital<\\/th>\\n      <th>cases<\\/th>\\n      <th>deaths<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"name\":\"hospital\",\"targets\":0},{\"name\":\"cases\",\"targets\":1},{\"name\":\"deaths\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAnd let's say that here is a different data frame `contact_fu` containing information on the percent of exposed contacts investigated and \"followed-up\", again by hospital. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontact_fu <- data.frame(\n  hospital = c(\"St. Mark's Maternity Hospital (SMMH)\", \"Military Hospital\", \"Missing\", \"Central Hospital\", \"Port Hospital\", \"Other\"),\n  investigated = c(\"80%\", \"82%\", NA, \"78%\", \"64%\", \"55%\"),\n  per_fu = c(\"60%\", \"25%\", NA, \"20%\", \"75%\", \"80%\")\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-c58b357588b01a850426\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c58b357588b01a850426\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"St. Mark's Maternity Hospital (SMMH)\",\"Military Hospital\",\"Missing\",\"Central Hospital\",\"Port Hospital\",\"Other\"],[\"80%\",\"82%\",null,\"78%\",\"64%\",\"55%\"],[\"60%\",\"25%\",null,\"20%\",\"75%\",\"80%\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hospital<\\/th>\\n      <th>investigated<\\/th>\\n      <th>per_fu<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"name\":\"hospital\",\"targets\":0},{\"name\":\"investigated\",\"targets\":1},{\"name\":\"per_fu\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNote that the hospitals are the same, but are in different orders in each data frame. The easiest solution would be to use a `left_join()` on the `hospital` column, but you could also use `bind_cols()` with one extra step.  \n\n#### Use `match()` to align ordering {.unnumbered}  \n\nBecause the row orders are different, a simple `bind_cols()` command would result in a mis-match of data. To fix this we can use `match()` from **base** R to align the rows of a data frame in the same order as in another. We assume for this approach that there are no duplicate values in either data frame.  \n\nWhen we use `match()`, the syntax is `match(TARGET ORDER VECTOR, DATA FRAME COLUMN TO CHANGE)`, where the first argument is the desired order (either a stand-alone vector, or in this case a column in a data frame), and the second argument is the data frame column in the data frame that will be re-ordered. The output of `match()` is a vector of numbers representing the correct position ordering. You can read more with `?match`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatch(case_info$hospital, contact_fu$hospital)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 2 3 6 5 1\n```\n:::\n:::\n\n\nYou can use this numeric vector to re-order the data frame - place it within subset brackets `[ ]` *before the comma*. Read more about **base** R bracket subset syntax in the [R basics] page. The command below creates a new data frame, defined as the old one in which the rows are ordered in the numeric vector above.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontact_fu_aligned <- contact_fu[match(case_info$hospital, contact_fu$hospital),]\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-81845ac397960c8500c3\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-81845ac397960c8500c3\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"Central Hospital\",\"Military Hospital\",\"Missing\",\"Other\",\"Port Hospital\",\"St. Mark's Maternity Hospital (SMMH)\"],[\"78%\",\"82%\",null,\"55%\",\"64%\",\"80%\"],[\"20%\",\"25%\",null,\"80%\",\"75%\",\"60%\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>hospital<\\/th>\\n      <th>investigated<\\/th>\\n      <th>per_fu<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"name\":\"hospital\",\"targets\":0},{\"name\":\"investigated\",\"targets\":1},{\"name\":\"per_fu\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNow we can bind the data frame columns together, with the correct row order. Note that some columns are duplicated and will require cleaning with `rename()`. Read more aboout `bind_rows()` [here](https://dplyr.tidyverse.org/reference/bind.html).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_cols(case_info, contact_fu)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `hospital` -> `hospital...1`\n• `hospital` -> `hospital...4`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  hospital...1                     cases deaths hospital...4 investigated per_fu\n  <chr>                            <int>  <int> <chr>        <chr>        <chr> \n1 Central Hospital                   454    193 St. Mark's … 80%          60%   \n2 Military Hospital                  896    399 Military Ho… 82%          25%   \n3 Missing                           1469    611 Missing      <NA>         <NA>  \n4 Other                              885    395 Central Hos… 78%          20%   \n5 Port Hospital                     1762    785 Port Hospit… 64%          75%   \n6 St. Mark's Maternity Hospital (…   422    199 Other        55%          80%   \n```\n:::\n:::\n\n\nA **base** R alternative to `bind_cols` is `cbind()`, which performs the same operation.  \n\n\n\n\n<!-- ======================================================= -->\n## Resources { }\n\nThe [tidyverse page on joins](https://dplyr.tidyverse.org/reference/join.html)  \n\nThe [R for Data Science page on relational data](https://r4ds.had.co.nz/relational-data.html)  \n\nTh [tidyverse page on dplyr](https://dplyr.tidyverse.org/reference/bind.html) on binding  \n\nA vignette on [fastLink](https://github.com/kosukeimai/fastLink) at the package's Github page  \n\nPublication describing methodology of [fastLink](https://imai.fas.harvard.edu/research/files/linkage.pdf)  \n\nPublication describing [RecordLinkage package](https://journal.r-project.org/archive/2010/RJ-2010-017/RJ-2010-017.pdf)\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/nouislider-7.0.10/jquery.nouislider.min.js\"></script>\r\n<link href=\"../site_libs/selectize-0.12.0/selectize.bootstrap3.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/selectize-0.12.0/selectize.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}