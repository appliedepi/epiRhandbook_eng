{
  "hash": "66115cafbd0127c7904488ab9454f8cb",
  "result": {
    "markdown": "\n# Working with dates {}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/Dates_500x500.png){fig-align='center' width=50%}\n:::\n:::\n\n\n\nWorking with dates in R requires more attention than working with other object classes. Below, we offer some tools and example to make this process less painful. Luckily, dates can be wrangled easily with practice, and with a set of helpful packages such as **lubridate**.  \n\nUpon import of raw data, R often interprets dates as character objects - this means they cannot be used for general date operations such as making time series and calculating time intervals. To make matters more difficult, there are many ways a date can be formatted and you must help R know which part of a date represents what (month, day, hour, etc.). \n\nDates in R are their own class of object - the `Date` class. It should be noted that there is also a class that stores objects with date *and* time. Date time objects are formally referred to as `POSIXt`, `POSIXct`, and/or `POSIXlt` classes (the difference isn't important). These objects are informally referred to as *datetime* classes.\n\n* It is important to make R recognize when a column contains dates.  \n* Dates are an object class and can be tricky to work with.  \n* Here we present several ways to convert date columns to Date class.  \n\n\n<!-- ======================================================= -->\n## Preparation\n\n### Load packages {.unnumbered}  \n\nThis code chunk shows the loading of packages required for this page. In this handbook we emphasize `p_load()` from **pacman**, which installs the package if necessary *and* loads it for use. You can also load installed packages with  `library()` from **base** R. See the page on [R basics] for more information on R packages.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checks if package is installed, installs if necessary, and loads package for current session\n\npacman::p_load(\n  lubridate,  # general package for handling and converting dates  \n  parsedate,  # has function to \"guess\" messy dates\n  aweek,      # another option for converting dates to weeks, and weeks to dates\n  zoo,        # additional date/time functions\n  here,       # file management\n  rio,        # data import/export\n  tidyverse)  # data management and visualization  \n```\n:::\n\n\n### Import data {.unnumbered}  \n\nWe import the dataset of cases from a simulated Ebola epidemic. If you want to download the data to follow along step-by-step, see instruction in the [Download handbook and data] page. We assume the file is in the working directory so no sub-folders are specified in this file path.  \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- import(\"linelist_cleaned.xlsx\")\n```\n:::\n\n\n\n\n<!-- ======================================================= -->\n## Current date  \n\nYou can get the current \"system\" date or system datetime of your computer by doing the following with **base** R.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the system date - this is a DATE class\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-18\"\n```\n:::\n\n```{.r .cell-code}\n# get the system time - this is a DATETIME class\nSys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-18 15:15:43 CET\"\n```\n:::\n:::\n\n\n\nWith the **lubridate** package these can also be returned with `today()` and `now()`, respectively. `date()` returns the current date and time with weekday and month names.  \n  \n  \n\n<!-- ======================================================= -->\n## Convert to Date  \n\nAfter importing a dataset into R, date column values may look like \"1989/12/30\", \"05/06/2014\", or \"13 Jan 2020\". In these cases, R is likely still treating these values as Character values. R must be *told* that these values are dates... and what the format of the date is (which part is Day, which is Month, which is Year, etc).  \n\nOnce told, R converts these values to class Date. In the background, R will store the dates as numbers (the number of days from its \"origin\" date 1 Jan 1970). You will not interface with the date number often, but this allows for R to treat dates as continuous variables and to allow special operations such as calculating the distance between dates.  \n\nBy default, values of class Date in R are displayed as YYYY-MM-DD. Later in this section we will discuss how to change the display of date values.  \n\nBelow we present two approaches to converting a column from character values to class Date.  \n\n\n<span style=\"color: darkgreen;\">**_TIP:_** You can check the current class of a column with **base** R function `class()`, like `class(linelist$date_onset)`.</span>  \n\n  \n\n### **base** R {.unnumbered}  \n\n`as.Date()` is the standard, **base** R function to convert an object or column to class Date (note capitalization of \"D\").  \n\nUse of `as.Date()` requires that:  \n\n* You *specify the **existing** format of the raw character date* or the origin date if supplying dates as numbers (see section on Excel dates)  \n* If used on a character column, all date values must have the same exact format (if this is not the case, try `parse_date()` from the **parsedate** package)  \n\n**First**, check the class of your column with `class()` from **base** R. If you are unsure or confused about the class of your data (e.g. you see \"POSIXct\", etc.) it can be easiest to first convert the column to class Character with `as.character()`, and then convert it to class Date.  \n\n**Second**, within the `as.Date()` function, use the `format =` argument to tell R the *current* format of the character date components - which characters refer to the month, the day, and the year, and how they are separated. If your values are already in one of R's standard date formats (\"YYYY-MM-DD\" or \"YYYY/MM/DD\") the `format =` argument is not necessary.  \n\nTo `format = `, provide a character string (in quotes) that represents the *current* date format using the special \"strptime\" abbreviations below. For example, if your character dates are currently in the format \"DD/MM/YYYY\", like \"24/04/1968\", then you would use `format = \"%d/%m/%Y\"` to convert the values into dates. **Putting the format in quotation marks is necessary. And don't forget any slashes or dashes!**  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to class date\nlinelist <- linelist %>% \n  mutate(date_onset = as.Date(date_of_onset, format = \"%d/%m/%Y\"))\n```\n:::\n\n\nMost of the strptime abbreviations are listed below. You can see the complete list by running `?strptime`.  \n\n%d = Day number of month (5, 17, 28, etc.)  \n%j = Day number of the year (Julian day 001-366)  \n%a = Abbreviated weekday (Mon, Tue, Wed, etc.)  \n%A = Full weekday (Monday, Tuesday, etc.)\n%w = Weekday number (0-6, Sunday is 0)  \n%u = Weekday number (1-7, Monday is 1)  \n%W = Week number (00-53, Monday is week start)  \n%U = Week number (01-53, Sunday is week start)  \n%m = Month number (e.g. 01, 02, 03, 04)  \n%b = Abbreviated month (Jan, Feb, etc.)  \n%B = Full month (January, February, etc.)  \n%y = 2-digit year  (e.g. 89)  \n%Y = 4-digit year  (e.g. 1989)  \n%h = hours (24-hr clock)  \n%m = minutes  \n%s = seconds\n%z = offset from GMT  \n%Z = Time zone (character)  \n\n<span style=\"color: darkgreen;\">**_TIP:_** The `format =` argument of `as.Date()` is *not* telling R the format you want the dates to be, but rather how to identify the date parts as they are *before* you run the command.</span>  \n\n<span style=\"color: darkgreen;\">**_TIP:_** Be sure that in the `format =` argument you use the *date-part separator* (e.g. /, -, or space) that is present in your dates.</span>  \n\nOnce the values are in class Date, R will by default display them in the standard format, which is YYYY-MM-DD.\n\n\n\n### **lubridate** {.unnumbered}  \n\nConverting character objects to dates can be made easier by using the **lubridate** package. This is a **tidyverse** package designed to make working with dates and times more simple and consistent than in **base** R. For these reasons, **lubridate** is often considered the gold-standard package for dates and time, and is recommended whenever working with them.\n\nThe **lubridate** package provides several different helper functions designed to convert character objects to dates in an intuitive, and more lenient way than specifying the format in `as.Date()`. These functions are specific to the rough date format, but allow for a variety of separators, and synonyms for dates (e.g. 01 vs Jan vs January) - they are named after abbreviations of date formats. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install/load lubridate \npacman::p_load(lubridate)\n```\n:::\n\n\nThe `ymd()` function flexibly converts date values supplied as **year, then month, then day**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read date in year-month-day format\nymd(\"2020-10-11\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"20201011\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n:::\n\n\nThe `mdy()` function flexibly converts date values supplied as **month, then day, then year**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read date in month-day-year format\nmdy(\"10/11/2020\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n\n```{.r .cell-code}\nmdy(\"Oct 11 20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n:::\n\n\nThe `dmy()` function flexibly converts date values supplied as **day, then month, then year**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read date in day-month-year format\ndmy(\"11 10 2020\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n\n```{.r .cell-code}\ndmy(\"11 October 2020\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-10-11\"\n```\n:::\n:::\n\n\n<!-- The `as.character()` and `as.Date()` commands can optionally be combined as:   -->\n\n<!-- ```{r eval=F} -->\n<!-- linelist_cleaned$date_of_onset <- as.Date(as.character(linelist_cleaned$date_of_onset), format = \"%d/%m/%Y\") -->\n<!-- ``` -->\n\nIf using piping, the conversion of a character column to dates with **lubridate** might look like this:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- linelist %>%\n  mutate(date_onset = lubridate::dmy(date_onset))\n```\n:::\n\n\nOnce complete, you can run `class()` to verify the class of the column  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the class of the column\nclass(linelist$date_onset)  \n```\n:::\n\n\n\nOnce the values are in class Date, R will by default display them in the standard format, which is YYYY-MM-DD.  \n\nNote that the above functions work best with 4-digit years. 2-digit years can produce unexpected results, as lubridate attempts to guess the century.  \n\nTo convert a 2-digit year into a 4-digit year (all in the same century) you can convert to class character and then combine the existing digits with a pre-fix using `str_glue()` from the **stringr** package (see [Characters and strings]). Then convert to date.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntwo_digit_years <- c(\"15\", \"15\", \"16\", \"17\")\nstr_glue(\"20{two_digit_years}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2015\n2015\n2016\n2017\n```\n:::\n:::\n\n\n\n\n### Combine columns {.unnumbered}  \n\nYou can use the **lubridate** functions `make_date()` and `make_datetime()` to combine multiple numeric columns into one date column. For example if you have numeric columns `onset_day`, `onset_month`, and `onset_year` in the data frame `linelist`:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- linelist %>% \n  mutate(onset_date = make_date(year = onset_year, month = onset_month, day = onset_day))\n```\n:::\n\n\n\n\n\n<!-- ======================================================= -->\n## Excel dates\n\nIn the background, most software store dates as numbers. R stores dates from an origin of 1st January, 1970. Thus, if you run `as.numeric(as.Date(\"1970-01-01))` you will get `0`. \n\nMicrosoft Excel stores dates with an origin of either December 30, 1899 (Windows) or January 1, 1904 (Mac), depending on your operating system. See this [Microsoft guidance](https://docs.microsoft.com/en-us/office/troubleshoot/excel/1900-and-1904-date-system) for more information.  \n\nExcel dates often import into R as these numeric values instead of as characters. If the dataset you imported from Excel shows dates as numbers or characters like \"41369\"... use `as.Date()` (or **lubridate**'s `as_date()` function) to convert, but **instead of supplying a \"format\" as above, supply the Excel origin date** to the argument `origin = `.  \n\nThis will not work if the Excel date is stored in R as a character type, so be sure to ensure the number is class Numeric!\n\n<span style=\"color: black;\">**_NOTE:_** You should provide the origin date in R's default date format (\"YYYY-MM-DD\").</span>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# An example of providing the Excel 'origin date' when converting Excel number dates\ndata_cleaned <- data %>% \n  mutate(date_onset = as.numeric(date_onset)) %>%   # ensure class is numeric\n  mutate(date_onset = as.Date(date_onset, origin = \"1899-12-30\")) # convert to date using Excel origin\n```\n:::\n\n\n\n\n<!-- ======================================================= -->\n## Messy dates  \n\nThe function `parse_date()` from the **parsedate** package attempts to read a \"messy\" date column containing dates in many different formats and convert the dates to a standard format. You can [read more online about `parse_date()`](https://readr.tidyverse.org/reference/parse_datetime.html).  \n\nFor example `parse_date()` would see a vector of the following character dates \"03 Jan 2018\", \"07/03/1982\", and \"08/20/85\" and convert them to class Date as: `2018-01-03`, `1982-03-07`, and `1985-08-20`.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nparsedate::parse_date(c(\"03 January 2018\",\n                        \"07/03/1982\",\n                        \"08/20/85\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2018-01-03 UTC\" \"1982-07-03 UTC\" \"1985-08-20 UTC\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# An example using parse_date() on the column date_onset\nlinelist <- linelist %>%      \n  mutate(date_onset = parse_date(date_onset))\n```\n:::\n\n\n\n\n\n<!-- ======================================================= -->\n## Working with date-time class  \n\nAs previously mentioned, R also supports a `datetime` class - a column that contains date **and** time information. As with the `Date` class, these often need to be converted from `character` objects to `datetime` objects. \n\n### Convert dates with times {.unnumbered}  \n\nA standard `datetime` object is formatted with the date first, which is followed by a time component - for example  _01 Jan 2020, 16:30_. As with dates, there are many ways this can be formatted, and there are numerous levels of precision (hours, minutes, seconds) that can be supplied.  \n\nLuckily, **lubridate** helper functions also exist to help convert these strings to `datetime` objects. These functions are extensions of the date helper functions, with `_h` (only hours supplied), `_hm` (hours and minutes supplied), or `_hms` (hours, minutes, and seconds supplied) appended to the end (e.g. `dmy_hms()`). These can be used as shown:\n\nConvert datetime with only hours to datetime object  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_h(\"2020-01-01 16hrs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-01 16:00:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nymd_h(\"2020-01-01 4PM\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-01 16:00:00 UTC\"\n```\n:::\n:::\n\n\nConvert datetime with hours and minutes to datetime object  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndmy_hm(\"01 January 2020 16:20\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-01 16:20:00 UTC\"\n```\n:::\n:::\n\n\nConvert datetime with hours, minutes, and seconds to datetime object  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy_hms(\"01 January 2020, 16:20:40\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-20 16:20:40 UTC\"\n```\n:::\n:::\n\n\nYou can supply time zone but it is ignored. See section later in this page on time zones.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdy_hms(\"01 January 2020, 16:20:40 PST\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-20 16:20:40 UTC\"\n```\n:::\n:::\n\n\nWhen working with a data frame, time and date columns can be combined to create a datetime column using `str_glue()` from **stringr** package and an appropriate **lubridate** function. See the page on [Characters and strings] for details on **stringr**.  \n\nIn this example, the `linelist` data frame has a column in format \"hours:minutes\". To convert this to a datetime we follow a few steps:  \n\n1) Create a \"clean\" time of admission column with missing values filled-in with the column median. We do this because **lubridate** won't operate on missing values. Combine it with the column `date_hospitalisation`, and then use the function `ymd_hm()` to convert.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# packages\npacman::p_load(tidyverse, lubridate, stringr)\n\n# time_admission is a column in hours:minutes\nlinelist <- linelist %>%\n  \n  # when time of admission is not given, assign the median admission time\n  mutate(\n    time_admission_clean = ifelse(\n      is.na(time_admission),         # if time is missing\n      median(time_admission),        # assign the median\n      time_admission                 # if not missing keep as is\n  ) %>%\n  \n    # use str_glue() to combine date and time columns to create one character column\n    # and then use ymd_hm() to convert it to datetime\n  mutate(\n    date_time_of_admission = str_glue(\"{date_hospitalisation} {time_admission_clean}\") %>% \n      ymd_hm()\n  )\n```\n:::\n\n\n### Convert times alone {.unnumbered}  \n\nIf your data contain only a character time (hours and minutes), you can convert and manipulate them as times using `strptime()` from **base** R. For example, to get the difference between two of these times:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# raw character times\ntime1 <- \"13:45\" \ntime2 <- \"15:20\"\n\n# Times converted to a datetime class\ntime1_clean <- strptime(time1, format = \"%H:%M\")\ntime2_clean <- strptime(time2, format = \"%H:%M\")\n\n# Difference is of class \"difftime\" by default, here converted to numeric hours \nas.numeric(time2_clean - time1_clean)   # difference in hours\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.583333\n```\n:::\n:::\n\n\nNote however that without a date value provided, it assumes the date is today. To combine a string date and a string time together see how to use **stringr** in the section just above. Read more about `strptime()` [here](https://rdrr.io/r/base/strptime.html).  \n\nTo convert single-digit numbers to double-digits (e.g. to \"pad\" hours or minutes with leading zeros to achieve 2 digits), see this [\"Pad length\" section of the Characters and strings page](#str_pad).  \n\n\n### Extract time {.unnumbered}  \n\nYou can extract elements of a time with `hour()`, `minute()`, or `second()` from **lubridate**.  \n\nHere is an example of extracting the hour, and then classifing by part of the day. We begin with the column `time_admission`, which is class Character in format \"HH:MM\". First, the `strptime()` is used as described above to convert the characters to datetime class. Then, the hour is extracted with `hour()`, returning a number from 0-24. Finally, a column `time_period` is created using logic with `case_when()` to classify rows into Morning/Afternoon/Evening/Night based on their hour of admission.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinelist <- linelist %>%\n  mutate(hour_admit = hour(strptime(time_admission, format = \"%H:%M\"))) %>%\n  mutate(time_period = case_when(\n    hour_admit > 06 & hour_admit < 12 ~ \"Morning\",\n    hour_admit >= 12 & hour_admit < 17 ~ \"Afternoon\",\n    hour_admit >= 17 & hour_admit < 21 ~ \"Evening\",\n    hour_admit >=21 | hour_admit <= 6 ~ \"Night\"))\n```\n:::\n\n\nTo learn more about `case_when()` see the page on [Cleaning data and core functions].  \n\n<!-- ======================================================= -->\n## Working with dates   \n\n`lubridate` can also be used for a variety of other functions, such as **extracting aspects of a date/datetime**, **performing date arithmetic**, or **calculating date intervals**\n\nHere we define a date to use for the examples:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create object of class Date\nexample_date <- ymd(\"2020-03-01\")\n```\n:::\n\n\n### Extract date components {.unnumbered}  \n\nYou can extract common aspects such as month, day, weekday:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(example_date)  # month number\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nday(example_date)    # day (number) of the month\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nwday(example_date)   # day number of the week (1-7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\nYou can also extract time components from a `datetime` object or column. This can be useful if you want to view the distribution of admission times.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_datetime <- ymd_hm(\"2020-03-01 14:45\")\n\nhour(example_datetime)     # extract hour\nminute(example_datetime)   # extract minute\nsecond(example_datetime)   # extract second\n```\n:::\n\n\nThere are several options to retrieve weeks. See the section on Epidemiological weeks below.  \n\nNote that if you are seeking to *display* a date a certain way (e.g. \"Jan 2020\" or \"Thursday 20 March\" or \"Week 20, 1977\") you can do this more flexibly as described in the section on Date display.  \n\n\n### Date math {.unnumbered}  \n\nYou can add certain numbers of days or weeks using their respective function from **lubridate**.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add 3 days to this date\nexample_date + days(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-03-04\"\n```\n:::\n\n```{.r .cell-code}\n# add 7 weeks and subtract two days from this date\nexample_date + weeks(7) - days(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-04-17\"\n```\n:::\n:::\n\n\n### Date intervals {.unnumbered}  \n\nThe difference between dates can be calculated by:  \n\n1. Ensure both dates are of class date  \n2. Use subtraction to return the \"difftime\" difference between the two dates  \n3. If necessary, convert the result to numeric class to perform subsequent mathematical calculations  \n\nBelow the interval between two dates is calculated and displayed. You can find intervals by using the subtraction \"minus\" symbol on values that are class Date. Note, however that the class of the returned value is \"difftime\" as displayed below, and must be converted to numeric. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the interval between this date and Feb 20 2020 \noutput <- example_date - ymd(\"2020-02-20\")\noutput    # print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 10 days\n```\n:::\n\n```{.r .cell-code}\nclass(output)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"difftime\"\n```\n:::\n:::\n\n\nTo do subsequent operations on a \"difftime\", convert it to numeric with `as.numeric()`. \n\nThis can all be brought together to work with data - for example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(lubridate, tidyverse)   # load packages\n\nlinelist <- linelist %>%\n  \n  # convert date of onset from character to date objects by specifying dmy format\n  mutate(date_onset = dmy(date_onset),\n         date_hospitalisation = dmy(date_hospitalisation)) %>%\n  \n  # filter out all cases without onset in march\n  filter(month(date_onset) == 3) %>%\n    \n  # find the difference in days between onset and hospitalisation\n  mutate(days_onset_to_hosp = date_hospitalisation - date_of_onset)\n```\n:::\n\n\n\n\nIn a data frame context, if either of the above dates is missing, the operation will fail for that row. This will result in an `NA` instead of a numeric value. When using this column for calculations, be sure to set the `na.rm = ` argument to `TRUE`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate the median number of days to hospitalisation for all cases where data are available\nmedian(linelist_delay$days_onset_to_hosp, na.rm = T)\n```\n:::\n\n\n\n<!-- ======================================================= -->\n## Date display  \n\nOnce dates are the correct class, you often want them to display differently, for example to display as \"Monday 05 January\" instead of \"2018-01-05\". You may also want to adjust the display in order to then group rows by the date elements displayed - for example to group by month-year.  \n\n### `format()` {.unnumbered}  \n\nAdjust date display with the **base** R function `format()`. This function accepts a character string (in quotes) specifying the *desired* output format in the \"%\" strptime abbreviations (the same syntax as used in `as.Date()`). Below are most of the common abbreviations.  \n\nNote: using `format()` will convert the values to class Character, so this is generally used towards the end of an analysis or for display purposes only! You can see the complete list by running `?strptime`.  \n\n%d = Day number of month (5, 17, 28, etc.)  \n%j = Day number of the year (Julian day 001-366)  \n%a = Abbreviated weekday (Mon, Tue, Wed, etc.)  \n%A = Full weekday (Monday, Tuesday, etc.)  \n%w = Weekday number (0-6, Sunday is 0)  \n%u = Weekday number (1-7, Monday is 1)  \n%W = Week number (00-53, Monday is week start)  \n%U = Week number (01-53, Sunday is week start)  \n%m = Month number (e.g. 01, 02, 03, 04)  \n%b = Abbreviated month (Jan, Feb, etc.)  \n%B = Full month (January, February, etc.)  \n%y = 2-digit year  (e.g. 89)  \n%Y = 4-digit year  (e.g. 1989)  \n%h = hours (24-hr clock)  \n%m = minutes  \n%s = seconds  \n%z = offset from GMT  \n%Z = Time zone (character)\n\nAn example of formatting today's date:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# today's date, with formatting\nformat(Sys.Date(), format = \"%d %B %Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"18 February 2024\"\n```\n:::\n\n```{.r .cell-code}\n# easy way to get full date and time (default formatting)\ndate()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Sun Feb 18 15:15:45 2024\"\n```\n:::\n\n```{.r .cell-code}\n# formatted combined date, time, and time zone using str_glue() function\nstr_glue(\"{format(Sys.Date(), format = '%A, %B %d %Y, %z  %Z, ')}{format(Sys.time(), format = '%H:%M:%S')}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSunday, February 18 2024, +0000  UTC, 15:15:45\n```\n:::\n\n```{.r .cell-code}\n# Using format to display weeks\nformat(Sys.Date(), \"%Y Week %W\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024 Week 07\"\n```\n:::\n:::\n\n\nNote that if using `str_glue()`, be aware of that within the expected double quotes \" you should only use single quotes (as above).  \n\n\n### Month-Year {.unnumbered}  \n\nTo convert a Date column to Month-year format, we suggest you use the function `as.yearmon()` from the **zoo** package. This converts the date to class \"yearmon\" and retains the proper ordering. In contrast, using `format(column, \"%Y %B\")` will convert to class Character and will order the values alphabetically (incorrectly). \n\nBelow, a new column `yearmonth` is created from the column `date_onset`, using the `as.yearmon()` function. The default (correct) ordering of the resulting values are shown in the table.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new column \ntest_zoo <- linelist %>% \n     mutate(yearmonth = zoo::as.yearmon(date_onset))\n\n# print table\ntable(test_zoo$yearmon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nApr 2014 May 2014 Jun 2014 Jul 2014 Aug 2014 Sep 2014 Oct 2014 Nov 2014 \n       7       64      100      226      528     1070     1112      763 \nDec 2014 Jan 2015 Feb 2015 Mar 2015 Apr 2015 \n     562      431      306      277      186 \n```\n:::\n:::\n\n\nIn contrast, you can see how only using `format()` does achieve the desired display format, but not the correct ordering.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create new column\ntest_format <- linelist %>% \n     mutate(yearmonth = format(date_onset, \"%b %Y\"))\n\n# print table\ntable(test_format$yearmon)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nApr 2014 Apr 2015 Aug 2014 Dec 2014 Feb 2015 Jan 2015 Jul 2014 Jun 2014 \n       7      186      528      562      306      431      226      100 \nMar 2015 May 2014 Nov 2014 Oct 2014 Sep 2014 \n     277       64      763     1112     1070 \n```\n:::\n:::\n\n\nNote: if you are working within a `ggplot()` and want to adjust how dates are *displayed* only, it may be sufficient to provide a strptime format to the `date_labels = ` argument in `scale_x_date()` - you can use `\"%b %Y\"` or `\"%Y %b\"`. See the [ggplot tips] page.  \n\n\n**zoo** also offers the function `as.yearqtr()`, and you can use `scale_x_yearmon()` when using `ggplot()`.  \n\n\n\n<!-- ======================================================= -->\n## Epidemiological weeks {#dates_epi_wks}\n\n### **lubridate** {.unnumbered}  \n\nSee the page on [Grouping data] for more extensive examples of grouping data by date. Below we briefly describe grouping data by weeks.  \n\nWe generally recommend using the `floor_date()` function from **lubridate**, with the argument `unit = \"week\"`. This rounds the date down to the \"start\" of the week, as defined by the argument `week_start = `. The default week start is 1 (for Mondays) but you can specify any day of the week as the start (e.g. 7 for Sundays). `floor_date()` is versitile and can be used to round down to other time units by setting `unit = ` to \"second\", \"minute\", \"hour\", \"day\", \"month\", or \"year\".  \n\nThe returned value is the start date of the week, in Date class. Date class is useful when plotting the data, as it will be easily recognized and ordered correctly by `ggplot()`.\n\nIf you are only interested in adjusting dates to *display* by week in a plot, see the section in this page on Date display. For example when plotting an epicurve you can format the date display by providing the desired strptime \"%\" nomenclature. For example, use \"%Y-%W\" or \"%Y-%U\" to return the year and week number (given Monday or Sunday week start, respectively).  \n\n### Weekly counts {.unnumbered}  \n\nSee the page on [Grouping data] for a thorough explanation of grouping data with `count()`, `group_by()`, and `summarise()`. A brief example is below.  \n\n1) Create a new 'week' column with `mutate()`, using `floor_date()` with `unit = \"week\"`  \n2) Get counts of rows (cases) per week with `count()`; filter out any cases with missing date  \n3) Finish with `complete()` from **tidyr** to ensure that *all* weeks appear in the data - even those with no rows/cases. By default the count values for any \"new\" rows are NA, but you can make them 0 with the `fill = ` argument, which expects a named list (below, `n` is the name of the counts column).  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make aggregated dataset of weekly case counts\nweekly_counts <- linelist %>% \n  drop_na(date_onset) %>%             # remove cases missing onset date\n  mutate(weekly_cases = floor_date(   # make new column, week of onset\n    date_onset,\n    unit = \"week\")) %>%            \n  count(weekly_cases) %>%           # group data by week and count rows per group (creates column 'n')\n  tidyr::complete(                  # ensure all weeks are present, even those with no cases reported\n    weekly_cases = seq.Date(          # re-define the \"weekly_cases\" column as a complete sequence,\n      from = min(weekly_cases),       # from the minimum date\n      to = max(weekly_cases),         # to the maxiumum date\n      by = \"week\"),                   # by weeks\n    fill = list(n = 0))             # fill-in NAs in the n counts column with 0\n```\n:::\n\n\nHere are the first rows of the resulting data frame:  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6138870fae75146f5cc1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6138870fae75146f5cc1\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"2014-04-06\",\"2014-04-13\",\"2014-04-20\",\"2014-04-27\",\"2014-05-04\",\"2014-05-11\",\"2014-05-18\",\"2014-05-25\",\"2014-06-01\",\"2014-06-08\",\"2014-06-15\",\"2014-06-22\",\"2014-06-29\",\"2014-07-06\",\"2014-07-13\",\"2014-07-20\",\"2014-07-27\",\"2014-08-03\",\"2014-08-10\",\"2014-08-17\"],[1,1,4,4,12,14,14,21,21,18,30,23,31,35,55,58,80,86,114,122]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>weekly_cases<\\/th>\\n      <th>n<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"weekly_cases\",\"targets\":0},{\"name\":\"n\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n### Epiweek alternatives {.unnumbered}  \n\nNote that **lubridate** also has functions `week()`, `epiweek()`, and `isoweek()`, each of which has slightly different start dates and other nuances. Generally speaking though, `floor_date()` should be all that you need. Read the details for these functions by entering `?week` into the console or reading the documentation [here](https://www.rdocumentation.org/packages/lubridate/versions/1.7.4/topics/week). \n\n\nYou might consider using the package **aweek** to set epidemiological weeks. You can read more about it [on the RECON website](https://www.repidemicsconsortium.org/aweek/). It has the functions `date2week()` and `week2date()` in which you can set the week start day with `week_start = \"Monday\"`. This package is easiest if you want \"week\"-style outputs (e.g. \"2020-W12\"). Another advantage of **aweek** is that when `date2week()` is applied to a date column, the returned column (week format) is automatically of class Factor and includes levels for all weeks in the time span (this avoids the extra step of `complete()` described above). However, **aweek** does not have the functionality to round dates to other time units such as months, years, etc.  \n\n\nAnother alternative for time series which also works well to show a a \"week\" format (\"2020 W12\") is `yearweek()` from the package **tsibble**, as demonstrated in the page on [Time series and outbreak detection].  \n\n\n<!-- ======================================================= -->\n## Converting dates/time zones\n\nWhen data is present in different time time zones, it can often be important to standardise this data in a unified time zone. This can present a further challenge, as the time zone component of data must be coded manually in most cases.\n\nIn R, each *datetime* object has a timezone component. By default, all datetime objects will carry the local time zone for the computer being used - this is generally specific to a *location* rather than a named timezone, as time zones will often change in locations due to daylight savings time. It is not possible to accurately compensate for time zones without a time component of a date, as the event a date column represents cannot be attributed to a specific time, and therefore time shifts measured in hours cannot be reasonably accounted for.\n\nTo deal with time zones, there are a number of helper functions in lubridate that can be used to change the time zone of a datetime object from the local time zone to a different time zone. Time zones are set by attributing a valid tz database time zone to the datetime object. A list of these can be found here - if the location you are using data from is not on this list, nearby large cities in the time zone are available and serve the same purpose. \n\nhttps://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign the current time to a column\ntime_now <- Sys.time()\ntime_now\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-02-18 15:15:45 CET\"\n```\n:::\n\n```{.r .cell-code}\n# use with_tz() to assign a new timezone to the column, while CHANGING the clock time\ntime_london_real <- with_tz(time_now, \"Europe/London\")\n\n# use force_tz() to assign a new timezone to the column, while KEEPING the clock time\ntime_london_local <- force_tz(time_now, \"Europe/London\")\n\n\n# note that as long as the computer that was used to run this code is NOT set to London time,\n# there will be a difference in the times \n# (the number of hours difference from the computers time zone to london)\ntime_london_real - time_london_local\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of -1 hours\n```\n:::\n:::\n\n\nThis may seem largely abstract, and is often not needed if the user isn't working across time zones.  \n\n\n\n\n\n<!-- ======================================================= -->\n## Lagging and leading calculations  \n\n`lead()` and `lag()` are functions from the **dplyr** package which help find previous (lagged) or subsequent (leading) values in a vector - typically a numeric or date vector. This is useful when doing calculations of change/difference between time units.  \n\n\n\n::: {.cell}\n\n:::\n\n\nLet's say you want to calculate the difference in cases between a current week and the previous one. The data are initially provided in weekly counts as shown below.  \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-8550bdb310a475cb4c4d\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8550bdb310a475cb4c4d\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"2019-06-23\",\"2019-06-30\",\"2019-07-07\",\"2019-07-14\",\"2019-07-21\",\"2019-07-28\",\"2019-08-04\",\"2019-08-11\",\"2019-08-18\",\"2019-08-25\",\"2019-09-01\",\"2019-09-08\",\"2019-09-15\",\"2019-09-22\",\"2019-09-29\",\"2019-10-06\",\"2019-10-13\",\"2019-10-20\",\"2019-10-27\",\"2019-11-03\",\"2019-11-10\",\"2019-11-17\",\"2019-11-24\",\"2019-12-01\",\"2019-12-08\",\"2019-12-15\",\"2019-12-22\",\"2019-12-29\"],[0,25,59,90,65,79,41,47,31,32,28,28,76,41,70,90,124,278,371,329,177,69,77,97,100,39,19,0]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>week_start<\\/th>\\n      <th>cases_wk<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"name\":\"week_start\",\"targets\":0},{\"name\":\"cases_wk\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**When using `lag()` or `lead()` the order of rows in the dataframe is very important! - pay attention to whether your dates/numbers are ascending or descending**  \n\nFirst, create a new column containing the value of the previous (lagged) week.  \n\n* Control the number of units back/forward with `n = ` (must be a non-negative integer)  \n* Use `default = ` to define the value placed in non-existing rows (e.g. the first row for which there is no lagged value). By default this is `NA`.  \n* Use `order_by = TRUE` if your the rows are not ordered by your reference column  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-60c14b7fc55d344b75ed\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-60c14b7fc55d344b75ed\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"2019-06-23\",\"2019-06-30\",\"2019-07-07\",\"2019-07-14\",\"2019-07-21\",\"2019-07-28\",\"2019-08-04\",\"2019-08-11\",\"2019-08-18\",\"2019-08-25\",\"2019-09-01\",\"2019-09-08\",\"2019-09-15\",\"2019-09-22\",\"2019-09-29\",\"2019-10-06\",\"2019-10-13\",\"2019-10-20\",\"2019-10-27\",\"2019-11-03\",\"2019-11-10\",\"2019-11-17\",\"2019-11-24\",\"2019-12-01\",\"2019-12-08\",\"2019-12-15\",\"2019-12-22\",\"2019-12-29\"],[0,25,59,90,65,79,41,47,31,32,28,28,76,41,70,90,124,278,371,329,177,69,77,97,100,39,19,0],[null,0,25,59,90,65,79,41,47,31,32,28,28,76,41,70,90,124,278,371,329,177,69,77,97,100,39,19]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>week_start<\\/th>\\n      <th>cases_wk<\\/th>\\n      <th>cases_prev_wk<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2]},{\"name\":\"week_start\",\"targets\":0},{\"name\":\"cases_wk\",\"targets\":1},{\"name\":\"cases_prev_wk\",\"targets\":2}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nNext, create a new column which is the difference between the two cases columns:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncounts <- counts %>% \n  mutate(cases_prev_wk = lag(cases_wk, n = 1),\n         case_diff = cases_wk - cases_prev_wk)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-57c063453997829f9109\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-57c063453997829f9109\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"2019-06-23\",\"2019-06-30\",\"2019-07-07\",\"2019-07-14\",\"2019-07-21\",\"2019-07-28\",\"2019-08-04\",\"2019-08-11\",\"2019-08-18\",\"2019-08-25\",\"2019-09-01\",\"2019-09-08\",\"2019-09-15\",\"2019-09-22\",\"2019-09-29\",\"2019-10-06\",\"2019-10-13\",\"2019-10-20\",\"2019-10-27\",\"2019-11-03\",\"2019-11-10\",\"2019-11-17\",\"2019-11-24\",\"2019-12-01\",\"2019-12-08\",\"2019-12-15\",\"2019-12-22\",\"2019-12-29\"],[0,25,59,90,65,79,41,47,31,32,28,28,76,41,70,90,124,278,371,329,177,69,77,97,100,39,19,0],[null,0,25,59,90,65,79,41,47,31,32,28,28,76,41,70,90,124,278,371,329,177,69,77,97,100,39,19],[null,25,34,31,-25,14,-38,6,-16,1,-4,0,48,-35,29,20,34,154,93,-42,-152,-108,8,20,3,-61,-20,-19]],\"container\":\"<table class=\\\"white-space: nowrap\\\">\\n  <thead>\\n    <tr>\\n      <th>week_start<\\/th>\\n      <th>cases_wk<\\/th>\\n      <th>cases_prev_wk<\\/th>\\n      <th>case_diff<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":5,\"scrollX\":true,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3]},{\"name\":\"week_start\",\"targets\":0},{\"name\":\"cases_wk\",\"targets\":1},{\"name\":\"cases_prev_wk\",\"targets\":2},{\"name\":\"case_diff\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false,\"lengthMenu\":[5,10,25,50,100]}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\nYou can read more about `lead()` and `lag()` in the documentation [here](https://dplyr.tidyverse.org/reference/lead-lag.html) or by entering `?lag` in your console.  \n\n\n<!-- ======================================================= -->\n## Resources  \n\n**lubridate** [tidyverse page](https://lubridate.tidyverse.org/)  \n**lubridate** RStudio [cheatsheet](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)  \nR for Data Science page on [dates and times](https://r4ds.had.co.nz/dates-and-times.html)  \n[Online tutorial](https://www.statmethods.net/input/dates.html)\n[Date formats](https://www.r-bloggers.com/2013/08/date-formats-in-r/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.31/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}