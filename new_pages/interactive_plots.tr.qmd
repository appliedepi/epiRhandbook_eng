# İnteraktif grafikler { }  

Veri görselleştirmenin özelleştirebilir ve etkileşimli olması önemini gün geçtikçe arttırmaya devam ediyor. Sonuç olarak, interaktif grafikler daha yaygın kullanılmaktadır. Analizlerinize interaktif grafikleri dahil etmenin birkaç yolu vardır, bunun için kullanılan en yaygın paketler **plotly** ve **shiny**'dir.

Bu sayfada, mevcut bir ggplot()' grafiğini **plotly** ile etkileşimli bir hale dönüştürmeye odaklanacağız. **shiny** hakkında daha fazla bilgiyi [Shiny ile Gösterge Panelleri] sayfasında bulabilirsiniz. İnteraktif grafiklerin PDF veya Word belgelerinde değil, yalnızca HTML formatındaki R belgelerinde kullanılabileceği vurgulamak istiyoruz.

Aşağıda, **ggplot2** ve **plotly** entegrasyonu kullanılarak interaktif bir hale dönüştürülmüş temel bir epidemiyolojik eğri bulunmaktadır (farenizi çizimin üzerine getirin, yakınlaştırın veya göstergedeki öğeleri tıklayın). 

```{r plotly_demo, out.width=c('75%'), out.height=c('500px'), echo=F, warning=F, message=F}
pacman::p_load(plotly, rio, here, ggplot2, dplyr, lubridate)
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

## bu düğmeler gereksiz/dikkat dağıtıcı
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- linelist %>% 
  mutate(outcome = if_else(is.na(outcome), "Unknown", outcome),
         date_earliest = if_else(is.na(date_infection), date_onset, date_infection),
         week_earliest = floor_date(date_earliest, unit = "week",week_start = 1))%>% 
  count(week_earliest, outcome) %>% 
  ggplot()+
  geom_col(aes(week_earliest, n, fill = outcome))+
  xlab("Week of infection/onset") + ylab("Cases per week")+
  theme_minimal()

p %>% 
  ggplotly() %>% 
  partial_bundle() %>% 
  config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)

```

<!-- ======================================================= -->
## Hazırlık {  }

### Paketleri yükleme {.unnumbered}  

Aşağıdaki kod parçaso, analizler için gereken paketlerin yüklenmesini göstermektedir. Bu el kitabında, gerekirse paketi kuran ve kullanım için yükleyen **pacman**’dan `p_load()` fonksiyonunu vurgulamaktayız. R tabanından `library()` ile daha öncesinde kurmuş olduğunuz paketleri yükleyebilirsiniz. R paketleri hakkında daha fazla bilgi için R’ın temelleri sayfasına bakabilirsiniz.

```{r}
pacman::p_load(
  rio,       # Dosyaları içeri/dışarı aktarılması
  here,      # Dosya yolağını tespit edilmesi 
  lubridate, # Tarihlerle çalışma
  plotly,    # İnteraktif grafikler
  scales,    # Yüzdelerin oranlara kolayca çevrilmesi
  tidyverse  # Veri yönetimi ve görselleştirilmesi
  ) 
```

### `ggplot()` hazırlama {.unnumbered}  

Bu sayfada, etkileşimli hale dönüştürmek istediğiniz bir `ggplot()` grafiğiyle işe başladığınızı varsayıyoruz. Bu el kitabının birçok sayfasında kullanılan `linelist` metodunu kullanarak bu sayfadaki grafiklerden birkaçını oluşturacağız.


### Veriyi içe aktarma {.unnumbered}

Simüle edilmiş bir Ebola salgınına ait vakaların veri setini içe aktarıyoruz. Takip etmek isterseniz, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'> “temiz satır listesi” dosyasını indirmek için tıklayın.</a> (.rds dosyası olarak) Verilerinizi **rio** paketinden `import()` işleviyle içe aktarın (.xlsx, .rds, .csv gibi birçok dosya türünü kabul eder - ayrıntılar için [İçe ve dışa aktarma] sayfasına bakın). 

```{r, echo=F}
# veri setini içe aktar
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# veri setini indir 
linelist <- import("linelist_cleaned.rds")
```

Veri setindeki ilk 50 satır aşağıda listelenmiştir.

```{r, message=FALSE, echo=F}
# veri listesini tablo olarak göster
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```






  
<!-- ======================================================= -->
## `ggplotly()` ile grafikler {  }

**plotly** paketindeki ggplotly() işlevi bir `ggplot()` grafiğini kolayca etkileşimli hale dönüştürebilir. Kısaca "ggplot()" dosyanızı kaydedin ve ardından onu "ggplotly()" işlevine aktarın.

Aşağıda, belirli bir haftada ölen vakaların oranını gösteren basit bir grafik çizeceğiz:  

İlk olarak, her epidemiyolojik hafta için bir özet veri seti, çıktıları bilinen vakaların sayısı ve bu vakalardaki ölüm yüzdesini oluşturarak başlıyoruz.

```{r}
weekly_deaths <- linelist %>%
  group_by(epiweek = floor_date(date_onset, "week")) %>%  # veri setini epidemiyolojik hafta olarak oluştur ve grupla
  summarise(                                              # yeni özet veri çerçevesi oluştur:
    n_known_outcome = sum(!is.na(outcome), na.rm=T),      # bilinen çıktıları olan hasta sayısı
    n_death  = sum(outcome == "Death", na.rm=T),          # ölen vaka sayısı
    pct_death = 100*(n_death / n_known_outcome)           # çıktıları bilinen hastalar içinde ölen vaka oranı
  )
```
`weekly_deaths` veri setinin ilk 50 satırı:

```{r message=FALSE, echo=F}
DT::datatable(head(weekly_deaths, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```
Ardından **ggplot2** ile `geom_line()` işlevini kullanarak grafiği oluşturuyoruz.

```{r, warning=F, message=F}
deaths_plot <- ggplot(data = weekly_deaths)+            # weekly deaths verileri ile başla
  geom_line(mapping = aes(x = epiweek, y = pct_death))  # çizgi oluştur

deaths_plot   # yazdır
```

Bu grafiği aşağıdaki gibi `ggplotly()` işleviyle basitçe etkileşimli hale getirebiliriz. X ve y değerlerini göstermek için farenizi çizginin üzerine getirin. Grafiği yakınlaştırabilir ve etrafa sürükleyebilirsiniz. Simgeleri grafiğin sağ üst köşesinde görebilirsiniz. Sırayla, aşağıdaki aksiyonları alabilirsiniz: 

* Geçerli grafiği bir PNG görüntüsü olarak indirin
* Seçim kutusuyla görüntüyü yakınlaştırın
* "Kaydırma" çubuğu veya grafiği tıklayıp sürükleyerek grafik üzerinde hareket edin
* Yakınlaştırın, uzaklaştırın veya varsayılan yakınlaştırmaya dönün
* Eksenleri varsayılanlara sıfırlayın
* X ve y eksenlerine uzanan "interaktif çizgileri" açıp/kapayın
* Verilerin gösterilip gösterilmeyeceğine ilişkin ayarlamaları düzenleyin


```{r}
deaths_plot %>% plotly::ggplotly()
```

`ggplotly()` gruplanmış verilerde de çalışır. Aşağıda, çıktılarına göre gruplandırılmış haftalık bir epidemiyoloji eğrisi yapılmıştır. Yığılmış çubuklar etkileşimlidir. Grafikteki farklı öğelere tıklamayı deneyin (tıkladığınız öğeler görünecek / gizlenecektir).


```{r plot_show, eval=F}
# incidence2 paketi ile epidemiyoloji eğrisi düzenle
p <- incidence2::incidence(
  linelist,
  date_index = date_onset,
  interval = "weeks",
  groups = outcome) %>% plot(fill = outcome)
```

```{r, echo=T, eval=F}
# İnteraktif grafik
p %>% plotly::ggplotly()
```
  
```{r, warning = F, message = F, , out.width=c('95%'), out.height=c('500px'), echo=FALSE}
p %>% 
  ggplotly() %>% 
  partial_bundle() 
```
  
<!-- ======================================================= -->
## Değişiklikler {  }

### Dosya boyutu {.unnumbered}  

R Markdown tarafından oluşturulan bir HTML'de dışa aktarırken (bu kitap gibi!) grafiğin veri boyutunu küçültmek isteyebilirsiniz (çoğu durumda hiçbir olumsuz yan etkisi yoktur). Bunun için interaktif grafiği yine **plotly** paketinden `partial_bundle()` işlevine aktarmanız yeterli olacaktır.

```{r plot_tidyshow, eval=F}
p <- p %>% 
  plotly::ggplotly() %>%
  plotly::partial_bundle()
```

### Düğmeler {.unnumbered}  

Standart bir plotly grafiğindeki bazı düğmeler dikkat dağıtıcı olabilir. İsterseniz, bunları kaldırabilirsiniz. Bunu, grafik çıktısını **plotly** paketinden `config()` işlevi içine aktararak yapabilirsiniz. İşlev içinde hangi düğmelerin kaldırılacağını belirtmeniz gerekmektedir. Aşağıdaki örnekte, kaldırılacak düğmelerin adlarını önceden belirleyip `modeBarButtonsToRemove =` argümanına yazıyoruz. Ayrıca plotly logosunu kaldırmak için de `displaylogo = FALSE` argümanını ekledik. 

```{r plot_tidyshow2, eval=F}
## bu düğmeler dikkat dağıtıyor ve bunları kaldırmak istiyoruz
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- p %>%          # etkileşimli grafiği bu düğmeler olmadan yeniden tanımla
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```



<!-- ======================================================= -->
## Isı grafikleri {  }

Isı haritası da dahil olmak üzere neredeyse tüm `ggplot()` grafiklerini interaktif hale getirebilirsiniz. [Isı grafikleri] sayfasında, belirli illerde kurulmuş olan malarya tesislerine ait bir grafiğin nasıl yapıldığı anlatılmaktadır. Bu grafikte haftanın bazı günlerinde tesislerden elde edilen veriler görselleştirilmiştir. 

Örnek kodu, burada derinlemesine açıklamayacak olsak bile aşağıda paylaşıyoruz.  

```{r  message=F, warning=F}
# verileri içe aktar
facility_count_data <- rio::import(here::here("data", "malaria_facility_count_data.rds"))

# Spring bölgesine ait verileri Weeks'te topla
agg_weeks <- facility_count_data %>% 
  filter(District == "Spring",
         data_date < as.Date("2020-08-01")) %>% 
  mutate(week = aweek::date2week(
    data_date,
    start_date = "Monday",
    floor_day = TRUE,
    factor = TRUE)) %>% 
  group_by(location_name, week, .drop = F) %>%
  summarise(
    n_days          = 7,
    n_reports       = n(),
    malaria_tot     = sum(malaria_tot, na.rm = T),
    n_days_reported = length(unique(data_date)),
    p_days_reported = round(100*(n_days_reported / n_days))) %>% 
  ungroup(location_name, week) %>% 
  right_join(tidyr::expand(., week, location_name)) %>% 
  mutate(week = aweek::week2date(week))

# grafiği oluştur
metrics_plot <- ggplot(agg_weeks,
       aes(x = week,
           y = location_name,
           fill = p_days_reported))+
  geom_tile(colour="white")+
  scale_fill_gradient(low = "orange", high = "darkgreen", na.value = "grey80")+
  scale_x_date(expand = c(0,0),
               date_breaks = "2 weeks",
               date_labels = "%d\n%b")+
  theme_minimal()+ 
  theme(
    legend.title = element_text(size=12, face="bold"),
    legend.text  = element_text(size=10, face="bold"),
    legend.key.height = grid::unit(1,"cm"),
    legend.key.width  = grid::unit(0.6,"cm"),
    axis.text.x = element_text(size=12),
    axis.text.y = element_text(vjust=0.2),
    axis.ticks = element_line(size=0.4),
    axis.title = element_text(size=12, face="bold"),
    plot.title = element_text(hjust=0,size=14,face="bold"),
    plot.caption = element_text(hjust = 0, face = "italic")
    )+
  labs(x = "Week",
       y = "Facility name",
       fill = "Reporting\nperformance (%)",
       title = "Percent of days per week that facility reported data",
       subtitle = "District health facilities, April-May 2019",
       caption = "7-day weeks beginning on Mondays.")

metrics_plot # yazdır
```

Aşağıda, grafiği etkileşimli hale getiriyoruz. Düğmeleri ve dosya boyutunu değiştiriyoruz.

```{r,  out.width=c('95%'), out.height=c('500px')}
metrics_plot %>% 
  plotly::ggplotly() %>% 
  plotly::partial_bundle() %>% 
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```

<!-- ## Maps {.unnumbered}   -->

<!-- You can also make `ggplot()` GIS maps interactive, although it makes a bit more care.  -->

<!-- THIS SECTION IS UNDER CONSTRUCTION  -->

<!-- Although **plotly** works well with `ggplot2::geom_sf` in RStudio, when you try to include its outputs in R Markdown HTML files (like this book), it doesn't work well.   -->

<!-- So instead you can use {**plotly**}'s own mapping tools which can be tricky but are easy when you know how. Read on...   -->

<!-- We're going to use Covid-19 incidence across African countries for this example. The data used can be found on the [World Health Organisation website](https://covid19.who.int/table).   -->

<!-- You'll also need a new type of file, a GeoJSON, which is sort of similar to a shp file for those familiar with GIS. For this book, we used one from [here](https://geojson-maps.ash.ms).   -->

<!-- GeoJSON files are stored in R as complex lists and you'll need to maipulate them a little. -->

<!-- ```{r, echo=T,} -->
<!-- ## You need two new packages: {rjson} and {purrr} -->
<!-- pacman::p_load(plotly, rjson, purrr) -->

<!-- ## This is a simplified version of the WHO data -->
<!-- df <- rio::import(here::here("data", "gis", "covid_incidence.csv")) -->

<!-- ## Load your geojson file -->
<!-- geoJSON <- rjson::fromJSON(file=here::here("data", "gis", "africa_countries.geo.json")) -->

<!-- ## Here are some of the properties for each element of the object -->
<!-- head(geoJSON$features[[1]]$properties) -->

<!-- ``` -->


<!-- This is the tricky part. For {**plotly**} to match your incidence data to GeoJSON, the countries in the geoJSON need an id in a specific place in the list of lists. For this we need to build a basic function: -->
<!-- ```{r} -->
<!-- ## The property column we need to choose here is "sovereignt" as it is the names for each country -->
<!-- give_id <- function(x){ -->

<!--   x$id <- x$properties$sovereignt  ## Take sovereignt from properties and set it as the id -->

<!--   return(x) -->
<!-- } -->

<!-- ## Use {purrr} to apply this function to every element of the features list of the geoJSON object -->
<!-- geoJSON$features <- purrr::map(.x = geoJSON$features, give_id) -->
<!-- ``` -->

<!-- <!-- ======================================================= --> -->
<!-- ### Maps - plot {  } -->

<!-- UNDER CONSTRUCTION -->

<!-- ```{r, echo=FALSE, eval=FALSE, out.width=c('95%'), out.height=c('500px'),warning=F} -->
<!-- plotly::plot_ly() %>%  -->
<!--   plotly::add_trace(                    #The main plot mapping functionn -->
<!--     type="choropleth", -->
<!--     geojson=geoJSON, -->
<!--     locations=df$Name,          #The column with the names (must match id) -->
<!--     z=df$Cumulative_incidence,  #The column with the incidence values -->
<!--     zmin=0, -->
<!--     zmax=57008, -->
<!--     colorscale="Viridis", -->
<!--     marker=list(line=list(width=0)) -->
<!--   ) %>% -->
<!--   colorbar(title = "Cases per million") %>% -->
<!--   layout(title = "Covid-19 cumulative incidence", -->
<!--                  geo = list(scope = 'africa')) %>%  -->
<!--   config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove) -->
<!-- ``` -->

<!-- ======================================================= -->
## Kaynaklar {  }

Plotly sadece R'da değil, aynı zamanda Python (ve JavaScript temelli herhangi bir veri bilimi kodlama dili) ile de çalışmaktadır. Daha fazla bilgiye [plotly web sitesinden](https://plotly.com/r/) ulaşabilirsiniz.
