# Basit istatistiksel testler { }


Bu sayfa, **base** R, **rstatix** ve **gtsummary** kullanılarak basit istatistiksel testlerin nasıl gerçekleştirileceğini gösterir.

* t testi
* Shapiro-Wilk testi
* Wilcoxon sıra toplamı testi
* Kruskal-Wallis testi
* Ki-kare testi
* Sayısal değişkenler arasındaki korelasyonlar

...başka birçok test yapılabilir, ancak biz sadece bu yaygın testleri göstermekteyiz ve daha fazla belgeye bağlantı vermekteyiz.

Yukarıdaki paketlerin her biri belirli avantajlar ve dezavantajlar getirir:

* İstatistiksel çıktıları R Konsoluna yazdırmak için **base** R fonksiyonlarını kullanın
* Sonuçları bir veri çerçevesinde döndürmek için veya testlerin gruplara göre yapılmasını istiyorsanız **rstatix** fonksiyonlarını kullanın
* Yayına hazır tabloları hızlı bir şekilde yazdırmak istiyorsanız **gtsummary** kullanın



<!-- ============================================= ========= -->
## Hazırlık {  }


### Paketleri yükleyin {.unnumbered}

Bu kod parçası, analizler için gerekli olan paketlerin yüklenmesini gösterir. Bu el kitabında, gerekirse paketi kuran *ve* kullanım için yükleyen **pacman**'dan `p_load()` vurgusunu yapıyoruz. **base** R'dan `library()` ile kurulu paketleri de yükleyebilirsiniz. R paketleri hakkında daha fazla bilgi için [R basics] sayfasına bakın.

```{r}
pacman::p_load(
  rio,          # Dosyayı içe aktarma
  here,         # Dosyayı konumlama
  skimr,        # Veriye göz atma
  tidyverse,    # veri yönetimi + ggplot2 grafikleri, 
  gtsummary,    # özet istatistikler ve testler
  rstatix,      # istatistikler
  corrr,        # Sayısal değişkenler için Korelasyon analizi 
  janitor,      # Tablolara toplamı ve yüzdeleri ekleme
  flextable     # Tabloları HTML formatına dönüştürme
  )
```

### Verileri içe aktar {.unnumbered}

Simüle edilmiş bir Ebola salgınından vakaların veri setini içe aktarıyoruz. Takip etmek isterseniz, <a 
href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>"temiz" vaka listesini indirmek için tıklayınız</a>(.rds dosyası olarak). Verilerinizi **rio** paketinden `import()` fonksiyonuyla içe aktarın (.xlsx, .rds, .csv gibi birçok dosya türünü kabul eder - ayrıntılar için [İçe aktarma ve dışa aktarma] sayfasına bakın).


```{r, echo=F}
# Vaka listesini R'a aktarma
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# Vaka listesini içe aktarma
linelist <- import("linelist_cleaned.rds")
```

Vaka listesinin ilk 50 satırı aşağıda görüntülenmektedir.

```{r, message=FALSE, echo=F}
# Vaka listesini tablo olarak gösterme
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```





**base (temel)** R {}

İstatistiksel testler yapmak için **base** R fonksiyonlarını kullanabilirsiniz. Komutlar nispeten basittir ve sonuçlar basit görüntüleme için R Konsoluna yazdırılacaktır. Bununla birlikte, çıktılar genellikle listelerdir ve bu nedenle sonuçları sonraki işlemlerde kullanmak istiyorsanız manipüle edilmesi daha zordur.

### T testleri {.unnumbered}

"Student's t-Test" olarak da adlandırılan bir [t-testi](https://en.wikipedia.org/wiki/Student%27s_t-test), genellikle iki grup arasındaki bazı sayısal değişkenlerin ortalamaları arasında önemli bir fark olup olmadığını belirlemek için kullanılır. Burada, sütunların aynı veri çerçevesinde olup olmadığına bağlı olarak bu testi yapmak için sözdizimini göstereceğiz.

**Sözdizimi 1:** Bu, sayısal ve kategorik sütunlarınız aynı veri çerçevesinde olduğundaki sözdizimidir. Denklemin sol tarafında sayısal sütunu ve sağ tarafında kategorik sütunu sağlayın. Veri kümesini `data = ` olarak belirtin. İsteğe bağlı olarak, `paired = TRUE`, ve `conf.level = ` (0.95 default), ve`alternative = `("iki taraflı", "daha az" veya "daha büyük") olarak ayarlayın. Daha fazla ayrıntı için `?t.test` girin. 

```{r}
## T-testi ile grupların yaş ortalamalarını karşılaştırma
t.test(age_years ~ gender, data = linelist)
```

**Sözdizimi 2:** Bu alternatif sözdizimini kullanarak iki ayrı sayısal vektörü karşılaştırabilirsiniz. Örneğin, iki sütun farklı veri kümelerindeyse.

```{r, eval=F}
t.test(df1$age_years, df2$age_years)
```

Örneklerin ortalamasının belirli bir değerden önemli ölçüde farklı olup olmadığını belirlemek için bir t testi de kullanabilirsiniz. Burada, `mu = ` olarak bilinen/varsayımsal popülasyon ortalaması ile tek örnekli bir t-testi yapıyoruz:  

```{r, eval=F}
t.test(linelist$age_years, mu = 45)
```

### Shapiro-Wilk testi {.unnumbered}

[Shapiro-Wilk testi](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test) bir örneğin normal dağılıma sahip bir popülasyondan gelip gelmediğini belirlemek için kullanılabilir (diğer birçok testin varsayımı ve analizinde olduğu gibi, örneğin t-testi). Ancak, bu yalnızca 3 ila 5000 gözlem arasındaki bir örnek üzerinde kullanılabilir. Daha büyük numuneler için bir [quantile-quantile (Q-Q) grafiği](https://ggplot2.tidyverse.org/reference/geom_qq.html) yardımcı olabilir.


```{r, eval=F}
shapiro.test(linelist$age_years)
```

### Wilcoxon sıralama toplamı testi {.unnumbered}

[Mann–Whitney U testi](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test) olarak da adlandırılan Wilcoxon sıralama toplamı testi, genellikle iki sayısal örneğin popülasyonları normal dağılmadığında veya eşit olmayan varyansa sahip olduğunda kullanılır.

```{r wilcox_base}

## Wilcox testi ile grupların yaş dağılımını karşılaştırma
wilcox.test(age_years ~ outcome, data = linelist)

```


### Kruskal-Wallis testi {.unnumbered}


[Kruskal-Wallis testi](https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance), ikiden fazla örneklemin dağılımdaki farklılıklarını test etmek için kullanılabilecek Wilcoxon testinin bir uzantısıdır.  Yalnızca iki örnek kullanıldığında, Wilcoxon testiyle aynı sonuçları verir.

```{r }

## Kruskal-Wallis testi ile grupların yaş dağılımını karşılaştırma
kruskal.test(age_years ~ outcome, linelist)

```

### Ki-kare testi {.unnumbered}

[Pearson Ki-kare testi](https://en.wikipedia.org/wiki/Chi-squared_test) kategorik gruplar arasındaki önemli farklılıkları test etmek için kullanılır. 

```{r}

## Ki-kare testi ile her grubun oranlarını karşılaşırma
chisq.test(linelist$gender, linelist$outcome)

```



## **rstatix** paketi {}

**rstatix** paketi, istatistiksel testlerin çalıştırılmasını ve sonuçlarını "tünel dostu" bir çerçevede alma olanağı sunar. Sonuçlar üzerinde işlemleri gerçekleştirebilmeniz için sonuçlar, otomatik olarak bir veri çerçevesindedir. İstatistiklerin her grup için çalıştırılması ve fonksiyonlara geçirilen verileri gruplamak kolaydır.


### Özet istatistikler {.unnumbered}

`get_summary_stats()` fonksiyonu, özet istatistikleri döndürmenin hızlı bir yoludur. Veri kümenizi bu fonksiyona aktarmanız ve analiz edilecek sütunları sağlamanız yeterlidir. Hiçbir sütun belirtilmemişse, istatistikler tüm sütunlar için hesaplanır.

Varsayılan olarak, tam bir özet istatistik aralığı döndürülür: n, maks, min, medyan, %25 ile, %75 ile, IQR, medyan mutlak sapma (mad), ortalama, standart sapma, standart hata ve güven aralığı.


```{r}
linelist %>%
  rstatix::get_summary_stats(age, temp)
```

`type =` için şu değerlerden birini sağlayarak döndürülecek özet istatistiklerin bir alt kümesini belirtebilirsiniz: "full", "common", "robust", "five_number", "mean_sd", "mean_se", "mean_ci" , "median_iqr", "median_mad", "quantile", "mean", "median", "min", "max".

Her gruplama değişkeni için bir satır döndürülecek şekilde gruplandırılmış verilerle de kullanılabilir:

```{r}
linelist %>%
  group_by(hospital) %>%
  rstatix::get_summary_stats(age, temp, type = "common")
```

İstatistiksel testler yapmak için **rstatix**'i de kullanabilirsiniz:

### T-testi {.unnumbered}

Sayısal ve kategorik sütunları belirtmek için bir formül sözdizimi kullanın:

```{r}
linelist %>% 
  t_test(age_years ~ gender)
```

Veya `~ 1` kullanın ve tek örnekli bir T-testi için `mu =` belirtin. Bu grup tarafından da yapılabilir.

```{r}
linelist %>% 
  t_test(age_years ~ 1, mu = 30)
```

Uygulanabilirse, istatistiksel testler aşağıda gösterildiği gibi grup bazında yapılabilir:

```{r}
linelist %>% 
  group_by(gender) %>% 
  t_test(age_years ~ 1, mu = 18)
```

### Shapiro-Wilk testi {.unnumbered}

Yukarıda belirtildiği gibi, örneklem büyüklüğü 3 ile 5000 arasında olmalıdır.

```{r}
linelist %>% 
  head(500) %>%            # Vaka listesinin ilk 500 satırı, sadece örnek için
  shapiro_test(age_years)
```

### Wilcoxon sıralama toplamı testi {.unnumbered}

```{r}
linelist %>% 
  wilcox_test(age_years ~ gender)
```


### Kruskal-Wallis testi {.unnumbered}  

Mann-Whitney U testi olarak da bilinir.  

```{r}
linelist %>% 
  kruskal_test(age_years ~ outcome)
```


### Ki-kare testi {.unnumbered}

Ki-kare test fonksiyonu bir tablo kabul eder, bu nedenle önce bir çapraz tablo oluştururuz. Çapraz tablo oluşturmanın birçok yolu vardır (bkz. [Tanımlayıcı tablolar]) ancak burada **janitor** 'den 'tabyl()' kullanıyoruz ve 'chisq_test()'e geçmeden önce en soldaki değer etiketleri sütununu kaldırıyoruz.

```{r}
linelist %>% 
  tabyl(gender, outcome) %>% 
  select(-1) %>% 
  chisq_test()

```

**rstatix** fonksiyonları ile daha birçok fonksiyon ve istatistiksel test çalıştırılabilir. **rstatix** belgelerine [buradan çevrimiçi](https://github.com/kassambara/rstatix) veya ?rstatix girerek inceleyebilirsiniz. 




## `gtsummary` paketi {#stats_gt}

Bu paketle oluşturulmuş güzel bir tabloya istatistiksel bir testin sonuçlarını eklemek istiyorsanız **gtsummary** kullanın ([Açıklayıcı tablolar](#tbl_gt) sayfasının **gtsummary** bölümünde açıklandığı gibi) ).

'tbl_summary' ile karşılaştırmanın istatistiksel testlerinin yapılması,
Bir tabloya `add_p` fonskiyonu ve hangi testin kullanılacağını belirtir. kullanarak çoklu test için p değerlerinin düzeltilmesi mümkündür.
'add_q' işlevi. Ayrıntılar için `?tbl_summary` çalıştırın.

### Ki-kare testi {.unnumbered}

Kategorik bir değişkenin oranlarını iki grupta karşılaştırın. Kategorik bir değişkene uygulandığında 'add_p()' için varsayılan istatistiksel test, süreklilik düzeltmeli ki-kare bağımsızlık testi yapmaktır, ancak herhangi bir beklenen değer sayısı 5'in altındaysa, o zaman Fisher'ın kesin testi kullanılır.

```{r chi_gt}
linelist %>% 
  select(gender, outcome) %>%    # ilgilenilen değişkenleri tutma
  tbl_summary(by = outcome) %>%  # özet tablo oluştur ve gruplama değişkenini belirle
  add_p()                        # hangi testin gerçekleştirileceğini belirtin
```


### T testleri {.unnumbered}

İki grupta sürekli bir değişken için ortalamalardaki farkı karşılaştırın.
Örneğin, ortalama yaşı hasta sonucuna göre karşılaştırın.

```{r ttest_gt}

linelist %>% 
  select(age_years, outcome) %>%             # ilgilenilen değişkenleri tutma
  tbl_summary(                               # özet tablo üretme
    statistic = age_years ~ "{mean} ({sd})", # hangi istatistiklerin gösterileceğini belirtin
    by = outcome) %>%                        # gruplama değişkenini belirtin
  add_p(age_years ~ "t.test")                # hangi testlerin gerçekleştirileceğini belirtin


```

### Wilcoxon sıralama toplamı testi{.unnumbered}

Sürekli bir değişkenin dağılımını iki grupta karşılaştırın. Varsayılan ayar, iki grubu karşılaştırırken Wilcoxon sıra toplamı testi ve medyanı (IQR) kullanmaktır. Ancak normal dağılmayan veriler veya çoklu grupların karşılaştırılması için Kruskal-wallis testi daha uygundur.

```{r wilcox_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # ilgilenilen değişkenleri tutma
  tbl_summary(                                         # özet tablo üretme
    statistic = age_years ~ "{median} ({p25}, {p75})", # hangi istatistiğin gösterileceğini belirtin (bu varsayılandır, bu nedenle kaldırılabilir)
    by = outcome) %>%                                  # gruplama değişkenini belirtin
  add_p(age_years ~ "wilcox.test")                     # hangi testin gerçekleştirileceğini belirtin (bu varsayılandır, bu nedenle parantezler boş bırakılabilir)


```
### Kruskal-wallis testi {.numbered}

Verilerin normal dağılıp dağılmadığına bakılmaksızın, sürekli bir değişkenin iki veya daha fazla gruptaki dağılımını karşılaştırın.

```{r kruskal_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # ilgilenilen değişkenleri tutma
  tbl_summary(                                         # özet tablo üretme
    statistic = age_years ~ "{median} ({p25}, {p75})", # hangi istatistiğin gösterileceğini belirtin (bu varsayılandır, bu nedenle kaldırılabilir)
    by = outcome) %>%                                  # gruplama değişkenini belirtin
  add_p(age_years ~ "kruskal.test")                    # hangi testin gerçekleştirileceğini belirtin


```




<!-- ## `dplyr` package {} -->

<!-- Performing statistical tests in `dplyr` alone is very dense, again because it  -->
<!-- does not fit within the tidy-data framework. It requires using `purrr` to create -->
<!-- a list of dataframes for each of the subgroups you want to compare. See the page on [Iteration, loops, and lists] to learn about **purrr**.   -->

<!-- An easier alternative may be the `rstatix` package.  -->

<!-- ### T-tests {.unnumbered}  -->

<!-- ```{r ttest_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the mean age for the death group -->
<!--     Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the mean age for the recover group -->
<!--     Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)), -->
<!--     ## using both grouped data sets compare mean age with a t-test -->
<!--     ## keep only the p.value -->
<!--     t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value) -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->


<!-- ### Wilcoxon rank sum test {.unnumbered} -->

<!-- ```{r wilcox_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the median age for the death group -->
<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_iqr = map(Death, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## calculate the median age for the recover group -->
<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_iqr = map(Recover, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## using both grouped data sets compare age distribution with a wilcox test -->
<!--     ## keep only the p.value -->
<!--     wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value) -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Kruskal-wallis test {.unnumbered} -->


<!-- ```{r kruskal_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the median age for the death group -->
<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_iqr = map(Death, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## calculate the median age for the recover group -->
<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_iqr = map(Recover, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## using the original data set compare age distribution with a kruskal test -->
<!--     ## keep only the p.value -->
<!--     kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Chi-squared test {.unnumbered}  -->


<!-- ```{r} -->
<!-- linelist %>%  -->
<!--   ## do everything by gender  -->
<!--   group_by(outcome) %>%  -->
<!--   ## count the variable of interest -->
<!--   count(gender) %>%  -->
<!--   ## calculate proportion  -->
<!--   ## note that the denominator here is the sum of each gender -->
<!--   mutate(percentage = n / sum(n) * 100) %>%  -->
<!--   pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>%  -->
<!--   filter(!is.na(gender)) %>%  -->
<!--   mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value) -->
<!-- ``` -->


<!-- ======================================================= -->

## Korelasyonlar

Sayısal değişkenler arasındaki korelasyon **tidyverse** kullanılarak araştırılabilir.
**corrr** paketi, Pearson Kendall kullanarak korelasyonları hesaplamanıza izin verir.
tau veya Spearman rho, Paket bir tablo oluşturur ve ayrıca
değerleri otomatik olarak çizer.

```{r, warning=F, message=F}

correlation_tab <- linelist %>% 
  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # ilgilenilen sayısal değişkenleri tutma
  correlate()      # korelasyon tablosu oluşturma (varsayılan pearson kullanılarak)

correlation_tab    # yazdır

## Duplike girdileri kaldırma (üstteki tablo yansıtılır) 
correlation_tab <- correlation_tab %>% 
  shave()

## Korelasyon tablosunu gösterme 
correlation_tab

## korelasyon grafikleri 
rplot(correlation_tab)
```


<!-- ======================================================= -->

## Kaynaklar {  }

Bu sayfadaki bilgilerin çoğu şu kaynaklardan ve çevrimiçi gösterimlerden uyarlanmıştır:  

[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)
[dplyr](https://dplyr.tidyverse.org/articles/grouping.html)
[corrr](https://corrr.tidymodels.org/articles/using-corrr.html)
[sthda correlation](http://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r)
