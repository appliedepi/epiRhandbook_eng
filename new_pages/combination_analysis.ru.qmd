
# Анализ комбинаций { }  

```{r echo=F, out.width= "75%", warning=F, message=F}
pacman::p_load(tidyverse,
               UpSetR,
               ggupset)

linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

# Добавляет в построчный список новые переменные симптомов со случайными значениями "да" или "нет" 
linelist_sym <- linelist %>% 
  mutate(fever  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.80, 0.20)),
         chills = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.20, 0.80)),
         cough  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.9, 0.15)),
         aches  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.10, 0.90)),
         vomit = sample(c("yes", "no"), nrow(linelist), replace = T))

linelist_sym_2 <- linelist_sym %>% 
     
  #mutate(fever = ifelse(fever == "yes", colnames(linelist)[which(colnames(linelist) == "fever")]))
   mutate(across(.cols = c(fever, chills, cough, aches, vomit),
                 .fns = ~+(.x == "yes")))   

     
  #mutate(across(c("fever", "chills", "cough", "aches", "vomit"), ~ifelse(.x = "yes", colnames(.)[which(colnames(.) == "fever")], 0)))   
  

# Построить график
UpSetR::upset(
  select(linelist_sym_2, fever, chills, cough, aches, vomit),
  sets = c("fever", "chills", "cough", "aches", "vomit"),
  order.by = "freq",
  sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange"), # optional colors
  empty.intersections = "on",
  # nsets = 3,
  number.angles = 0,
  point.size = 3.5,
  line.size = 2, 
  mainbar.y.label = "Symptoms Combinations",
  sets.x.label = "Patients with Symptom")

```



Этот анализ позволяет построить график частоты встречаемости различных **комбинаций** значений/ответов. В данном примере мы строим график частоты проявления различных комбинаций симптомов.  

Этот анализ также часто называют:  

* **"Анализ множественных ответов"**  
* **"Анализ множеств"**  
* **"Анализ комбинаций"**  

На приведенном выше графике показаны пять симптомов. Под каждым вертикальным столбиком находится линия и точки, указывающие на комбинацию симптомов, отраженных столбиком выше. Справа горизонтальные столбики отражают частоту встречаемости каждого отдельного симптома.  

В первом показанном нами способе используется пакет **ggupset**, во втором - пакет **UpSetR**. 




  



<!-- ======================================================= -->
## Подготовка {  }

### Загрузка пакетов {.unnumbered}

В этом фрагменте кода показана загрузка пакетов, необходимых для проведения анализа. В данном руководстве мы делаем акцент на функции `p_load()` из **pacman**, которая при необходимости устанавливает пакет *и* загружает его для использования. Установленные пакеты можно также загрузить с помощью `library()` из **базового** R. Более подробную информацию о пакетах R см. на странице [Основы R](basics.ru.qmd).  

```{r, warning=F, message=F}
pacman::p_load(
  tidyverse,     # управление данными и их визуализация
  UpSetR,        # специальный пакет для графиков с комбинированными данными
  ggupset)       # специальный пакет для графиков с комбинированными данными
```

<!-- ======================================================= -->
### Импорт данных {.unnumbered}  

Для начала мы импортируем построчный список случаев из смоделированной эпидемии лихорадки Эбола. Если вы хотите проследить за ходом работы, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>нажмите кнопку, чтобы загрузить "чистый" построчный список</a> (в виде файла .rds). Импортируйте данные с помощью функции `import()` из пакета **rio** (она работает со многими типами файлов, такими как .xlsx, .csv, .rds - подробности см. на странице [Импорт и экспорт](importing.ru.qmd)).  



```{r, echo=F}
# импортировать построчный список в R
linelist_sym <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# импортный построчный список 
linelist_sym <- import("linelist_cleaned.rds")
```


Этот построчный список включает пять переменных "да/нет", касающихся заявленных симптомов. Для построения графика с помощью пакета **ggupset** нам потребуется немного преобразовать эти переменные. Просмотрите данные (прокрутите страницу вправо, чтобы увидеть переменные симптомов).  

```{r, message=FALSE, echo=F}
# отображение данных построчного списка в виде таблицы
DT::datatable(head(linelist_sym, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```



<!-- ======================================================= -->
### Переформатирование значений {.unnumbered}  

Для соответствия формату, ожидаемому **ggupset**, мы преобразуем ""да"" и "нет" в название симптома, используя `case_when()` из **dplyr**. Если "нет", мы устанавливаем значение как пустое, так что значениями будут либо `NA`, либо симптом.  
 

```{r, warning=F, message=F}
# создать столбец с названиями симптомов, разделенных точками с запятой
linelist_sym_1 <- linelist_sym %>% 

  # преобразовать значения "да" и "нет" в само название симптома
  # если старое значение "да", то новое - " лихорадка", в противном случае - значение отсутствует (NA)
mutate(fever = ifelse(fever == "yes", "fever", NA), 
       chills = ifelse(chills == "yes", "chills", NA),
       cough = ifelse(cough == "yes", "cough", NA),
       aches = ifelse(aches == "yes", "aches", NA),
       vomit = ifelse(vomit == "yes", "vomit", NA))
```

Теперь создадим два последних столбца:

1. Конкатенация (склеивание) всех симптомов пациента (столбец символов)  
2. Преобразуем приведенный столбец в класс *список*, чтобы он мог быть принят функцией **ggupset** для построения графика  

Подробнее о функции `unite()` из **stringr** см. на странице [Текст и последовательности](characters_strings.ru.qmd).

```{r, warning=F, message=F}
linelist_sym_1 <- linelist_sym_1 %>% 
  unite(col = "all_symptoms",
        c(fever, chills, cough, aches, vomit), 
        sep = "; ",
        remove = TRUE,
        na.rm = TRUE) %>% 
  mutate(
    # создать копию столбца all_symptoms, но класса "список" (что необходимо для использования функции ggupset() на следующем шаге)
    all_symptoms_list = as.list(strsplit(all_symptoms, "; "))
    )
```

Просмотрите новые данные. Обратите внимание на два столбца с правой стороны - вставленные комбинированные значения и список

```{r, echo=F, , warning=F, message=F}
DT::datatable(head(linelist_sym_1,50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```


<!-- ======================================================= -->
## **ggupset** {  }

Загрузка пакета

```{r}
pacman::p_load(ggupset)
```


Создайте график. Мы начинаем с `ggplot()` и `geom_bar()`, но затем добавляем специальную функцию `scale_x_upset()` из **ggupset**.  

```{r, warning=F, message=F}
ggplot(
  data = linelist_sym_1,
  mapping = aes(x = all_symptoms_list)) +
geom_bar() +
scale_x_upset(
  reverse = FALSE,
  n_intersections = 10,
  sets = c("fever", "chills", "cough", "aches", "vomit"))+
labs(
  title = "Signs & symptoms",
  subtitle = "10 most frequent combinations of signs and symptoms",
  caption = "Caption here.",
  x = "Symptom combination",
  y = "Frequency in dataset")

```
  
Более подробную информацию о **ggupset** можно найти [онлайн](https://rdrr.io/cran/ggupset/man/scale_x_upset.html) или офлайн в документации к пакету на вкладке RStudio Help `?ggupset`.  


<!-- ======================================================= -->
## `UpSetR` {  }

Пакет **UpSetR** позволяет лучше настраивать график, но может быть более сложным в исполнении:


**Загрузка пакета**  

```{r}
pacman::p_load(UpSetR)
```

**Вычистка данных**  

Мы должны преобразовать значения симптомов `построчного списка` к 1 / 0. 

```{r}
linelist_sym_2 <- linelist_sym %>% 
     # преобразовать значения "да" и "нет" в 1 и 0
     mutate(fever = ifelse(fever == "yes", 1, 0), 
            chills = ifelse(chills == "yes", 1, 0),
            cough = ifelse(cough == "yes", 1, 0),
            aches = ifelse(aches == "yes", 1, 0),
            vomit = ifelse(vomit == "yes", 1, 0))
            
```

Если вас интересует более эффективная команда, вы можете воспользоваться функцией `+()`, которая преобразует в 1 и 0 на основе логического оператора. Эта команда использует функцию `across()` для одновременного изменения нескольких столбцов (подробнее об этом читайте в разделе [Вычистка данных и ключевые функции](#clean_across)).  

```{r, eval=F, echo=T}
# Эффективное преобразование "да" в 1 и 0
linelist_sym_2 <- linelist_sym %>% 
  
  # преобразовать значения "да" и "нет" в 1 и 0
  mutate(across(c(fever, chills, cough, aches, vomit), .fns = ~+(.x == "yes")))
```


Теперь постройте график с помощью пользовательской функции `upset()`, используя только столбцы симптомов. Вы должны указать, какие "наборы" сравнивать (названия столбцов симптомов). В качестве альтернативы можно использовать `nsets = ` и `order.by = "freq"`, чтобы показать только самые первые комбинации X.  

```{r, warning=F, message=F}

# Построить график
linelist_sym_2 %>% 
  UpSetR::upset(
       sets = c("fever", "chills", "cough", "aches", "vomit"),
       order.by = "freq",
       sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange"), # optional colors
       empty.intersections = "on",
       # nsets = 3,
       number.angles = 0,
       point.size = 3.5,
       line.size = 2, 
       mainbar.y.label = "Symptoms Combinations",
       sets.x.label = "Patients with Symptom")

```


<!-- ======================================================= -->
## Ресурсы {  }

[Страница github на UpSetR](https://github.com/hms-dbmi/UpSetR)  

[Версия Shiny App - вы можете загружать свои собственные данные](https://gehlenborglab.shinyapps.io/upsetr/)  

[*документация - сложная для интерпретации](https://cran.r-project.org/web/packages/UpSetR/UpSetR.pdf)  


