# Analyse der Kombinationen { }

```{r, echo=F, out.width="75%", warning=F, message=F}
pacman::p_load(tidyverse,
               UpSetR,
               ggupset)

# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

# Adds new symptom variables to the linelist, with random "yes" or "no" values 
linelist_sym <- linelist %>% 
  mutate(fever  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.80, 0.20)),
         chills = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.20, 0.80)),
         cough  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.9, 0.15)),
         aches  = sample(c("yes", "no"), nrow(linelist), replace = T, prob = c(0.10, 0.90)),
         vomit = sample(c("yes", "no"), nrow(linelist), replace = T))

linelist_sym_2 <- linelist_sym %>% 
     
  #mutate(fever = ifelse(fever == "yes", colnames(linelist)[which(colnames(linelist) == "fever")]))
   mutate(across(.cols = c(fever, chills, cough, aches, vomit),
                 .fns = ~+(.x == "yes")))   

     
  #mutate(across(c("fever", "chills", "cough", "aches", "vomit"), ~ifelse(.x = "yes", colnames(.)[which(colnames(.) == "fever")], 0)))   
  

# Make the plot
UpSetR::upset(
  select(linelist_sym_2, fever, chills, cough, aches, vomit),
  sets = c("fever", "chills", "cough", "aches", "vomit"),
  order.by = "freq",
  sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange"), # optional colors
  empty.intersections = "on",
  # nsets = 3,
  number.angles = 0,
  point.size = 3.5,
  line.size = 2, 
  mainbar.y.label = "Symptoms Combinations",
  sets.x.label = "Patients with Symptom")

```

Diese Analyse zeigt die Häufigkeit der verschiedenen **Kombinationen** von Werten/Antworten. In diesem Beispiel stellen wir die Häufigkeit dar, mit der die Fälle verschiedene Kombinationen von Symptomen aufwiesen.

Diese Analyse wird auch oft genannt:

- **"Multiple-Response-Analyse"**
- **"Mengenanalyse"**
- **"Analyse der Kombinationen"**

In der Beispielgrafik oben sind fünf Symptome dargestellt. Unter jedem vertikalen Balken befinden sich eine Linie und Punkte, die die Kombination von Symptomen anzeigen, die durch den Balken darüber dargestellt wird. Auf der rechten Seite zeigen horizontale Balken die Häufigkeit jedes einzelnen Symptoms an.

Die erste Methode, die wir zeigen, verwendet das Paket **ggupset** und die zweite verwendet das Paket **UpSetR**.

<!-- ======================================================= -->

## Vorbereitung {  }

### Pakete laden {.unnumbered}

Dieser Codechunk zeigt das Laden der Pakete, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r, warning=F, message=F}
pacman::p_load(
  tidyverse,     # data management and visualization
  UpSetR,        # special package for combination plots
  ggupset)       # special package for combination plots
```

<!-- ======================================================= -->

### Daten importieren {.unnumbered}

Zunächst importieren wir die bereinigte Liste der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Liste herunterzuladen</a> (als .rds-Datei). Importiere Daten mit dem `import()` Funktion aus der **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist_sym <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import case linelist 
linelist_sym <- import("linelist_cleaned.rds")
```

Diese Liste enthält fünf "Ja/Nein"-Variablen zu den gemeldeten Symptomen. Wir müssen diese Variablen ein wenig umformen, um die **ggupset** Paket für unser Diagramm zu verwenden. Sieh dir die Daten an (scrolle nach rechts, um die Symptomvariablen zu sehen).

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist_sym, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<!-- ======================================================= -->

### Werte neu formatieren {.unnumbered}

Zur Anpassung an das Format, das von **ggupset** zu entsprechen, konvertieren wir die "Ja" und "Nein" in den tatsächlichen Symptomnamen, indem wir `case_when()` von **dplyr**. Wenn "nein", setzen wir den Wert als leer, so dass die Werte entweder `NA` oder das Symptom.

```{r, warning=F, message=F}
# create column with the symptoms named, separated by semicolons
linelist_sym_1 <- linelist_sym %>% 

  # convert the "yes" and "no" values into the symptom name itself
  # if old value is "yes", new value is "fever", otherwise set to missing (NA)
mutate(fever = ifelse(fever == "yes", "fever", NA), 
       chills = ifelse(chills == "yes", "chills", NA),
       cough = ifelse(cough == "yes", "cough", NA),
       aches = ifelse(aches == "yes", "aches", NA),
       vomit = ifelse(vomit == "yes", "vomit", NA))
```

Jetzt erstellen wir zwei letzte Spalten:

1. Die Verkettung (das Zusammenkleben) aller Symptome des Patienten (eine Zeichenspalte)
2. Die obige Spalte in eine Klasse umwandeln *Liste* um, damit sie von **ggupset** akzeptiert wird, um den Plot

Siehe die Seite über [Charaktere und Strings] erfährst du mehr über die`unite()` Funktion von **stringr**

```{r, warning=F, message=F}
linelist_sym_1 <- linelist_sym_1 %>% 
  unite(col = "all_symptoms",
        c(fever, chills, cough, aches, vomit), 
        sep = "; ",
        remove = TRUE,
        na.rm = TRUE) %>% 
  mutate(
    # make a copy of all_symptoms column, but of class "list" (which is required to use ggupset() in next step)
    all_symptoms_list = as.list(strsplit(all_symptoms, "; "))
    )
```

Sieh dir die neuen Daten an. Beachte die beiden Spalten am rechten Ende - die eingefügten kombinierten Werte und die Liste

```{r, echo=F, warning=F, message=F}
DT::datatable(head(linelist_sym_1,50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```

<!-- ======================================================= -->

## **ggupset** {  }

Lade das Paket

```{r}
pacman::p_load(ggupset)
```

Erstelle den Plot. Wir beginnen mit einer `ggplot()` und `geom_bar()` an, aber dann fügen wir die spezielle Funktion `scale_x_upset()` von der **ggupset**.

```{r, warning=F, message=F}
ggplot(
  data = linelist_sym_1,
  mapping = aes(x = all_symptoms_list)) +
geom_bar() +
scale_x_upset(
  reverse = FALSE,
  n_intersections = 10,
  sets = c("fever", "chills", "cough", "aches", "vomit"))+
labs(
  title = "Signs & symptoms",
  subtitle = "10 most frequent combinations of signs and symptoms",
  caption = "Caption here.",
  x = "Symptom combination",
  y = "Frequency in dataset")

```

Mehr Informationen über **ggupset** können gefunden werden [online](https://rdrr.io/cran/ggupset/man/scale_x_upset.html) oder offline in der Paketdokumentation in deinem RStudio-Hilfetab `?ggupset`.

<!-- ======================================================= -->

## `UpSetR` {  }

Die **UpSetR** Paket ermöglicht mehr Anpassungen des Plots, aber es kann schwieriger auszuführen sein:

**Paket laden**

```{r}
pacman::p_load(UpSetR)
```

**Datenbereinigung**

Wir müssen die `linelist` Werte der Symptome in 1 / 0 umwandeln.

```{r}
linelist_sym_2 <- linelist_sym %>% 
     # convert the "yes" and "no" values into 1s and 0s
     mutate(fever = ifelse(fever == "yes", 1, 0), 
            chills = ifelse(chills == "yes", 1, 0),
            cough = ifelse(cough == "yes", 1, 0),
            aches = ifelse(aches == "yes", 1, 0),
            vomit = ifelse(vomit == "yes", 1, 0))
            
```

Wenn du an einem effizienteren Befehl interessiert bist, kannst du die Vorteile der `+()` Funktion nutzen, die auf der Grundlage einer logischen Aussage in 1en und 0en umwandelt. Dieser Befehl nutzt die `across()` Funktion, um mehrere Spalten auf einmal zu ändern (mehr dazu in [Daten bereinigen und Kernfunktionen](#clean_across)).

```{r, eval=F, echo=T}
# Efficiently convert "yes" to 1 and 0
linelist_sym_2 <- linelist_sym %>% 
  
  # convert the "yes" and "no" values into 1s and 0s
  mutate(across(c(fever, chills, cough, aches, vomit), .fns = ~+(.x == "yes")))
```

Erstelle nun den Plot mit der benutzerdefinierten Funktion `upset()` - nur mit den Symptomspalten. Du musst angeben, welche "Sets" verglichen werden sollen (die Namen der Symptomspalten). Alternativ kannst du auch `nsets = ` und `order.by = "freq"` um nur die obersten X Kombinationen anzuzeigen.

```{r, warning=F, message=F}

# Make the plot
linelist_sym_2 %>% 
  UpSetR::upset(
       sets = c("fever", "chills", "cough", "aches", "vomit"),
       order.by = "freq",
       sets.bar.color = c("blue", "red", "yellow", "darkgreen", "orange"), # optional colors
       empty.intersections = "on",
       # nsets = 3,
       number.angles = 0,
       point.size = 3.5,
       line.size = 2, 
       mainbar.y.label = "Symptoms Combinations",
       sets.x.label = "Patients with Symptom")

```

<!-- ======================================================= -->

## Ressourcen {  }

[Die Github-Seite zu UpSetR](https://github.com/hms-dbmi/UpSetR)

[Eine Shiny App Version - du kannst deine eigenen Daten hochladen](https://gehlenborglab.shinyapps.io/upsetr/)

[\*Dokumentation - schwer zu interpretieren](https://cran.r-project.org/web/packages/UpSetR/UpSetR.pdf)


