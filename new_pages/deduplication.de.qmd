# De-Duplizierung {}

```{r, out.width=c("50%"), echo=F}
knitr::include_graphics(here::here("images", "deduplication.png"))
```

Auf dieser Seite werden die folgenden De-Duplizierungstechniken beschrieben:

1. Identifizieren und Entfernen von doppelten Zeilen
2. "Slicing" von Zeilen, um nur bestimmte Zeilen (z.B. min oder max) aus jeder Gruppe von Zeilen zu behalten
3. "Rolling-up", also das Zusammenfassen von Werten aus mehreren Zeilen in einer Zeile

<!-- ======================================================= -->

## Vorbereitung { }

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  tidyverse,   # deduplication, grouping, and slicing functions
  janitor,     # function for reviewing duplicates
  stringr)      # for string searches, can be used in "rolling-up" values
```

### Daten importieren {.unnumbered}

Zur Veranschaulichung verwenden wir einen Beispieldatensatz, der mit dem unten stehenden R-Code erstellt wird.

Bei den Daten handelt es sich um Datensätze von COVID-19-Telefonkonferenzen, einschließlich Konferenzen mit Kontakten und mit Fällen. Die Spalten enthalten `recordID` (computergeneriert), `personID`, `name`, `date` der Begegnung, `time` der Begegnung, der `purpose` der Begegnung (entweder als Fall oder als Kontakt zu befragen), und `symptoms_ever` (ob die Person bei dieser Begegnung berichtet hat *jemals* Symptome zu haben).

Hier ist der Code zum Erstellen der `obs` Datensatzes:

```{r}
obs <- data.frame(
  recordID  = c(1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),
  personID  = c(1,1,2,2,3,2,4,5,6,7,2,1,3,3,4,5,5,7,8),
  name      = c("adam", "adam", "amrish", "amrish", "mariah", "amrish", "nikhil", "brian", "smita", "raquel", "amrish",
                "adam", "mariah", "mariah", "nikhil", "brian", "brian", "raquel", "natalie"),
  date      = c("1/1/2020", "1/1/2020", "2/1/2020", "2/1/2020", "5/1/2020", "5/1/2020", "5/1/2020", "5/1/2020", "5/1/2020","5/1/2020", "2/1/2020",
                "5/1/2020", "6/1/2020", "6/1/2020", "6/1/2020", "6/1/2020", "7/1/2020", "7/1/2020", "7/1/2020"),
  time      = c("09:00", "09:00", "14:20", "14:20", "12:00", "16:10", "13:01", "15:20", "14:20", "12:30", "10:24",
                "09:40", "07:25", "08:32", "15:36", "15:31", "07:59", "11:13", "17:12"),
  encounter = c(1,1,1,1,1,3,1,1,1,1,2,
                2,2,3,2,2,3,2,1),
  purpose   = c("contact", "contact", "contact", "contact", "case", "case", "contact", "contact", "contact", "contact", "contact",
                "case", "contact", "contact", "contact", "contact", "case", "contact", "case"),
  symptoms_ever = c(NA, NA, "No", "No", "No", "Yes", "Yes", "No", "Yes", NA, "Yes",
                    "No", "No", "No", "Yes", "Yes", "No","No", "No")) %>% 
  mutate(date = as.Date(date, format = "%d/%m/%Y"))
```

#### Hier ist der Datenrahmen {#dedup\_data .unnumbered}

Verwende die Filterfelder oben, um die Begegnungen für jede Person zu überprüfen.

```{r, message=FALSE, echo=F}
DT::datatable(obs, rownames = FALSE, filter = "top", options = list(pageLength = nrow(obs), scrollX=T), class = 'white-space: nowrap' )
```

Wenn du die Daten durchgehst, solltest du einige Dinge beachten:

- Die ersten beiden Datensätze sind 100%ige Duplikate, einschließlich doppelter `recordID` (muss ein Computerfehler sein!)
- Die zweiten beiden Zeilen sind Duplikate, in allen Spalten *außer für `recordID`*
- Mehrere Personen hatten mehrere telefonische Begegnungen, zu verschiedenen Daten und Zeiten und als Kontakte und/oder Fälle
- Bei jedem Treffen wurde die Person gefragt, ob sie **jemals** Symptome hatten, und einige dieser Informationen fehlen.

Und hier ist eine kurze Zusammenfassung der Personen und der Ziele ihrer Begegnungen, indem sie `tabyl()` von **Hausmeister**:

```{r}
obs %>% 
  tabyl(name, purpose)
```

<!-- ======================================================= -->

## Deduplizierung { }

In diesem Abschnitt wird beschrieben, wie man doppelte Zeilen in einem Datenrahmen überprüft und entfernt. Außerdem wird gezeigt, wie du mit doppelten Elementen in einem Vektor umgehst.

<!-- ======================================================= -->

### Untersuche doppelte Zeilen {.unnumbered}

Um Zeilen mit Duplikaten schnell zu überprüfen, kannst du Folgendes verwenden `get_dupes()` aus dem **Hausmeister** Paket. *Standardmäßig* werden alle Spalten bei der Auswertung von Duplikaten berücksichtigt - die von der Funktion zurückgegebenen Zeilen sind 100% Duplikate unter Berücksichtigung der Werte in *allen* Spalten.

In der `obs` Datenrahmen sind die ersten beiden Zeilen *100% Duplikate* - sie haben in jeder Spalte den gleichen Wert (einschließlich der `recordID` Spalte, die *soll* eindeutig sein soll - das muss eine Computerpanne sein). Der zurückgegebene Datenrahmen enthält automatisch eine neue Spalte `dupe_count` auf der rechten Seite, die die Anzahl der Zeilen mit dieser Kombination von doppelten Werten anzeigt.

```{r, eval=F}
# 100% duplicates across all columns
obs %>% 
  janitor::get_dupes()
```

```{r, message=FALSE, echo=F}
obs %>% 
  janitor::get_dupes() %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = nrow(obs), scrollX=T), class = 'white-space: nowrap' )
```

Siehe die [Originaldaten](#dedup_data)

Wenn wir uns jedoch entscheiden, zu ignorieren `recordID` sind auch die 3. und 4. Zeile Duplikate voneinander. Das heißt, sie haben in allen Spalten die gleichen Werte *außer* für `recordID`. Du kannst bestimmte Spalten angeben, die in der Funktion ignoriert werden sollen, indem du eine `-` Minus-Symbol.

```{r, eval=F}
# Duplicates when column recordID is not considered
obs %>% 
  janitor::get_dupes(-recordID)         # if multiple columns, wrap them in c()
```

```{r, message=FALSE, echo=F}
obs %>% 
  janitor::get_dupes(-recordID) %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = nrow(obs), scrollX=T), class = 'white-space: nowrap' )
```

Du kannst die zu berücksichtigenden Spalten auch positiv angeben. Im Folgenden werden nur Zeilen berücksichtigt, die die gleichen Werte in den `name` und `purpose` Spalten haben, werden zurückgegeben. Beachte, dass "amrish" jetzt den Wert `dupe_count` gleich 3 ist, um seine drei "Kontakt"-Begegnungen widerzuspiegeln.

*Scrolle nach links für weitere Zeilen*\*

```{r, eval=F}
# duplicates based on name and purpose columns ONLY
obs %>% 
  janitor::get_dupes(name, purpose)
```

```{r, message=FALSE, echo=F}
obs %>% 
  janitor::get_dupes(name, purpose) %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = 7, scrollX=T), class = 'white-space: nowrap' )
```

Siehe die [Originaldaten](#dedup_data).

Siehe `?get_dupes` für weitere Details, oder siehe dies [Online-Referenz](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#explore-records-with-duplicated-values-for-specific-combinations-of-variables-with-get_dupes)

<!-- ======================================================= -->

### Nur eindeutige Zeilen behalten {.unnumbered}

Um nur eindeutige Zeilen eines Datenrahmens zu behalten, verwende `distinct()` von **dplyr**(wie im Abschnitt [Daten bereinigen und Kernfunktionen] Seite). Doppelte Zeilen werden so entfernt, dass nur die erste dieser Zeilen erhalten bleibt. Standardmäßig bedeutet "erste" die höchste`rownumber` (Reihenfolge der Zeilen von oben nach unten). Es bleiben nur eindeutige Zeilen übrig.

Im folgenden Beispiel führen wir aus `distinct()` so aus, dass die Spalte `recordID` von der Betrachtung ausgeschlossen wird - also **zwei doppelte Zeilen werden entfernt**. Die erste Zeile (für "adam") war zu 100% doppelt und wurde entfernt. Auch Zeile 3 (für "amrish") war in jeder Spalte ein Duplikat. *außer* `recordID` (die nicht in Betracht gezogen wird) und wird daher ebenfalls entfernt. Die `obs` Datensatz n ist jetzt ` nrow(obs)-2`, nicht ` nrow(obs)` Zeilen).

*Scrolle nach links, um den gesamten Datenrahmen zu sehen*

```{r, eval=F}
# added to a chain of pipes (e.g. data cleaning)
obs %>% 
  distinct(across(-recordID), # reduces data frame to only unique rows (keeps first one of any duplicates)
           .keep_all = TRUE) 

# if outside pipes, include the data as first argument 
# distinct(obs)
```

```{r, message=FALSE, echo=F}
obs %>% 
  distinct(across(-recordID), # reduces data frame to only unique rows (keeps first one of any duplicates)
           .keep_all = TRUE) %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = 6, scrollX=T), class = 'white-space: nowrap' )
```

<span style="color: orange;">***VORSICHT!*** Bei Verwendung von `distinct()` auf gruppierte Daten anwenden, wird die Funktion auf jede Gruppe angewendet.</span>

**Deduplizieren basierend auf bestimmten Spalten**

Du kannst auch Spalten angeben, die als Grundlage für die Deduplizierung dienen sollen. Auf diese Weise wird die Deduplizierung nur auf Zeilen angewendet, die innerhalb der angegebenen Spalten doppelt sind. Wenn du nicht `.keep_all = TRUE` festlegst, werden alle nicht genannten Spalten gelöscht.

Im folgenden Beispiel gilt die Deduplizierung nur für Zeilen, die identische Werte für `name` und  haben. `purpose` Spalten haben. Somit hat "brian" nur 2 Zeilen statt 3 - seine *erste* "Kontaktbegegnung und seine einzige "Fall"-Begegnung. Anpassen, so dass Brian's *neueste* Begegnung eines jeden Zwecks beibehalten wird, findest du auf der Registerkarte "Aufteilung innerhalb von Gruppen".

*Scrolle nach links, um den gesamten Datenrahmen zu sehen*

```{r, eval=F}
# added to a chain of pipes (e.g. data cleaning)
obs %>% 
  distinct(name, purpose, .keep_all = TRUE) %>%  # keep rows unique by name and purpose, retain all columns
  arrange(name)                                  # arrange for easier viewing
```

```{r, message=FALSE, echo=F}
obs %>% 
  distinct(name, purpose, .keep_all = TRUE) %>%  # keep rows unique by name and purpose, retain all columns
  arrange(name) %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = 6, scrollX=T), class = 'white-space: nowrap' )
```

Siehe die [Originaldaten](#dedup_data).

<!-- ======================================================= -->

### Elemente in einem Vektor deduplizieren {.unnumbered}

Die Funktion `duplicated()` von **Basis** R wertet einen Vektor (Spalte) aus und gibt einen logischen Vektor der gleichen Länge zurück (TRUE/FALSE). Wenn ein Wert zum ersten Mal auftaucht, wird FALSE zurückgegeben (kein Duplikat), und wenn der Wert danach noch einmal auftaucht, wird TRUE zurückgegeben. Beachte, wie `NA` genauso behandelt wird wie jeder andere Wert.

```{r}
x <- c(1, 1, 2, NA, NA, 4, 5, 4, 4, 1, 2)
duplicated(x)
```

Um nur die duplizierten Elemente zurückzugeben, kannst du den ursprünglichen Vektor mit Hilfe von Klammern unterteilen:

```{r}
x[duplicated(x)]
```

Um nur die eindeutigen Elemente zurückzugeben, verwenden Sie `unique()` von **Basis** R. Zum Entfernen `NA`s aus der Ausgabe zu entfernen, verschachteln `na.omit()` innerhalb von `unique()`.

```{r}
unique(x)           # alternatively, use x[!duplicated(x)]
unique(na.omit(x))  # remove NAs 
```

<!-- ======================================================= -->

### verwenden **Basis** R {.unnumbered}

**Um doppelte Zeilen zurückzugeben**

In **Basis** R kannst du auch sehen, welche Zeilen in einem Datenrahmen 100%ige Duplikate sind `df` mit dem Befehl `duplicated(df)` (gibt einen logischen Vektor mit den Zeilen zurück).

Du kannst also auch die Basisteilmenge verwenden `[ ]` auf den Datenrahmen anwenden, um die *duplizierten* Zeilen mit `df[duplicated(df),]` (vergiss das Komma nicht, das bedeutet, dass du alle Spalten sehen willst!).

**Um eindeutige Zeilen zurückzugeben**

Siehe die obigen Hinweise. Um die *einzigartigen* Zeilen zu sehen, fügst du den logischen Negator `!` vor die `duplicated()` Funktion an:  
`df[!duplicated(df),]`

**Um Zeilen zurückzugeben, die nur in bestimmten Spalten doppelt vorkommen**

Unterteilen Sie die `df` das ist *innerhalb der `duplicated()` Klammern* so dass diese Funktion nur auf bestimmte Spalten der Tabelle wirkt. `df`.

Um die Spalten zu spezifizieren, geben Sie die Spaltennummern oder -namen nach einem Komma an (denken Sie daran, dass dies alles *innerhalb von* der `duplicated()` Funktion).

Achte darauf, dass das Komma `,` *außerhalb von* nach der `duplicated()` Funktion auch draußen!

Zum Beispiel, um nur die Spalten 2 bis 5 auf Duplikate zu untersuchen: `df[!duplicated(df[, 2:5]),]`  
Um nur die Spalten auszuwerten `name` und `purpose` nach Duplikaten: `df[!duplicated(df[, c("name", "purpose)]),]`

<!-- ======================================================= -->

## Schneiden { }

Um einen Datenrahmen zu "zerschneiden", wendest du einen Filter auf die Zeilen nach Zeilennummer/Position an. Dies ist besonders nützlich, wenn du mehrere Zeilen pro Funktionsgruppe (z. B. pro "Person") hast und nur eine oder einige davon behalten möchtest.

Die Basis `slice()` Funktion akzeptiert Zahlen und gibt Zeilen an diesen Positionen zurück. Wenn die angegebenen Zahlen positiv sind, werden nur diese zurückgegeben. Wenn sie negativ sind, werden diese Zeilen *nicht* zurückgegeben. Die Zahlen müssen entweder alle positiv oder alle negativ sein.

```{r}
obs %>% slice(4)  # return the 4th row
```

```{r}
obs %>% slice(c(2,4))  # return rows 2 and 4
#obs %>% slice(c(2:4))  # return rows 2 through 4
```

Siehe die [Originaldaten](#dedup_data).

Es gibt mehrere Varianten:  Diese sollten mit einer Spalte und einer Anzahl von Zeilen versehen werden, die zurückgegeben werden sollen (zu `n = `).

- `slice_min()` und `slice_max()`  behält nur die Zeile(n) mit dem minimalen oder maximalen Wert der angegebenen Spalte. Dies funktioniert auch, um die "min" und "max" von geordneten Faktoren zurückzugeben.
- `slice_head()` und `slice_tail()` - behalte nur die *erste* oder *letzte* Zeile(n).
- `slice_sample()`  - behalte nur eine zufällige Auswahl der Zeilen.

```{r}
obs %>% slice_max(encounter, n = 1)  # return rows with the largest encounter number
```

Argumente verwenden `n = ` oder `prop = ` um die Anzahl oder den Anteil der zu behaltenden Zeilen anzugeben. Wenn du die Funktion nicht in einer Pipe-Kette verwendest, gib zuerst das Argument data an (z. B. `slice(data, n = 2)`). Siehe `?slice` für weitere Informationen.

Andere Argumente:

`.order_by = ` verwendet in `slice_min()` und `slice_max()` ist dies eine Spalte, nach der du vor dem Schneiden sortieren kannst.  
`with_ties = ` Standardmäßig TRUE, was bedeutet, dass Gleichstände beibehalten werden.  
`.preserve = ` Standardmäßig FALSE. Wenn TRUE, wird die Gruppierungsstruktur nach dem Slicing neu berechnet.  
`weight_by = ` Optionale, numerische Spalte zur Gewichtung (je größer die Zahl, desto wahrscheinlicher ist es, dass die Stichprobe gezogen wird).  Auch `replace = ` für die Angabe, ob die Stichprobe mit/ohne Ersetzung durchgeführt wird.

<span style="color: darkgreen;">***TIPP:*** Bei der Verwendung von `slice_max()` und `slice_min()` verwenden, müssen Sie die `n = `  (z.B.. `n = 2`, nicht nur `2`). Andernfalls kann es zu einer Fehlermeldung kommen `Error: `...` is not empty.` </span>

<span style="color: black;">***HINWEIS:*** Es kann vorkommen, dass du die Funktion [`top_n()`](https://dplyr.tidyverse.org/reference/top_n.html) begegnen, die durch die Funktion `slice` Funktionen.</span>

<!-- ======================================================= -->

### Schneiden mit Gruppen {.unnumbered}

Die `slice_*()` Funktionen können sehr nützlich sein, wenn sie auf einen gruppierten Datenrahmen angewendet werden, da die Slice-Operation für jede Gruppe separat durchgeführt wird. Verwende die **Funktion** `group_by()` in Verbindung mit `slice()` um die Daten zu gruppieren und aus jeder Gruppe einen Slice zu nehmen.

Das ist hilfreich, wenn du mehrere Zeilen pro Person hast, aber nur eine davon behalten willst. Du verwendest zunächst `group_by()` mit Schlüsselspalten, die für jede Person gleich sind, und verwendest dann eine Slice-Funktion für eine Spalte, die sich in den gruppierten Zeilen unterscheidet.

Im folgenden Beispiel werden nur die *neuesten* Begegnung *pro Person* gruppieren wir die Zeilen nach `name` und verwenden dann `slice_max()` mit `n = 1` auf die `date` Spalte. Aber Achtung! Um eine Funktion wie `slice_max()` auf Datumsangaben anzuwenden, muss die Datumsspalte der Klasse Date angehören.

Standardmäßig werden "Gleichstände" (z. B. dasselbe Datum in diesem Szenario) beibehalten, und wir würden trotzdem mehrere Zeilen für einige Personen (z. B. Adam) erhalten. Um dies zu vermeiden, setzen wir `with_ties = FALSE`. Wir erhalten dann nur eine Zeile pro Person.

<span style="color: orange;">***VORSICHT!*** Bei Verwendung von `arrange()`, gib an `.by_group = TRUE` an, damit die Daten innerhalb jeder Gruppe angeordnet werden.</span>

<span style="color: red;">***GEFAHR!*** Wenn `with_ties = FALSE` wird die erste Zeile eines Gleichstandes beibehalten. Das kann trügerisch sein. Bei Mariah hat sie zwei Begegnungen an ihrem letzten Datum (6. Januar) und die erste (früheste) wurde beibehalten. Wahrscheinlich wollen wir ihre spätere Begegnung an diesem Tag beibehalten. Im nächsten Beispiel erfährst du, wie du diese Verknüpfungen "auflösen" kannst. </span>

```{r, eval=F}
obs %>% 
  group_by(name) %>%       # group the rows by 'name'
  slice_max(date,          # keep row per group with maximum date value 
            n = 1,         # keep only the single highest row 
            with_ties = F) # if there's a tie (of date), take the first row
```

```{r, message=FALSE, echo=F}
obs %>% 
  group_by(name) %>%       # group the rows by 'name'
  slice_max(date,          # keep row per group with maximum date value 
            n = 1,         # keep only the single highest row 
            with_ties = F) %>%  # if there's a tie (of date), take the first row
  DT::datatable(rownames = FALSE, options = list(pageLength = 8, scrollX=T), class = 'white-space: nowrap' )
```

Oben kannst du zum Beispiel sehen, dass nur Amrishs Reihe am 5. Januar und nur Brians Reihe am 7. Januar behalten wurde. Siehe die [Originaldaten](#dedup_data).

**"Krawatten" brechen**

Mehrere Slice-Anweisungen können ausgeführt werden, um "Gleichstände" zu brechen. In diesem Fall, wenn eine Person mehrere Begegnungen in ihrem letzten *Datum* wird die Begegnung mit dem spätesten *Zeit* gehalten wird (`lubridate::hm()` wird verwendet, um die Zeichenzeiten in eine sortierbare Zeitklasse umzuwandeln).  
Beachte, dass die eine Zeile, die für "Mariah" am 6. Januar beibehalten wird, Begegnung 3 um 08:32 Uhr ist, nicht Begegnung 2 um 07:25 Uhr.

```{r, eval=F}
# Example of multiple slice statements to "break ties"
obs %>%
  group_by(name) %>%
  
  # FIRST - slice by latest date
  slice_max(date, n = 1, with_ties = TRUE) %>% 
  
  # SECOND - if there is a tie, select row with latest time; ties prohibited
  slice_max(lubridate::hm(time), n = 1, with_ties = FALSE)
```

```{r, message=FALSE, echo=F}
# Example of multiple slice statements to "break ties"
obs %>%
  group_by(name) %>%
  
  # FIRST - slice by latest date
  slice_max(date, n = 1, with_ties = TRUE) %>% 
  
  # SECOND - if there is a tie, select row with latest time; ties prohibited
  slice_max(lubridate::hm(time), n = 1, with_ties = FALSE) %>% 
  
  DT::datatable(rownames = FALSE, options = list(pageLength = 8, scrollX=T), class = 'white-space: nowrap' )
```

*Im obigen Beispiel wäre es auch möglich gewesen, nach `encounter` Nummer zu unterteilen, aber wir haben den Slice auf `date` und `time` zu Beispielzwecken.*

<span style="color: darkgreen;">***TIPP:*** Zur Verwendung `slice_max()` oder `slice_min()` für eine "Zeichen"-Spalte zu verwenden, wandeln Sie sie in eine *geordneten* Faktorklasse!</span>

Siehe die [Originaldaten](#dedup_data).

<!-- ======================================================= -->

### Behalte alle, aber markiere sie {.unnumbered}

Wenn du alle Datensätze aufbewahren, aber nur einige für die Analyse markieren möchtest, kannst du einen zweistufigen Ansatz mit einer eindeutigen Datensatz-ID/Begegnungsnummer wählen:

1) Reduziere den ursprünglichen Datenrahmen auf die Zeilen, die analysiert werden sollen. Speichere/behalte diesen reduzierten Datenrahmen.
2) Markiere im ursprünglichen Datenrahmen die entsprechenden Zeilen mit `case_when()` je nachdem, ob ihr Record Unique Identifier (in diesem Beispiel recordID) im reduzierten Datenrahmen vorhanden ist.

```{r}
# 1. Define data frame of rows to keep for analysis
obs_keep <- obs %>%
  group_by(name) %>%
  slice_max(encounter, n = 1, with_ties = FALSE) # keep only latest encounter per person


# 2. Mark original data frame
obs_marked <- obs %>%

  # make new dup_record column
  mutate(dup_record = case_when(
    
    # if record is in obs_keep data frame
    recordID %in% obs_keep$recordID ~ "For analysis", 
    
    # all else marked as "Ignore" for analysis purposes
    TRUE                            ~ "Ignore"))

# print
obs_marked
```

```{r, echo=F}
DT::datatable(obs_marked, rownames = FALSE, options = list(pageLength = 8, scrollX=T), class = 'white-space: nowrap' )
```

Siehe die [ursprünglichen Daten](#dedup_data).

<!-- ======================================================= -->

### Berechne die Vollständigkeit der Zeilen {.unnumbered}

Erstelle eine Spalte, die eine Metrik für die Vollständigkeit der Zeile enthält (Nicht-Fehlbarkeit). Dies kann hilfreich sein, wenn du entscheidest, welche Zeilen beim Duplizieren/Slicen Vorrang vor anderen haben sollen.

In diesem Beispiel werden die "Schlüsselspalten", für die du die Vollständigkeit messen willst, in einem Vektor von Spaltennamen gespeichert.

Dann wird die neue Spalte `key_completeness` erstellt mit `mutate()`. Der neue Wert in jeder Zeile wird als berechneter Bruch definiert: die Anzahl der nicht fehlenden Werte in dieser Zeile unter den Schlüsselspalten, geteilt durch die Anzahl der Schlüsselspalten.

Dies beinhaltet die Funktion `rowSums()` von **Basis** R. Ebenfalls verwendet wird `.` der sich innerhalb der Pipe auf den Datenrahmen an diesem Punkt in der Pipe bezieht (in diesem Fall wird er mit Klammern unterteilt `[]`).

*Scrolle nach rechts, um mehr Zeilen zu sehen*\*

```{r, eval=F}
# create a "key variable completeness" column
# this is a *proportion* of the columns designated as "key_cols" that have non-missing values

key_cols = c("personID", "name", "symptoms_ever")

obs %>% 
  mutate(key_completeness = rowSums(!is.na(.[,key_cols]))/length(key_cols)) 
```

```{r, message=FALSE, echo=F}
key_cols = c("personID", "name", "symptoms_ever")

obs %>% 
  mutate(key_completeness = rowSums(!is.na(.[,key_cols]))/length(key_cols)) %>% 
  DT::datatable(rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Siehe die [Originaldaten](#dedup_data).

<!-- ======================================================= -->

## Roll-up Werte {#str\_rollup}

Dieser Abschnitt beschreibt:

1) Wie man Werte aus mehreren Zeilen in nur eine Zeile "hochrollt", mit einigen Variationen
2) Wie du die Werte in jeder Zelle überschreibst/priorisierst, sobald du sie "aufgerollt" hast

Diese Registerkarte verwendet den Beispieldatensatz aus der Registerkarte Vorbereitung.

<!-- ======================================================= -->

### Werte in eine Zeile hochrechnen {.unnumbered}

Das folgende Codebeispiel verwendet `group_by()` und `summarise()` um die Zeilen nach Personen zu gruppieren und dann alle eindeutigen Werte innerhalb der gruppierten Zeilen zusammenzufügen. So erhältst du eine Übersichtszeile pro Person. Ein paar Hinweise:

- An alle neuen Spalten wird ein Suffix angehängt ("\_roll" in diesem Beispiel)
- Wenn du nur eindeutige Werte pro Zelle anzeigen willst, musst du die `na.omit()` mit `unique()`
- `na.omit()` entfernt `NA` Werte, aber wenn dies nicht gewünscht ist, kann es entfernt werden `paste0(.x)`...

```{r, eval=F}
# "Roll-up" values into one row per group (per "personID") 
cases_rolled <- obs %>% 
  
  # create groups by name
  group_by(personID) %>% 
  
  # order the rows within each group (e.g. by date)
  arrange(date, .by_group = TRUE) %>% 
  
  # For each column, paste together all values within the grouped rows, separated by ";"
  summarise(
    across(everything(),                           # apply to all columns
           ~paste0(na.omit(.x), collapse = "; "))) # function is defined which combines non-NA values
```

Das Ergebnis ist eine Zeile pro Gruppe (`ID`), wobei die Einträge nach Datum geordnet und zusammengefügt werden. *Scrolle nach links, um weitere Zeilen zu sehen*

```{r, message=FALSE, echo=F}
# "Roll-up" values into one row per group (per "personID") 
obs %>% 
  
  # create groups by name
  group_by(personID) %>% 
  
  # order the rows within each group (e.g. by date)
  arrange(date, .by_group = TRUE) %>% 
  
  # For each column, paste together all values within the grouped rows, separated by ";"
  summarise(
    across(everything(),                                # apply to all columns
           ~paste0(na.omit(.x), collapse = "; "))) %>%  # function is defined which combines non-NA values

  DT::datatable(rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```

Siehe die [Originaldaten](#dedup_data).

**Diese Variante zeigt nur eindeutige Werte:**

```{r}
# Variation - show unique values only 
cases_rolled <- obs %>% 
  group_by(personID) %>% 
  arrange(date, .by_group = TRUE) %>% 
  summarise(
    across(everything(),                                   # apply to all columns
           ~paste0(unique(na.omit(.x)), collapse = "; "))) # function is defined which combines unique non-NA values
```

```{r, message=FALSE, echo=F}
# Variation - show unique values only 
obs %>% 
  group_by(personID) %>% 
  arrange(date, .by_group = TRUE) %>% 
  summarise(
    across(everything(),                                   # apply to all columns
           ~paste0(unique(na.omit(.x)), collapse = "; "))) %>%  # function is defined which combines unique non-NA values

  DT::datatable(rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

**Bei dieser Variante wird an jede Spalte ein Suffix angehängt.**  
In diesem Fall "\_roll", um zu zeigen, dass sie gewürfelt wurde:

```{r, eval=F}
# Variation - suffix added to column names 
cases_rolled <- obs %>% 
  group_by(personID) %>% 
  arrange(date, .by_group = TRUE) %>% 
  summarise(
    across(everything(),                
           list(roll = ~paste0(na.omit(.x), collapse = "; ")))) # _roll is appended to column names
```

```{r, message=FALSE, echo=F}
# display the linelist data as a table
# Variation - suffix added to column names 
obs %>% 
  group_by(personID) %>% 
  arrange(date, .by_group = TRUE) %>% 
  summarise(
    across(everything(),                
           list(roll = ~paste0(na.omit(.x), collapse = "; ")))) %>%  # _roll is appended to column names
  DT::datatable(rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<!-- ======================================================= -->

### Werte/Hierarchie überschreiben {.unnumbered}

Wenn du dann alle gewürfelten Werte auswerten und nur einen bestimmten Wert (z.B. den "besten" oder "maximalen" Wert) behalten willst, kannst du mit `mutate()` für die gewünschten Spalten verwenden, um die `case_when()` verwenden, die `str_detect()` von der **stringr** Paket, um nacheinander nach String-Mustern zu suchen und den Zellinhalt zu überschreiben.

```{r}
# CLEAN CASES
#############
cases_clean <- cases_rolled %>% 
    
    # clean Yes-No-Unknown vars: replace text with "highest" value present in the string
    mutate(across(c(contains("symptoms_ever")),                     # operates on specified columns (Y/N/U)
             list(mod = ~case_when(                                 # adds suffix "_mod" to new cols; implements case_when()
               
               str_detect(.x, "Yes")       ~ "Yes",                 # if "Yes" is detected, then cell value converts to yes
               str_detect(.x, "No")        ~ "No",                  # then, if "No" is detected, then cell value converts to no
               str_detect(.x, "Unknown")   ~ "Unknown",             # then, if "Unknown" is detected, then cell value converts to Unknown
               TRUE                        ~ as.character(.x)))),   # then, if anything else if it kept as is
      .keep = "unused")                                             # old columns removed, leaving only _mod columns
```

Jetzt kannst du in der Spalte sehen `symptoms_ever` dass nur "Ja" angezeigt wird, wenn die Person schon einmal "Ja" zu Symptomen gesagt hat.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(cases_clean, rownames = FALSE, options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap')
```

Siehe die [Originaldaten](#dedup_data).

## Probabilistische Datendeduplizierung

Manchmal möchtest du "wahrscheinliche" Duplikate auf der Grundlage der Ähnlichkeit (z. B. String-"Abstand") über mehrere Spalten wie Name, Alter, Geschlecht, Geburtsdatum usw. identifizieren. Du kannst einen probabilistischen Abgleichsalgorithmus anwenden, um wahrscheinliche Duplikate zu identifizieren.

Siehe die Seite über [Daten verknüpfen] für eine Erklärung dieser Methode. Der Abschnitt über den probabilistischen Abgleich enthält ein Beispiel für die Anwendung dieser Algorithmen zum Vergleich eines Datenrahmens mit*sich selbst* und so eine probabilistische Deduplizierung durchzuführen.

<!-- ======================================================= -->

## Ressourcen { }

Ein Großteil der Informationen auf dieser Seite wurde aus diesen Ressourcen und Vignetten online übernommen:

[datanovia](https://www.datanovia.com/en/lessons/identify-and-remove-duplicate-data-in-r/)

[dplyr tidyverse Referenz](https://dplyr.tidyverse.org/reference/slice.html)

[cran janitor vignette](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#explore-records-with-duplicated-values-for-specific-combinations-of-variables-with-get_dupes)


