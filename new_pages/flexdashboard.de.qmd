# Dashboards mit R Markdown { }

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_output.png"))
```

Auf dieser Seite wird die grundlegende Verwendung der **flexdashboard** Pakets. Mit diesem Paket kannst du die R Markdown-Ausgabe ganz einfach als Dashboard mit Panels und Seiten formatieren. Der Inhalt des Dashboards kann aus Text, statischen Zahlen/Tabellen oder interaktiven Grafiken bestehen.

Vorteile von **flexdashboard**:

- Es erfordert nur minimale Nicht-Standard-R-Kodierung - mit wenig Übung kannst du schnell ein Dashboard erstellen
- Das Dashboard kann in der Regel als eigenständige HTML-Datei an Kollegen gemailt werden - kein Server erforderlich
- Du kannst kombinieren **flexdashboard** mit  kombinieren. **glänzend**, **ggplotly** und andere *"html widgets"* um Interaktivität hinzuzufügen

Nachteile von **flexdashboard**:

- Weniger Anpassungen als bei der Verwendung von **glänzenden** allein zur Erstellung eines Dashboards

Sehr umfassende Tutorials zur Verwendung von **flexdashboard** die dieser Seite zugrunde liegen, findest du im Abschnitt Ressourcen. Im Folgenden beschreiben wir die Kernfunktionen und geben ein Beispiel für die Erstellung eines Dashboards zur Untersuchung eines Ausbruchs anhand des Falls `linelist` Daten.

## Vorbereitung

### Pakete laden {.unnumbered}

In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,             # data import/export     
  here,            # locate files
  tidyverse,       # data management and visualization
  flexdashboard,   # dashboard versions of R Markdown reports
  shiny,           # interactive figures
  plotly           # interactive figures
)
```

### Daten importieren {.unnumbered}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere Daten mit dem `import()` Funktion aus der **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## Neues R Markdown erstellen

Nachdem du das Paket installiert hast, erstelle eine neue R Markdown-Datei, indem du dich zu *Datei > Neue Datei > R Markd*.

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_new1.png"))
```

In dem sich öffnenden Fenster wählst du "Aus Vorlage" und wählst die Vorlage "Flex Dashboard". Du wirst dann aufgefordert, das Dokument zu benennen. Im Beispiel auf dieser Seite nennen wir unser R Markdown "outbreak\_dashboard.Rmd".

```{r, out.width="100%", out.height="75%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_new2.png"))
```

## Das Skript

Das Skript ist ein R Markdown-Skript und hat daher die gleichen Komponenten und den gleichen Aufbau wie auf der Seite über [Berichte mit R Markdown]. Wir gehen noch einmal kurz darauf ein und zeigen die Unterschiede zu anderen R Markdown-Ausgabeformaten auf.

### YAML {.unnumbered}

Am Anfang des Skripts steht der "YAML"-Kopf. Dieser muss mit drei Bindestrichen beginnen `---` und muss mit drei Bindestrichen enden `---`. YAML-Parameter kommen in `key:value` Paaren. **Die Einrückung und Platzierung von Doppelpunkten in YAML ist wichtig** - die `key:value` Paare werden durch Doppelpunkte getrennt (nicht durch Gleichheitszeichen!).

Die YAML sollte mit den Metadaten für das Dokument beginnen. Die Reihenfolge dieser primären YAML-Parameter (nicht eingerückt) spielt keine Rolle. Zum Beispiel:

```{r, eval=F}
title: "My document"
author: "Me"
date: "`r Sys.Date()`"
```

Du kannst R-Code in YAML-Werten verwenden, indem du ihn wie Inline-Code einfügst (vor dem `r` innerhalb von Backticks), aber auch innerhalb von Anführungszeichen (siehe oben für Datum).

Ein erforderlicher YAML-Parameter ist `output: ` der den Typ der zu erstellenden Datei angibt (z. B. `html_document`, `pdf_document`, `word_document`, oder `powerpoint_presentation`). Für **flexdashboard** ist dieser Parameterwert ein wenig verwirrend - er muss als `output:flexdashboard::flex_dashboard`. Beachte die einfachen und doppelten Doppelpunkte und den Unterstrich. Dieser YAML-Ausgabeparameter wird oft gefolgt von *einem zusätzlichen Doppelpunkt* und eingerückten Unterparametern (siehe `orientation: ` und `vertical_layout: ` Parameter unten).

```{r, eval=F}
title: "My dashboard"
author: "Me"
date: "`r Sys.Date()`"
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: scroll
```

Wie oben dargestellt, werden Einrückungen (2 Leerzeichen) für Unterparameter verwendet. Vergiss in diesem Fall nicht, einen zusätzlichen Doppelpunkt nach dem Hauptparameter zu setzen, wie `key:value:`.

Logische Werte sollten in YAML gegebenenfalls in Kleinbuchstaben angegeben werden (`true`, `false`, `null`). Wenn ein Doppelpunkt Teil deines Wertes ist (z. B. im Titel), setze den Wert in Anführungszeichen. Siehe die Beispiele in den folgenden Abschnitten.

### Code-Blöcke {.unnumbered}

Ein R Markdown-Skript kann mehrere Code-"Chunks" enthalten - das sind Bereiche des Skripts, in denen du mehrzeiligen R-Code schreiben kannst und die wie Mini-R-Skripte funktionieren.

Code Chunks werden mit drei Backticks und geschweiften Klammern mit einem kleinen "r" darin erstellt. Der Chunk wird mit drei Backticks geschlossen. Du kannst einen neuen Chunk erstellen, indem du ihn selbst eintippst, die Tastenkombination "Strg + Alt + i" (oder Cmd + Shift + r beim Mac) verwendest oder auf das grüne Symbol "Neuen Codechunk einfügen" oben in deinem Skripteditor klickst. Viele Beispiele findest du weiter unten.

### Erzählender Text {.unnumbered}

Außerhalb eines R-Code-"Chunks" kannst du erzählenden Text schreiben. Wie auf der Seite über [Berichte mit R Markdown] beschrieben, kannst du Text kursiv machen, indem du ihn mit einem Sternchen (*) umrandest, oder fett, indem du ihn mit zwei Sternchen (**) umrandest. Erinnere dich daran, dass Aufzählungszeichen und Nummerierungsschemata auf Zeilenumbrüche, Einrückungen und den Abschluss einer Zeile mit zwei Leerzeichen reagieren.

Du kannst auch Inline-R-Code in den Text einfügen, wie im Abschnitt [Berichte mit R Markdown] Seite beschrieben, indem du den Code mit Backticks umschließt und den Befehl mit "r" beginnst :``` 1+1```(siehe Beispiel mit Datum oben).

### Überschriften {.unnumbered}

Verschiedene Überschriftsebenen werden mit einer unterschiedlichen Anzahl von Hash-Symbolen erstellt, wie in der [Berichte mit R Markdown] Seite beschrieben wird.

In **flexdashboard** erstellt eine primäre Überschrift (#) eine "Seite" des Dashboards. Überschriften der zweiten Ebene (##) erstellen eine Spalte oder eine Zeile, je nach `orientation:` Parameter (siehe Details unten). Überschriften der dritten Ebene (###) erstellen Felder für Diagramme, Tabellen, Text usw.

```md
# First-level heading (page)

## Second level heading (row or column)  

### Third-level heading (pane for plot, chart, etc.)
```

## Abschnitt-Attribute

Wie in einem normalen R-Markdown kannst du Attribute angeben, die auf Teile deines Dashboards angewendet werden, indem du `key=value` Optionen nach einer Überschrift in geschweiften Klammern `{ }`. In einem typischen HTML-R-Markdown-Bericht könntest du zum Beispiel Unterüberschriften in Tabs organisieren mit `## My heading {.tabset}`.

Beachte, dass diese Attribute nach einem *Überschrift* in einem Textteil des Skripts stehen. Sie sind anders als die **knitr** Optionen, die am Anfang von R-Code-Blöcken eingefügt werden, wie z. B. `out.height = `.

Spezifische Abschnittsattribute für **flexdashboard** include:

- `{data-orientation=}` Festgelegt auf entweder `rows` oder `columns`. Wenn dein Dashboard mehrere Seiten hat, füge dieses Attribut zu jeder Seite hinzu, um die Ausrichtung anzugeben (weitere Informationen findest du unter [Abschnitt Layout](#layout)).
- `{data-width=}` und `{data-height=}` die relative Größe von Diagrammen, Spalten und Zeilen festlegen, die in derselben Dimension (horizontal oder vertikal) angeordnet sind. Absolute Größen werden so angepasst, dass sie den Platz auf jedem Anzeigegerät optimal ausfüllen, dank der [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) Engine.
  - Die Höhe der Diagramme hängt auch davon ab, ob du den YAML-Parameter `vertical_layout: fill` oder `vertical_layout: scroll`. Bei der Einstellung "Scrollen" wird die Höhe der Grafik der traditionellen `fig.height = ` Option in dem R-Codechunk.
  - Die vollständige Dokumentation zur Größe findest du in der [flexdashboard-Website](https://rmarkdown.rstudio.com/flexdashboard/using.html#sizing)
- `{.hidden}` Benutze dies, um eine bestimmte Seite aus der Navigationsleiste auszuschließen
- `{data-navbar=}` Verwende dies in einer Überschrift auf Seitenebene, um sie in ein Dropdown-Menü der Navigationsleiste einzubinden. Gib den Namen (in Anführungszeichen) des Dropdown-Menüs an. Siehe Beispiel unten.

## Layout {#layout}

Passe das Layout deines Dashboards auf folgende Weise an:

- Füge Seiten, Spalten/Zeilen und Diagramme mit R Markdown-Überschriften hinzu (z. B. #, ## oder ###)
- Anpassen der YAML-Parameter `orientation:` entweder auf `rows` oder `columns`
- Festlegen, ob das Layout den Browser ausfüllt oder Scrollen erlaubt
- Registerkarten zu einer bestimmten Abschnittsüberschrift hinzufügen

### Seiten {.unnumbered}

Überschriften der ersten Ebene (#) im R Markdown stellen "Seiten" des Dashboards dar. Standardmäßig werden die Seiten in einer Navigationsleiste am oberen Rand des Dashboards angezeigt.

```{r, out.height=c("100%"), out.width=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_pages_top_script.png"))
```

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_pages_top_view.png"))
```

Du kannst Seiten in einem "Menü" innerhalb der oberen Navigationsleiste gruppieren, indem du das Attribut `{data-navmenu=}` zur Seitenüberschrift hinzufügst. Sei vorsichtig - füge keine Leerzeichen um das Gleichheitszeichen herum ein, sonst wird es nicht funktionieren!

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_navmenu_script.png"))
```

Das Ergebnis des Skripts sieht folgendermaßen aus:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_navmenu_view.png"))
```

Du kannst auch eine Seite oder eine Spalte in eine "Seitenleiste" auf der linken Seite des Dashboards umwandeln, indem du die `{.sidebar}` Attribut. Sie kann Text enthalten (der von jeder Seite aus sichtbar ist), oder wenn du eine **shiny** Interaktivität integriert hast, kann es nützlich sein, um Steuerelemente für Benutzereingaben wie Schieberegler oder Dropdown-Menüs aufzunehmen.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_sidebar_script.png"))
```

So sieht das Skript aus:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_sidebar_view.png"))
```

### Ausrichtung {.unnumbered}

Stellen Sie die `orientation:` yaml-Parameter, um anzugeben, wie die Überschriften der zweiten Ebene (##) von R Markdown interpretiert werden sollen - entweder als `orientation: columns` oder `orientation: rows`.

Überschriften der zweiten Ebene (##) werden als neue Spalten oder Zeilen interpretiert, basierend auf dieser `orientation` Einstellung.

Wenn du die `orientation: columns` einstellst, werden durch die Überschriften der zweiten Ebene neue Spalten im Dashboard erstellt. Das folgende Dashboard hat eine Seite mit zwei Spalten und insgesamt drei Feldern. Du kannst die relative Breite der Spalten mit `{data-width=}` wie unten gezeigt.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_columns_script.png"))
```

Das ist das Ergebnis des Skripts:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_columns_view.png"))
```

Wenn du die `orientation: rows` setzt, werden bei Überschriften der zweiten Ebene neue Zeilen statt Spalten erstellt. Im Folgenden findest du das gleiche Skript wie oben, aber `orientation: rows` so dass die Überschriften der zweiten Ebene Zeilen statt Spalten erzeugen. Du kannst die relativen *Höhe* der Zeilen mit `{data-height=}` wie unten gezeigt.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_rows_script.png"))
```

Das ist das Ergebnis des Skripts:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_rows_view.png"))
```

Wenn dein Dashboard mehrere Seiten hat, kannst du die Ausrichtung für jede einzelne Seite festlegen, indem du die `{data-orientation=}` Attribut in die Kopfzeile jeder Seite einfügst (gib entweder `rows` oder `columns` ohne Anführungszeichen).

### Tabulatoren {.unnumbered}

Du kannst Inhalte in Registerkarten unterteilen, indem du die `{.tabset}` Attribut unterteilen, wie in anderen HTML R Markdown-Ausgaben.

Füge dieses Attribut einfach nach der gewünschten Überschrift ein. Die Unterüberschriften unter dieser Überschrift werden als Tabulatoren angezeigt. Im Beispielskript unten wird zum Beispiel Spalte 2 auf der rechten Seite (##) so verändert, dass die Seuchenkurve und die Tabellenbereiche (###) in Tabs angezeigt werden.

Du kannst dasselbe mit den Zeilen machen, wenn du dich an den Zeilen orientierst.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_tabs_script.png"))
```

Hier ist, was das Skript produziert:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_tabs_view.png"))
```

## Inhalt hinzufügen

Beginnen wir damit, ein Dashboard zu erstellen. Unser einfaches Dashboard besteht aus 1 Seite, 2 Spalten und 4 Feldern. Zur Veranschaulichung werden wir die Bereiche Stück für Stück aufbauen.

Du kannst ganz einfach Standard-R-Ausgaben wie Text, ggplots und Tabellen einfügen (siehe [Tabellen für die Präsentation] Seite). Kodiere sie einfach in einem R-Codechunk, wie du es bei jedem anderen R-Markdown-Skript tun würdest.

Hinweis: Du kannst das fertige Rmd-Skript und die HTML-Ausgabe des Dashboards herunterladen - siehe das [Handbuch und Daten herunterladen] Seite.

### Text {.unnumbered}

Du kannst Markdown-Text eingeben und einfügen *in-line*Code einfügen, wie bei jeder anderen R Markdown-Ausgabe. Siehe die [Berichte mit R Markdown] Seite für Details.

In diesem Dashboard gibt es einen zusammenfassenden Textbereich mit dynamischem Text, der das Datum der letzten Hospitalisierung und die Anzahl der gemeldeten Fälle des Ausbruchs anzeigt.

### Tische {.unnumbered}

Du kannst R-Codeabschnitte einfügen, die Ausgaben wie Tabellen ausgeben. Aber die Ausgabe sieht am besten aus und reagiert auf die Fenstergröße, wenn du die `kable()` Funktion von **knitr** um deine Tabellen anzuzeigen. Die **flextable** Funktionen können Tabellen erzeugen, die gekürzt / abgeschnitten sind.

Unten füttern wir zum Beispiel die `linelist()` durch eine `count()` Befehl ein, um eine Übersichtstabelle der Fälle nach Krankenhaus zu erstellen. Letztendlich wird die Tabelle über die Pipeline an `knitr::kable()` weitergeleitet und das Ergebnis hat eine Bildlaufleiste auf der rechten Seite. Mehr über das Anpassen deiner Tabelle erfährst du mit `kable()` und **kableExtra** [hier](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html).

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_tables_script.png"))
```

Hier ist, was das Skript produziert:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_tables_view.png"))
```

Wenn du eine dynamische Tabelle anzeigen möchtest, die es dem Benutzer ermöglicht, zu filtern, zu sortieren und/oder durch "Seiten" des Datenrahmens zu klicken, verwende das Paket **DT** und die darin enthaltene Funktion `datatable()` wie im unten stehenden Code.

Der Beispielcode unten, der Datenrahmen `linelist` wird gedruckt. Du kannst die `rownames = FALSE` um horizontalen Platz zu sparen, und `filter = "top"` dass die Filter oben in jeder Spalte stehen. Eine Liste mit weiteren Spezifikationen kannst du an `options = `. Unten setzen wir `pageLength = ` so ein, dass 5 Zeilen erscheinen und `scrollX = ` so dass der Benutzer eine Bildlaufleiste am unteren Rand verwenden kann, um horizontal zu scrollen. Das Argument `class = 'white-space: nowrap'` stellt sicher, dass jede Zeile nur eine Zeile ist (nicht mehrere Zeilen). Du kannst über andere mögliche Argumente und Werte lesen [hier](https://rstudio.github.io/DT/?_ga=2.2810736.1321860763.1619286819-369061888.1601594705) oder indem du eingibst `?datatable`

```{r, eval=F}
DT::datatable(linelist, 
              rownames = FALSE, 
              options = list(pageLength = 5, scrollX = TRUE), 
              class = 'white-space: nowrap' )
```

### Grundstücke {.unnumbered}

Du kannst Plots wie in einem R-Skript in ein Dashboard-Fenster drucken. In unserem Beispiel verwenden wir die **Inzidenz2**Paket, um mit zwei einfachen Befehlen eine "Epikurve" nach Altersgruppen zu erstellen (siehe [Epidemie-Kurven] Seite). Du kannst jedoch auch`ggplot()` verwenden und eine Grafik auf die gleiche Weise drucken.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_plots_script.png"))
```

Das Ergebnis des Skripts sieht folgendermaßen aus:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_plots_view.png"))
```

### Interaktive Diagramme {.unnumbered}

Du kannst auch ein standardmäßiges ggplot- oder anderes Plot-Objekt an `ggplotly()` von der **plotly**Paket (siehe die [Interaktive Plots] Seite). Damit wird dein Diagramm interaktiv, der Leser kann hineinzoomen und der Wert jedes Datenpunktes (in diesem Szenario die Anzahl der Fälle pro Woche und Altersgruppe in der Kurve) wird eingeblendet.

```{r, eval=F}
age_outbreak <- incidence(linelist, date_onset, "week", groups = age_cat)
plot(age_outbreak, fill = age_cat, col_pal = muted, title = "") %>% 
  plotly::ggplotly()
```

So sieht das im Dashboard aus (gif). Diese interaktive Funktion funktioniert auch dann, wenn du das Dashboard als statische Datei per E-Mail verschickst (nicht online auf einem Server).

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_ggplotly.gif"))
```

### HTML-Widgets {.unnumbered}

[HTML Widgets für R](http://www.htmlwidgets.org/) sind eine spezielle Klasse von R-Paketen, die die Interaktivität durch den Einsatz von JavaScript-Bibliotheken erhöhen. Du kannst sie in R Markdown-Ausgaben (wie z. B. ein Flexdashboard) und in Shiny-Dashboards einbetten.

Einige gängige Beispiele für diese Widgets sind:

- Plotly (wird auf dieser Handbuchseite und in der [Interaktive Plots] Seite)
- visNetwork (verwendet in den [Übertragungsketten] Seite dieses Handbuchs)
- Merkblatt (verwendet in den [GIS-Grundlagen] Seite dieses Handbuchs)
- dygraphs (nützlich für die interaktive Darstellung von Zeitreihendaten)
- DT (`datatable()`) (um dynamische Tabellen mit Filter, Sortierung usw. anzuzeigen)

Im Folgenden zeigen wir, wie wir eine Epidemie-Übertragungskette, die visNetwork verwendet, zum Dashboard hinzufügen. Das Skript zeigt nur den neuen Code, der dem Abschnitt "Spalte 2" des R Markdown-Skripts hinzugefügt wurde. Du findest den Code im Abschnitt [Übertragungsketten] Seite dieses Handbuchs.

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_chain_script.png"))
```

Hier ist, was das Skript produziert:

```{r, out.width=c("100%", "100%"), echo=F, fig.show="hold", fig.width=12, fig.height=9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_chain.gif"))
```

## Code-Organisation

Du kannst wählen, ob du den gesamten Code innerhalb der R Markdown **flexdashboard**Skript. Wenn du ein übersichtlicheres Dashboard-Skript haben möchtest, kannst du auch auf Code/Figuren zurückgreifen, die in externen R-Skripten gehostet oder erstellt werden. Dies wird ausführlicher beschrieben in der [Berichte mit R Markdown] Seite beschrieben.

## Glänzend

Das R-Paket einbinden **shiny** kannst du deine Dashboards noch besser auf Benutzereingaben reagieren lassen. Du könntest z. B. einen Gerichtsbezirk oder einen Datumsbereich auswählen und die Panels auf diese Auswahl reagieren lassen (z. B. die angezeigten Daten filtern). Zum Einbetten **shiny** Reaktivität in **flexdashboard** zu integrieren, musst du nur ein paar Änderungen an deinem **flexdashboard** R Markdown-Skript.

Du kannst verwenden **shiny** um Apps/Dashboards zu erstellen *ohne*flexdashboard zu erstellen. Die Handbuchseite zu [Dashboards mit Shiny] gibt einen Überblick über diesen Ansatz, einschließlich Anleitungen zu**Shiny** Syntax, die Struktur der App-Dateien und die Optionen für die gemeinsame Nutzung/Veröffentlichung (einschließlich der Optionen für freie Server). Diese Syntax und allgemeinen Tipps werden in der **flexdashboard** Kontext übertragen.

einbetten **glänzend** in **flexdashboard** ist jedoch eine grundlegende Änderung für dein flexdashboard. Es wird nicht länger eine HTML-Ausgabe erzeugen, die du per E-Mail verschicken kannst und die jeder öffnen und ansehen kann. Stattdessen wird es eine "App" sein. Die Schaltfläche "Stricken" oben im Skript wird durch ein Symbol "Dokument ausführen" ersetzt, das eine Instanz des interaktiven Dashboards lokal auf deinem Computer öffnet.

Das Teilen deines Dashboards erfordert nun, dass du entweder:

- das Rmd-Skript an den Betrachter senden, der es in R auf seinem Computer öffnet und die App ausführt, oder
- Die App/das Cashboard wird auf einem Server gehostet, auf den der Betrachter Zugriff hat.

Die Vorteile der Integration liegen also auf der Hand **shiny** aber auch Komplikationen. Wenn das einfache Teilen per E-Mail eine Priorität ist und du keine **glänzende** reaktive Fähigkeiten brauchst, solltest du die reduzierte Interaktivität von `ggplotly()` wie oben gezeigt.

Im Folgenden geben wir ein sehr einfaches Beispiel mit demselben "outbreak\_dashboard.Rmd" wie oben. Ausführliche Dokumentation zur Integration von Shiny in **flexdashboard** ist online verfügbar [hier](https://rmarkdown.rstudio.com/flexdashboard/shiny.html).

### Einstellungen {.unnumbered}

Aktivieren **glänzend** in einer **flexdashboard** durch Hinzufügen des YAML-Parameters `runtime: shiny` auf der gleichen Einrückungsebene wie `output: ` einfügen, wie unten:

```md
---
title: "Outbreak dashboard (Shiny demo)"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

```

Es ist auch praktisch, eine "Seitenleiste" für die leuchtenden Eingabe-Widgets zu aktivieren, die Informationen von den Nutzern sammeln. Wie oben erklärt, erstellst du eine Spalte und gibst die `{.sidebar}` Option, um eine Seitenleiste auf der linken Seite zu erstellen. Du kannst Text und R-Blöcke hinzufügen, die die **glänzenden** `input` Befehle in dieser Rubrik.

Wenn deine App/dein Cashboard auf einem Server gehostet wird und möglicherweise mehrere Benutzer gleichzeitig hat, benenne den ersten R-Codechunk als `global`. Füge die Befehle zum Importieren/Laden deiner Daten in diesen Chunk ein. Dieser speziell benannte Chunk wird anders behandelt und die darin importierten Daten werden nur einmal importiert (nicht fortlaufend) und sind für alle Benutzer verfügbar. Dadurch wird die Startgeschwindigkeit der App verbessert.

### Praktisches Beispiel {.unnumbered}

Hier passen wir das Flexdashboard-Skript "outbreak\_dashboard.Rmd" so an, dass es Folgendes enthält **glänzend**. Wir fügen die Möglichkeit hinzu, dass der Nutzer ein Krankenhaus aus einem Dropdown-Menü auswählen kann und die Epidemiekurve nur Fälle aus diesem Krankenhaus mit einem dynamischen Titel anzeigt. Wir gehen wie folgt vor:

- Füge  hinzu. `runtime: shiny` zu der YAML
- Benennen Sie den Setup-Chunk um in `global`
- Erstelle eine Seitenleiste mit:
  - Code zur Erstellung eines Vektors mit eindeutigen Krankenhausnamen
  - A `selectInput()` Befehl (**shiny** Dropdown-Menü) mit der Auswahl der Krankenhausnamen. Die Auswahl wird gespeichert als `hospital_choice` gespeichert, auf die in einem späteren Code verwiesen werden kann als `input$hospital_choice`
- Der Code für die epidemische Kurve (Spalte 2) wird in `renderPlot({ })`, einschließlich:
  - Ein Filter für den Datensatz, der die Spalte `hospital` auf den aktuellen Wert von `input$hospital_choice`
  - Ein dynamischer Plot-Titel, der Folgendes beinhaltet `input$hospital_choice`

Beachten Sie, dass jeder Code, der sich auf einen `input$` Wert referenziert, muss innerhalb einer `render({})` Funktion stehen (um reaktiv zu sein).

Hier ist der obere Teil des Skripts, einschließlich YAML, Global Chunk und Sidebar:

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_script1.png"))
```

Hier ist die Spalte 2 mit dem reaktiven Epikurvendiagramm:

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_script2.png"))
```

Und hier ist das Armaturenbrett:

```{r, out.width=c("100%"), out.height=c("100%"), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_view.gif"))
```

### Andere Beispiele {.unnumbered}

Um ein gesundheitsbezogenes Beispiel für ein Shiny-**flexdashboard** unter Verwendung der **glänzenden** Interaktivität und der **Flugblatt** Mapping Widget, siehe dieses Kapitel des Online-Buchs [Geospatiale Gesundheitsdaten: Modellierung und Visualisierung mit R-INLA und Shiny](https://www.paulamoraga.com/book-geospatial/sec-dashboardswithshiny.html).

## Teilen

Dashboards, die keine Shiny-Elemente enthalten, geben eine HTML-Datei (.html) aus, die per E-Mail verschickt werden kann (wenn die Größe es zulässt). Das ist nützlich, da du den "Dashboard"-Bericht versenden kannst und keinen Server einrichten musst, um ihn als Website zu hosten.

Wenn du eingebettet hast **shiny** eingebettet hast, kannst du keine Ausgabe per E-Mail versenden, aber du kannst das Skript selbst an einen R-Benutzer senden oder das Dashboard wie oben beschrieben auf einem Server hosten.

## Ressourcen

Nachfolgend findest du hervorragende Anleitungen, die diese Seite informiert haben. Wenn du dir diese ansiehst, kannst du wahrscheinlich innerhalb einer Stunde dein eigenes Dashboard erstellen.

[https://bookdown.org/yihui/rmarkdown/dashboards.html](https://bookdown.org/yihui/rmarkdown/dashboards.html)

[https://rmarkdown.rstudio.com/flexdashboard/](https://rmarkdown.rstudio.com/flexdashboard/)

[https://rmarkdown.rstudio.com/flexdashboard/using.html](https://rmarkdown.rstudio.com/flexdashboard/using.html)

[https://rmarkdown.rstudio.com/flexdashboard/examples.html](https://rmarkdown.rstudio.com/flexdashboard/examples.html)


