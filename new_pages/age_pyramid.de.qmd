# Demografische Pyramiden und Likert-Skalen {}

```{r, out.width=c("50%", "50%"), fig.show="hold", echo=F}
knitr::include_graphics(here::here("images", "pop_pyramid_baseline.png"))

knitr::include_graphics(here::here("images", "likert.png"))
```

Demografische Pyramiden sind nützlich, um die Verteilung von Alter und Geschlecht darzustellen. Ein ähnlicher Code kann verwendet werden, um die Ergebnisse von Umfragen im Likert-Stil zu visualisieren (z. B. "stimme voll und ganz zu", "stimme zu", "neutral", "stimme nicht zu", "stimme überhaupt nicht zu"). Auf dieser Seite behandeln wir die folgenden Punkte:

- Schnelle und einfache Pyramiden mit der **apyramid** Paket
- Mehr anpassbare Pyramiden mit `ggplot()`
- Anzeige der demografischen Basisdaten im Hintergrund der Pyramide
- Verwendung pyramidenartiger Diagramme zur Darstellung anderer Datentypen (z. B. Antworten auf **Likert-Stil** Umfragefragen)

<!-- ======================================================= -->

## Vorbereitung {}

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(rio,       # to import data
               here,      # to locate files
               tidyverse, # to clean, handle, and plot the data (includes ggplot2 package)
               apyramid,  # a package dedicated to creating age pyramids
               janitor,   # tables and cleaning data
               stringr)   # working with strings for titles, captions, etc.
```

### Daten importieren {.unnumbered}

Zu Beginn importieren wir die bereinigte Liste der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Liste herunterzuladen</a> (als .rds-Datei). Importiere Daten mit dem `import()` Funktion aus der **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import case linelist 
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

### Reinigung {.unnumbered}

Um eine traditionelle demografische Alters-/Geschlechtspyramide zu erstellen, müssen die Daten zunächst wie folgt bereinigt werden:

- Die Spalte Geschlecht muss bereinigt werden.
- Je nach deiner Methode sollte das Alter entweder als numerische Zahl oder in einer *Alterskategorie* Spalte gespeichert werden.

Wenn du Alterskategorien verwendest, sollten die Spaltenwerte korrigiert werden, entweder standardmäßig alphanumerisch oder absichtlich durch Konvertierung in einen Klassenfaktor.

Im Folgenden verwenden wir `tabyl()` von **Hausmeister** um die Säulen zu inspizieren `gender` und `age_cat5`.

```{r}
linelist %>% 
  tabyl(age_cat5, gender)
```

Wir führen auch ein schnelles Histogramm für die `age` Spalte, um sicherzustellen, dass sie sauber und richtig klassifiziert ist:

```{r}
hist(linelist$age)
```

<!-- ======================================================= -->

## **Apyramide** Paket {}

Das Paket **apyramid** ist ein Produkt der [R4Epis](https://r4epis.netlify.com/) Projekts. Du kannst mehr über dieses Paket lesen [hier](https://cran.r-project.org/web/packages/apyramid/vignettes/intro.html). Es ermöglicht dir, schnell eine Alterspyramide zu erstellen. Für differenziertere Situationen, siehe den folgenden Abschnitt [verwenden `ggplot()`](#demo_pyr_gg). Du kannst mehr über die **Apyramide** Paket kannst du auf der Hilfeseite nachlesen, indem du `?age_pyramid` in deiner R-Konsole eingibst.

### Linelist-Daten {.unnumbered}

Verwendung der bereinigten `linelist` Datensatzes können wir eine Alterspyramide mit einem einfachen `age_pyramid()` Befehl erstellen. In diesem Befehl:

- Die `data = ` Argument wird als `linelist` Datenrahmen
- Die `age_group = ` Argument (für die y-Achse) wird auf den Namen der kategorialen Altersspalte (in Anführungszeichen) gesetzt
- Die `split_by = ` Argument (für die x-Achse) wird auf die Spalte Geschlecht gesetzt

```{r, warning=F, message=F}
apyramid::age_pyramid(data = linelist,
                      age_group = "age_cat5",
                      split_by = "gender")
```

Die Pyramide kann mit dem Prozentsatz aller Fälle auf der x-Achse angezeigt werden, anstatt mit der Anzahl, indem du `proportional = TRUE`.

```{r, warning=F, message=F}
apyramid::age_pyramid(data = linelist,
                      age_group = "age_cat5",
                      split_by = "gender",
                      proportional = TRUE)
```

Wenn du **agepyramid** Paket, wenn die `split_by` Spalte binär ist (z. B. männlich/weiblich oder ja/nein), dann wird das Ergebnis als Pyramide angezeigt. Gibt es jedoch mehr als zwei Werte in der `split_by` Spalte (ohne `NA`), erscheint die Pyramide als facettiertes Balkendiagramm mit grauen Balken im "Hintergrund", die den Bereich der nicht facettierten Daten für diese Altersgruppe anzeigen. In diesem Fall sind Werte von `split_by = ` als Beschriftungen am oberen Rand jedes Facettenfelds angezeigt. Das folgende Beispiel zeigt, was passiert, wenn die `split_by = ` die Spalte zugewiesen wird `hospital`.

```{r, warning=F, message=F}
apyramid::age_pyramid(data = linelist,
                      age_group = "age_cat5",
                      split_by = "hospital")  
```

#### Fehlende Werte {.unnumbered}

Zeilen, die `NA` fehlende Werte in der `split_by = ` oder `age_group = ` Spalten, wenn sie kodiert sind als `NA` codiert sind, wird die oben gezeigte Facettierung nicht ausgelöst. Standardmäßig werden diese Zeilen nicht angezeigt. Du kannst jedoch festlegen, dass sie in einem angrenzenden Balkendiagramm und als separate Altersgruppe am oberen Rand angezeigt werden, indem du angibst `na.rm = FALSE`.

```{r, warning=F, message=F}
apyramid::age_pyramid(data = linelist,
                      age_group = "age_cat5",
                      split_by = "gender",
                      na.rm = FALSE)         # show patients missing age or gender
```

#### Proportionen, Farben \& Ästhetik {.unnumbered}

In der Standardeinstellung zeigen die Balken die Anzahl (nicht den Prozentsatz), eine gestrichelte Mittellinie für jede Gruppe und die Farben grün/lila an. Jeder dieser Parameter kann, wie unten gezeigt, angepasst werden:

Du kannst auch zusätzliche `ggplot()` Befehle zum Plot hinzufügen, indem du die Standard `ggplot()` "+"-Syntax zusätzliche Befehle hinzufügen, z. B. ästhetische Themen und Beschriftungsanpassungen:

```{r, warning=F, message=F}
apyramid::age_pyramid(
  data = linelist,
  age_group = "age_cat5",
  split_by = "gender",
  proportional = TRUE,              # show percents, not counts
  show_midpoint = FALSE,            # remove bar mid-point line
  #pal = c("orange", "purple")      # can specify alt. colors here (but not labels)
  )+                 
  
  # additional ggplot commands
  theme_minimal()+                               # simplfy background
  scale_fill_manual(                             # specify colors AND labels
    values = c("orange", "purple"),              
    labels = c("m" = "Male", "f" = "Female"))+
  labs(y = "Percent of all cases",              # note x and y labs are switched
       x = "Age categories",                          
       fill = "Gender", 
       caption = "My data source and caption here",
       title = "Title of my plot",
       subtitle = "Subtitle with \n a second line...")+
  theme(
    legend.position = "bottom",                          # legend to bottom
    axis.text = element_text(size = 10, face = "bold"),  # fonts/sizes
    axis.title = element_text(size = 12, face = "bold"))
```

### Aggregierte Daten {.unnumbered}

In den obigen Beispielen wird davon ausgegangen, dass deine Daten in einem Zeilenformat vorliegen, mit einer Zeile pro Beobachtung. Wenn deine Daten bereits in Zählungen nach Alterskategorie aggregiert sind, kannst du trotzdem die **apyramid** Paket verwenden, wie unten gezeigt.

Zur Veranschaulichung fassen wir die Daten der Linienliste nach Alterskategorie und Geschlecht in einem "breiten" Format zusammen. So wird simuliert, als ob deine Daten von Anfang an in Zählungen vorliegen würden. Erfahre mehr über [Daten gruppieren] und [Pivotieren von Daten] auf den entsprechenden Seiten.

```{r, warning=F, message=F}
demo_agg <- linelist %>% 
  count(age_cat5, gender, name = "cases") %>% 
  pivot_wider(
    id_cols = age_cat5,
    names_from = gender,
    values_from = cases) %>% 
  rename(`missing_gender` = `NA`)
```

...dann sieht der Datensatz wie folgt aus: mit Spalten für die Alterskategorie, männlichen und weiblichen Zahlen und fehlenden Zahlen.

```{r, echo=F, warning=F, message=F}
# View the aggregated data
DT::datatable(demo_agg, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Um diese Daten für die Alterspyramide einzurichten, schwenken wir die Daten mit der Option "lang". `pivot_longer()` Funktion von **dplyr**. Der Grund dafür ist `ggplot()` generell "lange" Daten bevorzugt und **apyramid** verwendet `ggplot()`.

```{r, warning=F, message=F}
# pivot the aggregated data into long format
demo_agg_long <- demo_agg %>% 
  pivot_longer(
    col = c(f, m, missing_gender),            # cols to elongate
    names_to = "gender",                # name for new col of categories
    values_to = "counts") %>%           # name for new col of counts
  mutate(
    gender = na_if(gender, "missing_gender")) # convert "missing_gender" to NA
```

```{r, echo=F, warning=F, message=F}
# View the aggregated data
DT::datatable(demo_agg_long, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Dann benutze die `split_by = ` und `count = ` Argumente von `age_pyramid()` um die jeweiligen Spalten in den Daten anzugeben:

```{r, warning=F, message=F}
apyramid::age_pyramid(data = demo_agg_long,
                      age_group = "age_cat5",# column name for age category
                      split_by = "gender",   # column name for gender
                      count = "counts")      # column name for case counts
```

Beachte in der obigen Abbildung, dass die Reihenfolge der Faktoren "m" und "f" unterschiedlich ist (Pyramide umgedreht). Um die Reihenfolge anzupassen, musst du das Geschlecht in den aggregierten Daten als Faktor neu definieren und die Ebenen wie gewünscht anordnen. Siehe die [Faktoren] Seite.

<!-- ======================================================= -->

## `ggplot()` {#demo\_pyr\_gg}

verwenden `ggplot()` um deine Alterspyramide aufzubauen, bietet mehr Flexibilität, erfordert aber auch mehr Aufwand und Verständnis dafür, wie `ggplot()` funktioniert. Außerdem ist es einfacher, aus Versehen Fehler zu machen.

Zur Verwendung `ggplot()` um demografische Pyramiden zu erstellen, erstellst du zwei Balkendiagramme (eines für jedes Geschlecht), konvertierst die Werte in einem Diagramm ins Negative und drehst schließlich die x- und y-Achse, um die Balkendiagramme vertikal darzustellen, sodass sich ihre Basen in der Mitte des Diagramms treffen.

### Vorbereitung {.unnumbered}

Dieser Ansatz verwendet die *numerische* Altersspalte, nicht die *kategorische* Spalte von `age_cat5`. Wir prüfen also, ob die Klasse dieser Spalte tatsächlich numerisch ist.

```{r}
class(linelist$age)
```

Du könntest dieselbe Logik anwenden, um eine Pyramide aus kategorialen Daten zu erstellen, indem du `geom_col()` anstelle von `geom_histogram()`.

<!-- ======================================================= -->

### Konstruieren des Plots {.unnumbered}

Zunächst musst du verstehen, dass du eine solche Pyramide mit Hilfe von `ggplot()` folgendermaßen vorgeht:

- Innerhalb der `ggplot()` erstellen **zwei** Histogramme unter Verwendung der numerischen Altersspalte. Erstelle eines für jeden der beiden Gruppierungswerte (in diesem Fall die Geschlechter männlich und weiblich). Dazu werden die Daten für jedes Histogramm in ihren jeweiligen `geom_histogram()` Befehlen angegeben, wobei die jeweiligen Filter auf `linelist`.

- Ein Diagramm enthält positive Zählwerte, während die Zählwerte des anderen in negative Werte umgewandelt werden - so entsteht die "Pyramide" mit den `0` Wert in der Mitte des Diagramms. Die negativen Werte werden mit einer speziellen **ggplot2** Term `..count..` und multipliziert mit -1.

- Der Befehl `coord_flip()` tauscht die X- und Y-Achse, wodurch die Graphen vertikal werden und die Pyramide entsteht.

- Schließlich müssen die Beschriftungen der Werte auf der Zählachse geändert werden, damit sie auf beiden Seiten der Pyramide als "positive" Werte erscheinen (obwohl die zugrunde liegenden Werte auf einer Seite negativ sind).

A **einfache** Version dieser Methode, die `geom_histogram()` ist unten zu sehen:

```{r, warning=F, message=F}
  # begin ggplot
  ggplot(mapping = aes(x = age, fill = gender)) +
  
  # female histogram
  geom_histogram(data = linelist %>% filter(gender == "f"),
                 breaks = seq(0,85,5),
                 colour = "white") +
  
  # male histogram (values converted to negative)
  geom_histogram(data = linelist %>% filter(gender == "m"),
                 breaks = seq(0,85,5),
                 mapping = aes(y = ..count..*(-1)),
                 colour = "white") +
  
  # flip the X and Y axes
  coord_flip() +
  
  # adjust counts-axis scale
  scale_y_continuous(limits = c(-600, 900),
                     breaks = seq(-600,900,100),
                     labels = abs(seq(-600, 900, 100)))
```

<span style="color: red;">***GEFAHR!*** Wenn die **Grenzen** deiner Zählachse zu niedrig eingestellt sind und ein Zählbalken sie überschreitet, verschwindet der Balken ganz oder wird künstlich verkürzt! Achte darauf, wenn du Daten analysierst, die routinemäßig aktualisiert werden. Verhindere dies, indem du die Grenzen der Zählachse automatisch an deine Daten anpasst (siehe unten).</span>

Es gibt viele Dinge, die du an dieser einfachen Version ändern/hinzufügen kannst, zum Beispiel:

- Automatische Anpassung der Skala der Zählachse an deine Daten (um Fehler zu vermeiden, siehe Warnung unten)
- Manuelles Festlegen von Farben und Beschriftungen

**Zählungen in Prozente umrechnen**

Um Zählungen in Prozentwerte (der Gesamtzahl) umzuwandeln, musst du dies in deinen Daten tun, bevor du sie aufzeichnest. Nachfolgend werden die Zählungen nach Alter und Geschlecht ermittelt, dann `ungroup()` und dann `mutate()` um neue Prozentspalten zu erstellen. Wenn du die Prozente nach Geschlecht aufschlüsseln willst, überspringst du den Schritt "Gruppierung aufheben".

```{r, warning=F, message=F}
# create dataset with proportion of total
pyramid_data <- linelist %>%
  count(age_cat5,
        gender,
        name = "counts") %>% 
  ungroup() %>%                 # ungroup so percents are not by group
  mutate(percent = round(100*(counts / sum(counts, na.rm=T)), digits = 1), 
         percent = case_when(
            gender == "f" ~ percent,
            gender == "m" ~ -percent,     # convert male to negative
            TRUE          ~ NA_real_))    # NA val must by numeric as well
```

Wichtig ist, dass wir die Höchst- und Mindestwerte speichern, damit wir wissen, wo die Grenzen der Skala liegen sollen. Diese werden in der `ggplot()` Befehl unten verwendet.

```{r}
max_per <- max(pyramid_data$percent, na.rm=T)
min_per <- min(pyramid_data$percent, na.rm=T)

max_per
min_per
```

Zum Schluss machen wir die `ggplot()` auf die Prozentdaten. Wir geben an `scale_y_continuous()` um die vordefinierten Längen in jede Richtung (positiv und "negativ") zu verlängern. Wir verwenden `floor()` und `ceiling()` um Dezimalzahlen in die entsprechende Richtung (abwärts oder aufwärts) für die Seite der Achse zu runden.

```{r, warning=F, message=F}
# begin ggplot
  ggplot()+  # default x-axis is age in years;

  # case data graph
  geom_col(data = pyramid_data,
           mapping = aes(
             x = age_cat5,
             y = percent,
             fill = gender),         
           colour = "white")+       # white around each bar
  
  # flip the X and Y axes to make pyramid vertical
  coord_flip()+
  

  # adjust the axes scales
  # scale_x_continuous(breaks = seq(0,100,5), labels = seq(0,100,5)) +
  scale_y_continuous(
    limits = c(min_per, max_per),
    breaks = seq(from = floor(min_per),                # sequence of values, by 2s
                 to = ceiling(max_per),
                 by = 2),
    labels = paste0(abs(seq(from = floor(min_per),     # sequence of absolute values, by 2s, with "%"
                            to = ceiling(max_per),
                            by = 2)),
                    "%"))+  

  # designate colors and legend labels manually
  scale_fill_manual(
    values = c("f" = "orange",
               "m" = "darkgreen"),
    labels = c("Female", "Male")) +
  
  # label values (remember X and Y flipped now)
  labs(
    title = "Age and gender of cases",
    x = "Age group",
    y = "Percent of total",
    fill = NULL,
    caption = stringr::str_glue("Data are from linelist \nn = {nrow(linelist)} (age or sex missing for {sum(is.na(linelist$gender) | is.na(linelist$age_years))} cases) \nData as of: {format(Sys.Date(), '%d %b %Y')}")) +
  
  # display themes
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    plot.title = element_text(hjust = 0.5), 
    plot.caption = element_text(hjust=0, size=11, face = "italic")
    )

```

<!-- ======================================================= -->

### Mit der Basislinie vergleichen {.unnumbered}

Mit der Flexibilität von `ggplot()` kannst du eine zweite Ebene mit Balken im Hintergrund einblenden, die die "wahre" Bevölkerungspyramide oder die "Basislinie" darstellen. So kannst du die beobachteten Werte mit der Basislinie vergleichen.

Importieren und Anzeigen der Bevölkerungsdaten (siehe [Handbuch und Daten herunterladen] Seite):

```{r, echo=F}
# import the population demographics data
pop <- rio::import(here::here("data", "standardization", "country_demographics.csv"))
```

```{r, eval=F}
# import the population demographics data
pop <- rio::import("country_demographics.csv")
```

```{r, echo=F, warning=F, message=F}
# display the linelist data as a table
DT::datatable(pop, rownames = FALSE, options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```

Zunächst einige Schritte zur Datenverwaltung:

Hier legen wir die Reihenfolge der Alterskategorien fest, die erscheinen sollen. Aufgrund einiger Macken in der Art, wie die `ggplot()` implementiert ist, ist es in diesem speziellen Szenario am einfachsten, diese als Zeichenvektor zu speichern und sie später in der Plotting-Funktion zu verwenden.

```{r}
# record correct age cat levels
age_levels <- c("0-4","5-9", "10-14", "15-19", "20-24",
                "25-29","30-34", "35-39", "40-44", "45-49",
                "50-54", "55-59", "60-64", "65-69", "70-74",
                "75-79", "80-84", "85+")
```

Kombiniere die Bevölkerungs- und Falldaten mit der Funktion **dplyr** Funktion `bind_rows()`:

- Stellen Sie zunächst sicher, dass sie die *genau dasselbe* Spaltennamen, Werte der Alterskategorien und des Geschlechts
- Sorge dafür, dass sie die gleiche Datenstruktur haben: Spalten für Alterskategorie, Geschlecht, Anzahl und Prozent der Gesamtzahl
- Verbinde sie miteinander, eine über der anderen (`bind_rows()`)

```{r, warning=F, message=F}
# create/transform populaton data, with percent of total
########################################################
pop_data <- pop %>% 
  pivot_longer(      # pivot gender columns longer
    cols = c(m, f),
    names_to = "gender",
    values_to = "counts") %>% 
  
  mutate(
    percent  = round(100*(counts / sum(counts, na.rm=T)),1),  # % of total
    percent  = case_when(                                                        
     gender == "f" ~ percent,
     gender == "m" ~ -percent,               # if male, convert % to negative
     TRUE          ~ NA_real_))
```

Überprüfe den geänderten Bevölkerungsdatensatz

```{r, echo=F, warning=F, message=F}
# display the linelist data as a table
DT::datatable(pop_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Führe nun das Gleiche für die Fallliste durch.  Sie unterscheidet sich ein wenig, weil sie mit Fallzeilen und nicht mit Zählungen beginnt.

```{r, warning=F, message=F}
# create case data by age/gender, with percent of total
#######################################################
case_data <- linelist %>%
  count(age_cat5, gender, name = "counts") %>%  # counts by age-gender groups
  ungroup() %>% 
  mutate(
    percent = round(100*(counts / sum(counts, na.rm=T)),1),  # calculate % of total for age-gender groups
    percent = case_when(                                     # convert % to negative if male
      gender == "f" ~ percent,
      gender == "m" ~ -percent,
      TRUE          ~ NA_real_))
```

Überprüfe den geänderten Falldatensatz

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(case_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Jetzt sind die beiden Datenrahmen kombiniert, einer über dem anderen (sie haben die gleichen Spaltennamen). Wir können jeden der Datenrahmen "benennen" und die `.id = ` Argument eine neue Spalte "data\_source" erstellen, die angibt, aus welchem Datenrahmen die einzelnen Zeilen stammen. Diese Spalte können wir zum Filtern in der `ggplot()`.

```{r, warning=F, message=F}
# combine case and population data (same column names, age_cat values, and gender values)
pyramid_data <- bind_rows("cases" = case_data, "population" = pop_data, .id = "data_source")
```

Speichere die maximalen und minimalen Prozentwerte, die in der Plot-Funktion verwendet werden, um den Umfang des Plots zu definieren (und keine Balken abzuschneiden!)

```{r}
# Define extent of percent axis, used for plot limits
max_per <- max(pyramid_data$percent, na.rm=T)
min_per <- min(pyramid_data$percent, na.rm=T)
```

Jetzt wird die Handlung mit `ggplot()`:

- Ein Balkendiagramm der Bevölkerungsdaten (breitere, transparentere Balken)
- Ein Balkendiagramm der Falldaten (kleine, festere Balken)

```{r, warning=F, message=F}

# begin ggplot
##############
ggplot()+  # default x-axis is age in years;

  # population data graph
  geom_col(
    data = pyramid_data %>% filter(data_source == "population"),
    mapping = aes(
      x = age_cat5,
      y = percent,
      fill = gender),
    colour = "black",                               # black color around bars
    alpha = 0.2,                                    # more transparent
    width = 1)+                                     # full width
  
  # case data graph
  geom_col(
    data = pyramid_data %>% filter(data_source == "cases"), 
    mapping = aes(
      x = age_cat5,                               # age categories as original X axis
      y = percent,                                # % as original Y-axis
      fill = gender),                             # fill of bars by gender
    colour = "black",                               # black color around bars
    alpha = 1,                                      # not transparent 
    width = 0.3)+                                   # half width
  
  # flip the X and Y axes to make pyramid vertical
  coord_flip()+
  
  # manually ensure that age-axis is ordered correctly
  scale_x_discrete(limits = age_levels)+     # defined in chunk above
  
  # set percent-axis 
  scale_y_continuous(
    limits = c(min_per, max_per),                                          # min and max defined above
    breaks = seq(floor(min_per), ceiling(max_per), by = 2),                # from min% to max% by 2 
    labels = paste0(                                                       # for the labels, paste together... 
              abs(seq(floor(min_per), ceiling(max_per), by = 2)), "%"))+                                                  

  # designate colors and legend labels manually
  scale_fill_manual(
    values = c("f" = "orange",         # assign colors to values in the data
               "m" = "darkgreen"),
    labels = c("f" = "Female",
               "m"= "Male"),      # change labels that appear in legend, note order
  ) +

  # plot labels, titles, caption    
  labs(
    title = "Case age and gender distribution,\nas compared to baseline population",
    subtitle = "",
    x = "Age category",
    y = "Percent of total",
    fill = NULL,
    caption = stringr::str_glue("Cases shown on top of country demographic baseline\nCase data are from linelist, n = {nrow(linelist)}\nAge or gender missing for {sum(is.na(linelist$gender) | is.na(linelist$age_years))} cases\nCase data as of: {format(max(linelist$date_onset, na.rm=T), '%d %b %Y')}")) +
  
  # optional aesthetic themes
  theme(
    legend.position = "bottom",                             # move legend to bottom
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(colour = "black"),
    plot.title = element_text(hjust = 0), 
    plot.caption = element_text(hjust=0, size=11, face = "italic"))

```

<!-- ======================================================= -->

## Likert-Skala {}

Die Techniken, die zur Erstellung einer Bevölkerungspyramide mit `ggplot()` verwendet wird, kann auch für die Darstellung von Umfragedaten auf der Likert-Skala verwendet werden.

```{r, eval=F, echo=F}
data_raw <- import("P:/Shared/equateur_mve_2020/lessons learned/Ebola After-Action Survey - HQ epi team (form responses).csv")


likert_data <- data_raw %>% 
  select(2, 4:11) %>% 
  rename(status = 1,
         Q1 = 2,
         Q2 = 3,
            Q3 = 4,
            Q4 = 5,
            Q5 = 6,
            Q6 = 7,
            Q7 = 8,
            Q8 = 9) %>% 
  mutate(status = case_when(
           stringr::str_detect(status, "Mar") ~ "Senior",
           stringr::str_detect(status, "Jan") ~ "Intermediate",
           stringr::str_detect(status, "Feb") ~ "Junior",
           TRUE ~ "Senior")) %>% 
  mutate(Q4 = recode(Q4, "Not applicable" = "Very Poor"))

table(likert_data$status)

rio::export(likert_data, here::here("data", "likert_data.csv"))
```

Importiere die Daten (siehe [Handbuch und Daten herunterladen] Seite, falls gewünscht).

```{r, echo=F}
# import the likert survey response data
likert_data <- rio::import(here::here("data", "likert_data.csv"))
```

```{r, eval=F}
# import the likert survey response data
likert_data <- rio::import("likert_data.csv")
```

Beginne mit Daten, die wie folgt aussehen, mit einer kategorialen Klassifizierung jedes Befragten (`status`) und deren Antworten auf 8 Fragen auf einer 4-stufigen Likert-Skala ("Sehr schlecht", "Schlecht", "Gut", "Sehr gut").

```{r, echo=F, message=FALSE}
# display the linelist data as a table
DT::datatable(likert_data, rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```

Zunächst einige Schritte zur Datenverwaltung:

- Pivotiere die Daten länger
- Neue Spalte erstellen `direction` je nachdem, ob die Antwort generell "positiv" oder "negativ" war
- Lege die Reihenfolge der Faktorebenen für die `status` Spalte und die `Response` Spalte
- Speichere den maximalen Zählwert, damit die Grenzen der Darstellung angemessen sind

```{r, warning=F, message=F}
melted <- likert_data %>% 
  pivot_longer(
    cols = Q1:Q8,
    names_to = "Question",
    values_to = "Response") %>% 
  mutate(
    
    direction = case_when(
      Response %in% c("Poor","Very Poor")  ~ "Negative",
      Response %in% c("Good", "Very Good") ~ "Positive",
      TRUE                                 ~ "Unknown"),
    
    status = fct_relevel(status, "Junior", "Intermediate", "Senior"),
    
    # must reverse 'Very Poor' and 'Poor' for ordering to work
    Response = fct_relevel(Response, "Very Good", "Good", "Very Poor", "Poor")) 

# get largest value for scale limits
melted_max <- melted %>% 
  count(status, Question) %>% # get counts
  pull(n) %>%                 # column 'n'
  max(na.rm=T)                # get max
```

Erstelle nun das Diagramm. Wie bei den Alterspyramiden oben erstellen wir zwei Balkendiagramme und invertieren die Werte eines von ihnen ins Negative.

Wir verwenden `geom_bar()` weil es sich bei unseren Daten um eine Zeile pro Beobachtung und nicht um aggregierte Zahlen handelt. Wir verwenden die spezielle **ggplot2** Term `..count..` in einem der Balkendiagramme, um die Werte negativ zu invertieren (\*-1), und wir setzen `position = "stack"` damit die Werte übereinander gestapelt werden.

```{r, warning=F, message=F}
# make plot
ggplot()+
     
  # bar graph of the "negative" responses 
     geom_bar(
       data = melted %>% filter(direction == "Negative"),
       mapping = aes(
         x = status,
         y = ..count..*(-1),    # counts inverted to negative
         fill = Response),
       color = "black",
       closed = "left",
       position = "stack")+
     
     # bar graph of the "positive responses
     geom_bar(
       data = melted %>% filter(direction == "Positive"),
       mapping = aes(
         x = status,
         fill = Response),
       colour = "black",
       closed = "left",
       position = "stack")+
     
     # flip the X and Y axes
     coord_flip()+
  
     # Black vertical line at 0
     geom_hline(yintercept = 0, color = "black", size=1)+
     
    # convert labels to all positive numbers
    scale_y_continuous(
      
      # limits of the x-axis scale
      limits = c(-ceiling(melted_max/10)*11,    # seq from neg to pos by 10, edges rounded outward to nearest 5
                 ceiling(melted_max/10)*10),   
      
      # values of the x-axis scale
      breaks = seq(from = -ceiling(melted_max/10)*10,
                   to = ceiling(melted_max/10)*10,
                   by = 10),
      
      # labels of the x-axis scale
      labels = abs(unique(c(seq(-ceiling(melted_max/10)*10, 0, 10),
                            seq(0, ceiling(melted_max/10)*10, 10))))) +
     
    # color scales manually assigned 
    scale_fill_manual(
      values = c("Very Good"  = "green4", # assigns colors
                "Good"      = "green3",
                "Poor"      = "yellow",
                "Very Poor" = "red3"),
      breaks = c("Very Good", "Good", "Poor", "Very Poor"))+ # orders the legend
     
    
     
    # facet the entire plot so each question is a sub-plot
    facet_wrap( ~ Question, ncol = 3)+
     
    # labels, titles, caption
    labs(
      title = str_glue("Likert-style responses\nn = {nrow(likert_data)}"),
      x = "Respondent status",
      y = "Number of responses",
      fill = "")+

     # display adjustments 
     theme_minimal()+
     theme(axis.text = element_text(size = 12),
           axis.title = element_text(size = 14, face = "bold"),
           strip.text = element_text(size = 14, face = "bold"),  # facet sub-titles
           plot.title = element_text(size = 20, face = "bold"),
           panel.background = element_rect(fill = NA, color = "black")) # black box around each facet
```

<!-- ======================================================= -->

## Ressourcen {}

[Apyramide Dokumentation](https://cran.r-project.org/web/packages/apyramid/vignettes/intro.html)


