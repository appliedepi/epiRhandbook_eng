
# Veri tablosu { }
     
El kitabı, verileri temizleme ve gruplama yöntemi olarak **dplyr** “verb” fonksiyonlarına ve **magrittr** tünel operatörü `%>%` üzerine odaklanır, ancak **data.table** paketi kullanabileceğiniz bir alternatif mevcuttur.


## Veri tablolarına giriş { }

Bir veri tablosu, karmaşık gruplama işlemlerinin gerçekleştirilmesine izin veren bir veri çerçevesi gibi 2 boyutlu bir veri yapısıdır. data.table sözdizimi, satırlar, sütunlar ve gruplar üzerinde işlemler gerçekleştirilebilecek şekilde yapılandırılmıştır.

Yapı **DT[i, j, by]** şeklindedir ve 3 parça ile ayrılmıştır; **i, j** ve **by** değişkenleri. **i** değişkeni gerekli satırların alt kümelenmesine, **j** değişkeni sütunlar üzerinde işlem yapmanıza ve **by** değişkeni sütunlar üzerinde gruplara göre işlem yapmanıza olanak tanır.
  
Bu sayfa aşağıdaki konuları ele alacaktır:

* Verileri içe aktarma ve `fread()` ve `fwrite()` kullanımı
* **i** değişkenini kullanarak satırları seçme ve filtreleme
* `%like%`, `%chin%`, `%between%` yardımcı fonksiyonlarını kullanma
* **j** değişkenini kullanarak sütunları seçme ve hesaplama
* **by** değişkenini kullanan gruplara göre hesaplama
* `:=` kullanarak veri tablolarına veri ekleme ve güncelleme

<!-- ======================================================= -->
## Paketleri yükleyin ve verileri içe aktarın { }

### Paketleri yükleyin {.unnumbered}

**pacman**'den `p_load()` fonksiyonunu kullanarak, bu analiz için gerekli paketleri yükleriz (ve gerekirse kurarız).
     
```{r}
pacman::p_load(
  rio,        # verileri içe aktarmak için
  data.table, # verileri gruplamak ve temizlemek için
  tidyverse,  # bu bölümde tünelleme (%>%) fonksiyonunun kullanılmasına izin verir
  here 
  ) 
```


### Verileri içe aktar {.unnumbered}

Bu sayfa, el kitabında atıfta bulunulan vaka satır listesini kullanarak **data.table**'ın bazı temel fonksiyonlarını keşfedecektir.

Simüle edilmiş bir Ebola salgınından vakaların veri setini içe aktarıyoruz. Adım adım izlenecek verileri indirmek istiyorsanız, [Kitap ve verileri indir] sayfasındaki talimatlara bakın. Veri kümesi, **rio** paketinden `import()` fonksiyonu kullanılarak içe aktarılır. Verileri içe aktarmanın çeşitli yolları için [İçe ve dışa aktar] hakkındaki sayfaya bakın. Buradan veri çerçevesini bir veri tablosuna dönüştürmek için `data.table()` kullanıyoruz.

```{r}
linelist <- rio::import(here("data", "linelist_cleaned.xlsx")) %>% data.table()
```

'fread()' fonksiyonu, .csv dosyaları gibi normal sınırlandırılmış dosyaları doğrudan bir veri tablosu biçimine içe aktarmak için kullanılır. Data.tables'ı düzenli sınırlandırılmış dosyalar olarak yazmak için kullanılan bu işlev ve muadili 'fwrite()', büyük veritabanları için çok hızlı ve hesaplama açısından verimli seçeneklerdir.

"linelist"in ilk 20 satırı:

```{r message=FALSE, echo=F, eval=FALSE}
DT::datatable(head(linelist,20), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Veri çerçeveleri için kullanılan 'dim()' gibi R Tabanı komutları, veri tabloları için de kullanılabilir.

```{r}
dim(linelist) #veri tablosundaki satır ve sütun sayısını verir
```

## i değişkeni: satırları seçme ve filtreleme{ }
     
**DT[i, j, by]** yapısını hatırlayarak, satır numaralarını veya mantıksal ifadeleri kullanarak satırları filtreleyebiliriz. i değişkeni ilk; bu nedenle, **DT[i]** veya **DT[i,]** sözdizimi kullanılabilir.

İlk örnek veri tablosunun ilk 5 satırını alır, ikinci örnek alt küme vakaları 18 yaş ve üzeridir ve üçüncü örnek alt kümeler 18 yaş veya üzeri ancak Merkez Hastanede teşhis edilmemiş vakaları içerir:


```{r, eval=F}
linelist[1:5] #1.ila 5. satır arasını getirir
linelist[age >= 18] #alt küme vakaları 18 yaşa eşit veya daha büyük
linelist[age >= 18 & hospital != "Central Hospital"] #18 yaşına eşit veya daha büyük ancak Merkez Hastanede teşhis edilmemiş alt kümeler

```

i bağımsız değişkeninde .N kullanılması, veri tablosundaki toplam satır sayısını temsil eder. Bu, satır numaralarını alt kümelemek için kullanılabilir: 

```{r, eval=F}
linelist[.N] #son satırı getirir
linelist[15:.N] #15. satırdan son satıra kadar getirir
```

###  Filtreleme için yardımcı fonksiyonları kullanma {.unnumbered}

Veri tablosu, alt küme satırlarını kolaylaştıran yardımcı fonksiyonları kullanır. '%like%'  bir sütundaki kalıbı eşleştirmek için kullanılır, '%chin%' belirli bir karakteri eşleştirmek için kullanılır ve '%between%' önceden belirlenmiş bir aralıktaki sayısal sütunları eşleştirmek için kullanılır.

Aşağıdaki örneklerde:
* hastane değişkeninin "Hastane" içerdiği satırları filtreleyin
* sonucun "İyileşme" veya "Ölüm" olduğu satırları filtreleyin
* 40-60 yaş aralığındaki satırları filtreleyin

```{r, eval=F}
linelist[hospital %like% "Hospital"] #hastane değişkeninin "Hastane" içerdiği satırları filtreleyin
linelist[outcome %chin% c("Recover", "Death")] #sonucun "İyileşme" veya "Ölüm" olduğu satırları filtreleyin
linelist[age %between% c(40, 60)] #40-60 yaş aralığındaki satırları filtreleyin

#%between% 2 uzunlukta bir vektör almalıdır, oysa %chin% >= 1 uzunlukta vektörler alabilir

```

## j değişkeni: sütunları seçme ve hesaplama{ }

**DT[i, j, by]** yapısını kullanarak sayıları veya isimleri kullanarak sütunları seçebiliriz. **j** değişkeni ikinci sıradadır; bu nedenle **DT[, j]** sözdizimi kullanılır. **j** değişkenindeki hesaplamaları kolaylaştırmak için, 'list()' ya da '.()' kullanılarak sütun sarılır.


### Sütunları seçme {.unnumbered}

İlk örnek, veri tablosunun birinci, üçüncü ve beşinci sütunlarını alır; ikinci örnek, boy, ağırlık ve cinsiyet sütunları dışındaki tüm sütunları seçer. Üçüncü örnek, **case_id** ve **outcome** sütunlarını seçmek için `.()` sarmasını kullanır.

```{r, eval=F}
linelist[ , c(1,3,5)]
linelist[ , -c("gender", "age", "wt_kg", "ht_cm")]
linelist[ , list(case_id, outcome)] #linelist[ , .(case_id, outcome)] aynı şekilde çalışır

```

###  Sütunlarda hesaplama {.unnumbered}

**i** ve **j** değikenlerini birleştirerek, satırları filtrelemek ve sütunlarda hesaplama yapmak mümkündür. **j** değişkeninde **.N** kullanılması ayrıca veri tablosundaki toplam satır sayısını temsil eder ve satır filtrelemeden sonra satır sayısını döndürmek için yararlı olabilir.

Aşağıdaki örneklerde:
* Hastanede 7 günden fazla kalan vaka sayısını sayın
* Askeri hastanede ölen vakaların yaş ortalamasını hesaplayın
* Merkez hastanede iyileşen vakaların standart sapma, ortanca, yaş ortalamasını hesaplayın

```{r}
linelist[days_onset_hosp > 7 , .N]
linelist[hospital %like% "Military" & outcome %chin% "Death", .(mean(age, na.rm = T))] #na.rm = T siler N/A değerleri
linelist[hospital == "Central Hospital" & outcome == "Recover", 
                 .(mean_age = mean(age, na.rm = T),
                   median_age = median(age, na.rm = T),
                   sd_age = sd(age, na.rm = T))] #bu sözdizimi yardımcı fonksiyonları kullanmaz ancak aynı şekilde çalışır
```

j değişkeninde .() sarma kullanmanın hesaplamayı kolaylaştırdığını, bir veri tablosu döndürdüğünü ve sütun adlandırmasına izin verdiğini unutmayın.

## Değişkene göre: gruplara göre hesaplama{ }

**by** değişkeni, **DT[i, j, by]** yapısındaki üçüncü değişkendir. **by** değişkeni hem bir karakter vektörünü hem de 'list()' veya '.()' sözdizimini kabul eder. **by** değişkeninde `.()` sözdizimini kullanmak, anında sütun yeniden adlandırılmasına izin verir.

Aşağıdaki örneklerde:
* vaka sayısını hastaneye göre gruplandırın
* 18 yaş ve üzeri vakalarda cinsiyete göre vakaların ortalama boy ve kilolarını, iyileşip ölmediklerini hesaplayın
* 7 günü aşan başvurularda, vaka sayısını yattığı aya ve yattığı hastaneye göre sayısını hesaplayın


```{r}
linelist[, .N, .(hospital)] #hastaneye göre vaka sayıları
linelist[age > 18, .(mean_wt = mean(wt_kg, na.rm = T),
                             mean_ht = mean(ht_cm, na.rm = T)), .(gender, outcome)] #NAs, verilerin eksik olduğu kategorileri temsil eder
linelist[days_onset_hosp > 7, .N, .(month = month(date_hospitalisation), hospital)]

```

Data.table ayrıca zincirleme ifadelere aşağıdaki gibi izin verir:

```{r}

linelist[, .N, .(hospital)][order(-N)][1:3] #1. tüm vakaları hastaneye göre seçer, 2. vakaları azalan sırayla sıralar, 3. en büyük vaka yüküne sahip 3 hastaneyi alt kümeler


```

Bu örneklerde, veri tablosundaki bir satırın yeni bir duruma eşit olduğu varsayımını izliyoruz ve bu nedenle veri tablosundaki satır sayısını temsil etmek için **.N**'yi kullanabiliriz. Benzersiz durumların sayısını temsil eden başka bir yararlı fonksiyon, belirli bir girdideki benzersiz değerlerin sayısını döndüren "uniqueN()" dir. Aşağıda gösterilmektedir:

```{r}

linelist[, .(uniqueN(gender))] #hatırlayın .() j değişkeninde bir veri tablosu döndürür

```

Cinsiyet sütunundaki benzersiz değerler m, f ve N/A olduğundan cevap 3'tür. Belirli bir girdideki tüm benzersiz değerleri döndüren temel R fonksiyonu "unique()" ile karşılaştırın:

```{r}

linelist[, .(unique(gender))]
```

Belirli bir aydaki benzersiz vakaların sayısını bulmak için aşağıdakileri yazarız:

```{r}

linelist[, .(uniqueN(case_id)), .(month = month(date_hospitalisation))]

```

## Veri tablolarına ekleme ve güncelleme { }

`:=` operatörü, bir veri tablosuna veri eklemek veya bu tabloya veri güncellemek için kullanılır. Veri tablonuza sütun eklemek aşağıdaki şekillerde yapılabilir:

```{r}

linelist[, adult := age >= 18] #bir sütun ekler
linelist[, c("child", "wt_lbs") := .(age < 18, wt_kg*2.204)] #birden çok sütun eklemek için c("") ve list() veya .() sözdizimi gerekir
linelist[, `:=` (bmi_in_range = (bmi > 16 & bmi < 40),
                         no_infector_source_data = is.na(infector) | is.na(source))] #bu yöntem :='yi fonksiyonel operatör olarak `:=` kullanır
linelist[, adult := NULL] #sütunu siler

```

Daha karmaşık toplamalar bu giriş bölümünün kapsamı dışındadır, ancak buradaki fikir, verileri gruplama ve temizleme için **dplyr**'e popüler ve uygulanabilir bir alternatif sağlamaktır. **data.table** paketi, düzgün ve okunabilir koda izin veren harika bir pakettir.


## Kaynaklar {  }

* https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html
* https://github.com/Rdatatable/data.table
* https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf
* https://www.machinelearningplus.com/data-manipulation/datatable-in-r-complete-guide/
* https://www.datacamp.com/community/tutorials/data-table-r-tutorial

Gruplandırılmış veriler üzerinde herhangi bir özet fonksiyonu gerçekleştirebilirsiniz; Daha fazla bilgi için buradaki pratik belgeye bakın:
https://s3.amazonaws.com/assets.datacamp.com/blog_assets/datatable_Cheat_Sheet_R.pdf




