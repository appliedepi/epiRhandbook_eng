# Mit Daten arbeiten {}

```{r, out.width=c("50%"), fig.align="center", echo=F, message=F}
knitr::include_graphics(here::here("images", "Dates_500x500.png"))
```

Die Arbeit mit Datumsangaben in R erfordert mehr Aufmerksamkeit als die Arbeit mit anderen Objektklassen. Im Folgenden stellen wir einige Werkzeuge und Beispiele vor, die diesen Prozess weniger mühsam machen. Glücklicherweise lassen sich Datumsangaben mit etwas Übung und einer Reihe von hilfreichen Paketen wie **lubridate**.

Beim Import von Rohdaten interpretiert R Datumsangaben oft als Zeichenobjekte - das bedeutet, dass sie nicht für allgemeine Datumsoperationen wie die Erstellung von Zeitreihen und die Berechnung von Zeitintervallen verwendet werden können. Erschwerend kommt hinzu, dass es viele Möglichkeiten gibt, ein Datum zu formatieren, und du musst R dabei helfen, herauszufinden, welcher Teil eines Datums wofür steht (Monat, Tag, Stunde usw.).

Datumsangaben sind in R eine eigene Objektklasse - die `Date` Klasse. Es ist zu beachten, dass es auch eine Klasse gibt, die Objekte mit Datum speichert *und* Uhrzeit. Datums-Zeit-Objekte werden formal bezeichnet als `POSIXt`, `POSIXct`, und/oder `POSIXlt` Klassen (der Unterschied ist nicht wichtig). Diese Objekte werden informell bezeichnet als *datetime* Klassen bezeichnet.

- Es ist wichtig, dass R erkennt, wenn eine Spalte Datumsangaben enthält.
- Datumsangaben sind eine Objektklasse und es kann schwierig sein, mit ihnen zu arbeiten.
- Hier stellen wir dir verschiedene Möglichkeiten vor, wie du Datumsspalten in die Date-Klasse umwandeln kannst.

<!-- ======================================================= -->

## Vorbereitung

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden der Pakete, die für diese Seite benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r dates_packages, warning=F, message=F}
# Checks if package is installed, installs if necessary, and loads package for current session

pacman::p_load(
  lubridate,  # general package for handling and converting dates  
  parsedate,  # has function to "guess" messy dates
  aweek,      # another option for converting dates to weeks, and weeks to dates
  zoo,        # additional date/time functions
  here,       # file management
  rio,        # data import/export
  tidyverse)  # data management and visualization  
```

### Daten importieren {.unnumbered}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du die Daten herunterladen möchtest, um Schritt für Schritt mitzumachen, sieh dir die Anleitung im [Handbuch und Daten herunterladen] Seite. Wir gehen davon aus, dass sich die Datei im Arbeitsverzeichnis befindet, also werden in diesem Dateipfad keine Unterordner angegeben.

```{r, echo=F}
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

```

```{r, eval=F}
linelist <- import("linelist_cleaned.xlsx")

```

<!-- ======================================================= -->

## Aktuelles Datum

Du kannst das aktuelle "System"-Datum oder die System-Datumszeit deines Computers ermitteln, indem du Folgendes tust mit **Basis** R.

```{r}
# get the system date - this is a DATE class
Sys.Date()

# get the system time - this is a DATETIME class
Sys.time()
```

Mit der **lubridate** Paket können diese auch zurückgegeben werden mit `today()` und `now()` zurückgegeben werden. `date()` gibt das aktuelle Datum und die Uhrzeit mit Wochentags- und Monatsnamen zurück.

<!-- ======================================================= -->

## In Datum umwandeln

Nach dem Import eines Datensatzes in R können die Werte der Datumsspalten wie "1989/12/30", "05/06/2014" oder "13 Jan 2020" aussehen. In diesen Fällen behandelt R diese Werte wahrscheinlich immer noch als Zeichenwerte. R muss *mitgeteilt* dass es sich bei diesen Werten um Datumswerte handelt... und welches Format das Datum hat (welcher Teil ist der Tag, welcher der Monat, welcher das Jahr, usw.).

Sobald dies bekannt ist, wandelt R diese Werte in die Klasse Datum um. Im Hintergrund speichert R die Daten als Zahlen (die Anzahl der Tage seit dem "Ursprungsdatum" 1. Januar 1970). Du wirst nicht oft mit den Datumszahlen in Berührung kommen, aber so kann R Datumswerte als kontinuierliche Variablen behandeln und spezielle Operationen wie die Berechnung des Abstands zwischen Datumswerten ermöglichen.

Standardmäßig werden Werte der Klasse Datum in R als JJJJ-MM-TT angezeigt. Später in diesem Abschnitt werden wir besprechen, wie du die Anzeige von Datumswerten ändern kannst.

Im Folgenden stellen wir zwei Methoden vor, um eine Spalte von Zeichenwerten in die Klasse Datum zu konvertieren.

<span style="color: darkgreen;">***TIPP:*** Du kannst die aktuelle Klasse einer Spalte mit **base** R-Funktion `class()`, wie `class(linelist$date_onset)`.</span>

### **Basis** R {.unnumbered}

`as.Date()` ist der Standard, **Basis** R-Funktion, um ein Objekt oder eine Spalte in die Klasse Datum zu konvertieren (beachte die Großschreibung von "D").

Die Verwendung von `as.Date()` erfordert, dass:

- Du *specify the **bestehende** Format des Rohzeichendatums* oder des Ursprungsdatums, wenn das Datum als Zahl angegeben wird (siehe Abschnitt über Excel-Datumsangaben)
- Bei der Verwendung in einer Zeichenspalte müssen alle Datumswerte genau dasselbe Format haben (ist dies nicht der Fall, versuche `parse_date()` aus der **parsedate** Paket)

**Erste** überprüfe die Klasse deiner Spalte mit `class()` von **Basis** R. Wenn du unsicher oder verwirrt über die Klasse deiner Daten bist (z. B. siehst du "POSIXct" usw.), kann es am einfachsten sein, die Spalte zunächst in die Klasse Character umzuwandeln mit `as.character()` zu konvertieren und sie dann in die Klasse Datum umzuwandeln.

**Zweite** innerhalb der `as.Date()` Funktion, die `format =` Argument, um R die *aktuelle* Format der Datumskomponenten mitteilt - welche Zeichen sich auf den Monat, den Tag und das Jahr beziehen und wie sie getrennt werden. Wenn deine Werte bereits in einem der Standard-Datumsformate von R vorliegen ("JJJJ-MM-TT" oder "JJJJ/MM/TT"), wird das `format =` Argument nicht notwendig.

An `format = ` gibst du eine Zeichenkette (in Anführungszeichen) an, die den *aktuelle* Datumsformat unter Verwendung der speziellen "strptime" Abkürzungen unten. Wenn deine Datumsangaben zum Beispiel das Format "TT/MM/JJJJ" haben, z. B. "24/04/1968", würdest du Folgendes verwenden `format = "%d/%m/%Y"` verwenden, um die Werte in Datumsangaben umzuwandeln. **Das Format muss in Anführungszeichen gesetzt werden. Und vergiss keine Schrägstriche oder Bindestriche!**

```{r, eval=F}
# Convert to class date
linelist <- linelist %>% 
  mutate(date_onset = as.Date(date_of_onset, format = "%d/%m/%Y"))
```

Die meisten strptime-Abkürzungen sind unten aufgeführt. Die vollständige Liste kannst du sehen, indem du `?strptime`.

%d = Tagesnummer des Monats (5, 17, 28, etc.)  
%j = Tagesnummer des Jahres (Julianischer Tag 001-366)  
%a = Abgekürzter Wochentag (Mo, Di, Mi, etc.)  
%A = Voller Wochentag (Montag, Dienstag, etc.)
%w = Wochentagsnummer (0-6, Sonntag ist 0)  
%u = Wochentagsnummer (1-7, Montag ist 1)  
%W = Wochennummer (00-53, Montag ist der Wochenanfang)  
%U = Wochennummer (01-53, Sonntag ist der Wochenbeginn)  
%m = Monatsnummer (z. B. 01, 02, 03, 04)  
%b = abgekürzter Monat (Jan, Feb, etc.)  
%B = Ganzer Monat (Januar, Februar, etc.)  
%y = 2-stelliges Jahr (z. B. 89)  
%Y = 4-stellige Jahreszahl (z. B. 1989)  
%h = Stunden (24-Stunden-Uhr)  
%m = Minuten  
%s = Sekunden
%z = Abweichung von der GMT  
%Z = Zeitzone (Zeichen)

<span style="color: darkgreen;">***TIPP:*** Die `format =` Argument der `as.Date()` ist *nicht* R mitzuteilen, welches Format die Daten haben sollen, sondern wie die Datumsbestandteile zu identifizieren sind *vor* du den Befehl ausführst.</span>

<span style="color: darkgreen;">***TIPP:*** Achte darauf, dass in der `format =` Argument die *Datumsteil-Trennzeichen* (z.B. /, - oder Leerzeichen), das in deinen Daten vorhanden ist.</span>

Sobald die Werte in der Klasse Datum sind, zeigt R sie standardmäßig im Standardformat an, also JJJJ-MM-TT.

### **lubridate** {.unnumbered}

Die Umwandlung von Zeichenobjekten in Datumsangaben kann durch die Verwendung der **lubridate** Paket. Dies ist ein **tidyverse** Paket, das die Arbeit mit Daten und Zeiten einfacher und konsistenter als in **base** R. Aus diesen Gründen, **lubridate** oft als das Standardpaket für Datum und Zeit angesehen und wird empfohlen, wenn du mit ihnen arbeitest.

Die **lubridate** Paket stellt verschiedene Hilfsfunktionen zur Verfügung, mit denen Zeichenobjekte auf intuitive Weise in Datumsangaben umgewandelt werden können, was einfacher ist als die Angabe des Formats in `as.Date()`. Diese Funktionen sind spezifisch für das grobe Datumsformat, erlauben aber eine Vielzahl von Trennzeichen und Synonymen für Datumsangaben (z.B. 01 vs Jan vs Januar) - sie sind nach Abkürzungen von Datumsformaten benannt.

```{r}
# install/load lubridate 
pacman::p_load(lubridate)
```

Die `ymd()` Funktion konvertiert flexibel Datumswerte, die als **Jahr, dann Monat, dann Tag**.

```{r}
# read date in year-month-day format
ymd("2020-10-11")
ymd("20201011")
```

Die `mdy()` Funktion konvertiert flexibel Datumswerte, die als **Monat, dann Tag, dann Jahr**.

```{r}
# read date in month-day-year format
mdy("10/11/2020")
mdy("Oct 11 20")
```

Die `dmy()` Funktion konvertiert flexibel Datumswerte, die als **Tag, dann Monat, dann Jahr**.

```{r}
# read date in day-month-year format
dmy("11 10 2020")
dmy("11 October 2020")
```

<!-- Die Befehle `as.character()` und `as.Date()` können optional kombiniert werden:   -->

<!-- ``{r eval=F} -->

<!-- linelist_cleaned$date_of_onset <- as.Date(as.character(linelist_cleaned$date_of_onset), format = "%d/%m/%Y") -->

<!-- ``` -->

Wenn du Piping verwendest, kann die Umwandlung einer Zeichenspalte in ein Datum mit **lubridate** könnte so aussehen:

```{r, eval=F}
linelist <- linelist %>%
  mutate(date_onset = lubridate::dmy(date_onset))
```

Wenn du fertig bist, kannst du Folgendes ausführen `class()` ausführen, um die Klasse der Spalte zu überprüfen

```{r, eval=F}
# Check the class of the column
class(linelist$date_onset)  
```

Wenn die Werte in der Klasse Datum sind, zeigt R sie standardmäßig im Standardformat an, also JJJJ-MM-TT.

Beachte, dass die oben genannten Funktionen am besten mit 4-stelligen Jahreszahlen funktionieren. Zweistellige Jahreszahlen können zu unerwarteten Ergebnissen führen, da lubridate versucht, das Jahrhundert zu erraten.

Um eine zweistellige Jahreszahl in eine vierstellige Jahreszahl umzuwandeln (alle im selben Jahrhundert), kannst du in Klassenzeichen umwandeln und dann die vorhandenen Ziffern mit einem Präfix kombinieren, indem du `str_glue()` aus der **stringr**Paket (siehe [Zeichen und Zeichenketten]). Dann konvertiere in ein Datum.

```{r}
two_digit_years <- c("15", "15", "16", "17")
str_glue("20{two_digit_years}")
```

### Spalten kombinieren {.unnumbered}

Du kannst die **lubridate** Funktionen `make_date()` und `make_datetime()` um mehrere numerische Spalten zu einer Datumsspalte zu kombinieren. Wenn du zum Beispiel numerische Spalten hast `onset_day`, `onset_month`, und `onset_year` in dem Datenrahmen `linelist`:

```{r, eval=F}
linelist <- linelist %>% 
  mutate(onset_date = make_date(year = onset_year, month = onset_month, day = onset_day))
```

<!-- ======================================================= -->

## Excel-Daten

Im Hintergrund speichern die meisten Programme Datumsangaben als Zahlen. R speichert Datumsangaben ab dem 1. Januar 1970. Wenn du also `as.numeric(as.Date("1970-01-01))` aufrufst, erhältst du `0`.

Microsoft Excel speichert Datumsangaben, deren Ursprung entweder der 30. Dezember 1899 (Windows) oder der 1. Januar 1904 (Mac) ist, abhängig von deinem Betriebssystem. Siehe dies [Microsoft-Anleitung](https://docs.microsoft.com/en-us/office/troubleshoot/excel/1900-and-1904-date-system) für weitere Informationen.

Excel-Datumsangaben werden oft als numerische Werte in R importiert und nicht als Zeichen. Wenn der Datensatz, den du aus Excel importiert hast, Datumsangaben in Form von Zahlen oder Zeichen wie "41369"... enthält, verwende `as.Date()` (oder **lubridate**'s `as_date()` Funktion) zu konvertieren, aber **anstatt ein "Format" wie oben anzugeben, gib das Excel-Ursprungsdatum an** an das Argument `origin = `.

Das funktioniert nicht, wenn das Excel-Datum in R als Zeichentyp gespeichert ist. Achte also darauf, dass die Zahl der Klasse Numerisch angehört!

<span style="color: black;">***HINWEIS:*** Du solltest das Ursprungsdatum im Standard-Datumsformat von R ("JJJJ-MM-TT") angeben.</span>

```{r, eval=FALSE}
# An example of providing the Excel 'origin date' when converting Excel number dates
data_cleaned <- data %>% 
  mutate(date_onset = as.numeric(date_onset)) %>%   # ensure class is numeric
  mutate(date_onset = as.Date(date_onset, origin = "1899-12-30")) # convert to date using Excel origin
```

<!-- ======================================================= -->

## Unordentliche Termine

Die Funktion `parse_date()` aus dem **parsedate** Paket versucht, eine "chaotische" Datumsspalte zu lesen, die Datumsangaben in vielen verschiedenen Formaten enthält, und die Daten in ein Standardformat zu konvertieren. Du kannst [mehr online lesen über `parse_date()`](https://readr.tidyverse.org/reference/parse_datetime.html).

Zum Beispiel `parse_date()` einen Vektor der folgenden Zeichendaten "03 Jan 2018", "07/03/1982" und "08/20/85" und konvertiert sie in die Klasse Datum als: `2018-01-03`, `1982-03-07`, und `1985-08-20`.

```{r}
parsedate::parse_date(c("03 January 2018",
                        "07/03/1982",
                        "08/20/85"))
```

```{r, eval=FALSE}
# An example using parse_date() on the column date_onset
linelist <- linelist %>%      
  mutate(date_onset = parse_date(date_onset))
```

<!-- ======================================================= -->

## Arbeiten mit der Datum-Zeit-Klasse

Wie bereits erwähnt, unterstützt R auch eine `datetime` Klasse - eine Spalte, die das Datum enthält **und** Zeitinformationen enthält. Wie bei der `Date` Klasse, müssen diese oft von `character` Objekten in `datetime` Objekte umgewandelt werden.

### Daten mit Zeiten umrechnen {.unnumbered}

A Standard `datetime` Objekt wird zuerst mit dem Datum formatiert, gefolgt von einer Zeitkomponente - zum Beispiel *01 Jan 2020, 16:30*. Wie bei den Datumsangaben gibt es viele Möglichkeiten, diese zu formatieren, und es gibt zahlreiche Genauigkeitsstufen (Stunden, Minuten, Sekunden), die angegeben werden können.

Zum Glück, **lubridate** auch Hilfsfunktionen, die dabei helfen, diese Zeichenketten in `datetime` Objekte umzuwandeln. Diese Funktionen sind Erweiterungen der date-Hilfsfunktionen, mit `_h` (nur Stunden angegeben), `_hm` (mit Stunden und Minuten), oder `_hms` (mit Stunden, Minuten und Sekunden) am Ende angehängt (z. B. `dmy_hms()`). Diese können wie gezeigt verwendet werden:

datetime mit nur Stunden in datetime-Objekt konvertieren

```{r}
ymd_h("2020-01-01 16hrs")
ymd_h("2020-01-01 4PM")
```

datetime mit Stunden und Minuten in ein datetime-Objekt konvertieren

```{r}
dmy_hm("01 January 2020 16:20")
```

datetime mit Stunden, Minuten und Sekunden in ein datetime-Objekt konvertieren

```{r}
mdy_hms("01 January 2020, 16:20:40")
```

Du kannst die Zeitzone angeben, aber sie wird ignoriert. Siehe den Abschnitt über Zeitzonen weiter unten auf dieser Seite.

```{r}
mdy_hms("01 January 2020, 16:20:40 PST")

```

Wenn du mit einem Datenrahmen arbeitest, können Zeit- und Datumsspalten kombiniert werden, um eine Datetime-Spalte zu erstellen. `str_glue()` von **stringr** Paket und eine entsprechende **lubridate**Funktion. Siehe die Seite über [Zeichen und Zeichenketten] für Details zu**stringr**.

In diesem Beispiel wird die `linelist` Datenrahmen eine Spalte im Format "Stunden:Minuten". Um diese in eine Datumszeit zu konvertieren, folgen wir ein paar Schritten:

1) Erstelle eine "saubere" Aufnahmezeitspalte, in der fehlende Werte mit dem Spaltenmedian aufgefüllt werden. Wir tun dies, weil **lubridate** nicht mit fehlenden Werten arbeiten kann. Kombiniere sie mit der Spalte `date_hospitalisation` und verwende dann die Funktion `ymd_hm()` umzuwandeln.

```{r, eval=FALSE}
# packages
pacman::p_load(tidyverse, lubridate, stringr)

# time_admission is a column in hours:minutes
linelist <- linelist %>%
  
  # when time of admission is not given, assign the median admission time
  mutate(
    time_admission_clean = ifelse(
      is.na(time_admission),         # if time is missing
      median(time_admission),        # assign the median
      time_admission                 # if not missing keep as is
  ) %>%
  
    # use str_glue() to combine date and time columns to create one character column
    # and then use ymd_hm() to convert it to datetime
  mutate(
    date_time_of_admission = str_glue("{date_hospitalisation} {time_admission_clean}") %>% 
      ymd_hm()
  )

```

### Zeiten allein umrechnen {.unnumbered}

Wenn deine Daten nur eine Zeichenzeit (Stunden und Minuten) enthalten, kannst du sie als Zeiten konvertieren und manipulieren, indem du `strptime()` von **Basis** R. Um zum Beispiel die Differenz zwischen zwei dieser Zeiten zu ermitteln:

```{r}
# raw character times
time1 <- "13:45" 
time2 <- "15:20"

# Times converted to a datetime class
time1_clean <- strptime(time1, format = "%H:%M")
time2_clean <- strptime(time2, format = "%H:%M")

# Difference is of class "difftime" by default, here converted to numeric hours 
as.numeric(time2_clean - time1_clean)   # difference in hours

```

Beachte jedoch, dass ohne Angabe eines Datumswertes davon ausgegangen wird, dass das Datum heute ist. Um ein String-Datum und eine String-Zeit miteinander zu kombinieren, siehe **stringr** im Abschnitt weiter oben. Lies mehr über `strptime()` [hier](https://rdrr.io/r/base/strptime.html).

Um einstellige Zahlen in zweistellige umzuwandeln (z.B. um Stunden oder Minuten mit führenden Nullen "aufzufüllen", um 2 Stellen zu erhalten), siehe dies [ Abschnitt "Auffülllänge" auf der Seite Zeichen und Zeichenketten](#str_pad).

### Zeit extrahieren {.unnumbered}

Du kannst Elemente einer Zeit extrahieren mit `hour()`, `minute()`, oder `second()` von **lubridate**.

Hier ist ein Beispiel für die Extraktion der Stunde und die anschließende Klassifizierung nach Tageszeiten. Wir beginnen mit der Spalte `time_admission` die die Klasse Zeichen im Format "HH:MM" enthält. Zuerst wird die `strptime()` wie oben beschrieben verwendet, um die Zeichen in die Datetime-Klasse umzuwandeln. Dann wird die Stunde extrahiert mit `hour()` extrahiert, was eine Zahl von 0-24 ergibt. Schließlich wird eine Spalte `time_period` erstellt, indem die Logik mit `case_when()` erstellt, um die Zeilen anhand der Uhrzeit ihrer Aufnahme in Vormittag/Nachmittag/Abend/Nacht einzuteilen.

```{r}
linelist <- linelist %>%
  mutate(hour_admit = hour(strptime(time_admission, format = "%H:%M"))) %>%
  mutate(time_period = case_when(
    hour_admit > 06 & hour_admit < 12 ~ "Morning",
    hour_admit >= 12 & hour_admit < 17 ~ "Afternoon",
    hour_admit >= 17 & hour_admit < 21 ~ "Evening",
    hour_admit >=21 | hour_admit <= 6 ~ "Night"))
```

Um mehr zu erfahren über `case_when()`siehe die Seite über [Datenbereinigung und Kernfunktionen].

<!-- ======================================================= -->

## Arbeiten mit Daten

`lubridate` kann auch für eine Vielzahl anderer Funktionen verwendet werden, wie zum Beispiel **Aspekte eines Datums/einer Uhrzeit extrahieren**, **Durchführen von Datumsarithmetik** oder **Berechnung von Datumsintervallen**

Hier legen wir ein Datum fest, das wir für die Beispiele verwenden:

```{r}
# create object of class Date
example_date <- ymd("2020-03-01")
```

### Datumskomponenten extrahieren {.unnumbered}

Du kannst allgemeine Aspekte wie Monat, Tag und Wochentag extrahieren:

```{r}
month(example_date)  # month number
day(example_date)    # day (number) of the month
wday(example_date)   # day number of the week (1-7)
```

Du kannst auch Zeitkomponenten aus einer `datetime` Objekt oder einer Spalte extrahieren. Das kann nützlich sein, wenn du dir die Verteilung der Aufnahmezeiten ansehen willst.

```{r, eval=F}
example_datetime <- ymd_hm("2020-03-01 14:45")

hour(example_datetime)     # extract hour
minute(example_datetime)   # extract minute
second(example_datetime)   # extract second
```

Es gibt mehrere Optionen, um Wochen abzurufen. Siehe den Abschnitt über epidemiologische Wochen weiter unten.

Beachte, dass du, wenn du *anzeigen* Wenn du ein Datum auf eine bestimmte Art und Weise anzeigen lassen willst (z. B. "Januar 2020" oder "Donnerstag, 20. März" oder "Woche 20, 1977"), kannst du dies flexibler tun, wie im Abschnitt über die Datumsanzeige beschrieben.

### Datumsmathematik {.unnumbered}

Du kannst eine bestimmte Anzahl von Tagen oder Wochen hinzufügen, indem du die entsprechende Funktion aus **lubridate**.

```{r}
# add 3 days to this date
example_date + days(3)
  
# add 7 weeks and subtract two days from this date
example_date + weeks(7) - days(2)
```

### Datumsintervalle {.unnumbered}

Die Differenz zwischen den Daten kann berechnet werden durch:

1. Sicherstellen, dass beide Daten ein Klassendatum sind
2. Verwende die Subtraktion, um die "difftime"-Differenz zwischen den beiden Daten zu ermitteln
3. Falls nötig, konvertiere das Ergebnis in eine numerische Klasse, um weitere mathematische Berechnungen durchzuführen

Unten wird das Intervall zwischen zwei Daten berechnet und angezeigt. Du kannst Intervalle ermitteln, indem du das Subtraktionssymbol "Minus" für Werte der Klasse Datum verwendest. Beachte jedoch, dass die Klasse des zurückgegebenen Wertes "difftime" ist, wie unten dargestellt, und in numerisch umgewandelt werden muss.

```{r}
# find the interval between this date and Feb 20 2020 
output <- example_date - ymd("2020-02-20")
output    # print
class(output)
```

Um weitere Operationen mit einer "difftime" durchzuführen, musst du sie in numerisch umwandeln mit `as.numeric()`.

Das alles kann zusammengeführt werden, um mit Daten zu arbeiten - zum Beispiel:

```{r, eval=F}
pacman::p_load(lubridate, tidyverse)   # load packages

linelist <- linelist %>%
  
  # convert date of onset from character to date objects by specifying dmy format
  mutate(date_onset = dmy(date_onset),
         date_hospitalisation = dmy(date_hospitalisation)) %>%
  
  # filter out all cases without onset in march
  filter(month(date_onset) == 3) %>%
    
  # find the difference in days between onset and hospitalisation
  mutate(days_onset_to_hosp = date_hospitalisation - date_of_onset)
```

Wenn in einem Datenrahmen eines der oben genannten Daten fehlt, schlägt der Vorgang für diese Zeile fehl. Das Ergebnis ist eine `NA` statt eines numerischen Wertes. Wenn du diese Spalte für Berechnungen verwendest, musst du die Option `na.rm = ` Argument auf `TRUE`. Zum Beispiel:

```{r, eval=FALSE}
# calculate the median number of days to hospitalisation for all cases where data are available
median(linelist_delay$days_onset_to_hosp, na.rm = T)
```

<!-- ======================================================= -->

## Datumsanzeige

Wenn das Datum die richtige Klasse hat, möchtest du es oft anders anzeigen lassen, zum Beispiel als "Montag, 05. Januar" statt als "2018-01-05". Vielleicht möchtest du die Anzeige auch anpassen, um die Zeilen nach den angezeigten Datumselementen zu gruppieren - zum Beispiel nach Monat und Jahr.

### `format()` {.unnumbered}

Stelle die Datumsanzeige mit der Taste **Basis** R-Funktion `format()`. Diese Funktion akzeptiert eine Zeichenkette (in Anführungszeichen), die den *gewünschten* Ausgabeformat in den "%"-Strptime-Abkürzungen angibt (die gleiche Syntax wie in `as.Date()`). Nachfolgend sind die meisten gängigen Abkürzungen aufgeführt.

Hinweis: Die Verwendung `format()` werden die Werte in Klassenzeichen umgewandelt, daher wird dies in der Regel gegen Ende einer Analyse oder nur zu Anzeigezwecken verwendet! Du kannst die vollständige Liste sehen, indem du `?strptime`.

%d = Tagesnummer des Monats (5, 17, 28, etc.)  
%j = Tagesnummer des Jahres (Julianischer Tag 001-366)  
%a = Abgekürzter Wochentag (Mo, Di, Mi, etc.)  
%A = Voller Wochentag (Montag, Dienstag, etc.)  
%w = Wochentagsnummer (0-6, Sonntag ist 0)  
%u = Wochentagsnummer (1-7, Montag ist 1)  
%W = Wochennummer (00-53, Montag ist der Wochenanfang)  
%U = Wochennummer (01-53, Sonntag ist der Wochenbeginn)  
%m = Monatsnummer (z. B. 01, 02, 03, 04)  
%b = abgekürzter Monat (Jan, Feb, etc.)  
%B = Ganzer Monat (Januar, Februar, etc.)  
%y = 2-stelliges Jahr (z. B. 89)  
%Y = 4-stellige Jahreszahl (z. B. 1989)  
%h = Stunden (24-Stunden-Uhr)  
%m = Minuten  
%s = Sekunden  
%z = Abweichung von der GMT  
%Z = Zeitzone (Zeichen)

Ein Beispiel für die Formatierung des heutigen Datums:

```{r}
# today's date, with formatting
format(Sys.Date(), format = "%d %B %Y")

# easy way to get full date and time (default formatting)
date()

# formatted combined date, time, and time zone using str_glue() function
str_glue("{format(Sys.Date(), format = '%A, %B %d %Y, %z  %Z, ')}{format(Sys.time(), format = '%H:%M:%S')}")

# Using format to display weeks
format(Sys.Date(), "%Y Week %W")
```

Beachten Sie, dass bei der Verwendung von `str_glue()` verwenden, solltest du beachten, dass du innerhalb der erwarteten doppelten Anführungszeichen " nur einfache Anführungszeichen verwenden solltest (wie oben).

### Monat-Jahr {.unnumbered}

Um eine Datumsspalte in das Format Monat-Jahr umzuwandeln, empfehlen wir dir die Funktion `as.yearmon()` aus der **zoo** Paket. Dadurch wird das Datum in die Klasse "yearmon" umgewandelt und die richtige Reihenfolge beibehalten. Im Gegensatz dazu wird bei der Verwendung von `format(column, "%Y %B")` wird dagegen in die Klasse "Character" umgewandelt und die Werte werden (fälschlicherweise) alphabetisch geordnet.

Unten, eine neue Spalte `yearmonth` erstellt aus der Spalte `date_onset` erstellt, indem die `as.yearmon()` Funktion. Die standardmäßige (korrekte) Reihenfolge der resultierenden Werte wird in der Tabelle angezeigt.

```{r}
# create new column 
test_zoo <- linelist %>% 
     mutate(yearmonth = zoo::as.yearmon(date_onset))

# print table
table(test_zoo$yearmon)
```

Im Gegensatz dazu kannst du sehen, wie nur mit `format()` zwar das gewünschte Anzeigeformat, aber nicht die richtige Reihenfolge erreicht.

```{r}
# create new column
test_format <- linelist %>% 
     mutate(yearmonth = format(date_onset, "%b %Y"))

# print table
table(test_format$yearmon)
```

Hinweis: Wenn du innerhalb einer `ggplot()` und anpassen möchtest, wie die Daten *angezeigt* anpassen möchten, kann es ausreichen, ein strptime-Format für die `date_labels = ` Argument in `scale_x_date()` - kannst du verwenden `"%b %Y"` oder `"%Y %b"`. Siehe die [ggplot-Tipps] Seite.

**zoo** bietet auch die Funktion `as.yearqtr()` an, und du kannst die Funktion `scale_x_yearmon()` wenn du `ggplot()`.

<!-- ======================================================= -->

## Epidemiologische Wochen {#dates\_epi\_wks}

### **lubridate** {.unnumbered}

Siehe die Seite über [Daten gruppieren] für ausführlichere Beispiele zur Gruppierung von Daten nach Datum. Im Folgenden beschreiben wir kurz die Gruppierung von Daten nach Wochen.

Wir empfehlen generell die Verwendung der `floor_date()` Funktion von **lubridate** mit dem Argument `unit = "week"`. Dies rundet das Datum auf den "Anfang" der Woche ab, wie er durch das Argument `week_start = `. Der Standard-Wochenanfang ist 1 (für Montag), aber du kannst jeden beliebigen Wochentag als Anfang angeben (z. B. 7 für Sonntag). `floor_date()` ist vielseitig und kann zum Abrunden auf andere Zeiteinheiten verwendet werden, indem du `unit = ` auf "Sekunde", "Minute", "Stunde", "Tag", "Monat" oder "Jahr".

Der zurückgegebene Wert ist das Startdatum der Woche in der Date-Klasse. Die Date-Klasse ist beim Plotten der Daten nützlich, da sie leicht erkannt und korrekt geordnet werden kann. `ggplot()`.

Wenn du nur an der Anpassung von Daten an *anzeigen* nach Woche in einem Diagramm anzeigen möchtest, lies den Abschnitt über die Datumsanzeige auf dieser Seite. Wenn du zum Beispiel eine Epikurve zeichnest, kannst du die Datumsanzeige formatieren, indem du die gewünschte Strptime-"%"-Nomenklatur angibst. Verwende z. B. "%Y-%W" oder "%Y-%U", um das Jahr und die Wochennummer (bei Wochenbeginn am Montag bzw. Sonntag) anzuzeigen.

### Wöchentliche Zählungen {.unnumbered}

Siehe die Seite über [Daten gruppieren] für eine ausführliche Erklärung der Gruppierung von Daten mit`count()`, `group_by()`, und `summarise()`. Im Folgenden findest du ein kurzes Beispiel.

1) Erstelle eine neue Spalte "Woche" mit `mutate()`, mit `floor_date()` mit `unit = "week"`
2) Zählung der Zeilen (Fälle) pro Woche mit `count()` Filtert alle Fälle mit fehlendem Datum heraus
3) Beende mit `complete()` von **tidyr** um sicherzustellen, dass *alle* Wochen in den Daten auftauchen - auch die, die keine Zeilen/Fälle enthalten. Standardmäßig sind die Zählwerte für alle "neuen" Zeilen NA, aber du kannst sie mit der Option `fill = ` Argument, das eine benannte Liste erwartet (siehe unten, `n` ist der Name der Zählspalte).

```{r}
# Make aggregated dataset of weekly case counts
weekly_counts <- linelist %>% 
  drop_na(date_onset) %>%             # remove cases missing onset date
  mutate(weekly_cases = floor_date(   # make new column, week of onset
    date_onset,
    unit = "week")) %>%            
  count(weekly_cases) %>%           # group data by week and count rows per group (creates column 'n')
  tidyr::complete(                  # ensure all weeks are present, even those with no cases reported
    weekly_cases = seq.Date(          # re-define the "weekly_cases" column as a complete sequence,
      from = min(weekly_cases),       # from the minimum date
      to = max(weekly_cases),         # to the maxiumum date
      by = "week"),                   # by weeks
    fill = list(n = 0))             # fill-in NAs in the n counts column with 0
```

Hier sind die ersten Zeilen des resultierenden Datenrahmens:

```{r, message=FALSE, echo=F}
DT::datatable(head(weekly_counts, 20), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

### Epiweek Alternativen {.unnumbered}

Beachte, dass **lubridate** auch Funktionen hat `week()`, `epiweek()`, und `isoweek()`, die jeweils leicht unterschiedliche Startdaten und andere Feinheiten haben. Generell gilt jedoch, `floor_date()` alles sein, was du brauchst. Lies die Details zu diesen Funktionen, indem du `?week` in die Konsole eingibst oder die Dokumentation liest [hier](https://www.rdocumentation.org/packages/lubridate/versions/1.7.4/topics/week).

Du könntest auch das Paket **aweek** um epidemiologische Wochen zu setzen. Du kannst mehr darüber lesen [auf der RECON-Website](https://www.repidemicsconsortium.org/aweek/). Es hat die Funktionen `date2week()` und `week2date()` in denen du den Wochenstarttag einstellen kannst mit `week_start = "Monday"`. Dieses Paket ist am einfachsten, wenn du Ausgaben im "Wochen"-Stil möchtest (z.B. "2020-W12"). Ein weiterer Vorteil von **aweek** ist, dass wenn `date2week()` auf eine Datumsspalte angewendet wird, ist die zurückgegebene Spalte (Wochenformat) automatisch von der Klasse Factor und enthält die Werte für alle Wochen in der Zeitspanne (dies vermeidet den zusätzlichen Schritt der `complete()` wie oben beschrieben). Allerdings, **aweek** verfügt jedoch nicht über die Möglichkeit, Daten auf andere Zeiteinheiten wie Monate, Jahre usw. zu runden.

Eine andere Alternative für Zeitreihen, die auch gut funktioniert, um ein "Wochen"-Format ("2020 W12") anzuzeigen, ist `yearweek()` aus dem Paket **tsibble**, wie auf der Seite über [Zeitreihen und Ausbruchserkennung].

<!-- ======================================================= -->

## Umrechnung von Daten/Zeitzonen

Wenn Daten in verschiedenen Zeitzonen vorliegen, kann es oft wichtig sein, diese Daten in einer einheitlichen Zeitzone zu standardisieren. Dies kann eine weitere Herausforderung darstellen, da die Zeitzonen-Komponente der Daten in den meisten Fällen manuell kodiert werden muss.

In R wird jede *datetime* Objekt eine Zeitzonen-Komponente. Standardmäßig tragen alle datetime-Objekte die lokale Zeitzone des verwendeten Computers - dies ist in der Regel spezifisch für eine *Standort* als eine benannte Zeitzone, da sich die Zeitzonen aufgrund der Sommerzeit an verschiedenen Orten oft ändern. Es ist nicht möglich, Zeitzonen ohne eine Zeitkomponente eines Datums genau auszugleichen, da das Ereignis, das eine Datumsspalte darstellt, keiner bestimmten Zeit zugeordnet werden kann und daher Zeitverschiebungen, die in Stunden gemessen werden, nicht sinnvoll berücksichtigt werden können.

Um mit Zeitzonen umzugehen, gibt es in lubridate eine Reihe von Hilfsfunktionen, mit denen die Zeitzone eines datetime-Objekts von der lokalen Zeitzone in eine andere Zeitzone geändert werden kann. Zeitzonen werden festgelegt, indem dem datetime-Objekt eine gültige Zeitzone der tz-Datenbank zugewiesen wird. Eine Liste davon findest du hier - wenn der Ort, dessen Daten du verwendest, nicht auf dieser Liste steht, sind nahegelegene Großstädte in der Zeitzone verfügbar und erfüllen denselben Zweck.

[https://en.wikipedia.org/wiki/List\_of\_tz\_database\_time\_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

```{r}
# assign the current time to a column
time_now <- Sys.time()
time_now

# use with_tz() to assign a new timezone to the column, while CHANGING the clock time
time_london_real <- with_tz(time_now, "Europe/London")

# use force_tz() to assign a new timezone to the column, while KEEPING the clock time
time_london_local <- force_tz(time_now, "Europe/London")


# note that as long as the computer that was used to run this code is NOT set to London time,
# there will be a difference in the times 
# (the number of hours difference from the computers time zone to london)
time_london_real - time_london_local

```

Dies mag sehr abstrakt erscheinen und wird oft nicht benötigt, wenn der/die Nutzer/in nicht über Zeitzonen hinweg arbeitet.

<!-- ======================================================= -->

## Nachlaufende und vorlaufende Berechnungen

`lead()` und `lag()` sind Funktionen aus der **dplyr** Paket, die helfen, frühere (verzögerte) oder nachfolgende (führende) Werte in einem Vektor zu finden - typischerweise ein numerischer oder Datumsvektor. Dies ist nützlich bei Berechnungen von Veränderungen/Differenzen zwischen Zeiteinheiten.

```{r, echo=F}
counts <- import(here("data", "example", "district_weekly_count_data.xlsx")) %>% 
  filter(District == "Nibari") %>% 
  mutate(Date = as.Date(Date),
         week_start = lubridate::floor_date(Date, "week")) %>%
  group_by(week_start) %>% 
  summarize(cases_wk = sum(Cases, na.rm=T)) %>% 
  complete(week_start = seq.Date(min(week_start), max(week_start), by = "week"), fill = list(cases_wk = 0))
```

Nehmen wir an, du möchtest die Differenz der Fälle zwischen der aktuellen Woche und der vorherigen Woche berechnen. Die Daten werden zunächst in wöchentlichen Zählungen bereitgestellt, wie unten gezeigt.

```{r, message=FALSE, echo=F}
DT::datatable(counts, rownames = FALSE,  options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

**Bei der Verwendung von `lag()` oder `lead()` ist die Reihenfolge der Zeilen im Datenrahmen sehr wichtig! - achte darauf, ob deine Daten/Zahlen aufsteigend oder absteigend sind**

Erstelle zunächst eine neue Spalte, die den Wert der vorherigen (verzögerten) Woche enthält.

- Kontrolliere die Anzahl der Einheiten zurück/vorwärts mit `n = ` (muss eine nicht-negative ganze Zahl sein)
- verwenden `default = ` um den Wert festzulegen, der in nicht existierende Zeilen gesetzt wird (z. B. die erste Zeile, für die es keinen verzögerten Wert gibt). Standardmäßig ist dies `NA`.
- verwenden `order_by = TRUE` wenn deine Zeilen nicht nach deiner Referenzspalte geordnet sind

```{r}
counts <- counts %>% 
  mutate(cases_prev_wk = lag(cases_wk, n = 1))
```

```{r, message=FALSE, echo=F}
DT::datatable(counts, rownames = FALSE,  options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Als nächstes erstellst du eine neue Spalte, die die Differenz zwischen den beiden Fallspalten darstellt:

```{r}
counts <- counts %>% 
  mutate(cases_prev_wk = lag(cases_wk, n = 1),
         case_diff = cases_wk - cases_prev_wk)
```

```{r, message=FALSE, echo=F}
DT::datatable(counts, rownames = FALSE,  options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Du kannst mehr darüber lesen `lead()` und `lag()` in der Dokumentation [hier](https://dplyr.tidyverse.org/reference/lead-lag.html) oder durch Eingabe von `?lag` in deine Konsole eingibst.

<!-- ======================================================= -->

## Ressourcen

**lubridate** [aufgeräumte Seite](https://lubridate.tidyverse.org/)  
**lubridate** RStudio [Spickzettel](https://rawgit.com/rstudio/cheatsheets/master/lubridate.pdf)  
R für Data Science Seite auf [Daten und Zeiten](https://r4ds.had.co.nz/dates-and-times.html)  
[Online-Tutorial](https://www.statmethods.net/input/dates.html)
[Datumsformate](https://www.r-bloggers.com/2013/08/date-formats-in-r/)


