# R Grundlagen {#rbasics}

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "basics_header_close.png"))
```

Willkommen!

Diese Seite gibt einen Überblick über die Grundlagen von R. Sie ist nicht als umfassendes Tutorial gedacht, aber sie vermittelt die Grundlagen und kann nützlich sein, um dein Gedächtnis aufzufrischen. Der Abschnitt über [Ressourcen zum Lernen](#learning) verweist auf umfassendere Tutorials.

Teile dieser Seite wurden mit Genehmigung der [R4Epis Projekt](https://r4epis.netlify.app/).

Siehe die Seite zum [Umstieg auf R] für Tipps zum Umstieg von STATA, SAS oder Excel auf R.

```{r, echo=F}
# import the cleaned ebola linelist
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
pacman::p_load(apyramid)
```

<!-- ======================================================= -->

## Warum R benutzen?

Wie auf der Website [R-Projekt-Website](https://www.r-project.org/about.html) ist R eine Programmiersprache und Umgebung für statistische Berechnungen und Grafiken. Sie ist sehr vielseitig, erweiterbar und wird von der Gemeinschaft getragen.

**Kosten**

Die Nutzung von R ist kostenlos! In der Community gibt es eine starke Ethik für kostenloses und quelloffenes Material.

**Reproduzierbarkeit**

Wenn du deine Datenverwaltung und -analyse in einer Programmiersprache durchführst (im Vergleich zu Excel oder einem anderen primär auf Mausklicks basierenden/manuellen Tool), verbessert sich **Reproduzierbarkeit** macht **Fehlererkennung** und erleichtert dir die Arbeit.

**Gemeinschaft**

Die R-Nutzergemeinschaft ist riesig und kooperativ. Täglich werden neue Pakete und Werkzeuge zur Lösung von realen Problemen entwickelt und von der Nutzergemeinschaft geprüft. Ein Beispiel, [R-Ladies](https://rladies.org/) ist eine weltweite Organisation, die es sich zur Aufgabe gemacht hat, die Geschlechtervielfalt in der R-Gemeinschaft zu fördern. Sie ist eine der größten Organisationen von R-Nutzern. Wahrscheinlich gibt es auch eine Ortsgruppe in deiner Nähe!

## Schlüsselbegriffe

**RStudio** - RStudio ist eine grafische Benutzeroberfläche (GUI) zur einfacheren Nutzung von **R**. Mehr lesen [im Abschnitt RStudio](#rstudio).

**Objekte** - Alles, was du in R speicherst - Datensätze, Variablen, eine Liste von Ortsnamen, eine Gesamtbevölkerungszahl, sogar Ausgaben wie Diagramme - sind *Objekte* die *einen Namen zugewiesen bekommen* und *kann referenziert werden* in späteren Befehlen. Mehr lesen [im Abschnitt Objekte](#objects).

**Funktionen** - Eine Funktion ist eine Code-Operation, die Eingaben akzeptiert und eine transformierte Ausgabe zurückgibt. Mehr lesen [im Abschnitt Funktionen](#functions).

**Pakete** - Ein R-Paket ist ein gemeinsam nutzbares Bündel von Funktionen. Mehr lesen [im Abschnitt Pakete](#packages).

**Skripte** - Ein Skript ist eine Dokumentendatei, die deine Befehle enthält. Mehr lesen [im Abschnitt Skripte](#scripts)

## Ressourcen zum Lernen {#learning}

### Ressourcen innerhalb von RStudio {.unnumbered}

**Hilfe-Dokumentation**

Auf der Registerkarte "Hilfe" von RStudio findest du die Dokumentation zu R-Paketen und bestimmten Funktionen. Diese befindet sich in dem Bereich, der auch Dateien, Diagramme und Pakete enthält (normalerweise im unteren rechten Bereich). Als Abkürzung kannst du auch den Namen eines Pakets oder einer Funktion nach einem Fragezeichen in die R-Konsole eingeben, um die entsprechende Hilfeseite zu öffnen. Setze keine Klammern.

Zum Beispiel: `?filter` oder `?diagrammeR`.

**Interaktive Tutorials**

Es gibt mehrere Möglichkeiten, R interaktiv zu lernen *innerhalb von* RStudio.

RStudio selbst bietet ein Tutorial-Fenster, das von der [**learnr**](https://blog.rstudio.com/2020/02/25/rstudio-1-3-integrated-tutorials/) R-Paket. Installiere einfach dieses Paket und öffne ein Tutorial über die neue Registerkarte "Tutorial" in der oberen rechten RStudio-Leiste (die auch die Registerkarten Umgebung und Verlauf enthält).

Das R-Paket [**swirl**](https://swirlstats.com/) bietet interaktive Kurse in der R-Konsole an. Installiere und lade dieses Paket und führe dann den Befehl `swirl()` (leere Klammern) in der R-Konsole aus. Du wirst sehen, dass in der Konsole Eingabeaufforderungen erscheinen. Reagiere, indem du in der Konsole tippst. Sie wird dich durch einen Kurs deiner Wahl führen.

### Cheatsheets {.unnumbered}

Es gibt viele PDF-"Cheatsheets" auf der Website [RStudio-Website](https://rstudio.com/resources/cheatsheets/) zum Beispiel:

- Faktoren mit **forcats** paket
- Termine und Zeiten mit **lubridate** paket
- Schnüre mit **stringr** paket
- iterative Operationen mit **purrr** Paket
- Datenimport\\
- Datenumwandlung Cheatsheet mit **dplyr** paket
- R Markdown (zum Erstellen von Dokumenten wie PDF, Word, Powerpoint...)\\
- Shiny (um interaktive Webanwendungen zu erstellen)\\
- Datenvisualisierung mit **ggplot2** paket
- Kartographie (GIS)\\
- **Merkblatt** Paket (interaktive Karten)\\
- Python mit R (**netzartig** Paket)

Dies ist eine Online-Ressource speziell für [Excel-Benutzer](https://jules32.github.io/r-for-excel-users/)

### Twitter {.unnumbered}

R hat eine lebendige Twitter-Community, in der du Tipps, Abkürzungen und Neuigkeiten erfahren kannst - folge diesen Accounts:

- Folge uns! [@epiRhandbook](https://twitter.com/epirhandbook)\\
- R Funktion A Tag [@rfuntionaday](https://twitter.com/rfunctionaday) ist eine *unglaubliche* Ressource\\
- R für Datenwissenschaft [@rstats4ds](https://twitter.com/rstats4ds?lang=en)\\
- RStudio [@RStudio](https://twitter.com/rstudio?lang=en)\\
- RStudio Tipps [@rstudiotips](https://twitter.com/rstudiotips)\\
- R-Blogger [@Rbloggers](https://twitter.com/Rbloggers)\\
- R-Ladies [@RLadiesGlobal](https://twitter.com/RLadiesGlobal)\\
- Hadley Wickham [@hadleywickham](https://twitter.com/hadleywickham?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor)

Auch:

**\#epitwitter** und **\#rstats**

### Kostenlose Online-Ressourcen {.unnumbered}

Ein maßgeblicher Text ist das [R für Datenwissenschaft](https://r4ds.had.co.nz/) Buch von Garrett Grolemund und Hadley Wickham

Die [R4Epis](https://r4epis.netlify.app/) Projekt-Website zielt darauf ab, "standardisierte Tools zur Datenbereinigung, -analyse und -berichterstattung zu entwickeln, die gängige Arten von Ausbrüchen und bevölkerungsbasierten Erhebungen abdecken, die in einem MSF-Notfallszenario durchgeführt werden". Du findest dort R-Grundlagen-Schulungsmaterial, Vorlagen für RMarkdown-Berichte über Ausbrüche und Erhebungen sowie Tutorials, die dir bei der Einrichtung helfen.

### Andere Sprachen als Englisch {.unnumbered}

[Materiales de RStudio en Español](https://www.rstudio.com/collections/espanol/)

[Einführung in R und Tidyverse (französisch)](https://juba.github.io/tidyverse/index.html)

<!-- ======================================================= -->

## Installation

### R und RStudio {.unnumbered}

**Wie man R installiert**

Besuche diese Website [https://www.r-project.org/](https://www.r-project.org/) und lade die neueste Version von R herunter, die für deinen Computer geeignet ist.

**So installierst du RStudio**

Besuche diese Website [https://rstudio.com/products/rstudio/download/](https://rstudio.com/products/rstudio/download/) und lade die neueste kostenlose Desktop-Version von RStudio herunter, die für deinen Computer geeignet ist.

**Berechtigungen**  
Beachte, dass du R und RStudio auf einem Laufwerk installieren solltest, auf dem du Lese- und Schreibrechte hast. Andernfalls wird deine Fähigkeit, R-Pakete zu installieren (was häufig vorkommt), beeinträchtigt. Wenn du Probleme hast, versuche RStudio zu öffnen, indem du mit der rechten Maustaste auf das Symbol klickst und "Als Administrator ausführen" auswählst. Weitere Tipps findest du auf der Seite [R auf Netzlaufwerken].

**Wie man R und RStudio aktualisiert**

Deine Version von R wird beim Start in der R-Konsole angezeigt. Du kannst auch Folgendes ausführen `sessionInfo()`.

Um R zu aktualisieren, besuche die oben genannte Website und installiere R neu. Alternativ kannst du die **installr** Paket (unter Windows) verwenden, indem du `installr::updateR()`. Dadurch werden Dialogfelder geöffnet, die dir helfen, die neueste R-Version herunterzuladen und deine Pakete auf die neue R-Version zu aktualisieren. Weitere Details findest du in der **installr** [Dokumentation](https://www.r-project.org/nosvn/pandoc/installr.html).

Sei dir bewusst, dass die alte R-Version noch auf deinem Computer vorhanden sein wird. Du kannst vorübergehend eine ältere Version (ältere "Installation") von R ausführen, indem du in RStudio auf "Extras" -> "Globale Optionen" klickst und eine R-Version auswählst. Das kann nützlich sein, wenn du ein Paket verwenden möchtest, das noch nicht für die neueste Version von R aktualisiert wurde.

Um RStudio zu aktualisieren, kannst du auf die oben genannte Website gehen und RStudio erneut herunterladen. Eine andere Möglichkeit ist, in RStudio auf "Hilfe" -> "Nach Updates suchen" zu klicken, aber das zeigt möglicherweise nicht die allerneuesten Updates an.

Um zu sehen, welche Versionen von R, RStudio oder Paketen verwendet wurden, als dieses Handbuch erstellt wurde, schaue auf der Seite [Redaktionelle und technische Hinweise].

### Andere Software, die du *kann* installieren musst {.unnumbered}

- TinyTeX (*zum Kompilieren eines RMarkdown-Dokuments in PDF*)\\
- Pandoc (*zum Kompilieren von RMarkdown-Dokumenten*)\\
- RTools (*zum Erstellen von Paketen für R*)\\
- phantomjs (*zum Speichern von Standbildern von animierten Netzwerken, wie z.B. Übertragungsketten*)

#### TinyTex {.unnumbered}

TinyTex ist eine benutzerdefinierte LaTeX-Distribution, die nützlich ist, wenn du PDFs aus R erstellen willst.  
Siehe [https://yihui.org/tinytex/](https://yihui.org/tinytex/) für weitere Informationen.

So installierst du TinyTex aus R:

```{r, eval=F}
install.packages('tinytex')
tinytex::install_tinytex()
# to uninstall TinyTeX, run tinytex::uninstall_tinytex()
```

#### Pandoc {.unnumbered}

Pandoc ist ein Dokumentenkonverter, eine von R unabhängige Software. **Sie ist im Lieferumfang von RStudio enthalten und muss nicht heruntergeladen werden.** Es hilft bei der Konvertierung von Rmarkdown-Dokumenten in Formate wie .pdf und fügt komplexe Funktionen hinzu.

#### RTools {.unnumbered}

RTools ist eine Sammlung von Software zum Erstellen von Paketen für R

Installiere von dieser Website: [https://cran.r-project.org/bin/windows/Rtools/](https://cran.r-project.org/bin/windows/Rtools/)

#### phantomjs {.unnumbered}

Dies wird oft verwendet, um "Screenshots" von Webseiten zu machen. Wenn du zum Beispiel eine Übertragungskette mit **epicontacts** Paket eine Übertragungskette erstellst, wird eine HTML-Datei erzeugt, die interaktiv und dynamisch ist. Wenn du ein statisches Bild möchtest, kann es sinnvoll sein, die [**webshot**](https://wch.github.io/webshot/articles/intro.html) Paket, um diesen Prozess zu automatisieren. Dazu wird das externe Programm "phantomjs" benötigt. Installieren kannst du phantomjs über die **Webshot** Paket mit dem Befehl `webshot::install_phantomjs()`.

<!-- ======================================================= -->

## RStudio {#rstudio}

### RStudio Orientierung {.unnumbered}

**Öffne zunächst RStudio.** Da die Icons sehr ähnlich aussehen können, solltest du sicherstellen, dass du das *RStudio* und nicht R.

Damit RStudio funktioniert, musst du auch R auf dem Computer installiert haben (siehe oben für die Installationsanweisungen).

**RStudio** ist eine Schnittstelle (GUI) zur einfacheren Nutzung von **R**. Du kannst dir R als den Motor eines Fahrzeugs vorstellen, der die entscheidende Arbeit leistet, und RStudio als die Karosserie des Fahrzeugs (mit Sitzen, Zubehör usw.), die dir hilft, den Motor tatsächlich zu nutzen, um vorwärts zu kommen! Hier findest du den kompletten RStudio-Benutzeroberflächen-Spickzettel (PDF) [hier](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf)

In der Standardeinstellung zeigt RStudio vier rechteckige Fenster an.

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "RStudio_overview.png"))
```

\[***TIPP:*** Wenn dein RStudio nur einen linken Bereich anzeigt, liegt das daran, dass du noch keine Skripte geöffnet hast\].{style="color: black;"}

**Das Fenster "Quelle**  
In diesem Bereich, der sich standardmäßig oben links befindet, kannst du deine Daten bearbeiten, ausführen und speichern. [Skripte](#scripts). Skripte enthalten die Befehle, die du ausführen willst. In diesem Bereich können auch Datensätze (Datenrahmen) zur Ansicht angezeigt werden.

Für Stata-Benutzer ist dieser Bereich ähnlich wie die Fenster Do-file und Data Editor.

**Das R-Konsolen-Fenster**

Die R-Konsole, standardmäßig das linke oder untere linke Fenster in R Studio, ist die Heimat der R-"Engine". Hier werden die Befehle tatsächlich ausgeführt und nicht-grafische Ausgaben sowie Fehler- und Warnmeldungen angezeigt. Du kannst Befehle direkt in die R-Konsole eingeben und ausführen, aber beachte, dass diese Befehle nicht gespeichert werden, wie es bei der Ausführung von Befehlen aus einem Skript der Fall ist.

Wenn du mit Stata vertraut bist, ist die R-Konsole wie das Befehlsfenster und auch das Ergebnisfenster.

**Das Umgebungsfenster**  
Dieser Bereich, der sich standardmäßig oben rechts befindet, wird am häufigsten verwendet, um kurze Zusammenfassungen von [Objekten](#objects) in der R-Umgebung in der aktuellen Sitzung. Zu diesen Objekten gehören importierte, geänderte oder erstellte Datensätze, Parameter, die du definiert hast (z. B. eine bestimmte Epi-Woche für die Analyse), oder Vektoren oder Listen, die du während der Analyse definiert hast (z. B. Namen von Regionen). Du kannst auf den Pfeil neben dem Namen eines Datenrahmens klicken, um seine Variablen zu sehen.

In Stata ähnelt dies am meisten dem Fenster Variablenmanager.

Dieses Fenster enthält auch *Verlauf* wo du die Befehle sehen kannst, die du zuvor ausgeführt hast. Es gibt auch eine Registerkarte "Tutorial", auf der du interaktive R-Tutorials absolvieren kannst, wenn du die **learnr** Paket installiert hast. Außerdem gibt es einen Bereich "Verbindungen" für externe Verbindungen und einen Bereich "Git", wenn du dich für eine Schnittstelle zu Github entscheidest.

**Plots, Viewer, Pakete und Hilfefenster**  
Der Bereich unten rechts enthält mehrere wichtige Registerkarten. Typische Plot-Grafiken, einschließlich Karten, werden im Plot-Fenster angezeigt. Interaktive oder HTML-Ausgaben werden im Viewer-Fenster angezeigt. Das Hilfe-Fenster zeigt Dokumentation und Hilfedateien an. Das Dateifenster ist ein Browser, mit dem du Dateien öffnen oder löschen kannst. Im Bereich Pakete kannst du R-Pakete anzeigen, installieren, aktualisieren, löschen, laden/entladen und sehen, welche Version des Pakets du hast. Mehr über Pakete erfährst du in der [Abschnitt Pakete](#packages) unten.

Dieser Bereich enthält die Stata-Äquivalente der Fenster Plots Manager und Project Manager.

### RStudio-Einstellungen {.unnumbered}

Ändern Sie die RStudio-Einstellungen und das Aussehen in der *Werkzeuge* Dropdown-Menü, indem du wählst *Globale Optionen*. Dort kannst du die Standardeinstellungen ändern, einschließlich Aussehen/Hintergrundfarbe.

```{r, out.width=c("50%"), fig.show="hold", echo=F}
knitr::include_graphics(here::here("images", "RStudio_tools_options_1.png"))

knitr::include_graphics(here::here("images", "RStudio_tools_options.png"))
```

**neu starten**

Wenn dein R einfriert, kannst du R neu starten, indem du im Menü Sitzung auf "R neu starten" klickst. Das erspart dir das lästige Schließen und Öffnen von RStudio. Dabei wird alles in deiner R-Umgebung gelöscht.

### Tastaturkürzel {.unnumbered}

Im Folgenden findest du einige sehr nützliche Tastenkombinationen. Alle Tastaturkürzel für Windows, Max und Linux findest du auf der zweiten Seite dieses RStudio [Spickzettel für die Benutzeroberfläche](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf).

\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Windows/Linux | Mac | Action |
\+==================================+========================+================================================================================================================================+
| Esc | Esc | Aktuellen Befehl unterbrechen (nützlich, wenn du versehentlich einen unvollständigen Befehl ausgeführt hast und in der R-Konsole kein "+" sehen kannst) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg+s | Cmd+s | Speichern (Skript) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Tab | Tabulator | Auto-Vervollständigen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Enter | Cmd + Enter | Aktuelle Zeile(n)/Auswahl des Codes ausführen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Umschalt + C | Cmd + Umschalt + c | die markierten Zeilen kommentieren/unkommentieren |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Alt + - | Option + - | Einfügen `<-`                                                                                                                    |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Umschalt + m | Cmd + Umschalt + m | Einfügen `%>%`                                                                                                                   |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + l | Cmd + l | Löschen der R-Konsole |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Alt + b | Cmd + Option + b | Vom Anfang bis zur aktuellen Zeile laufen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Alt + t | Cmd + Option + t | Den aktuellen Codeabschnitt ausführen (R Markdown) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Alt + i | Cmd + Shift + r | Codeabschnitt einfügen (in R Markdown) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Alt + c | Cmd + Option + c | Aktuelles Code-Stück ausführen (R Markdown) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Pfeile nach oben/unten in der R-Konsole | Dasselbe | Umschalten zwischen den zuletzt ausgeführten Befehlen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Umschalttaste + Pfeile nach oben/unten im Skript | Dasselbe | Mehrere Codezeilen auswählen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + f | Cmd + f | Suchen und Ersetzen im aktuellen Skript |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Strg + Umschalt + f | Cmd + Umschalt + f | Suchen in Dateien (Suchen/Ersetzen über viele Skripte hinweg) |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Alt + l | Cmd + Option + l | Ausgewählten Code einklappen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Shift + Alt + l | Cmd + Shift + Option+l | Ausgewählten Code aufklappen |
\+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+

\[***TIPP:*** Benutze beim Tippen die Tabulatortaste, um die Autovervollständigungsfunktion von RStudio zu aktivieren. So kannst du Rechtschreibfehler vermeiden. Drücke beim Tippen die Tabulatortaste, um ein Dropdown-Menü mit wahrscheinlichen Funktionen und Objekten anzuzeigen, die auf dem basieren, was du bisher getippt hast\].{style="color: darkgreen;"}

<!-- ======================================================= -->

## Funktionen {#functions}

Funktionen sind das Herzstück von R. Mit Funktionen führst du Aufgaben und Operationen aus. Viele Funktionen werden mit R installiert, viele weitere stehen zum Download bereit in *Pakete* (erklärt in der [Pakete](#packages) Abschnitt), und du kannst sogar deine eigenen Funktionen schreiben!

Dieser Grundlagenabschnitt über Funktionen erklärt:

- Was eine Funktion ist und wie sie funktioniert.
- Welche Funktion *Argumente* sind?
- Wie du Hilfe zum Verständnis einer Funktion bekommst

*Ein kurzer Hinweis zur Syntax:* In diesem Handbuch werden die Funktionen in Code-Text mit offenen Klammern geschrieben, etwa so: `filter()`. Wie in der [Pakete](#packages) erklärt, werden die Funktionen innerhalb von *Pakete*. In diesem Handbuch werden die Paketnamen in **fett**, wie **dplyr**. Manchmal wird im Beispielcode der Funktionsname explizit mit dem Namen des Pakets verknüpft und mit zwei Doppelpunkten (`::`) wie hier: `dplyr::filter()`. Der Zweck dieser Verknüpfung wird im Abschnitt über Pakete erklärt.

<!-- ======================================================= -->

### Einfache Funktionen {.unnumbered}

**Eine Funktion ist wie eine Maschine, die Eingaben erhält, mit diesen Eingaben eine Aktion durchführt und eine Ausgabe erzeugt.** Was die Ausgabe ist, hängt von der Funktion ab.

**Funktionen wirken in der Regel auf ein Objekt, das innerhalb der Klammern der Funktion steht**. Zum Beispiel kann die Funktion `sqrt()` berechnet die Quadratwurzel aus einer Zahl:

```{r basics_function_sqrt}
sqrt(49)
```

Das Objekt, das einer Funktion übergeben wird, kann auch eine Spalte in einem Datensatz sein (siehe die [Objekte](#objects) Abschnitt für weitere Informationen zu allen Arten von Objekten). Da R mehrere Datasets speichern kann, musst du sowohl das Dataset als auch die Spalte angeben. Eine Möglichkeit, dies zu tun, ist die Verwendung der `$` Notation, um den Namen des Datensatzes und den Namen der Spalte zu verknüpfen (`dataset$column`). Im folgenden Beispiel wird die Funktion `summary()` auf die numerische Spalte angewendet `age` im Datensatz `linelist` und die Ausgabe ist eine Zusammenfassung der numerischen und fehlenden Werte der Spalte.

```{r basics_functions_summary}
# Print summary statistics of column 'age' in the dataset 'linelist'
summary(linelist$age)
```

\[***HINWEIS:*** Hinter den Kulissen stellt eine Funktion komplexen zusätzlichen Code dar, der für den Benutzer in einen einfachen Befehl verpackt wurde\].{style="color: black;"}

<!-- ======================================================= -->

### Funktionen mit mehreren Argumenten {.unnumbered}

Funktionen fragen oft nach mehreren Eingaben, genannt ***Argumente*** Die Argumente befinden sich in den Klammern der Funktion, normalerweise durch Kommas getrennt.

- Einige Argumente sind erforderlich, damit die Funktion richtig funktioniert, andere sind optional.
- Optionale Argumente haben Standardeinstellungen\\
- Argumente können Zeichen, Zahlen, Logik (TRUE/FALSE) und andere Eingaben annehmen.

Hier ist eine lustige fiktive Funktion, die `oven_bake()` als Beispiel für eine typische Funktion. Sie nimmt ein Eingabeobjekt (z. B. einen Datensatz oder in diesem Beispiel "Teig") und führt darauf Operationen aus, die durch zusätzliche Argumente (`minutes =` und `temperature =`). Die Ausgabe kann auf der Konsole ausgegeben oder mit dem Zuweisungsoperator als Objekt gespeichert werden `<-`.

```{r basics_functions_image, echo=F, out.width="75%", fig.align="center"}
knitr::include_graphics(here::here("images", "Function_Bread_Example.png"))
```

**Ein realistischeres Beispiel** ist die `age_pyramid()` Befehl erzeugt eine Alterspyramide, die auf definierten Altersgruppen und einer binären Split-Spalte basiert, wie z. B. `gender`. Die Funktion erhält drei Argumente in Klammern, die durch Kommas getrennt sind. Die Werte, die den Argumenten übergeben werden, bestimmen `linelist` als den zu verwendenden Datenrahmen, `age_cat5` als die zu zählende Spalte und `gender` als Binärspalte, die für die Aufteilung der Pyramide nach Farbe verwendet wird.

```{r basics_functions_arguments, include=FALSE, results="hide", message=FALSE, warning=FALSE}
## create an age group variable by specifying categorical breaks
linelist$age_group <- cut(linelist$age, breaks = c(0, 5, 10, 15, 20, 30, 45, 60))
```

```{r, message=FALSE, warning=FALSE, out.width="75%", out.height="75%"}
# Create an age pyramid
age_pyramid(data = linelist, age_group = "age_cat5", split_by = "gender")
```

Der obige Befehl kann auch wie folgt geschrieben werden, allerdings in einem längeren Stil mit einer neuen Zeile für jedes Argument. Dieser Stil ist leichter zu lesen und es ist einfacher, "Kommentare" zu schreiben mit `#` zu schreiben, um jeden Teil zu erklären (ausführliche Kommentare sind eine gute Praxis!). Um diesen längeren Befehl auszuführen, kannst du den gesamten Befehl markieren und auf "Ausführen" klicken oder du platzierst den Cursor in der ersten Zeile und drückst dann gleichzeitig die Tasten Strg und Enter.

```{r, message=FALSE, warning=FALSE, out.width="75%", out.height="75%"}
# Create an age pyramid
age_pyramid(
  data = linelist,        # use case linelist
  age_group = "age_cat5", # provide age group column
  split_by = "gender"     # use gender column for two sides of pyramid
  )
```

Die erste Hälfte einer Argumentzuweisung (z.B. `data =`) muss nicht angegeben werden, wenn die Argumente in einer bestimmten Reihenfolge geschrieben werden (die in der Dokumentation der Funktion angegeben ist). Der folgende Code erzeugt genau die gleiche Pyramide wie oben, weil die Funktion die Argumentreihenfolge erwartet: Datenrahmen, `age_group` Variable, `split_by` Variable.

```{r, eval=FALSE, warning=FALSE, message=FALSE, out.width="75%", out.height="75%"}
# This command will produce the exact same graphic as above
age_pyramid(linelist, "age_cat5", "gender")
```

**Eine komplexere `age_pyramid()` Befehl könnte die *optional* Argumente zu:**

- Proportionen anstelle von Zählungen anzeigen (setzen `proportional = TRUE` wenn der Standardwert `FALSE`)\\
- Legen Sie die beiden zu verwendenden Farben fest (`pal =` ist die Abkürzung für "Palette" und wird mit einem Vektor aus zwei Farbnamen geliefert. Siehe die [Objekte](#objectstructure) Seite, wie die Funktion `c()` einen Vektor erzeugt)

\[***HINWEIS:*** Bei Argumenten, die du mit beiden Teilen des Arguments angibst (z. B. `proportional = TRUE`), spielt ihre Reihenfolge unter allen Argumenten keine Rolle\].{style="color: black;"}

```{r, message=FALSE, warning=FALSE, out.width="75%", out.height="75%"}
age_pyramid(
  linelist,                    # use case linelist
  "age_cat5",                  # age group column
  "gender",                    # split by gender
  proportional = TRUE,         # percents instead of counts
  pal = c("orange", "purple")  # colors
  )
```

<!-- ======================================================= -->

### Funktionen schreiben {.unnumbered}

R ist eine Sprache, die sich an Funktionen orientiert. Du solltest dich also befähigt fühlen, deine eigenen Funktionen zu schreiben. Das Erstellen von Funktionen bringt mehrere Vorteile mit sich:

- Sie erleichtern die modulare Programmierung - die Aufteilung des Codes in unabhängige und überschaubare Teile.
- Ersetzt das wiederholte Kopieren und Einfügen, das fehleranfällig sein kann\\
- Gib Teilen des Codes einprägsame Namen

Wie man eine Funktion schreibt, wird ausführlich in der [Funktionen schreiben] Seite.

<!-- Eine Funktion erhält einen Namen und wird mit dem Zuweisungsoperator `<-` zu einer speziellen **Basis** R-Funktion namens `Funktion()` definiert. Innerhalb der Klammern werden die Argumente definiert, die die Funktion akzeptieren soll. Danach folgen geschweifte Klammern `{ }`, in die der eigentliche Code der Funktion geschrieben wird.     -->

```{r, eval=F, echo=F}
my_function <- function( ARGUMENTS HERE ){ CODE HERE }
```

<!-- Die Argumente sollten in der Syntax `Argument = Standard` angegeben werden, getrennt durch Kommas.   -->

<!-- Hier ist ein Beispiel, in dem wir eine Funktion `staff_calc()` erstellen, die als Personalberechner für COVID-19 Falluntersuchungen und Anrufe zur Ermittlung von Kontaktpersonen dient.   -->

<!-- Die Argumente (Eingaben) und ihre Standardwerte werden sein:   -->

<!-- * `daily_cases = NULL` Die Anzahl der neuen COVID-19-Fälle pro Tag -->

<!-- * `contacts_each = 5` Die Anzahl der Kontakte, die für jeden Fall aufgezählt werden -->

<!-- * `time_case = 0.5` Anzahl der Stunden, die für die telefonische Untersuchung eines Falles benötigt werden -->

<!-- * `time_contact = 0.25` Anzahl der Stunden für die telefonische Nachbearbeitung eines Kontakts -->

<!-- * `time_day = 8` Die Anzahl der Stunden, die ein Mitarbeiter pro Tag arbeitet -->

<!-- Unten wird die Funktion erstellt. Der Code endet mit der speziellen Funktion `return()`, die das Ergebnis der Funktion ist.    -->

<!-- ```{r message=FALSE, warning=FALSE, out.width = "75%", out.height="75%"} -->

<!-- staff_calc <- function(daily_cases = NULL, contacts_each = 5, -->

<!-- time_case = 0.5, time_contact = 0.25, time_day = 8){ -->

<!-- # Definiere die täglichen Gesamtstunden für das Anrufen von Fällen -->

<!-- case_hours <- daily_cases * time_case -->

<!-- # Definiere die täglichen Gesamtstunden für das Anrufen von Kontakten -->

<!-- contact_hours <- daily_cases * contacts_each * time_contact -->

<!-- # Berechne die Anzahl der benötigten Mitarbeiter -->

<!-- Personal_erforderlich <- (Fall_Stunden + Kontakt_Stunden)/Zeit_Tag -->

<!-- return(personal_erforderlich) -->

<!-- } -->

<!-- ``` -->

<!-- Sobald dieser Code ausgeführt wird, wird die Funktion definiert und erscheint in der R-Umgebung. Wir können die Funktion ausführen. Im Folgenden werden alle Standardwerte verwendet und `daily_cases = ` wird auf 150 gesetzt.   -->

```{r, eval=F, echo=F, message=FALSE, warning=FALSE, out.width="75%", out.height="75%"}
staff_calc(daily_cases = 150)
```

```{r, eval=F, echo=F}
case_incidence <- tibble(
  dates = seq.Date(from = as.Date("2020-05-01"), to = as.Date("2020-05-21"), by = 1),
  projected_incidence = c(102,110,50,37,106,190,146,138,135,111,60,43,189,184,185,80,44,97,254,291,288),
  staff_needed = staff_calc(projected_incidence)
)

ggplot(case_incidence, aes(x = dates))+
  geom_line(aes(y = projected_incidence))+
  geom_line(aes(y = staff_needed))
```

<!-- ======================================================= -->

<!-- ======================================================= -->

## Pakete {#packages}

**Pakete enthalten Funktionen.**

Ein R-Paket ist ein gemeinsam nutzbares Bündel aus Code und Dokumentation, das vordefinierte Funktionen enthält. Die Nutzer der R-Gemeinschaft entwickeln ständig Pakete für bestimmte Probleme. Es ist sehr wahrscheinlich, dass eines davon dir bei deiner Arbeit helfen kann! Du wirst Hunderte von Paketen installieren und verwenden, wenn du R benutzt.

Bei der Installation enthält R **"base"** Pakete und Funktionen, die allgemeine elementare Aufgaben erledigen. Viele R-Benutzer erstellen jedoch spezielle Funktionen, die von der R-Gemeinschaft überprüft werden und die du als Paket herunterladen kannst. **Paket** für deinen eigenen Gebrauch herunterladen kannst. In diesem Handbuch werden die Paketnamen in **fett**. Einer der schwierigeren Aspekte von R ist, dass es oft viele Funktionen oder Pakete gibt, aus denen du wählen kannst, um eine bestimmte Aufgabe zu erledigen.

### Installieren und laden {.unnumbered}

*Funktionen* sind enthalten in **Paketen** die aus dem Internet auf deinen Computer heruntergeladen ("installiert") werden können. Sobald ein Paket heruntergeladen ist, wird es in deiner "Bibliothek" gespeichert. Du kannst dann während deiner aktuellen R-Sitzung auf die darin enthaltenen Funktionen zugreifen, indem du das Paket "lädst".

*Stell dir R als deine persönliche Bibliothek vor* Wenn du ein Paket herunterlädst, erhält deine Bibliothek ein neues Buch mit Funktionen, aber jedes Mal, wenn du eine Funktion aus diesem Buch benutzen willst, musst du dieses Buch aus deiner Bibliothek ausleihen ("laden").

Kurz gesagt: Um die Funktionen in einem R-Paket zu nutzen, müssen 2 Schritte durchgeführt werden:

1) Das Paket muss **installiert** (einmal), *und*\\
2) Das Paket muss **geladen werden** (jede R-Sitzung)

#### Deine Bibliothek {.unnumbered}

Deine "Bibliothek" ist eigentlich ein Ordner auf deinem Computer, der einen Ordner für jedes installierte Paket enthält. Finde heraus, wo R auf deinem Computer installiert ist, und suche nach einem Ordner namens "win-library". Zum Beispiel: `R\win-library\4.0` (die 4.0 ist die R-Version - für jede R-Version, die du heruntergeladen hast, hast du eine andere Bibliothek).

Du kannst den Dateipfad zu deiner Bibliothek ausgeben, indem du eingibst `.libPaths()`(leere Klammern). Dies ist besonders wichtig, wenn du mit [R auf Netzlaufwerken].

#### Von CRAN installieren {.unnumbered}

Am häufigsten laden R-Nutzer Pakete von CRAN herunter. CRAN (Comprehensive R Archive Network) ist ein öffentliches Online-Lager für R-Pakete, die von Mitgliedern der R-Community veröffentlicht wurden.

Machst du dir Sorgen über Viren und Sicherheit, wenn du ein Paket von CRAN herunterlädst? Lies [diesen Artikel](https://support.rstudio.com/hc/en-us/articles/360042593974-R-and-R-Package-Security) zu diesem Thema.

#### Wie man installiert und lädt {.unnumbered}

In diesem Handbuch empfehlen wir die Verwendung des **pacman** Paket (kurz für "Paketmanager"). Es bietet eine praktische Funktion `p_load()` die bei Bedarf ein Paket installiert *und* für die Verwendung in der aktuellen R-Sitzung lädt.

Die Syntax ist ganz einfach. Du listest einfach die Namen der Pakete innerhalb der `p_load()` Klammern auf, getrennt durch Kommas. Dieser Befehl installiert die **rio**, **tidyverse**, und **hier** Pakete, wenn sie noch nicht installiert sind, und lädt sie zur Verwendung. Dies macht die `p_load()` Ansatz bequem und übersichtlich, wenn du Skripte mit anderen teilst. Beachte, dass bei den Paketnamen zwischen Groß- und Kleinschreibung unterschieden wird.

```{r}
# Install (if necessary) and load packages for use
pacman::p_load(rio, tidyverse, here)
```

Beachte, dass wir die folgende Syntax verwendet haben `pacman::p_load()` verwendet haben, die den Paketnamen explizit schreibt (**pacman**) vor dem Funktionsnamen (`p_load()`), verbunden durch zwei Doppelpunkte `::`. Diese Syntax ist nützlich, weil sie auch die **pacman** Paket lädt (vorausgesetzt, es ist bereits installiert).

Es gibt alternative **Basis** R-Funktionen, die du oft sehen wirst. Die **base** R-Funktion für die Installation eines Pakets ist `install.packages()`. Der Name des zu installierenden Pakets muss in Klammern angegeben werden *in Anführungszeichen*. Wenn du mehrere Pakete in einem Befehl installieren willst, müssen sie in einem Zeichenvektor aufgeführt werden `c()`.

Hinweis: Dieser Befehl *installiert* ein Paket, führt aber *nicht* lädt es nicht zur Verwendung in der aktuellen Sitzung.

```{r, eval=F}
# install a single package with base R
install.packages("tidyverse")

# install multiple packages with base R
install.packages(c("tidyverse", "rio", "here"))
```

Die Installation kann auch per Mausklick durchgeführt werden, indem du im RStudio-Fenster "Pakete" auf "Installieren" klickst und nach dem gewünschten Paketnamen suchst.

Die **Basis** R Funktion zu **zu laden** ein Paket zur Verwendung zu laden (nachdem es installiert wurde), ist `library()`. Es kann immer nur ein Paket auf einmal laden (ein weiterer Grund für die Verwendung von `p_load()`). Du kannst den Paketnamen mit oder ohne Anführungszeichen angeben.

```{r, eval=F}
# load packages for use, with base R
library(tidyverse)
library(rio)
library(here)
```

Um zu überprüfen, ob ein Paket installiert und/oder geladen ist, kannst du den Bereich Pakete in RStudio anzeigen. Wenn das Paket installiert ist, wird es dort mit der Versionsnummer angezeigt. Wenn das Kästchen markiert ist, ist es für die aktuelle Sitzung geladen.

**Von Github installieren**

Manchmal musst du ein Paket installieren, das noch nicht bei CRAN verfügbar ist. Oder vielleicht ist das Paket auf CRAN verfügbar, aber du möchtest die *Entwicklungsversion* mit neuen Funktionen, die in der stabileren, veröffentlichten CRAN-Version noch nicht enthalten sind. Diese werden oft auf der Website zur Verfügung gestellt [github.de](https://github.com/)in einem freien, öffentlich zugänglichen Code-"Repository". Mehr über Github erfährst du auf der Handbuchseite zu [Versionskontrolle und Zusammenarbeit mit Git und Github].

Um R-Pakete von Github herunterzuladen, kannst du die Funktion `p_load_gh()` von **pacman** das Paket, falls nötig, installieren und für die Verwendung in deiner aktuellen R-Sitzung laden. Eine Alternative zur Installation ist die Verwendung des **remotes** oder **devtools** Pakete. Lies mehr über alle **pacman** Funktionen in der [Paket-Dokumentation](https://cran.r-project.org/web/packages/pacman/pacman.pdf).

Um von Github zu installieren, musst du weitere Informationen angeben. Du musst Folgendes angeben:

1) Die Github-ID des Besitzers des Repositorys
2) Der Name des Repositorys, das das Paket enthält.
3) *(optional) Der Name des "Branch" (spezifische Entwicklungsversion), den du herunterladen möchtest*

In den folgenden Beispielen ist das erste Wort in den Anführungszeichen die Github-ID des Repository-Besitzers, nach dem Schrägstrich steht der Name des Repositorys (der Name des Pakets).

```{r, eval=F}
# install/load the epicontacts package from its Github repository
p_load_gh("reconhub/epicontacts")
```

Wenn du von einem anderen "Zweig" (Version) als dem Hauptzweig installieren willst, füge den Namen des Zweigs nach einem "@" hinter dem Namen des Repositorys ein.

```{r, eval=F}
# install the "timeline" branch of the epicontacts package from Github
p_load_gh("reconhub/epicontacts@timeline")
```

Wenn es keinen Unterschied zwischen der Github-Version und der Version auf deinem Computer gibt, wird nichts unternommen. Du kannst eine Neuinstallation "erzwingen", indem du stattdessen `p_load_current_gh()` mit dem Argument `update = TRUE`. Lies mehr über **pacman** in diesem [Online-Vignette](http://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html)

**Aus ZIP oder TAR installieren**

Du kannst das Paket auch von einer URL aus installieren:

```{r, eval=F}
packageurl <- "https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
```

Oder du lädst es in einer gezippten Datei auf deinen Computer herunter:

Option 1: mit `install_local()` von der **Fernbedienungen** Paket

```{r, eval=F}
remotes::install_local("~/Downloads/dplyr-master.zip")
```

Option 2: mit `install.packages()` von **Basis** R, gibt den Dateipfad zur ZIP-Datei an und setzt `type = "source` und `repos = NULL`.

```{r, eval=F}
install.packages("~/Downloads/dplyr-master.zip", repos=NULL, type="source")
```

### Code-Syntax {.unnumbered}

Aus Gründen der Übersichtlichkeit wird in diesem Handbuch den Funktionen manchmal der Name ihres Pakets vorangestellt, indem die `::` Symbol in der folgenden Weise vorangestellt: `package_name::function_name()`

Sobald ein Paket für eine Sitzung geladen ist, ist dieser explizite Stil nicht mehr nötig. Man kann einfach verwenden `function_name()`. Die Angabe des Paketnamens ist jedoch nützlich, wenn ein Funktionsname häufig vorkommt und möglicherweise in mehreren Paketen vorhanden ist (z. B. `plot()`). Wenn du den Paketnamen angibst, wird das Paket auch geladen, wenn es noch nicht geladen ist.

```{r, eval=FALSE}
# This command uses the package "rio" and its function "import()" to import a dataset
linelist <- rio::import("linelist.xlsx", which = "Sheet1")
```

### Funktion Hilfe {.unnumbered}

Um mehr über eine Funktion zu erfahren, kannst du sie auf der Registerkarte Hilfe im RStudio unten rechts suchen. Du kannst auch einen Befehl ausführen wie `?thefunctionname` (gib den Namen der Funktion nach einem Fragezeichen ein) und die Hilfeseite wird im Hilfefenster angezeigt. Schließlich kannst du auch online nach Ressourcen suchen.

### Pakete aktualisieren {.unnumbered}

Du kannst Pakete aktualisieren, indem du sie neu installierst. Du kannst auch auf die grüne Schaltfläche "Aktualisieren" in deinem RStudio-Paketfenster klicken, um zu sehen, welche Pakete neue Versionen haben, die du installieren kannst. Sei dir bewusst, dass dein alter Code möglicherweise aktualisiert werden muss, wenn sich die Funktionsweise einer Funktion grundlegend geändert hat!

### Pakete löschen {.unnumbered}

Verwende `p_delete()` von **pacman**, oder `remove.packages()` von **Basis** R. Alternativ kannst du auch den Ordner suchen, der deine Bibliothek enthält, und diesen Ordner manuell löschen.

### Abhängigkeiten {.unnumbered}

Pakete hängen oft von anderen Paketen ab, damit sie funktionieren. Diese werden als Abhängigkeiten bezeichnet. Wenn eine Abhängigkeit nicht installiert werden kann, kann auch das Paket, das von ihr abhängt, nicht installiert werden.

Die Abhängigkeiten eines Pakets kannst du mit `p_depends()` und welche Pakete von ihm abhängen mit `p_depends_reverse()`

### Maskierte Funktionen {.unnumbered}

Es ist nicht ungewöhnlich, dass zwei oder mehr Pakete denselben Funktionsnamen enthalten. Zum Beispiel kann das Paket **dplyr** hat eine `filter()` Funktion, aber auch das Paket **stats**. Die Standard `filter()` Funktion hängt von der Reihenfolge ab, in der diese Pakete zum ersten Mal in die R-Sitzung geladen werden - die spätere Funktion wird die Standardfunktion für den Befehl `filter()`.

Du kannst die Reihenfolge in deinem Umgebungsfenster in R Studio überprüfen - klicke auf das Dropdown-Menü für "Globale Umgebung" und sieh dir die Reihenfolge der Pakete an. Funktionen aus Paketen *unter* auf der Dropdown-Liste maskieren Funktionen desselben Namens in Paketen, die weiter oben in der Dropdown-Liste stehen. Wenn du ein Paket zum ersten Mal lädst, warnt dich R in der Konsole, wenn eine Maskierung stattfindet, aber das kann man leicht übersehen.

```{r, out.width="50%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "masking_functions.png"))
```

Hier sind einige Möglichkeiten, wie du die Maskierung beheben kannst:

1) Gib den Paketnamen im Befehl an. Verwende zum Beispiel `dplyr::filter()`\\
2) Ändern Sie die Reihenfolge, in der die Pakete geladen werden (z. B. innerhalb `p_load()`), und **starte eine neue R-Sitzung**

### Lösen / Entladen {.unnumbered}

Um ein Paket zu lösen (zu entladen), verwende diesen Befehl mit dem richtigen Paketnamen und nur einem Doppelpunkt. Beachte, dass dies die Maskierung möglicherweise nicht auflöst.

```{r, eval=F}
detach(package:PACKAGE_NAME_HERE, unload=TRUE)
```

### Ältere Version installieren {.unnumbered}

Siehe dies [Leitfaden](https://support.rstudio.com/hc/en-us/articles/219949047-Installing-older-versions-of-packages) um eine ältere Version eines bestimmten Pakets zu installieren.

### Vorgeschlagene Pakete {.unnumbered}

Siehe die Seite über [Empfohlene Pakete] findest du eine Liste der Pakete, die wir für den epidemiologischen Alltag empfehlen.

<!-- ======================================================= -->

## Skripte {#scripts}

Skripte sind ein grundlegender Bestandteil der Programmierung. Sie sind Dokumente, die deine Befehle enthalten (z. B. Funktionen zum Erstellen und Ändern von Datensätzen, Drucken von Visualisierungen usw.). Du kannst ein Skript speichern und es später wieder ausführen. Es hat viele Vorteile, wenn du deine Befehle in einem Skript speicherst und ausführst (im Gegensatz zu der Möglichkeit, die Befehle einzeln in die "Befehlszeile" der R-Konsole einzugeben):

- Übertragbarkeit - du kannst deine Arbeit mit anderen teilen, indem du ihnen deine Skripte schickst.
- Reproduzierbarkeit - damit du und andere genau wissen, was du gemacht hast\\
- Versionskontrolle - damit du Änderungen, die du selbst oder Kollegen vorgenommen haben, nachverfolgen kannst\\
- Kommentare/Anmerkungen - um deinen Kollegen zu erklären, was du getan hast

### Kommentieren {.unnumbered}

In einem Skript kannst du auch Anmerkungen ("Kommentare") zu deinem R-Code machen. Das Kommentieren ist hilfreich, um dir und anderen Lesern zu erklären, was du tust. Du kannst einen Kommentar hinzufügen, indem du das Rautezeichen (#) eingibst und deinen Kommentar dahinter schreibst. Der kommentierte Text wird in einer anderen Farbe als der R-Code angezeigt.

Jeder Code, der nach dem # geschrieben wird, wird nicht ausgeführt. Daher ist das # vor dem Code auch eine nützliche Methode, um eine Codezeile vorübergehend zu blockieren ("auskommentieren"), wenn du sie nicht löschen willst). Du kannst mehrere Zeilen auf einmal auskommentieren, indem du sie markierst und Strg+Umschalt+c drückst (Cmd+Umschalt+c auf dem Mac).

```{r, eval=F}
# A comment can be on a line by itself
# import data
linelist <- import("linelist_raw.xlsx") %>%   # a comment can also come after code
# filter(age > 50)                          # It can also be used to deactivate / remove a line of code
  count()

```

- Auskommentieren *was* was du tust *und auf **warum** du es tust*.\\
- Unterteile deinen Code in logische Abschnitte\\
- Begleite deinen Code mit einer textlichen Schritt-für-Schritt-Beschreibung dessen, was du tust (z.B. mit nummerierten Schritten)

### Stil {.unnumbered}

Es ist wichtig, dass du dir deines Coding-Stils bewusst bist - vor allem, wenn du im Team arbeitest. Wir plädieren für die **tidyverse** [Styleguide](https://style.tidyverse.org/). Es gibt auch Pakete wie **styler** und **lintr** die dir helfen, dich an diesen Stil anzupassen.

Ein paar sehr grundlegende Punkte, um deinen Code für andere lesbar zu machen:  
\* Verwende bei der Benennung von Objekten nur Kleinbuchstaben, Zahlen und Unterstriche. `_` z.B.. `my_data`  
\* Verwende häufig Leerzeichen, auch um Operatoren herum, z. B. `n = 1` und `age_new <- age_old + 3`

### Beispiel Skript {.unnumbered}

Im Folgenden findest du ein Beispiel für ein kurzes R-Skript. Denk daran: Je besser du deinen Code in den Kommentaren erklärst, desto mehr werden dich deine Kollegen mögen!

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "example_script.png"))
```

<!-- ======================================================= -->

### R Markdown {.unnumbered}

Ein R Markdown-Skript ist eine Art von R-Skript, bei dem das Skript selbst *wird.* ein Ausgabedokument (PDF, Word, HTML, Powerpoint, etc.) wird. Dies sind unglaublich nützliche und vielseitige Werkzeuge, die oft zur Erstellung dynamischer und automatisierter Berichte verwendet werden. Sogar diese Website und dieses Handbuch wurden mit R-Markdown-Skripten erstellt!

Es sei darauf hingewiesen, dass auch R-Anfänger/innen R Markdown verwenden können - lass dich nicht einschüchtern! Mehr dazu erfährst du auf der Handbuchseite über [Berichte mit R Markdown] Dokumente.

<!-- ======================================================= -->

### R-Notebooks {.unnumbered}

Es gibt keinen Unterschied zwischen dem Schreiben in einem Rmarkdown und einem R-Notebook. Die Ausführung des Dokuments unterscheidet sich jedoch leicht. Siehe dies [Seite](http://uc-r.github.io/r_notebook) für weitere Details.

<!-- ======================================================= -->

### Glänzend {.unnumbered}

Shiny-Apps/Websites sind in einem Skript enthalten, das folgendermaßen benannt werden muss `app.R`. Diese Datei hat drei Komponenten:

1) Eine Benutzeroberfläche (ui)\\
2) Eine Serverfunktion\\
3) Ein Aufruf der `shinyApp` Funktion

Siehe die Handbuchseite über [Dashboards mit Shiny] oder dieses Online-Tutorial :[Shiny-Tutorial](https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/)

*Früher wurde die obige Datei in zwei Dateien aufgeteilt (`ui.R` und `server.R`)*

### Code falten {.unnumbered}

Du kannst Teile des Codes einklappen, damit dein Skript leichter zu lesen ist.

Dazu erstellst du eine Textüberschrift mit #, schreibst deine Überschrift und folgst ihr mit mindestens 4 Bindestrichen (-), Raute (#) oder Gleichheitszeichen (=). Wenn du das getan hast, erscheint ein kleiner Pfeil in der "Rinne" links (neben der Zeilennummer). Du kannst auf diesen Pfeil und den Code darunter klicken, bis die nächste Überschrift eingeklappt wird und an ihrer Stelle ein Doppelpfeil-Symbol erscheint.

Um den Code zu erweitern, klickst du entweder erneut auf den Pfeil im Zwischenraum oder auf das Doppelpfeil-Symbol. Es gibt auch Tastenkombinationen, die im Abschnitt [Abschnitt RStudio](#rstudio) auf dieser Seite erklärt werden.

Wenn du Überschriften mit # erstellst, aktivierst du auch das Inhaltsverzeichnis am Ende deines Skripts (siehe unten), das du zur Navigation in deinem Skript verwenden kannst. Du kannst Unterüberschriften erstellen, indem du weitere #-Symbole hinzufügst, zum Beispiel # für primäre, ## für sekundäre und ### für tertiäre Überschriften.

Im Folgenden findest du zwei Versionen eines Beispielskripts. Links ist das Original mit kommentierten Überschriften. Auf der rechten Seite wurden nach jeder Überschrift vier Bindestriche geschrieben, damit sie eingeklappt werden können. Zwei von ihnen wurden eingeklappt, und du kannst sehen, dass das Inhaltsverzeichnis am unteren Rand nun jeden Abschnitt anzeigt.

```{r, out.width=c("50%"), fig.show="hold", echo=F}
knitr::include_graphics(here::here("images", "code_folding1.png"))
knitr::include_graphics(here::here("images", "code_folding2.png"))
```

Andere Bereiche des Codes, die automatisch eingeklappt werden können, sind z. B. "verklammerte" Bereiche mit Klammern `{ }` wie Funktionsdefinitionen oder bedingte Blöcke (if else-Anweisungen). Mehr über die Codefaltung erfährst du in der RStudio [Seite](https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections).

<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## Arbeitsverzeichnis

Das Arbeitsverzeichnis ist der Stammordner, den R für deine Arbeit verwendet und in dem R standardmäßig nach Dateien sucht und sie speichert. Standardmäßig speichert R neue Dateien und Ausgaben an diesem Ort und sucht hier auch nach zu importierenden Dateien (z. B. Datensätzen).

Das Arbeitsverzeichnis wird in grauer Schrift oben in der RStudio-Konsole angezeigt. Du kannst das aktuelle Arbeitsverzeichnis auch ausdrucken, indem du `getwd()` (lass die Klammern leer).

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "working_directory_1.png"))
```

### Empfohlener Ansatz {.unnumbered}

**Siehe die Seite über [R-Projekte] für Details zu unserer empfohlenen Vorgehensweise bei der Verwaltung deines Arbeitsverzeichnisses.**  
Eine gängige, effiziente und problemlose Methode zur Verwaltung deines Arbeitsverzeichnisses und deiner Dateipfade ist die Kombination dieser 3 Elemente in einem [R-Projekt][R-Projekte]-orientierter Arbeitsablauf:

1) Ein R Projekt, in dem du alle deine Dateien speicherst (siehe Seite über [R-Projekte])\
2) Die **hier**Paket, um Dateien zu finden (siehe Seite über [Importieren und Exportieren])\
3) Die **rio**Paket, um Dateien zu importieren/exportieren (siehe Seite über [Importieren und Exportieren])

<!-- ======================================================= -->

### Per Befehl einstellen {.unnumbered}

Bis vor kurzem wurde vielen, die R lernten, beigebracht, ihre Skripte mit einem `setwd()`Befehl zu beginnen. Bitte erwäge stattdessen, ein [R-Projekt][R-Projekte]-orientierten Arbeitsablauf und lies die[Gründe für die Nichtverwendung von `setwd()`](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/). Kurz gesagt, deine Arbeit wird spezifisch für deinen Computer, die Dateipfade, die zum Importieren und Exportieren von Dateien verwendet werden, werden "brüchig", und das erschwert die Zusammenarbeit und die Verwendung deines Codes auf anderen Computern erheblich. Es gibt einfache Alternativen!

Wie bereits erwähnt, empfehlen wir diesen Ansatz in den meisten Fällen zwar nicht, aber du kannst den Befehl `setwd()` mit dem gewünschten Ordner-Dateipfad in Anführungszeichen verwenden, zum Beispiel:

```{r, eval=F}
setwd("C:/Documents/R Files/My analysis")
```

\[***GEFAHR!*** Das Setzen eines Arbeitsverzeichnisses mit `setwd()` *kann* spröde sein, wenn der Dateipfad nur für einen bestimmten Computer gilt. Verwende stattdessen Dateipfade relativ zu einem R-Projekt-Stammverzeichnis (mit dem **hier** Paket). \]{style="color: red;"}

<!-- ======================================================= -->

### Manuell einstellen {.unnumbered}

Um das Arbeitsverzeichnis manuell festzulegen (das Zeigen-und-Klicken-Äquivalent von `setwd()`), klickst du auf das Dropdown-Menü Sitzung und wählst "Arbeitsverzeichnis festlegen" und dann "Verzeichnis wählen". Dadurch wird das Arbeitsverzeichnis für diese spezielle R-Sitzung festgelegt. Hinweis: Wenn du diesen Weg wählst, musst du dies jedes Mal manuell tun, wenn du RStudio öffnest.

<!-- ======================================================= -->

### Innerhalb eines R-Projekts {.unnumbered}

Wenn du ein R-Projekt verwendest, ist das Arbeitsverzeichnis standardmäßig das Stammverzeichnis des R-Projekts, das die ".rproj"-Datei enthält. Dies gilt, wenn du RStudio öffnest, indem du auf "R-Projekt öffnen" klickst (die Datei mit der Erweiterung ".rproj").

<!-- ======================================================= -->

### Arbeitsverzeichnis in einem R Markdown {.unnumbered}

In einem R-Markdown-Skript ist das Standardarbeitsverzeichnis der Ordner, in dem die R-Markdown-Datei (`.Rmd`) gespeichert wird. Wenn du ein R-Projekt verwendest und **hier** Paket verwenden, gilt dies nicht und das Arbeitsverzeichnis ist `here()`wie im Abschnitt [R-Projekte] Seite erklärt wird.

Wenn du das Arbeitsverzeichnis eines eigenständigen R-Markdowns (nicht in einem R-Projekt) ändern willst, musst du `setwd()` verwendest, gilt dies nur für diesen speziellen Codechunk. Um die Änderung für alle Code Chunks in einem R Markdown vorzunehmen, bearbeite den Setup Chunk und füge die `root.dir =` Parameter hinzu, z. B. wie unten:

```{r, eval=F}
knitr::opts_knit$set(root.dir = 'desired/directorypath')
```

Es ist viel einfacher, einfach den R-Markdown innerhalb eines R-Projekts zu verwenden und die **hier** Paket zu verwenden.

<!-- ======================================================= -->

### Dateipfade bereitstellen {.unnumbered}

Die vielleicht häufigste Quelle der Frustration für einen R-Anfänger (zumindest auf einem Windows-Rechner) ist die Eingabe eines Dateipfads für den Import oder Export von Daten. Eine ausführliche Erklärung, wie du Dateipfade am besten eingibst, findest du in der [Importieren und Exportieren] Seite, aber hier sind ein paar wichtige Punkte:

**Gebrochene Pfade**

Im Folgenden findest du ein Beispiel für einen "absoluten" oder "vollständigen" Dateipfad. Diese Pfade werden wahrscheinlich nicht funktionieren, wenn sie von einem anderen Computer verwendet werden. Eine Ausnahme ist, wenn du ein gemeinsam genutztes Laufwerk oder ein Netzlaufwerk verwendest.

```
C:/Users/Name/Document/Analytic Software/R/Projects/Analysis2019/data/March2019.csv  
```

**Schrägstrich Richtung**

*Wenn du einen Dateipfad eingibst, achte auf die Richtung der Schrägstriche.* Verwende *Schrägstriche* (`/`), um die Komponenten zu trennen ("data/provincial.csv"). Für Windows-Benutzer werden die Dateipfade standardmäßig wie folgt angezeigt *Schrägstrichen* (\\) - du musst also die Richtung der einzelnen Schrägstriche ändern. Wenn du den **hier**Paket wie in den [R-Projekte] Seite beschrieben ist, spielt die Schrägstrichrichtung keine Rolle.

**Relative Dateipfade**

Wir empfehlen generell, stattdessen "relative" Dateipfade anzugeben - das heißt, den Pfad *relativ zu* dem Stammverzeichnis deines R-Projekts. Du kannst dies mit der Option **hier**Paket, wie es in den [R-Projekte] Seite erklärt wird. Ein relativer Dateipfad könnte wie folgt aussehen:

```{r, eval=F}
# Import csv linelist from the data/linelist/clean/ sub-folders of an R project
linelist <- import(here("data", "clean", "linelists", "marin_country.csv"))
```

Auch wenn du relative Dateipfade innerhalb eines R-Projekts verwendest, kannst du trotzdem absolute Pfade verwenden, um Daten außerhalb deines R-Projekts zu importieren/exportieren.

<!-- ======================================================= -->

## Objekte {#objects}

Alles in R ist ein Objekt, und R ist eine "objektorientierte" Sprache. In diesen Abschnitten wird erklärt:

- Wie man Objekte erstellt (`<-`)
- Arten von Objekten (z.B. Datenrahmen, Vektoren...)\\
- Wie man auf Teilbereiche von Objekten zugreift (z.B. Variablen in einem Datensatz)\\
- Klassen von Objekten (z. B. numerisch, logisch, ganzzahlig, doppelt, Zeichen, Faktor)

<!-- ======================================================= -->

### Alles ist ein Objekt {.unnumbered}

*Dieser Abschnitt ist an die [R4Epis Projekt](https://r4epis.netlify.app/training/r_basics/objects/).*  
Alles, was du in R speicherst - Datensätze, Variablen, eine Liste von Dorfnamen, eine Gesamtbevölkerungszahl, sogar Ausgaben wie Diagramme - sind **Objekte** die **einen Namen zugewiesen bekommen** und **kann referenziert werden** in späteren Befehlen.

Ein Objekt existiert, wenn du ihm einen Wert zugewiesen hast (siehe Abschnitt "Zuweisung" weiter unten). Wenn ihm ein Wert zugewiesen wird, erscheint das Objekt in der Umgebung (siehe den oberen rechten Bereich von RStudio). Es kann dann bearbeitet, manipuliert, verändert und neu definiert werden.

<!-- ======================================================= -->

### Das Definieren von Objekten (`<-`) {.unnumbered}

**Objekte erstellen *indem du ihnen einen Wert zuweist* mit dem \<- Operator.**  
Du kannst dir den Zuweisungsoperator so vorstellen `<-` als die Worte "ist definiert als". Zuweisungsbefehle folgen im Allgemeinen einer Standardreihenfolge:

**Objekt\_name** \<- **Wert** (oder Prozess/Berechnung, die einen Wert erzeugt)

Du möchtest zum Beispiel die aktuelle epidemiologische Meldewoche als Objekt aufzeichnen, auf das du in einem späteren Code Bezug nehmen kannst. In diesem Beispiel wird das Objekt `current_week` erstellt, wenn es mit dem Wert `"2018-W10"` zugewiesen wird (die Anführungszeichen machen dies zu einem Zeichenwert). Das Objekt `current_week` wird dann im RStudio-Umgebungsfenster (oben rechts) angezeigt und kann in späteren Befehlen referenziert werden.

Die R-Befehle und ihre Ausgabe findest du in den Kästen unten.

```{r basics_objects_assignment}
current_week <- "2018-W10"   # this command creates the object current_week by assigning it a value
current_week                 # this command prints the current value of current_week object in the console
```

\[***HINWEIS:*** Beachte die `[1]` in der R-Konsolenausgabe zeigt lediglich an, dass du das erste Element der Ausgabe siehst\]{style="color: black;"}

\[***VORSICHT!*** **Der Wert eines Objekts kann überschrieben werden** jederzeit überschrieben werden, indem ein Zuweisungsbefehl ausgeführt wird, um seinen Wert neu zu definieren. Daher kann der **Reihenfolge der ausgeführten Befehle sehr wichtig**.\]{style="color: orange;"}

Der folgende Befehl definiert den Wert von `current_week`:

```{r basics_objects_reassignment}
current_week <- "2018-W51"   # assigns a NEW value to the object current_week
current_week                 # prints the current value of current_week in the console
```

**Gleiche Zeichen `=`**

Du wirst auch Gleichheitszeichen im R-Code sehen:

- Ein doppeltes Gleichheitszeichen `==` zwischen zwei Objekten oder Werten stellt eine logische *Frage*: "Ist dies gleich jenem?".\\
- Du wirst auch Gleichheitszeichen innerhalb von Funktionen sehen, die verwendet werden, um Werte von Funktionsargumenten anzugeben (lies dazu die folgenden Abschnitte), zum Beispiel `max(age, na.rm = TRUE)`.\\
- Du *kannst* ein einzelnes Gleichheitszeichen verwenden `=` anstelle von `<-` um Objekte zu erstellen und zu definieren, aber davon wird abgeraten. Warum dies nicht empfehlenswert ist, kannst du nachlesen [hier](https://renkun.me/2014/01/28/difference-between-assignment-operators-in-r/).

**Datensätze**

Datensätze sind ebenfalls Objekte (in der Regel "Datenrahmen") und müssen beim Import mit Namen versehen werden. Im folgenden Code wird das Objekt `linelist` erstellt und mit dem Wert einer CSV-Datei versehen, die mit dem Befehl **rio** Paket importiert wurde und dessen `import()` Funktion.

```{r basics_objects_dataframes, eval=FALSE}
# linelist is created and assigned the value of the imported CSV file
linelist <- import("my_linelist.csv")
```

Mehr über das Importieren und Exportieren von Datensätzen erfährst du in dem Abschnitt über [Import und Export].

\[***VORSICHT!*** Ein kurzer Hinweis zur Benennung von Objekten:\]{style="color: orange;"}

- Objektnamen dürfen keine Leerzeichen enthalten, aber du solltest einen Unterstrich (\_) oder einen Punkt (.) anstelle eines Leerzeichens verwenden.\\
- Bei Objektnamen wird zwischen Groß- und Kleinschreibung unterschieden (d.h. Dataset\_A ist anders als dataset\_A).
- Objektnamen müssen mit einem Buchstaben beginnen (sie dürfen nicht mit einer Zahl wie 1, 2 oder 3 beginnen).

**Ausgänge**

Ausgaben wie Tabellen und Diagramme sind ein Beispiel dafür, wie Ausgaben als Objekte gespeichert oder einfach ausgedruckt werden können, ohne gespeichert zu werden. Eine Kreuztabellierung von Geschlecht und Ergebnis unter Verwendung der **Basis** R-Funktion `table()` kann direkt auf der R-Konsole ausgegeben werden (*ohne* gespeichert werden).

```{r}
# printed to R console only
table(linelist$gender, linelist$outcome)
```

Die gleiche Tabelle kann aber auch als benanntes Objekt gespeichert werden. Dann kann sie optional auch gedruckt werden.

```{r}
# save
gen_out_table <- table(linelist$gender, linelist$outcome)

# print
gen_out_table
```

**Spalten**

Spalten in einem Datensatz sind ebenfalls Objekte und können definiert, überschrieben und erstellt werden, wie unten im Abschnitt über Spalten beschrieben.

Du kannst den Zuweisungsoperator von **Basis** R verwenden, um eine neue Spalte zu erstellen. Unten wird die neue Spalte `bmi` (Body Mass Index) erstellt, und für jede Zeile ist der neue Wert das Ergebnis einer mathematischen Operation auf den Zeilenwert in der Spalte `wt_kg` und `ht_cm` Spalten.

```{r, eval=F}
# create new "bmi" column using base R syntax
linelist$bmi <- linelist$wt_kg / (linelist$ht_cm/100)^2
```

In diesem Handbuch betonen wir jedoch einen anderen Ansatz zur Definition von Spalten, der die Funktion `mutate()` aus der **dplyr** Paket und *Rohrleitungen* mit dem Pipe-Operator (`%>%`). Die Syntax ist einfacher zu lesen und es gibt weitere Vorteile, die auf der Seite über [Bereinigung von Daten und Kernfunktionen]. Du kannst mehr lesen über*Rohrleitungen* in dem Abschnitt Rohrleitungen weiter unten.

```{r, eval=F}
# create new "bmi" column using dplyr syntax
linelist <- linelist %>% 
  mutate(bmi = wt_kg / (ht_cm/100)^2)
```

<!-- ======================================================= -->

### Objektstruktur {.unnumbered}

**Objekte können ein einzelnes Datenelement sein (z. B. `my_number <- 24`), oder sie können aus strukturierten Daten bestehen.**

Die folgende Grafik stammt aus [diesem Online-R-Tutorial](http://venus.ifca.unican.es/Rintro/dataStruct.html). Es zeigt einige gängige Datenstrukturen und ihre Namen. Nicht enthalten in diesem Bild sind räumliche Daten, die im Abschnitt [GIS-Grundlagen] Seite behandelt werden.

```{r basics_objects_structures, echo=F, out.width="75%", out.height="50%", fig.align="center"}
knitr::include_graphics(here::here("images", "R_data_structures.png"))
```

In der Epidemiologie (und insbesondere in der Feldepidemiologie) wirst du *in der Regel* Datenrahmen und Vektoren begegnen:

\+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| Gemeinsame Struktur | Erläuterung | Beispiel |
\+==================+==================================================================================================+=====================================================================================+
| Vektoren | Ein Container für eine Folge von einzelnen Objekten, die alle der gleichen Klasse angehören (z. B. Zahlen, Zeichen). | **"Variablen" (Spalten) in Datenrahmen sind Vektoren** (z. B. die Spalte `age_years`). |
\+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| Datenrahmen | Vektoren (z. B. Spalten), die miteinander verbunden sind und alle die gleiche Anzahl von Zeilen haben.            | `linelist` ist ein Datenrahmen.                                                         |
\+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

Um einen Vektor zu erstellen, der für sich alleine steht (nicht Teil eines Datenrahmens ist), muss die Funktion `c()` verwendet wird, um die verschiedenen Elemente zu kombinieren. Wenn du zum Beispiel einen Vektor mit der Farbskala eines Plots erstellst: `vector_of_colors <- c("blue", "red2", "orange", "grey")`

<!-- ======================================================= -->

### Objektklassen {.unnumbered}

Alle in R gespeicherten Objekte haben eine *Klasse* die R sagt, wie das Objekt zu behandeln ist. Es gibt viele mögliche Klassen, aber die gängigsten sind:

\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Klasse | Erläuterung | Beispiele |
\+============+=========================================================================================================================================================================================+=======================================================================================================+
| Zeichen | Dies sind Texte/Wörter/Sätze **"innerhalb von Anführungszeichen"**. Mathe kann mit diesen Objekten nicht durchgeführt werden.                                                                                      | "Zeichenobjekte stehen in Anführungszeichen" |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Integer | Zahlen, die **nur ganz** (keine Dezimalzahlen) | -5, 14, oder 2000 |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Numerisch | Dies sind Zahlen und **können Nachkommastellen enthalten**. Wenn sie in Anführungszeichen stehen, werden sie als Zeichenklasse betrachtet.                                                                      | 23.1 oder 14 |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Faktor | Dies sind Vektoren, die eine **bestimmte Ordnung** oder Hierarchie von Werten | Eine Variable des wirtschaftlichen Status mit geordneten Werten |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Datum | **Sobald R mitgeteilt wird, dass bestimmte Daten Dates sind**sind, können diese Daten auf besondere Weise manipuliert und angezeigt werden. Siehe die Seite über [Arbeiten mit Daten] für weitere Informationen.                 | 2018-04-12 oder 15/3/1954 oder Mi 4 Jan 1980 |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Logisch | Werte müssen einen der beiden speziellen Werte TRUE oder FALSE sein (beachte, dass diese **nicht** "TRUE" und "FALSE" in Anführungszeichen)                                                               | TRUE oder FALSE |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| data.frame | Ein Datenrahmen ist die Art und Weise, wie R eine **typischen Datensatz**. Er besteht aus miteinander verbundenen Datenvektoren (Spalten), die alle die gleiche Anzahl von Beobachtungen (Zeilen) haben.                      | Der AJS-Beispiel-Datensatz namens `linelist_raw` enthält 68 Variablen mit jeweils 300 Beobachtungen (Zeilen). |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| tibble | tibbles sind eine Variante des Datenrahmens, deren Hauptunterschied darin besteht, dass sie besser auf der Konsole ausgegeben werden (die ersten 10 Zeilen und nur die Spalten, die auf den Bildschirm passen) | Jeder Datenrahmen, jede Liste oder Matrix kann mit `as_tibble()`                       |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Liste | Eine Liste ist wie ein Vektor, enthält aber andere Objekte, die auch andere Klassen sein können | Eine Liste kann eine einzelne Zahl, einen Datenrahmen, einen Vektor und sogar eine andere Liste enthalten!    |
\+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+

**Du kannst die Klasse eines Objekts testen, indem du seinen Namen an die Funktion `class()`**. Hinweis: Du kannst auf eine bestimmte Spalte innerhalb eines Datensatzes verweisen, indem du die `$` Notation verwenden, um den Namen des Datensatzes und den Namen der Spalte zu trennen.

```{r, echo=TRUE}
class(linelist)         # class should be a data frame or tibble

class(linelist$age)     # class should be numeric

class(linelist$gender)  # class should be character
```

Manchmal wird eine Spalte von R automatisch in eine andere Klasse umgewandelt. Achte hierauf! Wenn du zum Beispiel einen Vektor oder eine Spalte mit Zahlen hast, aber einen Zeichenwert einfügst, wird die gesamte Spalte in die Klasse Zeichen umgewandelt.

```{r}
num_vector <- c(1,2,3,4,5) # define vector as all numbers
class(num_vector)          # vector is numeric class
num_vector[3] <- "three"   # convert the third element to a character
class(num_vector)          # vector is now character class
```

Ein häufiges Beispiel dafür ist die Bearbeitung eines Datenrahmens, um eine Tabelle zu drucken: Wenn du eine Summenzeile erstellst und versuchst, Prozentwerte in dieselbe Zelle wie Zahlen einzufügen/zu kleben (z. B. `23 (40%)`), wird die gesamte numerische Spalte darüber in Zeichen umgewandelt und kann nicht mehr für mathematische Berechnungen verwendet werden.**Manchmal musst du Objekte oder Spalten in eine andere Klasse umwandeln.**

\+------------------+---------------------------------------------------------------------------------------+
| Funktion | Aktion |
\+==================+=======================================================================================+
| `as.character()` | Konvertiert in Zeichenklasse |
\+------------------+---------------------------------------------------------------------------------------+
| `as.numeric()`   | Konvertiert in numerische Klasse |
\+------------------+---------------------------------------------------------------------------------------+
| `as.integer()`   | Konvertiert in Integer-Klasse |
\+------------------+---------------------------------------------------------------------------------------+
| `as.Date()`      | Konvertiert in die Date-Klasse - Hinweis: siehe Abschnitt über [Daten](#dates) für Details |
\+------------------+---------------------------------------------------------------------------------------+
| `factor()`       | Hinweis: Das Umdefinieren der Reihenfolge der Wertstufen erfordert zusätzliche Argumente.
\+------------------+---------------------------------------------------------------------------------------+

Ebenso gibt es **Basis** R-Funktionen, um zu prüfen, ob ein Objekt einer bestimmten Klasse angehört, wie z. B. `is.numeric()`, `is.character()`, `is.double()`, `is.factor()`, `is.integer()`

Hier ist [mehr Online-Material über Klassen und Datenstrukturen in R](https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/).

<!-- ======================================================= -->

### Spalten/Variablen (`$`) {.unnumbered}

**Eine Spalte in einem Datenrahmen ist technisch gesehen ein "Vektor" (siehe Tabelle oben)** - eine Reihe von Werten, die alle dieselbe Klasse haben müssen (entweder Zeichen, Zahlen, logische Werte usw.).

Ein Vektor kann unabhängig von einem Datenrahmen existieren, z. B. ein Vektor von Spaltennamen, die du als erklärende Variablen in ein Modell aufnehmen willst. Um einen "eigenständigen" Vektor zu erstellen, verwendest du die `c()` Funktion wie unten beschrieben:

```{r, warning=F, message=F}
# define the stand-alone vector of character values
explanatory_vars <- c("gender", "fever", "chills", "cough", "aches", "vomit")

# print the values in this named vector
explanatory_vars
```

**Spalten in einem Datenrahmen sind ebenfalls Vektoren und können mit der Funktion aufgerufen, referenziert, extrahiert oder erstellt `$` Symbol.** Die `$` Symbol verbindet den Namen der Spalte mit dem Namen des zugehörigen Datenrahmens. In diesem Handbuch versuchen wir, das Wort "Spalte" anstelle von "Variable" zu verwenden.

```{r basics_objects_call, eval=F}
# Retrieve the length of the vector age_years
length(linelist$age) # (age is a column in the linelist data frame)

```

Indem du den Namen des Datenrahmens eintippst, gefolgt von `$` eingibst, siehst du auch ein Dropdown-Menü mit allen Spalten des Datenrahmens. Du kannst mit der Pfeiltaste durch die Spalten blättern, mit der Eingabetaste eine auswählen und so Rechtschreibfehler vermeiden!

```{r, echo=F, out.width="100%", fig.align="center"}
knitr::include_graphics(here::here("images", "Calling_Names.gif"))
```

\[***ERWEITERTER TIPP:*** Einige komplexere Objekte (z. B. eine Liste oder ein `epicontacts` Objekt) können mehrere Ebenen haben, auf die durch mehrere Dollarzeichen zugegriffen werden kann. Zum Beispiel `epicontacts$linelist$date_onset`\]{style="color: darkgreen;"}

<!-- ======================================================= -->

### Zugang/Index mit Klammern (`[ ]`) {.unnumbered}

Es kann sein, dass du Teile von Objekten anzeigen musst, was auch als "Indizierung" bezeichnet wird und oft mit den eckigen Klammern `[ ]`. verwenden `$` in einem Datenrahmen, um auf eine Spalte zuzugreifen, ist ebenfalls eine Art der Indizierung.

```{r}
my_vector <- c("a", "b", "c", "d", "e", "f")  # define the vector
my_vector[5]                                  # print the 5th element
```

Eckige Klammern funktionieren auch, um bestimmte Teile einer zurückgegebenen Ausgabe zurückzugeben, wie zum Beispiel die Ausgabe einer `summary()` Funktion:

```{r}
# All of the summary
summary(linelist$age)

# Just the second element of the summary, with name (using only single brackets)
summary(linelist$age)[2]

# Just the second element, without name (using double brackets)
summary(linelist$age)[[2]]

# Extract an element by name, without showing the name
summary(linelist$age)[["Median"]]

```

Klammern funktionieren auch bei Datenrahmen, um bestimmte Zeilen und Spalten anzuzeigen. Du kannst dies mit der Syntax tun `dataframe[rows, columns]`:

```{r basics_objects_access, eval=F}
# View a specific row (2) from dataset, with all columns (don't forget the comma!)
linelist[2,]

# View all rows, but just one column
linelist[, "date_onset"]

# View values from row 2 and columns 5 through 10
linelist[2, 5:10] 

# View values from row 2 and columns 5 through 10 and 18
linelist[2, c(5:10, 18)] 

# View rows 2 through 20, and specific columns
linelist[2:20, c("date_onset", "outcome", "age")]

# View rows and columns based on criteria
# *** Note the dataframe must still be named in the criteria!
linelist[linelist$age > 25 , c("date_onset", "outcome", "age")]

# Use View() to see the outputs in the RStudio Viewer pane (easier to read) 
# *** Note the capital "V" in View() function
View(linelist[2:20, "date_onset"])

# Save as a new object
new_table <- linelist[2:20, c("date_onset")] 
```

Beachten Sie, dass Sie die oben beschriebene Zeilen-/Spaltenindizierung für Datenrahmen und Tibbles auch mit folgenden Methoden erreichen können **dplyr** Syntax (Funktionen `filter()` für Zeilen, und `select()`für Spalten). Mehr über diese Kernfunktionen erfährst du im Abschnitt [Datenbereinigung und Kernfunktionen] Seite.

Um nach der "Zeilennummer" zu filtern, kannst du die **dplyr** Funktion  verwenden. `row_number()` mit offenen Klammern als Teil einer logischen Filteranweisung. Oft wirst du die `%in%` Operator und einen Zahlenbereich als Teil dieser logischen Anweisung, wie unten gezeigt. Um die *erste* N Zeilen zu sehen, kannst du auch die spezielle **dplyr** Funktion  verwenden. `head()`.

```{r, eval=F}
# View first 100 rows
linelist %>% head(100)

# Show row 5 only
linelist %>% filter(row_number() == 5)

# View rows 2 through 20, and three specific columns (note no quotes necessary on column names)
linelist %>% filter(row_number() %in% 2:20) %>% select(date_onset, outcome, age)
```

Bei der Indizierung eines Objekts der Klasse **Liste** geben einfache Klammern immer die Klasse list zurück, auch wenn nur ein einziges Objekt zurückgegeben wird. Doppelte Klammern hingegen können verwendet werden, um auf ein einzelnes Element zuzugreifen und eine andere Klasse als list zurückzugeben.  
Klammern können auch hintereinander geschrieben werden, wie unten gezeigt.

Diese [visuelle Erklärung der Listenindizierung, mit Pfefferstreuern](https://r4ds.had.co.nz/vectors.html#lists-of-condiments) ist humorvoll und hilfreich.

```{r}
# define demo list
my_list <- list(
  # First element in the list is a character vector
  hospitals = c("Central", "Empire", "Santa Anna"),
  
  # second element in the list is a data frame of addresses
  addresses   = data.frame(
    street = c("145 Medical Way", "1048 Brown Ave", "999 El Camino"),
    city   = c("Andover", "Hamilton", "El Paso")
    )
  )
```

Hier siehst du, wie die Liste aussieht, wenn sie auf der Konsole ausgegeben wird. Du siehst, dass es zwei benannte Elemente gibt:

- `hospitals`, ein Zeichenvektor\\
- `addresses`, ein Datenrahmen mit Adressen

```{r}
my_list
```

Jetzt extrahieren wir mit verschiedenen Methoden:

```{r}
my_list[1] # this returns the element in class "list" - the element name is still displayed

my_list[[1]] # this returns only the (unnamed) character vector

my_list[["hospitals"]] # you can also index by name of the list element

my_list[[1]][3] # this returns the third element of the "hospitals" character vector

my_list[[2]][1] # This returns the first column ("street") of the address data frame

```

<!-- ======================================================= -->

### Objekte entfernen {.unnumbered}

Du kannst einzelne Objekte aus deiner R-Umgebung entfernen, indem du den Namen in das Feld `rm()` Funktion einfügst (ohne Anführungszeichen):

```{r, eval=F}
rm(object_name)
```

Du kannst alle Objekte entfernen (deinen Arbeitsbereich leeren), indem du ausführst:

```{r, eval=F}
rm(list = ls(all = TRUE))
```

<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## Rohrleitungen (`%>%`)

**Es gibt zwei allgemeine Ansätze für die Arbeit mit Objekten:**

1) **Pipes/Tidyverse** - Pipes senden ein Objekt von Funktion zu Funktion - die Betonung liegt auf *Aktion* und nicht auf dem Objekt.
2) **Definiere Zwischenobjekte** - ein Objekt wird immer wieder neu definiert - die Betonung liegt auf "Objekt".

<!-- ======================================================= -->

### **Rohre** {.unnumbered}

**Einfach erklärt, der Pipe-Operator (`%>%`) eine Zwischenausgabe von einer Funktion zur nächsten weiter.**  
Du kannst dir das so vorstellen, als würdest du "dann" sagen. Viele Funktionen können miteinander verknüpft werden mit `%>%`.

- **Piping betont eine Abfolge von Aktionen, nicht das Objekt, an dem die Aktionen ausgeführt**\\
- Pipes sind am besten geeignet, wenn eine Abfolge von Aktionen an einem Objekt ausgeführt werden muss\\
- Pipes stammen aus dem Paket **magrittr** das automatisch in Paketen enthalten ist **dplyr** und  enthalten ist. **tidyverse**
- Pipes können den Code sauberer und leichter lesbar machen, intuitiver

Lies mehr über diesen Ansatz im tidyverse [Styleguide](https://style.tidyverse.org/pipes.html)

Hier ist ein fiktives Beispiel zum Vergleich, bei dem fiktive Funktionen verwendet werden, um "einen Kuchen zu backen". Erstens, die Pipe-Methode:

```{r piping_example_pipe, eval=F}
# A fake example of how to bake a cake using piping syntax

cake <- flour %>%       # to define cake, start with flour, and then...
  add(eggs) %>%   # add eggs
  add(oil) %>%    # add oil
  add(water) %>%  # add water
  mix_together(         # mix together
    utensil = spoon,
    minutes = 2) %>%    
  bake(degrees = 350,   # bake
       system = "fahrenheit",
       minutes = 35) %>%  
  let_cool()            # let it cool down
```

Hier ist eine weitere [Link](https://cfss.uchicago.edu/notes/pipes/#:~:text=Pipes%20are%20an%20extremely%20useful,code%20and%20combine%20multiple%20operations) der den Nutzen von Rohren beschreibt.

Rohrleitungen sind keine **Basis** Funktion. Um Piping zu verwenden, muss die **magrittr** Paket installiert und geladen sein (dies geschieht in der Regel durch das Laden von **tidyverse** oder **dplyr** Paket, die es enthalten). Du kannst [mehr über Piping in der magrittr-Dokumentation lesen](https://magrittr.tidyverse.org/).

Beachte, dass Pipes genau wie andere R-Befehle verwendet werden können, um nur das Ergebnis anzuzeigen oder um ein Objekt zu speichern bzw. wieder zu speichern, je nachdem, ob der Zuweisungsoperator `<-` beteiligt ist. Siehe beides unten:

```{r, eval=F}
# Create or overwrite object, defining as aggregate counts by age category (not printed)
linelist_summary <- linelist %>% 
  count(age_cat)
```

```{r}
# Print the table of counts in the console, but don't save it
linelist %>% 
  count(age_cat)
```

**`%<>%`**  
Dies ist eine "Zuweisungs-Pipe" von der **magrittr** Paket, das *ein Objekt weiterleitet und auch das Objekt neu definiert*. Es muss der erste Pipe-Operator in der Kette sein. Es ist eine Kurzschrift. Die beiden folgenden Befehle sind gleichwertig:

```{r, eval=F}
linelist <- linelist %>%
  filter(age > 50)

linelist %<>% filter(age > 50)
```

<!-- ======================================================= -->

### Definiere Zwischenobjekte {.unnumbered}

Dieser Ansatz zum Ändern von Objekten/Datenrahmen kann besser sein, wenn:

- Du musst mehrere Objekte manipulieren.
- Es gibt Zwischenschritte, die sinnvoll sind und einen eigenen Objektnamen verdienen

**Risiken:**

- Für jeden Schritt neue Objekte zu erstellen bedeutet, viele Objekte zu erstellen. Wenn du das falsche verwendest, merkst du das vielleicht nicht!\\
- Die Benennung aller Objekte kann verwirrend sein\\
- Fehler sind möglicherweise nicht leicht zu erkennen

Entweder benennst du jedes Zwischenobjekt, oder du überschreibst das Original, oder du kombinierst alle Funktionen miteinander. Alle sind mit ihren eigenen Risiken verbunden.

Unten siehst du das gleiche Beispiel für einen gefälschten "Kuchen" wie oben, aber in diesem Stil:

```{r piping_example_redefine, eval=F}
# a fake example of how to bake a cake using this method (defining intermediate objects)
batter_1 <- left_join(flour, eggs)
batter_2 <- left_join(batter_1, oil)
batter_3 <- left_join(batter_2, water)

batter_4 <- mix_together(object = batter_3, utensil = spoon, minutes = 2)

cake <- bake(batter_4, degrees = 350, system = "fahrenheit", minutes = 35)

cake <- let_cool(cake)
```

Kombiniere alle Funktionen miteinander - das ist schwer zu lesen:

```{r, eval=F}
# an example of combining/nesting mutliple functions together - difficult to read
cake <- let_cool(bake(mix_together(batter_3, utensil = spoon, minutes = 2), degrees = 350, system = "fahrenheit", minutes = 35))
```

<!-- ======================================================= -->

## Wichtige Operatoren und Funktionen {#operators}

Dieser Abschnitt beschreibt die Operatoren in R, wie z. B.:

- Definitorische Operatoren.
- Relationale Operatoren (kleiner als, gleich zu...)\\
- Logische Operatoren (und, oder...)\\
- Umgang mit fehlenden Werten\\
- Mathematische Operatoren und Funktionen (+/-, >, Summe(), Median(), ...)\\
- Die `%in%` Operator

<!-- ======================================================= -->

### Zuweisungsoperatoren {.unnumbered}

**`<-`**

Der grundlegende Zuweisungsoperator in R ist `<-`. So, dass `object_name <- value`.  
Dieser Zuweisungsoperator kann auch geschrieben werden als `=`. Wir empfehlen die Verwendung von `<-` für den allgemeinen Gebrauch von R.  
Wir empfehlen außerdem, solche Operatoren mit Leerzeichen zu umgeben, um die Lesbarkeit zu verbessern.

**`<<-`**

Wenn [Funktionen schreibst] oder R auf interaktive Weise mit Quellenskripten nutzt, musst du möglicherweise diesen Zuweisungsoperator verwenden`<<-` (von **base** R). Dieser Operator wird verwendet, um ein Objekt in einer höheren "übergeordneten" R-Umgebung zu definieren. Siehe dies [Online-Referenz](https://stat.ethz.ch/R-manual/R-devel/library/base/html/assignOps.html).

**`%<>%`**

Dies ist eine "Zuweisungsleitung" aus dem **magrittr** Paket, die ein Objekt weiterleitet und *auch das Objekt neu definiert*. Es muss der erste Pipe-Operator in der Kette sein. Er ist eine Abkürzung, wie in den folgenden zwei Beispielen gezeigt wird:

```{r, eval=F}
linelist <- linelist %>% 
  mutate(age_months = age_years * 12)
```

Das oben Gesagte ist gleichbedeutend mit dem unten Gesagten:

```{r, eval=F}
linelist %<>% mutate(age_months = age_years * 12)
```

**`%<+%`**

Dies wird verwendet, um Daten zu phylogenetischen Bäumen hinzuzufügen mit der **ggtree**Paket. Siehe die Seite über [Phylogenetische Bäume] oder dieses Online[Ressourcenbuch](https://yulab-smu.top/treedata-book/).

<!-- ======================================================= -->

### Relationale und logische Operatoren {.unnumbered}

Relationale Operatoren vergleichen Werte und werden häufig verwendet, um neue Variablen und Teilmengen von Datensätzen zu definieren. Hier sind die gängigen relationalen Operatoren in R:

\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Bedeutung | Operator | Beispiel | Beispielergebnis |
\+==========================+============+==============+========================================================================================================================================================+
 Gleich | Gleich | `==`       | `"A" == "a"` | `FALSE` (weil bei R zwischen Groß- und Kleinschreibung unterschieden wird) *Beachte, dass == (doppelte Gleichheit) sich von = (einfache Gleichheit) unterscheidet, das sich wie der Zuweisungsoperator verhält `<-`* |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Nicht gleich | `!=`       | `2 != 0`     | `TRUE`                                                                                                                                                 |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Größer als | `>`        | `4 > 2`      | `TRUE`                                                                                                                                                 |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Weniger als | `<`        | `4 < 2`      | `FALSE`                                                                                                                                                |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Größer als oder gleich | `>=`       | `6 >= 4`     | `TRUE`                                                                                                                                                 |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Kleiner als oder gleich | `<=`       | `6 <= 4`     | `FALSE`                                                                                                                                                |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Wert fehlt | `is.na()`  | `is.na(7)`   | `FALSE`(siehe Seite über [Fehlende Daten])                                                                                                                   |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Value is not missing | `!is.na()` | `!is.na(7)`  | `TRUE`                                                                                                                                                 |
\+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+

Logische Operatoren wie AND und OR werden oft verwendet, um relationale Operatoren zu verbinden und kompliziertere Kriterien zu erstellen. Komplexe Aussagen können Klammern ( ) für die Gruppierung und Reihenfolge der Anwendung erfordern.

\+---------------------+-----------------------------------------------------------------------+
| Bedeutung | Operator |
\+=====================+=======================================================================+
| AND | `&`                                                                   |
\+---------------------+-----------------------------------------------------------------------+
| OR | `|` (vertikaler Balken) |
\+---------------------+-----------------------------------------------------------------------+
| Klammern | `( )` Wird verwendet, um Kriterien zusammenzufassen und die Reihenfolge der Operationen zu verdeutlichen.
\+---------------------+-----------------------------------------------------------------------+

Unten haben wir zum Beispiel eine Liste mit zwei Variablen, die wir für unsere Falldefinition verwenden wollen, `hep_e_rdt` ein Testergebnis und `other_cases_in_hh`, die uns sagt, ob es noch andere Fälle im Haushalt gibt. Der folgende Befehl verwendet die Funktion `case_when()` um die neue Variable zu erstellen `case_def` so dass:

```{r, eval=FALSE}
linelist_cleaned <- linelist %>%
  mutate(case_def = case_when(
    is.na(rdt_result) & is.na(other_case_in_home)            ~ NA_character_,
    rdt_result == "Positive"                                 ~ "Confirmed",
    rdt_result != "Positive" & other_cases_in_home == "Yes"  ~ "Probable",
    TRUE                                                     ~ "Suspected"
  ))
```

\+------------------------------------------------------------------------------------------------+--------------------------------------------+
| Kriterien im obigen Beispiel | Resultierender Wert in neuer Variable "case\_def" |
\+================================================================================================+============================================+
| Wenn der Wert für die Variablen `rdt_result` und `other_cases_in_home` fehlen | `NA` (fehlt) |
\+------------------------------------------------------------------------------------------------+--------------------------------------------+
| Wenn der Wert in `rdt_result` "Positiv" | "Bestätigt" | "Bestätigt" ist
\+------------------------------------------------------------------------------------------------+--------------------------------------------+
| Wenn der Wert in `rdt_result` NICHT "Positiv" ist UND der Wert in `other_cases_in_home` ist "Ja" | "Wahrscheinlich" |
\+------------------------------------------------------------------------------------------------+--------------------------------------------+
| Wenn eines der oben genannten Kriterien nicht erfüllt ist | "Vermutlich" |
\+------------------------------------------------------------------------------------------------+--------------------------------------------+

*Beachte, dass R zwischen Groß- und Kleinschreibung unterscheidet, also ist "positiv" etwas anderes als "positiv"...*

<!-- ======================================================= -->

### Fehlende Werte {.unnumbered}

In R werden fehlende Werte durch einen speziellen Wert dargestellt `NA` (ein "reservierter" Wert) dargestellt (Großbuchstaben N und A - nicht in Anführungszeichen). Wenn du Daten importierst, die fehlende Daten auf eine andere Art und Weise erfassen (z. B. 99, "Missing" oder .), solltest du diese Werte umcodieren in `NA`. Wie du das machst, erfährst du im Abschnitt [Importieren und Exportieren] Seite.

**Um zu prüfen, ob ein Wert `NA` ist, verwenden Sie die spezielle Funktion `is.na()`**, die Folgendes zurückgibt `TRUE` oder `FALSE`.

```{r basics_operators_missing}
rdt_result <- c("Positive", "Suspected", "Positive", NA)   # two positive cases, one suspected, and one unknown
is.na(rdt_result)  # Tests whether the value of rdt_result is NA
```

Lies mehr über vermisst, unendlich, `NULL`und unmögliche Werte auf der Seite über [Fehlende Daten]. Wie du fehlende Werte beim Importieren von Daten konvertierst, erfährst du auf der Seite über [Importieren und Exportieren].

<!-- ======================================================= -->

### Mathematik und Statistik {.unnumbered}

Alle Operatoren und Funktionen auf dieser Seite sind automatisch verfügbar mit **Basis** R.

#### Mathematische Operatoren {.unnumbered}

Diese werden oft verwendet, um Additionen und Divisionen durchzuführen, neue Spalten zu erstellen usw. Im Folgenden findest du gängige mathematische Operatoren in R. Ob du Leerzeichen um die Operatoren setzt, ist nicht wichtig.

| Zweck                         | Beispiel in R                         | 
| ----------------------------- | ------------------------------------- |
| Addition                      | 2 + 3                                 | 
| Subtraktion                   | 2 - 3                                 | 
| Multiplikation                | 2 \* 3                                 | 
| Division                      | 30 / 5                                | 
| Exponent                      | 2^3                                   | 
| Reihenfolge der Operationen   | ( )                                   | 

#### Mathematische Funktionen {.unnumbered}

| Zweck                         | Funktion                              | 
| ----------------------------- | ------------------------------------- |
| Rundung                       | round(x, Ziffern = n)                 | 
| Rundung                       | janitor::round\_half\_up(x, digits = n) | 
| Obergrenze (aufrunden)        | Obergrenze(x)                         | 
| floor (abrunden)              | floor(x)                              | 
| absoluter Wert                | abs(x)                                | 
| Quadratwurzel                 | sqrt(x)                               | 
| Exponent                      | exponent(x)                           | 
| natürlicher Logarithmus       | log(x)                                | 
| log Basis 10                  | log10(x)                              | 
| log Basis 2                   | log2(x)                               | 

Anmerkung: für `round()` die `digits =` gibt die Anzahl der Nachkommastellen an. Verwende `signif()` um auf eine Anzahl signifikanter Stellen zu runden.

#### Wissenschaftliche Notation {.unnumbered}

Die Wahrscheinlichkeit, dass die wissenschaftliche Notation verwendet wird, hängt vom Wert der `scipen` Option ab.

Aus der Dokumentation von `?options` scipen ist ein Malus, der angewendet wird, wenn du entscheidest, ob numerische Werte in fester oder exponentieller Notation gedruckt werden sollen. Bei positiven Werten wird die feste Notation bevorzugt, bei negativen die wissenschaftliche Notation: Die feste Notation wird bevorzugt, es sei denn, sie ist um mehr als 'scipen' Stellen breiter.

Wenn der Wert auf eine niedrige Zahl (z.B. 0) gesetzt wird, ist sie immer "eingeschaltet". Um die wissenschaftliche Notation in deiner R-Sitzung "auszuschalten", setze sie z. B. auf eine sehr hohe Zahl:

```{r, eval=F}
# turn off scientific notation
options(scipen=999)
```

#### Abrunden {.unnumbered}

\[***GEFAHR!*** `round()` Verwendet das "Banker's Rounding", das von einer 0,5 nur aufrundet, wenn die obere Zahl gerade ist. Verwende `round_half_up()` von **Hausmeister** um Halbe konsequent auf die nächste ganze Zahl aufzurunden. Siehe [diese Erklärung](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#explore-records-with-duplicated-values-for-specific-combinations-of-variables-with-get_dupes) \]{style="color: red;"}

```{r}
# use the appropriate rounding function for your work
round(c(2.5, 3.5))

janitor::round_half_up(c(2.5, 3.5))
```

#### Statistische Funktionen {.unnumbered}

\[***VORSICHT!*** Die folgenden Funktionen berücksichtigen standardmäßig auch fehlende Werte in den Berechnungen. Fehlende Werte führen zu einer Ausgabe von `NA` es sei denn, das Argument `na.rm = TRUE` angegeben wird. Dies kann in Kurzform geschrieben werden als `na.rm = T`.\]{style="color: orange;"}

| Zielsetzung                   | Funktion                              | 
| ----------------------------- | ------------------------------------- |
| Mittelwert (Durchschnitt)     | mean(x, na.rm=T)                      | 
| Median                        | median(x, na.rm=T)                    | 
| Standardabweichung            | sd(x, na.rm=T)                        | 
| Quantile\*                     | Quantil(x, Probs)                     | 
| Summe                         | sum(x, na.rm=T)                       | 
| Mindestwert                   | min(x, na.rm=T)                       | 
| Maximalwert                   | max(x, na.rm=T)                       | 
| Bereich der numerischen Werte | bereich(x, na.rm=T)                   | 
| Zusammenfassung\*\*             | Zusammenfassung(x)                    | 

Anmerkungen:

- `*quantile()`: `x` ist der zu untersuchende numerische Vektor und `probs =` ist ein numerischer Vektor mit Wahrscheinlichkeiten zwischen 0 und 1,0, z. B. `c(0.5, 0.8, 0.85)`
- `**summary()` Zusammenfassung eines numerischen Vektors mit Mittelwert, Median und gemeinsamen Perzentilen

\[***GEFAHR!*** Wenn du einen Zahlenvektor an eine der oben genannten Funktionen übergibst, musst du die Zahlen in eine `c()` .\]{style="color: red;"}

```{r}
# If supplying raw numbers to a function, wrap them in c()
mean(1, 6, 12, 10, 5, 0)    # !!! INCORRECT !!!  

mean(c(1, 6, 12, 10, 5, 0)) # CORRECT
```

#### Andere nützliche Funktionen {.unnumbered}

\+----------------------------+-------------------+-------------------------------------------------+
| Zielsetzung | Funktion | Beispiel |
\+============================+===================+=================================================+
| Eine Sequenz erstellen | seq(from, to, by) | `seq(1, 10, 2)`                                 |
\+----------------------------+-------------------+-------------------------------------------------+
| x, n-mal wiederholen | rep(x, n-mal) | `rep(1:3, 2)` oder `rep(c("a", "b", "c"), 3)`     |
\+----------------------------+-------------------+-------------------------------------------------+
| einen numerischen Vektor unterteilen | cut(x, n) | `cut(linelist$age, 5)`                          |
\+----------------------------+-------------------+-------------------------------------------------+
| Eine Zufallsstichprobe nehmen | sample(x, size) | `sample(linelist$id, size = 5, replace = TRUE)` |
\+----------------------------+-------------------+-------------------------------------------------+

<!-- ======================================================= -->

### `%in%` {.unnumbered}

Ein sehr nützlicher Operator, um Werte abzugleichen und um schnell festzustellen, ob ein Wert in einem Vektor oder Datenrahmen enthalten ist.

```{r}
my_vector <- c("a", "b", "c", "d")
```

```{r}
"a" %in% my_vector
"h" %in% my_vector
```

Um zu fragen, ob ein Wert **nicht** `%in%` ein Vektor, setze ein Ausrufezeichen (!) **vor** vor die logische Aussage:

```{r}
# to negate, put an exclamation in front
!"a" %in% my_vector
!"h" %in% my_vector
```

`%in%` ist sehr nützlich, wenn man die **dplyr** Funktion `case_when()`. Du kannst einen Vektor vorher definieren und ihn dann später referenzieren. Zum Beispiel:

```{r, eval=F}
affirmative <- c("1", "Yes", "YES", "yes", "y", "Y", "oui", "Oui", "Si")

linelist <- linelist %>% 
  mutate(child_hospitaled = case_when(
    hospitalized %in% affirmative & age < 18 ~ "Hospitalized Child",
    TRUE                                      ~ "Not"))
```

Hinweis: Wenn du eine Teilzeichenkette erkennen willst, vielleicht mit `str_detect()` von **stringr** nicht akzeptiert, sondern einen Zeichenvektor wie `c("1", "Yes", "yes", "y")`. Stattdessen muss er eine *regulärer Ausdruck* - eine verdichtete Zeichenkette mit ODER-Balken, wie z.B. "1|Ja|Ja|J". Zum Beispiel, `str_detect(hospitalized, "1|Yes|yes|y")`. Siehe die Seite über [Zeichen und Zeichenketten] für weitere Informationen.

Mit diesem Befehl kannst du einen Zeichenvektor in einen benannten regulären Ausdruck umwandeln:

```{r}
affirmative <- c("1", "Yes", "YES", "yes", "y", "Y", "oui", "Oui", "Si")
affirmative

# condense to 
affirmative_str_search <- paste0(affirmative, collapse = "|")  # option with base R
affirmative_str_search <- str_c(affirmative, collapse = "|")   # option with stringr package

affirmative_str_search
```

<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## Fehler \& Warnungen

Dieser Abschnitt erklärt:

- Der Unterschied zwischen Fehlern und Warnungen\\
- Allgemeine Syntax-Tipps zum Schreiben von R-Code\\
- Code-Hilfen

Häufige Fehler und Warnungen sowie Tipps zur Fehlerbehebung findest du auf der Seite [Fehler und Hilfe].

<!-- ======================================================= -->

### Fehler versus Warnung {.unnumbered}

Wenn ein Befehl ausgeführt wird, zeigt dir die R-Konsole möglicherweise Warn- oder Fehlermeldungen in rotem Text an.

- A **Warnung** bedeutet, dass R deinen Befehl ausgeführt hat, aber zusätzliche Schritte durchführen musste oder ungewöhnliche Ausgaben produziert hat, die du beachten solltest.

- Eine **Fehler** bedeutet, dass R deinen Befehl nicht ausführen konnte.

Suche nach Hinweisen:

- Die Fehler-/Warnmeldung enthält oft eine Zeilennummer für das Problem.

- Wenn ein Objekt "unbekannt" oder "nicht gefunden" ist, hast du es vielleicht falsch geschrieben, vergessen, ein Paket mit library() aufzurufen, oder vergessen, dein Skript nach Änderungen erneut auszuführen.

Wenn alles andere fehlschlägt, kopiere die Fehlermeldung zusammen mit einigen Schlüsselbegriffen in Google - die Chancen stehen gut, dass jemand anderes das Problem bereits gelöst hat!

<!-- ======================================================= -->

### Allgemeine Tipps zur Syntax {.unnumbered}

Ein paar Dinge, die du beim Schreiben von Befehlen in R beachten solltest, um Fehler und Warnungen zu vermeiden:

- Schließe immer Klammern - Tipp: Zähle die Anzahl der öffnenden "(" und schließenden Klammern ")" für jedes Code-Stück
- Vermeide Leerzeichen in Spalten- und Objektnamen. Verwende stattdessen Unterstriche ( \_ ) oder Punkte ( . )
- Behalte den Überblick und trenne die Argumente einer Funktion mit Kommas
- R unterscheidet zwischen Groß- und Kleinschreibung, das heißt `Variable_A` ist *anders* von `variable_A`

<!-- ======================================================= -->

### Code Assistenten {.unnumbered}

Jedes Skript (RMarkdown oder ein anderes) gibt Hinweise, wenn du einen Fehler gemacht hast. Wenn du zum Beispiel vergessen hast, ein Komma zu setzen, wo es gebraucht wird, oder eine Klammer zu schließen, setzt RStudio in dieser Zeile auf der rechten Seite des Skripts eine Flagge, um dich zu warnen.


