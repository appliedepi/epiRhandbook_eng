# Escribir funciones {#writing-functions-1}


<!-- ======================================================= -->



## Preparación {#preparation-37}


### Cargar paquetes {-}

Este trozo de código muestra la carga de los paquetes necesarios para los análisis. En este manual destacamos `p_load()` de **pacman**, que instala el paquete si es necesario *y* lo carga para su uso. También puedes cargar los paquetes instalados con `library()` de R **base.** Consulta la página [fundamentos de R](#r-basics) para obtener más información sobre los paquetes de R.

```{r, echo=F, warning=F, message=F}
pacman::p_load(
  rio,         # Importación de ficheros
  here,        # localizador de ficheros
  skimr,       # obtener una visión general de los datos
  tidyverse,   # gestión de datos + gráficos ggplot2, 
  gtsummary,   # resumen estadístico y pruebas
  janitor,     # añadir totales y porcentajes a las tablas
  scales,      # convertir fácilmente proporciones en porcentajes  
  flextable,   # convertir tablas a HTML
  purrr,       # facilita la programación funcional
  readr,       # para leer ficheros csv
  highcharter  # crear un objeto highchart y dibujar un gráfico particular
  )
```

### Importar datos {-}

Importamos los datos de casos de una epidemia de ébola simulada. Si deseas descargar los datos para seguirlos paso a paso, consulta las instrucciones en la página [Descargar libro y datos]. Los datos se importan mediante la función `import()` del paquete **rio**. Consulta la página sobre [importación y exportación](#import-and-export) para conocer las distintas formas de importar datos.

También utilizaremos en la última parte de esta página algunos datos sobre la gripe H7N9 de 2013.

```{r, echo=F}
# importar linelists a R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

flu_china <- rio::import(here::here("data", "case_linelists", "fluH7N9_China_2013.csv"))

```


## Funciones {#functions-2}

Las funciones son útiles en la programación, ya que permiten hacer códigos más fáciles de entender, de alguna manera más cortos y menos propensos a errores (dado que no hay errores en la propia función).

Si has llegado hasta este manual, significa que te has encontrado con un sinfín de funciones ya que en R, cada operación es una llamada a una función `+, for, if, [, $, { …`. Por ejemplo, `x + y` es lo mismo que`'+'(x, y)` 

R es uno de los lenguajes que más posibilidades ofrece para trabajar con funciones y da suficientes herramientas al usuario para escribirlas fácilmente. No debemos pensar en las funciones como algo fijo en la cima o al final de la cadena de programación, R ofrece la posibilidad de utilizarlas como si fueran vectores e incluso utilizarlas dentro de otras funciones, listas...

Existen muchos recursos muy avanzados sobre programación funcional y aquí sólo daremos una visión para ayudarte a empezar con la programación de funciones con breves ejemplos prácticos. Te animamos a visitar los enlaces de las referencias para leer más sobre el tema.


## ¿Por qué utilizar una función? {#why-would-you-use-a-function}

Antes de responder a esta pregunta, es importante tener en cuenta que ya has tenido consejos para llegar a escribir tus primeras funciones R en la página sobre [Iteración, bucles y listas](#iteration-loops-and-lists) de este manual. De hecho, el uso de "if/else" y bucles suele ser una parte fundamental de muchas de nuestras funciones, ya que ayudan fácilmente a ampliar la aplicación de nuestro código permitiendo múltiples condiciones o a iterar códigos para repetir tareas.

* ¿Estoy repitiendo varias veces el mismo bloque de código para aplicarlo a una variable o dato diferente?

* Deshacerse de él, ¿acortará sustancialmente mi código general y hará que se ejecute más rápido?

* ¿Es posible que el código que he escrito se utilice de nuevo pero con un valor diferente en muchos lugares del código?

Si la respuesta a una de las preguntas anteriores es "SÍ", es probable que tenga que escribir una función.

## ¿Cómo construye R las funciones? {#how-does-r-build-functions}

Las funciones en R tienen tres componentes principales:

* las `formals()` que es la lista de argumentos que controla cómo podemos llamar a la función

* el `body()` que es el código dentro de la función, es decir, dentro de los paréntesis o después del paréntesis, dependiendo de cómo lo escribamos

y,

* el `environment()` que ayudará a localizar las variables de la función y determina cómo encuentra la función el valor.

Una vez que hayas creado tu función, puedes verificar cada uno de estos componentes llamando a la función asociada.

## Sintaxis y estructura básica {#basic-syntax-and-structure}

* Una función tendrá que ser nombrada adecuadamente para que su trabajo sea fácilmente comprensible tan pronto como leamos su nombre. En realidad, este es el caso de la mayoría de la arquitectura básica de R. Funciones como `mean()`, `print()`, `summary()` tienen nombres muy sencillos

* Una función necesitará argumentos, como los datos sobre los que trabajar y otros objetos que pueden ser valores estáticos entre otras opciones

* Y finalmente una función producirá una salida basada en su tarea principal y en los argumentos que se le han dado. Normalmente utilizaremos las funciones incorporadas como `print()`, `return()`... para producir la salida. La salida puede ser un valor lógico, un número, un carácter, un dataframe... en definitiva cualquier tipo de objeto de R.

Básicamente se trata de la composición de una función:

```{r, eval=FALSE}

function_name <- function(argument_1, argument_2, argument_3){
  
           function_task
  
           return(output)
}


```

Podemos crear nuestra primera función que se llamará `contain_covid19()`.

```{r}

contain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){
  
                            if(barrier_gest == "yes" & wear_mask == "yes" & get_vaccine == "yes" ) 
       
                            return("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


```

A continuación, podemos verificar los componentes de nuestra función recién creada.

```{r}

formals(contain_covid19)
body(contain_covid19)
environment(contain_covid19)

```


Ahora vamos a probar nuestra función. Para llamar a nuestra función escrita, la usas como usas todas las funciones de R, es decir, escribiendo el nombre de la función y añadiendo los argumentos necesarios.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "yes")

```

Podemos volver a escribir el nombre de cada argumento por precaución. Pero sin especificarlos, el código debería funcionar ya que R tiene en memoria la posición de cada argumento. Así que mientras pongas los valores de los argumentos en el orden correcto, puedes omitir escribir los nombres de los argumentos al llamar a las funciones.

```{r}

contain_covid19("yes", "yes", "yes")

```

A continuación, veamos qué ocurre si uno de los valores es `"no"` o **no** `"yes"`.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "no")
```

Si proporcionamos un argumento que no es reconocido, se producirá un error:

```{r, eval=F}
contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", get_vaccine = "no")
```

`Error en contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", : no se pudo encontrar la función "contain_covid19"`


<span style="color: black;">**_NOTA:_** Algunas funciones (la mayoría de las veces muy cortas y sencillas) pueden no necesitar un nombre y pueden ser utilizadas directamente en una línea de código o dentro de otra función para realizar una tarea rápida. Se llaman **funciones anónimas**.</span>

Por ejemplo, a continuación se muestra una primera función anónima que mantiene sólo las variables de carácter de los datos.


```{r, eval=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  # equivalente a la función de R base "head" que retorna las n primeras observaciones de un conjunto de datos.
  select(function(x) is.character(x)) 
```
  
```{r, echo=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  # equivalente a la función de R base "head" que retorna las n primeras observaciones de un conjunto de datos.
  select(function(x) is.character(x)) %>%  
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```


A continuación, otra función que selecciona una de cada dos observaciones de nuestro conjunto de datos (puede ser relevante cuando tenemos datos longitudinales con muchos registros por paciente, por ejemplo, después de haber ordenado por fecha o visita). En este caso, la función adecuada que se escribe fuera de dplyr sería `function (x) (x%2 == 0)` para aplicarla al vector que contiene todos los números de fila.


```{r, eval=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # agrega índices de cada obs como rownames para ver claramente la selección final
   filter(row_number() %%2 == 0)
```

```{r, echo=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>%    # agrega índices de cada obs como rownames para ver claramente la selección final
   filter(row_number() %%2 == 0) %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


Un posible código para la misma tarea sería:

```{r, eval = F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]
```

```{r, echo=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


<span style="color: orange;">**_PRECAUCIÓN:_** Aunque es cierto que el uso de funciones puede ayudarnos con nuestro código, puede llevar mucho tiempo escribir algunas funciones o arreglar una si no ha sido pensada a fondo, escrita adecuadamente y está devolviendo errores como resultado. Por esta razón, a menudo se recomienda escribir primero el código en R, asegurarse de que hace lo que pretendemos, y luego transformarlo en una función con sus tres componentes principales, como se ha indicado anteriormente.</span>

## Ejemplos  {#examples-2}

### Devuelve tablas de proporciones para varias columnas {.unnumbered}  

Sí, ya disponemos de bonitas funciones en muchos paquetes que permiten resumir la información de una manera muy fácil y agradable. Pero aún así intentaremos hacer las nuestras, en nuestros primeros pasos para acostumbrarnos a escribir funciones.

En este ejemplo queremos mostrar cómo la escritura de una función simple te evitaría copiar y pegar el mismo código varias veces.

```{r}

proptab_multiple <- function(my_data, var_to_tab){
  
  # imprime el nombre de cada variable de interés antes de realizar la tabulación
  print(var_to_tab)

  with(my_data,
       rbind( # enlaza por filas los resultados de las siguientes dos funciones 
        #tabula la variable de interés: da solo números
          table(my_data[[var_to_tab]], useNA = "no"),
          #calcula la proporción de cada variable de interés y redondear el valor a 2 decimales
         round(prop.table(table(my_data[[var_to_tab]]))*100,2)
         )
       )
}


proptab_multiple(linelist, "gender")

proptab_multiple(linelist, "age_cat")

proptab_multiple(linelist, "outcome")


```

<span style="color: darkgreen;">**_CONSEJO:_** Como se ha indicado anteriormente, es muy importante comentar las funciones como se haría en la programación general. Ten en cuenta que el objetivo de una función es hacer un código fácil de leer, más corto y más eficiente. Entonces uno debería ser capaz de entender lo que hace la función con sólo leer su nombre y debería tener más detalles leyendo los comentarios.</span>


Una segunda opción es utilizar esta función en otra a través de un bucle para hacer el proceso a la vez:

```{r}


for(var_to_tab in c("gender","age_cat",  "outcome")){
  
  print(proptab_multiple(linelist, var_to_tab))
  
}

```

Una forma más sencilla podría ser utilizar la base R "apply" en lugar de un "bucle for" como se expresa a continuación:

```{r, include= FALSE, eval=FALSE}

base::lapply(linelist[,c("gender","age_cat", "outcome")], table)

```


<span style="color: darkgreen;">**_CONSEJO:_** R se define a menudo como un lenguaje de programación funcional y casi siempre que ejecutas una línea de código estás utilizando algunas funciones incorporadas. Un buen hábito para sentirse más cómodo con la escritura de funciones es echar a menudo un vistazo interno a cómo están construidas las funciones básicas que utiliza a diario. El atajo para hacerlo es seleccionar el nombre de la función y luego clicar en `Ctrl+F2` o `fn+F2` o `Cmd+F2` (dependiendo de tu ordenador).</span>

## Uso de **purrr**: escribir funciones que se pueden aplicar de forma iterativa {#using-purrr-writing-functions-that-can-be-iteratively-applied}

### Modificar el tipo de múltiples columnas en unos datos {.unnumbered}   

Digamos que muchas variables de carácter en los datos originales de `linelist` necesitan ser cambiadas a "factor" para propósitos de análisis y trazado. En lugar de repetir el paso varias veces, podemos utilizar simplemente `lapply()` para realizar la transformación de todas las variables afectadas en una sola línea de código.


<span style="color: orange;">**_PRECAUCIÓN:_** `lapply()` devuelve una lista, por lo que su uso puede requerir una modificación adicional como último paso.</span>


```{r, include=FALSE}

linelist_factor1 <- linelist %>%
      lapply(
          function(x) if(is.character(x)) as.factor(x) else x) %>%
      as.data.frame() %>% 
      glimpse()

```


El mismo paso puede realizarse utilizando la función `map_if()` del paquete **purrr**

```{r}

linelist_factor2 <- linelist %>%
  purrr::map_if(is.character, as.factor)


linelist_factor2 %>%
        glimpse()

```


### Elaborar de forma iterativa gráficos para diferentes niveles de una variable {.unnumbered} 

Produciremos aquí un gráfico circular para ver la distribución del resultado de los pacientes en China durante el brote de H7N9 para cada provincia. En lugar de repetir el código para cada una de ellas, nos limitaremos a aplicar una función que crearemos.

```{r}

# precisar opciones para el uso de highchart
options(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))


# Crear una función llamada "chart_outcome_province" que tome como argumento el conjunto de datos y el nombre de la provincia para la cual plotear la distribución del resultado.

chart_outcome_province <- function(data_used, prov){
  
  tab_prov <- data_used %>% 
    filter(province == prov,
           !is.na(outcome))%>% 
    group_by(outcome) %>% 
    count() %>%
    adorn_totals(where = "row") %>% 
    adorn_percentages(denominator = "col", )%>%
    mutate(
        perc_outcome= round(n*100,2))
  
  
  tab_prov %>%
    filter(outcome != "Total") %>% 
  highcharter::hchart(
    "pie", hcaes(x = outcome, y = perc_outcome),
    name = paste0("Distibution of the outcome in:", prov)
    )
  
}

chart_outcome_province(flu_china, "Shanghai")
chart_outcome_province(flu_china,"Zhejiang")
chart_outcome_province(flu_china,"Jiangsu")


```



### Producir iterativamente tablas para diferentes niveles de una variable {.unnumbered}  

Aquí crearemos tres indicadores para resumirlos en una tabla y nos gustaría elaborar esta tabla para cada una de las provincias. Nuestros indicadores son el retraso entre el inicio y la hospitalización, el porcentaje de recuperación y la edad media de los casos.

```{r}


indic_1 <- flu_china %>% 
  group_by(province) %>% 
  mutate(
    date_hosp= strptime(date_of_hospitalisation, format = "%m/%d/%Y"),
    date_ons= strptime(date_of_onset, format = "%m/%d/%Y"), 
    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,
    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%
  select(province, mean_delay_onset_hosp)  %>% 
  distinct()
     

indic_2 <-  flu_china %>% 
            filter(!is.na(outcome)) %>% 
            group_by(province, outcome) %>% 
            count() %>%
            pivot_wider(names_from = outcome, values_from = n) %>% 
    adorn_totals(where = "col") %>% 
    mutate(
        perc_recovery= round((Recover/Total)*100,2))%>% 
  select(province, perc_recovery)
    
    
    
indic_3 <-  flu_china %>% 
            group_by(province) %>% 
            mutate(
                    median_age_cases = median(as.numeric(age), na.rm = TRUE)
            ) %>% 
  select(province, median_age_cases)  %>% 
  distinct()

# unir los indicadores de los tres conjuntos de datos

table_indic_all <- indic_1 %>% 
  dplyr::left_join(indic_2, by = "province") %>% 
        left_join(indic_3, by = "province")


# imprimir los indicadores en una flextable


print_indic_prov <-  function(table_used, prov){
  
  # primero transforma un poco el dataframe para facilitar la impresión
  indic_prov <- table_used %>%
    filter(province==prov) %>%
    pivot_longer(names_to = "Indicateurs", cols = 2:4) %>% 
   mutate( indic_label = factor(Indicateurs,
   levels= c("mean_delay_onset_hosp","perc_recovery","median_age_cases"),
   labels=c("Mean delay onset-hosp","Percentage of recovery", "Median age of the cases"))
   ) %>% 
    ungroup(province) %>% 
    select(indic_label, value)
  

    tab_print <- flextable(indic_prov)  %>%
    theme_vanilla() %>% 
    flextable::fontsize(part = "body", size = 10) 
    
    
     tab_print <- tab_print %>% 
                  autofit()   %>%
                  set_header_labels( 
                indic_label= "Indicateurs", value= "Estimation") %>%
    flextable::bg( bg = "darkblue", part = "header") %>%
    flextable::bold(part = "header") %>%
    flextable::color(color = "white", part = "header") %>% 
    add_header_lines(values = paste0("Indicateurs pour la province de: ", prov)) %>% 
bold(part = "header")
 
 tab_print <- set_formatter_type(tab_print,
   fmt_double = "%.2f",
   na_str = "-")

tab_print 
    
}




print_indic_prov(table_indic_all, "Shanghai")
print_indic_prov(table_indic_all, "Jiangsu")


```


## Consejos y buens prácticas para el buen funcionamiento de las funciones {#tips-and-best-practices-for-well-functioning-functions}

La programación funcional está pensada para aliviar el código y facilitar su lectura. Podría producir lo contrario. Los siguientes consejos le ayudarán a tener un código limpio y fácil de leer.


### Nombres y sintaxis {.unnumbered} 

* Evitar el uso de caracteres que podrían haber sido fácilmente tomados por otras funciones ya existentes en su entorno

* Se recomienda que el nombre de la función sea corto y sencillo de entender para otro lector

* Es preferible utilizar verbos como nombre de la función y sustantivos para los nombres de los argumentos.


### Nombres de columnas y evaluación ordenada {.unnumbered}   

Si quiere saber cómo referenciar *nombres de columnas* que se proporcionan a su código como argumentos, lea esta [guía de programación de tidyverse](https://dplyr.tidyverse.org/articles/programming.html). Entre los temas tratados están la *evaluación ordenada* y el uso del *abrazo* con `{{ }}` "llaves dobles"

Por ejemplo, aquí hay un esqueleto rápido de código de plantilla del tutorial de la página mencionada anteriormente:

```{r, eval=F}

var_summary <- function(data, var) {
  data %>%
    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
}
mtcars %>% 
  group_by(cyl) %>% 
  var_summary(mpg)

```


### Pruebas y tratamiento de errores {.unnumbered} 

Cuanto más complicada sea la tarea de una función, mayor será la posibilidad de errores. Por lo tanto, a veces es necesario añadir alguna verificación dentro de la función para ayudar a entender rápidamente de dónde proviene el error y encontrar una manera de solucionarlo.

* Puede ser más que recomendable introducir una comprobación sobre la ausencia de un argumento utilizando `missing(argumento)`. Esta simple comprobación puede devolver el valor "TRUE" o "FALSE".

```{r , error=TRUE}

contain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){
  
  if (missing(barrier_gest)) (print("please provide arg1"))
  if (missing(wear_mask)) print("please provide arg2")
  if (missing(get_vaccine)) print("please provide arg3")


  if (!barrier_gest == "yes" | wear_mask =="yes" | get_vaccine == "yes" ) 
       
       return ("you can do better")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_missing(get_vaccine = "yes")

```


* Utiliza `stop()` para errores más detectables.

```{r, error=TRUE}

contain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){
  
  if(!is.character(barrier_gest)) (stop("arg1 should be a character, please enter the value with `yes`, `no` or `sometimes"))
  
  if (barrier_gest == "yes" & wear_mask =="yes" & get_vaccine == "yes" ) 
       
       return ("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_stop(barrier_gest=1, wear_mask="yes", get_vaccine = "no")

```

* Como vemos cuando ejecutamos la mayoría de las funciones incorporadas, hay mensajes y advertencias que pueden aparecer en ciertas condiciones. Podemos integrarlos en nuestras funciones escritas utilizando las funciones `message()` y `warning()`.

* También podemos manejar los errores usando `safely()` que toma una función como argumento y la ejecuta de forma segura. De hecho, la función se ejecutará sin detenerse si encuentra un error. `safely()` devuelve como salida una **lista** con dos objetos que son los resultados y el error que se ha "saltado".

Podemos verificarlo ejecutando primero la `mean()` como función, y luego ejecutarla con `safely()`.


```{r, warning=FALSE}

map(linelist, mean)
```


```{r, warning=FALSE}
safe_mean <- safely(mean)
linelist %>% 
  map(safe_mean)

```


Como se ha dicho anteriormente, comentar bien nuestros códigos ya es una buena forma de tener documentación en nuestro trabajo.


<!-- ======================================================= -->
## Recursos {#resources-36}

[Funciones en R for Data Science en español](https://es.r4ds.hadley.nz/funciones.html)

[Cheatsheet advanzado de programación de R](https://www.rstudio.com/wp-content/uploads/2016/02/advancedR.pdf)

[Cheatsheet del paquete purr](https://purrr.tidyverse.org/)

[Vídeo-ACM charla de Hadley Wickham: La alegría de la programación funcional (cómo funciona map_dbl)](https://youtube.videoken.com/embed/bzUmK0Y07ck)