# Hilfe bekommen

Auf dieser Seite erfährst du, wie du Hilfe bekommst, indem du ein Github-Problem postest oder ein reproduzierbares Beispiel ("reprex") in ein Online-Forum einstellst.

## Github-Probleme

Viele R-Pakete und -Projekte haben ihren Code auf der Website Github.com gehostet. Du kannst über diese Website direkt mit den Autoren kommunizieren, indem du einen "Issue" postest.

Mehr darüber, wie du deine Arbeit auf Github speichern kannst, findest du auf der Seite [Kollaboration und Github].

Auf Github ist jedes Projekt in einer *Repository*. Jedes Repository enthält Code, Daten, Ausgaben, Hilfedokumentation usw. Es gibt auch eine Möglichkeit, mit den Autoren zu kommunizieren: "Issues".

Siehe unten die Github-Seite für das **incidence2** Paket (das zur Erstellung von Epidemiekurven verwendet wird). Der Reiter "Issues" ist gelb hervorgehoben. Du kannst sehen, dass es 5 offene Fragen gibt.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "errors_Github_issues.png"))
```

Auf der Registerkarte "Probleme" kannst du die offenen Probleme sehen. Überprüfe sie, um sicherzustellen, dass dein Problem nicht bereits behandelt wird. Du kannst ein neues Thema eröffnen, indem du auf die grüne Schaltfläche auf der rechten Seite klickst. Dafür brauchst du ein Github-Konto.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "errors_Github_issues2.png"))
```

Befolge in deiner Ausgabe die unten stehenden Anweisungen, um ein minimales, reproduzierbares Beispiel zu liefern. Und sei bitte höflich! Die meisten Menschen, die R-Pakete und -Projekte entwickeln, tun dies in ihrer Freizeit (wie dieses Handbuch!).

Wenn du mehr über den Umgang mit Issues in deinem eigenen Github-Repository erfahren möchtest, schau dir die Github [Dokumentation zu Issues](https://guides.github.com/features/issues/).

## Reproduzierbares Beispiel

Ein reproduzierbares Beispiel ("reprex") ist der Schlüssel, um Hilfe zu bekommen, wenn du in einem Forum oder in einer Github-Frage schreibst. Die Leute wollen dir helfen, aber du musst ihnen ein Beispiel geben, mit dem sie auf ihrem eigenen Computer arbeiten können. Das Beispiel sollte:

- das Problem, das du hast, veranschaulichen
- Sei *minimal* dass er nur die Daten und den Code enthält, die zur Reproduktion deines Problems erforderlich sind
- Sei *reproduzierbar* so, dass alle Objekte (z. B. Daten), Paketaufrufe (z. B. `library()` oder `p_load()`) enthalten sind

*Achte außerdem darauf, dass du keine sensiblen Daten mit dem Reprex verschickst!* Du kannst Beispieldatenrahmen erstellen oder einen der in R integrierten Datenrahmen verwenden (gib `data()` um eine Liste dieser Datensätze zu öffnen).

### Die **reprex** Paket {.unnumbered}

Die **reprex** Paket kann dir dabei helfen, ein reproduzierbares Beispiel zu erstellen:

1) **reprex** wird installiert mit **tidyverse** also lade eines der beiden Pakete

```{r, eval=F}
# install/load tidyverse (which includes reprex)
pacman::p_load(tidyverse)
```

2) Beginne ein R-Skript, das dein Problem Schritt für Schritt erstellt, angefangen beim Laden von Paketen und Daten.

```{r, eval=F}
# load packages
pacman::p_load(
     tidyverse,  # data mgmt and vizualization
     outbreaks)  # example outbreak datasets

# flu epidemic case linelist
outbreak_raw <- outbreaks::fluH7N9_china_2013  # retrieve dataset from outbreaks package

# Clean dataset
outbreak <- outbreak_raw %>% 
     mutate(across(contains("date"), as.Date))

# Plot epidemic

ggplot(data = outbreak)+
     geom_histogram(
          mapping = aes(x = date_of_onset),
          binwidth = 7
     )+
  scale_x_date(
    date_format = "%d %m"
  )

```

*Kopiere* den gesamten Code in deine Zwischenablage und führe den folgenden Befehl aus:

```{r, eval=F}
reprex::reprex()
```

Du wirst eine HTML-Ausgabe im RStudio-Viewer-Fenster sehen. Sie enthält deinen gesamten Code und alle Warnungen, Fehler oder Plotausgaben. Diese Ausgabe wird auch in die Zwischenablage kopiert, sodass du sie direkt in ein Github-Proposal oder einen Forenbeitrag einfügen kannst.

```{r, out.width=c("100%", "100%"), warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "errors_reprex_RStudio1.png"))
```

- Wenn du die `session_info = TRUE` die Ausgabe von `sessioninfo::session_info()` mit deinen R- und R-Paketversionen einschließt
- Du kannst ein Arbeitsverzeichnis angeben, um `wd = `
- Mehr über die Argumente und mögliche Variationen erfährst du in der [Dokumentation]() oder durch Eingabe von `?reprex`

Im obigen Beispiel wird die `ggplot()` Befehl nicht ausgeführt, weil der Argumentationsstrang `date_format =` nicht korrekt ist - es sollte lauten `date_labels = `.

### Minimale Daten {.unnumbered}

Die Helfer müssen in der Lage sein, deine Daten zu nutzen - idealerweise müssen sie sie erstellen können *mit Code*.

Um einen minimalen Datensatz zu erstellen, solltest du in Erwägung ziehen, nur eine Teilmenge der Beobachtungen zu anonymisieren und zu verwenden.

UNDER CONSTRUCTION - du kannst auch die Funktion `dput()` verwenden, um einen Minimal-Datensatz zu erstellen.

## In ein Forum posten

Lies viele Forenbeiträge. Bekomme ein Gefühl dafür, welche Beiträge gut geschrieben sind und welche nicht.

1) Entscheide zuerst, ob du die Frage überhaupt stellen willst. Hast du *gründlich* die Website des Forums durchgesehen und verschiedene Suchbegriffe ausprobiert, um zu sehen, ob deine Frage bereits gestellt wurde?

2) Gib deiner Frage einen informativen Titel (nicht "Hilfe, das funktioniert nicht").

3) Schreibe deine Frage:

- Erläutere deine Situation und dein Problem
- Verlinke auf Beiträge mit ähnlichen Problemen und erkläre, warum sie deine Frage nicht beantworten
- Füge alle relevanten Informationen hinzu, um jemandem zu helfen, der den Kontext deiner Arbeit nicht kennt
- Gib ein minimales reproduzierbares Beispiel mit den Informationen zu deiner R-Sitzung an
- Verwende korrekte Rechtschreibung, Grammatik und Zeichensetzung und gliedere deine Frage in Absätze, damit sie leichter zu lesen ist.

4) Behalte deine Frage im Auge, sobald sie veröffentlicht wurde, und antworte auf alle Fragen, die du noch klären möchtest. Sei höflich und zuvorkommend - die Leute, die dir antworten, opfern oft freiwillig ihre Zeit, um dir zu helfen. Wenn du eine Folgefrage hast, überlege, ob du sie als separate Frage stellen solltest.

5) Markiere die Frage als beantwortet, *wenn* du eine Antwort erhältst, die den *Original* Anfrage entspricht. Das hilft anderen später, die Lösung schnell zu erkennen.

Lies diese Beiträge über [wie man eine gute Frage stellt](https://stackoverflow.com/help/how-to-ask) die [Stack Overflow Verhaltenskodex](https://stackoverflow.com/conduct).

<!-- ======================================================= -->

## Ressourcen { }

Tidyverse Seite, wie man [Hilfe bekommt!](https://www.tidyverse.org/help/#:~:text=When%20you%20want%20to%20make,to%20load%20the%20reprex%20package.&text=Enter%20reprex\(\)%20in%20the,preview%20of%20your%20rendered%20reprex.)

Tipps zum [Erstellung eines minimalen Datensatzes](https://xiangxing98.github.io/R_Learning/R_Reproducible.nb.html#producing-a-minimal-dataset)

Dokumentation für die [dput-Funktion](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/dput)


