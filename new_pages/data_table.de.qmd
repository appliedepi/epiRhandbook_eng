# Daten-Tabelle { }

Der Schwerpunkt des Handbuchs liegt auf den **dplyr** "verb"-Funktionen und die **magrittr** Pipe-Operator `%>%` als Methode zum Bereinigen und Gruppieren von Daten, aber der **data.table** Paket bietet eine alternative Methode, die dir in deiner R-Karriere begegnen könnte.

<!-- ======================================================= -->

## Einführung in Datentabellen {  }

Eine Datentabelle ist eine 2-dimensionale Datenstruktur wie ein Datenrahmen, mit der komplexe Gruppierungsoperationen durchgeführt werden können. Die data.table-Syntax ist so aufgebaut, dass Operationen auf Zeilen, Spalten und Gruppen durchgeführt werden können.

Die Struktur ist **DT[i, j, durch]**, getrennt durch 3 Teile; die **i, j** und **durch** Argumenten. Die **i** Argument ermöglicht die Unterteilung der benötigten Zeilen, das **j** Argument erlaubt es, auf Spalten zu operieren und das **von** Argument kannst du mit Spalten nach Gruppen arbeiten.

Auf dieser Seite werden die folgenden Themen behandelt:

- Importieren von Daten und Verwendung von `fread()` und `fwrite()`
- Auswählen und Filtern von Zeilen mithilfe der **i** Argument
- Hilfsfunktionen verwenden `%like%`, `%chin%`, `%between%`
- Auswählen und Berechnen von Spalten mit der **j** Argument
- Rechnen nach Gruppen mit der **von** Argument
- Hinzufügen und Aktualisieren von Daten in Datentabellen mit `:=`

<!-- ======================================================= -->

## Pakete laden und Daten importieren { }

### Pakete laden {.unnumbered}

Mit dem `p_load()` Funktion von **pacman** laden (und installieren, falls nötig) wir die Pakete, die für diese Analyse benötigt werden.

```{r}
pacman::p_load(
  rio,        # to import data
  data.table, # to group and clean data
  tidyverse,  # allows use of pipe (%>%) function in this chapter
  here 
  ) 
```

### Daten importieren {.unnumbered}

Auf dieser Seite werden einige der Kernfunktionen von **data.table** anhand der Fallliste, auf die im gesamten Handbuch verwiesen wird.

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du die Daten herunterladen möchtest, um Schritt für Schritt vorzugehen, lies die Anweisungen im [Buch und Daten herunterladen] Seite. Der Datensatz wird importiert, indem du die`import()` Funktion aus dem **rio**Paket. Siehe die Seite über [Import und Export] für verschiedene Möglichkeiten, Daten zu importieren. Von hier aus verwenden wir`data.table()` um den Datenrahmen in eine Datentabelle umzuwandeln.

```{r}
linelist <- rio::import(here("data", "linelist_cleaned.xlsx")) %>% data.table()
```

Die `fread()` Funktion wird verwendet, um reguläre Dateien mit Trennzeichen, wie z. B. .csv-Dateien, direkt in ein Datentabellenformat zu importieren. Diese Funktion, und ihr Gegenstück, `fwrite()` zum Schreiben von data.tables als regulär abgegrenzte Dateien sind sehr schnelle und rechnerisch effiziente Optionen für große Datenbanken.

Die ersten 20 Zeilen der `linelist`:

```{r, message=FALSE, echo=F, eval=FALSE}
DT::datatable(head(linelist,20), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Basis-R-Befehle wie z.B. `dim()` die für Datenrahmen verwendet werden, können auch für Datentabellen genutzt werden

```{r}
dim(linelist) #gives the number of rows and columns in the data table
```

<!-- ======================================================= -->

## Das i-Argument: Auswählen und Filtern von Zeilen{ }

Die Erinnerung an das **DT[i, j, durch]** Struktur können wir Zeilen entweder mit Zeilennummern oder logischen Ausdrücken filtern. Das Argument i steht an erster Stelle; daher ist die Syntax **DT[i]** oder **DT[i,]** verwendet werden kann.

Das erste Beispiel ruft die ersten 5 Zeilen der Datentabelle ab, das zweite Beispiel fasst Fälle zusammen, die 18 Jahre oder älter sind, und das dritte Beispiel fasst Fälle zusammen, die 18 Jahre oder älter sind, aber nicht im Zentralkrankenhaus diagnostiziert wurden:

```{r, eval=F}
linelist[1:5] #returns the 1st to 5th row
linelist[age >= 18] #subsets cases are equal to or over 18 years
linelist[age >= 18 & hospital != "Central Hospital"] #subsets cases equal to or over 18 years old but not diagnosed at the Central Hospital

```

Die Angabe .N im Argument i steht für die Gesamtzahl der Zeilen in der Datentabelle. Dies kann verwendet werden, um die Zeilennummern zu unterteilen:

```{r, eval=F}
linelist[.N] #returns the last row
linelist[15:.N] #returns the 15th to the last row
```

### Hilfsfunktionen zum Filtern verwenden {.unnumbered}

Datentabelle verwendet Hilfsfunktionen, die das Unterteilen von Zeilen erleichtern. Die `%like%` Funktion wird verwendet, um ein Muster in einer Spalte zu finden, `%chin%` wird verwendet, um ein bestimmtes Zeichen zu finden, und die `%between%` Hilfsfunktion wird verwendet, um numerische Spalten innerhalb eines vorgegebenen Bereichs abzugleichen.

In den folgenden Beispielen werden wir:

- Zeilen filtern, in denen die Krankenhausvariable "Krankenhaus" enthält
- Zeilen filtern, in denen das Ergebnis "Genesung" oder "Tod" lautet
- Zeilen im Altersbereich 40-60 filtern

```{r, eval=F}
linelist[hospital %like% "Hospital"] #filter rows where the hospital variable contains "Hospital"
linelist[outcome %chin% c("Recover", "Death")] #filter rows where the outcome is "Recover" or "Death"
linelist[age %between% c(40, 60)] #filter rows in the age range 40-60

#%between% must take a vector of length 2, whereas %chin% can take vectors of length >= 1

```

## Das j-Argument: Auswählen und Berechnen auf Spalten{ }

Die Verwendung des **DT[i, j, durch]** Struktur können wir Spalten mit Nummern oder Namen auswählen. Die **j** Argument ist das zweite; daher ist die Syntax **DT[, j]** verwendet wird. Um die Berechnungen auf der **j** Argument zu erleichtern, wird die Spalte entweder mit `list()` oder `.()`.

### Auswählen von Spalten {.unnumbered}

Das erste Beispiel ruft die erste, dritte und fünfte Spalte der Datentabelle ab, das zweite Beispiel wählt alle Spalten außer den Spalten Größe, Gewicht und Geschlecht aus. Das dritte Beispiel verwendet die `.()` Umbruch zur Auswahl der **fall\_id** und **Ergebnis** Spalten.

```{r, eval=F}
linelist[ , c(1,3,5)]
linelist[ , -c("gender", "age", "wt_kg", "ht_cm")]
linelist[ , list(case_id, outcome)] #linelist[ , .(case_id, outcome)] works just as well

```

### Rechnen auf Spalten {.unnumbered}

Durch die Kombination der **i** und **j** Argumenten ist es möglich, Zeilen zu filtern und auf den Spalten zu rechnen. Mit **.N** in der **j** Argument steht auch für die Gesamtzahl der Zeilen in der Datentabelle und kann nützlich sein, um die Anzahl der Zeilen nach der Zeilenfilterung zurückzugeben.

In den folgenden Beispielen werden wir:

- Zähle die Anzahl der Fälle, die länger als 7 Tage im Krankenhaus blieben
- Berechne das Durchschnittsalter der Fälle, die im Militärkrankenhaus gestorben sind
- Berechne die Standardabweichung, den Median und das Durchschnittsalter der Fälle, die im Zentralkrankenhaus genesen sind

```{r}
linelist[days_onset_hosp > 7 , .N]
linelist[hospital %like% "Military" & outcome %chin% "Death", .(mean(age, na.rm = T))] #na.rm = T removes N/A values
linelist[hospital == "Central Hospital" & outcome == "Recover", 
                 .(mean_age = mean(age, na.rm = T),
                   median_age = median(age, na.rm = T),
                   sd_age = sd(age, na.rm = T))] #this syntax does not use the helper functions but works just as well

```

Denke daran, dass die Verwendung des .()-Umbruchs im j-Argument die Berechnung erleichtert, eine Datentabelle zurückgibt und die Benennung von Spalten ermöglicht.

## Das by-Argument: Berechnungen nach Gruppen{ }

Die **von** Argument ist das dritte Argument in der **DT[i, j, durch]** Struktur. Die **von** Argument akzeptiert sowohl einen Zeichenvektor als auch die `list()` oder `.()` Syntax. Die Verwendung der `.()` Syntax in der **von** Argument ermöglicht das Umbenennen von Spalten im laufenden Betrieb.

In den folgenden Beispielen werden wir:

- gruppieren wir die Anzahl der Fälle nach Krankenhaus
- Berechne bei Fällen, die 18 Jahre oder älter sind, die durchschnittliche Größe und das Gewicht der Fälle nach Geschlecht und ob sie genesen oder gestorben sind
- Zähle bei Einweisungen, die länger als 7 Tage dauerten, die Fälle nach dem Monat, in dem sie eingeliefert wurden, und nach dem Krankenhaus, in dem sie aufgenommen wurden

```{r}
linelist[, .N, .(hospital)] #the number of cases by hospital
linelist[age > 18, .(mean_wt = mean(wt_kg, na.rm = T),
                             mean_ht = mean(ht_cm, na.rm = T)), .(gender, outcome)] #NAs represent the categories where the data is missing
linelist[days_onset_hosp > 7, .N, .(month = month(date_hospitalisation), hospital)]

```

Data.table erlaubt auch die Verkettung von Ausdrücken wie folgt:

```{r}

linelist[, .N, .(hospital)][order(-N)][1:3] #1st selects all cases by hospital, 2nd orders the cases in descending order, 3rd subsets the 3 hospitals with the largest caseload


```

In diesen Beispielen gehen wir davon aus, dass eine Zeile in der Datentabelle gleich einem neuen Fall ist, und können daher die **.N** verwenden, um die Anzahl der Zeilen in der Datentabelle anzugeben. Eine weitere nützliche Funktion, um die Anzahl der eindeutigen Fälle darzustellen, ist `uniqueN()` Sie gibt die Anzahl der eindeutigen Werte in einer gegebenen Eingabe zurück. Dies wird hier veranschaulicht:

```{r}

linelist[, .(uniqueN(gender))] #remember .() in the j argument returns a data table

```

Die Antwort ist 3, denn die eindeutigen Werte in der Spalte Geschlecht sind m, f und N/A. Vergleiche mit der R-Basisfunktion `unique()` die alle eindeutigen Werte in einer gegebenen Eingabe zurückgibt:

```{r}

linelist[, .(unique(gender))]
```

Um die Anzahl der eindeutigen Fälle in einem bestimmten Monat zu ermitteln, würden wir Folgendes schreiben:

```{r}

linelist[, .(uniqueN(case_id)), .(month = month(date_hospitalisation))]

```

## Hinzufügen und Aktualisieren von Datentabellen { }

Die `:=` Operator wird verwendet, um Daten in einer Datentabelle hinzuzufügen oder zu aktualisieren. Das Hinzufügen von Spalten zu deiner Datentabelle kann auf folgende Weise erfolgen:

```{r}

linelist[, adult := age >= 18] #adds one column
linelist[, c("child", "wt_lbs") := .(age < 18, wt_kg*2.204)] #to add multiple columns requires c("") and list() or .() syntax
linelist[, `:=` (bmi_in_range = (bmi > 16 & bmi < 40),
                         no_infector_source_data = is.na(infector) | is.na(source))] #this method uses := as a functional operator `:=`
linelist[, adult := NULL] #deletes the column

```

Weitere komplexe Aggregationen würden den Rahmen dieses Einführungskapitels sprengen, aber die Idee ist, eine beliebte und praktikable Alternative zu **dplyr** zum Gruppieren und Bereinigen von Daten zu bieten. Die **data.table** Paket ist ein großartiges Paket, das einen sauberen und lesbaren Code ermöglicht.

## Ressourcen {  }

Hier findest du einige nützliche Ressourcen für weitere Informationen:

- [https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html](https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html)
- [https://github.com/Rdatatable/data.table](https://github.com/Rdatatable/data.table)
- [https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf](https://s3.amazonaws.com/assets.datacamp.com/img/blog/data+table+cheat+sheet.pdf)
- [https://www.machinelearningplus.com/data-manipulation/datatable-in-r-complete-guide/](https://www.machinelearningplus.com/data-manipulation/datatable-in-r-complete-guide/)
- [https://www.datacamp.com/community/tutorials/data-table-r-tutorial](https://www.datacamp.com/community/tutorials/data-table-r-tutorial)

Du kannst jede beliebige Zusammenfassungsfunktion auf gruppierte Daten anwenden; weitere Informationen findest du auf dem Spickzettel hier:
[https://s3.amazonaws.com/assets.datacamp.com/blog\_assets/datatable\_Cheat\_Sheet\_R.pdf](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/datatable_Cheat_Sheet_R.pdf)


