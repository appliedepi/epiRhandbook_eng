# エピデミックモデリング {#epidemic-models}

<!-- =============================≈========================= -->

## 概要

流行のモデリングのためのツールが増加してきており、最小の労力でかなり複雑な分析を行うことができるようになっています。このセクションでは、これらのツールをどのように使用するかについての概要を説明します：

-   実効再生産数（effective reproduction number）R<sub>t</sub> や倍化時間（doubling time）などに関連する統計量を推定する
-   将来のインシデンスの短期的な予測（プロジェクション）を実施する

ここではこれらの基礎となっている方法論や統計学的な手法の概要を説明する意図は<u>ありません</u>ので、関連論文へのリンクについては Resources tab を参照してください。ここで説明するツールを使用する前に、手法を理解しておくことで、正確に結果を解釈できるようになります。

以下はこのセクションで作成するアウトプットの１つの例です。

```{r out.width=c('100%', '100%'), fig.show='hold', echo=F, fig.width = 12, fig.height = 9, message=F, warning=F}

## パッケージのインストールとロード
pacman::p_load(tidyverse, EpiNow2, EpiEstim, here, incidence2, epicontacts, rio, projections)

## ラインリストのロード
linelist <- import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

## コンタクトの作成
contacts <- linelist %>%
  transmute(
    from = infector,
    to = case_id
  ) %>%
  drop_na()

## エピコンタクトの作成
epic <- make_epicontacts(
  linelist = linelist,
  contacts = contacts, 
  directed = TRUE
)

## ## estimate gamma generation time
## generation_time <- bootstrapped_dist_fit(
##   get_pairwise(epic, "date_infection"),
##   dist = "gamma",
##   max_value = 20,
##   bootstraps = 1
## )

## ## export for caching
## export(
##   generation_time,
##   here("data/cache/epidemic_models/generation_time.rds")
## )

## import cached generation time
generation_time <- import(here("data/cache/epidemic_models/generation_time.rds"))

## ## estimate incubation period
## incubation_period <- bootstrapped_dist_fit(
##   linelist$date_onset - linelist$date_infection,
##   dist = "lognormal",
##   max_value = 100,
##   bootstraps = 1
## )

## ## export for caching
## export(
##   incubation_period,
##   here("data/cache/epidemic_models/incubation_period.rds")
## )

## import cached incubation period
incubation_period <- import(here("data/cache/epidemic_models/incubation_period.rds"))

## get incidence from onset date
cases <- linelist %>%
  group_by(date = date_onset) %>%
  summarise(confirm = n())

## ## run epinow
## epinow_res <- epinow(
##   reported_cases = cases,
##   generation_time = generation_time,
##   delays = delay_opts(incubation_period),
##   target_folder = here("data/cache/epidemic_models"),
##   return_output = TRUE,
##   output = "samples",
##   verbose = TRUE,
##   stan = stan_opts(samples = 750, chains = 4),
##   horizon = 21
## )

## ## export for caching
## export(
##   epinow_res,
##   here("data/cache/epidemic_models/epinow_res.rds")
## )

## import cached epinow results
epinow_res <- import(here("data/cache/epidemic_models/epinow_res.rds"))

## plot summary figure
plot(epinow_res)

```

<!-- ======================================================= -->

## 準備

R<sub>t</sub> の推定には **EpiNow** パッケージと **EpiEstim** パッケージという2つの異なる手法を使用し、症例（ケース）の発生数の予測には **projections** パッケージを用います。以下のコードチャンクは、（本章の）分析に必要なパッケージのローディングを示しています。

以下のコードを実行すると、分析に必要なパッケージが読み込まれます。このハンドブックでは、パッケージを読み込むために、pacman パッケージの p_load() を主に使用しています。p_load() は、必要に応じてパッケージをインストールし、現在の R セッションで使用するためにパッケージを読み込む関数です。また、すでにインストールされたパッケージは、R の基本パッケージである base （以下、base R）の library() を使用して読み込むこともできます。R のパッケージに関する詳細は [R の基礎](#basics) の章をご覧ください。

```{r epidemic_models_packages, }
pacman::p_load(
   rio,          # ファイルをインポート
   here,         # ファイルロケーター
   tidyverse,    # データマネジメント + ggplot2 のグラフィックス
   epicontacts,  # トランスミッションネットワークの分析
   EpiNow2,      # Rt 推定
   EpiEstim,     # Rt 推定
   projections,  # 発生数のプロジェクション
   incidence2,   # 発生データの取り扱い
   epitrix,      # 便利な epi の機能
   distcrete     # 離散的な遅れの分布
)
```

エボラ出血熱の流行をシミュレートしたデータセットをインポートします。お手元の環境でこの章の内容を実行したい方は、 <a href='https://github.com/appliedepi/epiRhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>クリック</a>して「前処理された」ラインリスト（linelist）データをダウンロードしてください>（.rds 形式で取得できます）。データは *rio* パッケージの import() を利用してインポートしましょう（*rio* パッケージは、.xlsx、.csv、.rds など様々な種類のファイルを取り扱うことができます。詳細は、[インポートとエクスポート](#importing) の章をご覧ください）。

```{r, echo=F}
# ラインリストの取り込み
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r eval=F}
# クリーンなラインリストの取り込み
linelist <- import("linelist_cleaned.rds")
```

<!-- ======================================================= -->

## R<sub>t</sub> の推定

### EpiNow2 vs. EpiEstim {.unnumbered}

再生産数 R は、疾病の感染性を示す指標であり、感染者 1 人あたりの二次感染者数の期待値として定義されます。感受性保持者しかいないような集団では、この値は基本再生産数 R<sub>0</sub> を意味します。しかし、集団内の感受性保持者はアウトブレイクやパンデミックの期間中に変化し、また様々な対策が講じられるため、感染性の指標として最も一般的に使用されるのは実効再生産数です（ある時刻 *t* における感染者1人あたりの二次感染者数の期待値）。

**EpiNow2** パッケージは最も洗練された R<sub>t</sub> 推定のためのフレームワークを提供しています。ほかに一般的に使用されている **EpiEstim** パッケージと比較して、2つの重要な利点があります：

-   報告の遅れを考慮しているので、直近のデータが不完全の場合であっても R<sub>t</sub> を推定することができます。

-   報告日ではなく、<u>感染日</u>に基づいて R<sub>t</sub> を推定するので、遅れを生じずすぐに R<sub>t</sub> の変化として介入の効果が反映されま。

しかし、2つの重要なデメリットもあります：

-   世代時間の分布（一次感染者から二次感染者までの遅れの分布）、潜伏期間の分布（感染から症状発現までの遅れの分布）、およびデータに関連するその他の遅れの分布（例えば、報告の日付がある場合、症状発現から報告までの遅れの分布）に関する知識が必要です。これにより、より正確な R<sub>t</sub> を推定できますが、**EpiEstim** パッケージは発症間隔発症間隔（一次感染者の症状発現から二次感染者の症状発現までの遅れの分布）のみを必要とし、これのみが唯一利用可能な分布である場合があります。
-   **EpiNow2** パッケージは **EpiEstim** パッケージに比べて著しく遅く、約100～1000倍の差があるといわれています！例えば、このセクションで利用するサンプルアウトブレイクにおける R<sub>t</sub> 推定には、約4時間かかります（これは高い精度を確保するために多数の反復処理を行ったためであり、必要に応じて短縮することも可能ですが、アルゴリズムが一般的に遅いという点は変わりません）。定期的に R<sub>t</sub> の推定値を更新している場合は、この方法は現実的ではないかもしれません。

そのため、どのパッケージを選ぶかは、利用できるデータや時間、計算資源によります。

### EpiNow2 {.unnumbered}

#### 遅れの分布の推定 {.unnumbered}

**EpiNow2** パッケージの実行に必要な遅れの分布は、手持ちのデータによって異なります。基本的には、感染日から R<sub>t</sub> 推定に使用したいイベント日までの遅れを記述できるものである必要があります。もし発症日を使っている場合、これは単に潜伏期間の分布となります。報告日を使用している場合は、感染から報告までの遅れの分布が必要です。この分布はなかなか直接知ることができないため、**EpiNow2** パッケージでは複数の遅れの分布をつなぎ合わせることができます。この場合、感染から症状発現までの遅れ（例えば潜伏期間、これは既知であることが多いです）と、症状発現から報告までの遅れ（これは自分でデータから推定できる場合が多いです）です。

例のラインリストではすべての症例について発症日がわかっているので、データ（例えば症状の発現日など）を感染日に結びつけるためには、潜伏期間の分布が必要になります。この分布は、データから推定するか、既存文献から値を引用することができます。

エボラ出血熱の潜伏期間を平均9.1日、標準偏差7.3日、最大値を30日とする文献からの推定値（[引用論文](https://www.nejm.org/doi/full/10.1056/nejmoa1411100)）は、以下のように規定されます：

```{r epidemic_models_incubation_literature, eval=F}
incubation_period_lit <- list(
  mean = log(9.1),
  mean_sd = log(0.1),
  sd = log(7.3),
  sd_sd = log(0.1),
  max = 30
)
```

**EpiNow2** パッケージでは、これらの遅れの分布が対数（**log**）スケールで提供される必要があり、そのため、各値に `log` がついていることに注意してください（紛らわしいことに、自然スケールで提供されなければならない `max` パラメータを除く）。`mean_sd` と `sd_sd` は、平均値と標準偏差の推定値の標準偏差を定義します。上記のケースではこれらは知られていないため、かなり恣意的な値である0.1を選択しました。

今回のｂ分析ではその代わりに、`bootstrapped_dist_fit()` を用いて、ラインリストから潜伏期間の分布を推定しました。

```{r epidemic_models_incubation_estimate, eval=F}
## 潜伏期間の推定
incubation_period <- bootstrapped_dist_fit(
  linelist$date_onset - linelist$date_infection,
  dist = "lognormal",
  max_value = 100,
  bootstraps = 1
)
```

もう一つ必要な分布は、世代時間です。感染時刻**と**感染伝播のリンクに関するデータがあるので、感染者と被感染者のペアの感染時刻の遅れを計算することで、ラインリストからこの分布を推定することができます。これには **epicontacts** パッケージにある便利な `get_pairwise()` を使います。この関数を使うと、感染ペア間のラインリスト上の2組の特性の違いを計算することができます。epicontacts オブジェクトを作成します（詳しくは [感染連鎖の図式化](#transmission-chains) の章を参照してください）：

```{r epidemic_models_epicontacts, eval=F}
## コンタクトの作成
contacts <- linelist %>%
  transmute(
    from = infector,
    to = case_id
  ) %>%
  drop_na()

## epicontacts オブジェクトの作成
epic <- make_epicontacts(
  linelist = linelist,
  contacts = contacts, 
  directed = TRUE
)
```

次に、`get_pairwise` で計算した感染ペア間の感染時刻の差をガンマ分布にあてはめました：

```{r epidemic_models_generation_estimate, eval=F}
## ガンマ分布に従う世代時間の推定
generation_time <- bootstrapped_dist_fit(
  get_pairwise(epic, "date_infection"),
  dist = "gamma",
  max_value = 20,
  bootstraps = 1
)
```

#### **EpiNow2** パッケージの実行 {.unnumbered}

あとはラインリストから日々のインシデンスを計算するだけですが、**dplyr** パッケージの `group_by()` と `n()` で簡単にできます。**EpiNow2** パッケージでは、列名が `date` と `confirm` でなければならないことに注意してください。

```{r epidemic_models_cases, eval=F}
## 発症日からインシデンスを得る
cases <- linelist %>%
  group_by(date = date_onset) %>%
  summarise(confirm = n())
```

そして、`epinow()` を使って R<sub>t</sub> を推定することができます。入力に関して、いくつかの注意点を挙げます：

-   `delays` の引数には、任意の数の「連鎖した」遅れの分布を与えることができます。`delay_opts()` 内で `incubation_period` オブジェクトと一緒に入れるだけです。
-   `return_output` は、出力ファイルに保存されるのではなく、R の中で貸せされるようになっています。
-   `verbose` は、進捗状況の読み上げを指定します。
-   `horizon` は、将来のインシデンスを何日分予測するかを示します。
-   `stan` の因数に追加のオプションを渡して、推定を実行する期間を指定します。`samples` 数と `chains` 数を増やすと、不確実性の特徴をよく表したより正確な推定値が得られますが、実行には時間がかかります。

```{r epidemic_models_run_epinow, eval=F}
## epinow を走らせる
epinow_res <- epinow(
  reported_cases = cases,
  generation_time = generation_time,
  delays = delay_opts(incubation_period),
  return_output = TRUE,
  verbose = TRUE,
  horizon = 21,
  stan = stan_opts(samples = 750, chains = 4)
)
```

#### アウトプットの分析 {.unnumbered}

コードの実行が終了すると、以下のように簡単にサマリーをプロットすることができます。画像をスクロールすると、全体を見ることができます。

```{r out.width=c('100%', '100%'), fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F }
## サマリーフィギュアのプロット
plot(epinow_res)
```

また、様々なサマリー統計量を見ることもできます：

```{r epidemic_models_epinow_summary,}
## サマリーテーブル
epinow_res$summary
```

さらなる分析やカスタムプロットのために `$estimates$summarised` を介して要約された毎日の推定値にアクセスすることができます。これをデフォルトの `data.table` から、**dplyr** パッケージで使いやすいように `tibble` に変換します。

```{r epidemic_models_to_tibble, eval=F}
## サマリーを抽出して、tibble に変換
estimates <- as_tibble(epinow_res$estimates$summarised)
estimates
```

```{r epidemic_models_tibble_show,  echo = F}
## アウトプットの表示
estimates <- as_tibble(epinow_res$estimates$summarised)
DT::datatable(
  estimates,
  rownames = FALSE,
  filter = "top",
  options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap'
)
```

例として、倍化時間と R<sub>t</sub> をプロットしてみましょう。極端に高い倍化時間をプロットしないように、R<sub>t</sub> が1を大きく上回っている流行の最初の数か月だけを見ています。

`log(2)/growth_rate` という計算式を用いて、推定された成長率（growth rate）から倍化時間を算出しています。

```{r epidemic_models_plot_epinow_cusotom, out.width=c('100%', '100%'), fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}

## 中央値プロットのために横型のデータフレームを作ります
df_wide <- estimates %>%
  filter(
    variable %in% c("growth_rate", "R"),
    date < as.Date("2014-09-01")
  ) %>%
  ## 成長率を倍化時間に変換
  mutate(
    across(
      c(median, lower_90:upper_90),
      ~ case_when(
        variable == "growth_rate" ~ log(2)/.x,
        TRUE ~ .x
      )
    ),
    ## 変形を反映した変数名の変更
    variable = replace(variable, variable == "growth_rate", "doubling_time")
  )

## 分位値プロットのために縦長のデータフレームを作る
df_long <- df_wide %>%
  ## ここでは、マッチした分位値を利用します（例：lower_90 から upper_90）
  pivot_longer(
    lower_90:upper_90,
    names_to = c(".value", "quantile"),
    names_pattern = "(.+)_(.+)"
  )

## プロットする
ggplot() +
  geom_ribbon(
    data = df_long,
    aes(x = date, ymin = lower, ymax = upper, alpha = quantile),
    color = NA
  ) +
  geom_line(
    data = df_wide,
    aes(x = date, y = median)
  ) +
  ## label_parsedを使用して、添え字ラベルを許可する
  facet_wrap(
    ~ variable,
    ncol = 1,
    scales = "free_y",
    labeller = as_labeller(c(R = "R[t]", doubling_time = "Doubling~time"), label_parsed),
    strip.position = 'left'
  ) +
  ## 分位値の透明度を手動で定義する
  scale_alpha_manual(
    values = c(`20` = 0.7, `50` = 0.4, `90` = 0.2),
    labels = function(x) paste0(x, "%")
  ) +
  labs(
    x = NULL,
    y = NULL,
    alpha = "Credibel\ninterval"
  ) +
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%b %d\n%Y"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.background = element_blank(),
    strip.placement = 'outside'
  )

```

<!-- ======================================================= -->

### EpiEstim {.unnumbered}

**EpiEstim** パッケージを走らせるために、日々のインシデンスのデータを提供し、発症間隔（一次症例と二次症例の症状発現までの遅れの分布）を指定する必要があります。

インシデンスデータは、ベクトル、データフレーム、またはオリジナルの **incidence** パッケージから得られた `incidence` オブジェクトとして、**EpiEstim** パッケージに提供できます。輸入感染例とローカルで感染した例を区別することもできます：詳細は `?estimate_R` のドキュメントを参照してください。

ここでは **incidence2** パッケージを使って、インプットを作成します。**incidence2** パッケージの例については [流行曲線（エピカーブ）](#epicurves) の章を参照してください。**incidence2** パッケージには `estimateR()` が期待するインプットとは完全に一致しないアップデートがあったため、いくつかの小さな追加手順が必要となります。incidence オブジェクトは日付とそれぞれのケースカウントをもつ tibble で構成されています。**tidyr** パッケージの `complete()` を使用して、すべての日付が含まれていることを確認し（症例がない日も含む）、後のステップで `estimate_R()` で期待されるものと一致するように列を `rename()` します。

```{r epidemic_models_epiestim_incidence,}
## 発症日からインシデンスを得る
cases <- incidence2::incidence(linelist, date_index = "date_onset") %>% # 日ごとにケースカウントを得る
  tidyr::complete(date_index = seq.Date(                              # すべての日付が表示されていることを確認
    from = min(date_index, na.rm = T),
    to = max(date_index, na.rm=T),
    by = "day"),
    fill = list(count = 0)) %>%                                       # NA カウントを0に変換する
  rename(I = count,                                                   # estimateRで期待されるな目に変更
         dates = date_index)
```

このパッケージにはは発症間隔を指定するためのいくつかのオプションがあり、その詳細はドキュメントの `?estimate_R` に記載されています。ここではそのうちの2つを取り上げます。

#### 文献から引用した発症間隔の推定値の使用 {.unnumbered}

オプションの `method = "parametric_si"` を使用すると、 `make_config()` で作成した `config` オブジェクトに発症間隔の平均値と標準偏差を手動で指定することができます。ここでは、[この論文](https://bmcmedicine.biomedcentral.com/articles/10.1186/s12916-014-0196-0)で定義されている平均値12.0、標準偏差5.2を使用しています。

```{r epidemic_models_epiestim_config,}
## config の作成
config_lit <- make_config(
  mean_si = 12.0,
  std_si = 5.2
)
```

そして、`estimate_R()` で R<sub>t</sub> の推定をすることができます：

```{r epidemic_models_epiestim_lit,  warning = FALSE}
cases <- cases %>% 
     filter(!is.na(date))
#create a dataframe for the function estimate_R()
cases_incidence <- data.frame(dates = seq.Date(from = min(cases$dates),
                               to = max(cases$dates), 
                               by = 1))
cases_incidence <- left_join(cases_incidence, cases) %>% 
     select(dates, I) %>% 
     mutate(I = ifelse(is.na(I), 0, I))

epiestim_res_lit <- estimate_R(
  incid = cases_incidence,
  method = "parametric_si",
  config = config_lit
)
```

あとはアウトプットのサマリーをプロットします：

```{r epidemic_models_epiestim_lit_plot,  warning = FALSE}
plot(epiestim_res_lit)
```

#### データから推定した発症間隔の推定値の使用 {.unnumbered}

症状の発症日と感染伝播のリンクデータがあるので、感染者と被感染者のペアの発症日の遅れを計算することで、ラインリストから発症間隔を推定することもできます。**EpiNow2** パッケージのセクションで行ったように、**epicontacts** パッケージの `get_pairwise()` を使います。この関数は感染ペア間のラインリスト上の2組の特性の違いを計算することができます。まず epicontacts オブジェクトを作成します（詳細は [感染連鎖の図式化](#transmission-chains) の章を参照）：

```{r epidemic_models_epicontacts_epiestim, eval=F}
## コンタクトの作成
contacts <- linelist %>%
  transmute(
    from = infector,
    to = case_id
  ) %>%
  drop_na()

## epicontacts オブジェクトの作成
epic <- make_epicontacts(
  linelist = linelist,
  contacts = contacts, 
  directed = TRUE
)
```

次に、`get_pairwise()` を用いて感染ペア間の発症日の差をガンマ分布に当てはめます。*離散化された*分布が必要とされるため、このフィッティング手順には **epitrix** パッケージの便利な `fit_disc_gamma()` を使用します。

```{r epidemic_models_incubation_estimate_epiestim,  warning = FALSE}
## ガンマ分布に従う発症間隔の推定
serial_interval <- fit_disc_gamma(get_pairwise(epic, "date_onset"))
```

その後に、`config` オブジェクトに情報を与え、 **EpiEstim** を再実行して結果を描画しましょう。

```{r epidemic_models_epiestim_emp,  warning = FALSE}
## config の作成
config_emp <- make_config(
  mean_si = serial_interval$mu,
  std_si = serial_interval$sd
)

## epiestim を走らせる
epiestim_res_emp <- estimate_R(
  incid = cases_incidence,
  method = "parametric_si",
  config = config_emp
)

## アウトプットをプロットする
plot(epiestim_res_emp)
```

#### 推定時間枠（ウィンドウ）の設定 {.unnumbered}

デフォルトのオプションでは週単位の平滑化された推定値を提供していますが、正確な推定値を得るために、アウトブレイク初期に R<sub>t</sub> を推定していることを警告する機能もあります。以下に示すように、推定の開始日を遅く設定することで、変更できます。残念ながら、**EpiEstim** パッケージはこれらの推定時間を指定するのに非常に面倒な方法しか提供しておらず、そのためには各時間ウィンドウの開始日と終了日を参照する整数のベクトルを提供しなければなりません。

```{r epidemic_models_epiestim_config_late,}

## 6月1日から始まる日付のベクトルを定義する
start_dates <- seq.Date(
  as.Date("2014-06-01"),
  max(cases$dates) - 7,
  by = 1
) %>%
  ## 数字型に変換するために開始日を引く
  `-`(min(cases$dates)) %>%
  ## convert to integer
  as.integer()

## 1週間の平滑化ウィンドウに6日分を追加する
end_dates <- start_dates + 6
  
## config を作成する
config_partial <- make_config(
  mean_si = 12.0,
  std_si = 5.2,
  t_start = start_dates,
  t_end = end_dates
)
```

ここで、**EpiEstim** を再び実行してみると、推定値は6月からしか出ないことがわかります：

```{r epidemic_models_epiestim_config_late_run,}

## epiestim を走らせる
epiestim_res_partial <- estimate_R(
  incid = cases_incidence,
  method = "parametric_si",
  config = config_partial
)

## アウトプットをプロットする
plot(epiestim_res_partial)

```

#### アウトプットの分析 {.unnumbered}

主なアウトプットは `$R` でアクセスできます。R<sub>t</sub> のプロットと R<sub>t</sub> とその日に報告された症例数で与えられた「伝播能力」の指標を作成します（これは次世代の感染者数の期待値として表されます）。

```{r epidemic_models_epiestim_plot_full, out.width=c('100%', '100%'), fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}

## 中央値のために横型のデータフレームを作成します
df_wide <- epiestim_res_lit$R %>%
  rename_all(clean_labels) %>%
  rename(
    lower_95_r = quantile_0_025_r,
    lower_90_r = quantile_0_05_r,
    lower_50_r = quantile_0_25_r,
    upper_50_r = quantile_0_75_r,
    upper_90_r = quantile_0_95_r,
    upper_95_r = quantile_0_975_r,
    ) %>%
  mutate(
    ## t_startからt_endまでの日付の中央値を抽出する
    dates = epiestim_res_emp$dates[round(map2_dbl(t_start, t_end, median))],
    var = "R[t]"
  ) %>%
  ## 日々の発生データを統合する
  left_join(cases, "dates") %>%
  ## すべてのr推定値のリスクを計算する
  mutate(
    across(
      lower_95_r:upper_95_r,
      ~ .x*I,
      .names = "{str_replace(.col, '_r', '_risk')}"
    )
  ) %>%
  ## r推定値とリスク推定値を分離する
  pivot_longer(
    contains("median"),
    names_to = c(".value", "variable"),
    names_pattern = "(.+)_(.+)"
  ) %>%
  ## 因子（ファクタ）のレベルを割り当てる
  mutate(variable = factor(variable, c("risk", "r")))

## クォンタイル（分位値）から縦型のデータフレームを作成する
df_long <- df_wide %>%
  select(-variable, -median) %>%
  ## r/riskの推定値と分位値を分離する
  pivot_longer(
    contains(c("lower", "upper")),
    names_to = c(".value", "quantile", "variable"),
    names_pattern = "(.+)_(.+)_(.+)"
  ) %>%
  mutate(variable = factor(variable, c("risk", "r")))

## プロットを作成する
ggplot() +
  geom_ribbon(
    data = df_long,
    aes(x = dates, ymin = lower, ymax = upper, alpha = quantile),
    color = NA
  ) +
  geom_line(
    data = df_wide,
    aes(x = dates, y = median),
    alpha = 0.2
  ) +
  ## label_parsed を使用して、添え字ラベルをつける
  facet_wrap(
    ~ variable,
    ncol = 1,
    scales = "free_y",
    labeller = as_labeller(c(r = "R[t]", risk = "Transmission~potential"), label_parsed),
    strip.position = 'left'
  ) +
  ## 分位値の透明度を手動で定義する
  scale_alpha_manual(
    values = c(`50` = 0.7, `90` = 0.4, `95` = 0.2),
    labels = function(x) paste0(x, "%")
  ) +
  labs(
    x = NULL,
    y = NULL,
    alpha = "Credible\ninterval"
  ) +
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%b %d\n%Y"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    strip.background = element_blank(),
    strip.placement = 'outside'
  )
  
```

<!-- ======================================================= -->

## インシデンス（発生数）の予測（プロジェクション）

### EpiNow2 {.unnumbered}

R<sub>t</sub> の推定に加えて、**EpiNow2** パッケージは **EpiSoon** パッケージとの統合により、R<sub>t</sub> のプロジェクションや症例数のプロジェクションもサポートします。必要なのは、`epinow()` の呼び出しで `horizon` 引数を指定して、何日先までプロジェクションしたいかを示すことだけです。このセクションでは、`epinow_res` オブジェクトに格納されている分析のアウトプットをプロットします。

```{r epidemic_models_episoon, out.width=c('100%', '100%'), fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}

## プロットの一番小さい日付を設定する
min_date <- as.Date("2015-03-01")

## 要約された推定値を抽出する
estimates <-  as_tibble(epinow_res$estimates$summarised)

## 発生症例数の生データを抽出する
observations <- as_tibble(epinow_res$estimates$observations) %>%
  filter(date > min_date)

## 症例数の予測値を抽出する
df_wide <- estimates %>%
  filter(
    variable == "reported_cases",
    type == "forecast",
    date > min_date
  )

## 分位値プロットのためにさらに横型のフォーマットに変換する
df_long <- df_wide %>%
  ## ここで、分位値を一致させる（たとえば lower_90 から upper_90）
  pivot_longer(
    lower_90:upper_90,
    names_to = c(".value", "quantile"),
    names_pattern = "(.+)_(.+)"
  )

## プロットする
ggplot() +
  geom_histogram(
    data = observations,
    aes(x = date, y = confirm),
    stat = 'identity',
    binwidth = 1
  ) +
  geom_ribbon(
    data = df_long,
    aes(x = date, ymin = lower, ymax = upper, alpha = quantile),
    color = NA
  ) +
  geom_line(
    data = df_wide,
    aes(x = date, y = median)
  ) +
  geom_vline(xintercept = min(df_long$date), linetype = 2) +
  ## 分位値の透明度を手動で定義する
  scale_alpha_manual(
    values = c(`20` = 0.7, `50` = 0.4, `90` = 0.2),
    labels = function(x) paste0(x, "%")
  ) +
  labs(
    x = NULL,
    y = "Daily reported cases",
    alpha = "Credible\ninterval"
  ) +
  scale_x_date(
    date_breaks = "1 month",
    date_labels = "%b %d\n%Y"
  ) +
  theme_minimal(base_size = 14)

```

### 予測（プロジェクション） {.unnumbered}

RECON が開発した **projections** パッケージでは、実効再生産数 R<sub>t</sub> と発症間隔の知識だけで非常に簡単に短期的なインシデンスの予測を行うことができます。ここでは、文献から得られた発症間隔の推定値を使用する方法と、ラインリストから得られた独自の推定値を使用する方法について説明します。

#### 文献での発症間隔の推定値を利用 {.unnumbered}

**projections** パッケージには、**distcrete** パッケージに含まれる `distcrete` クラスの離散化された発症間隔の分布が必要です。ここでは、[この論文](https://bmcmedicine.biomedcentral.com/articles/10.1186/s12916-014-0196-0) で定義された平均12.0、標準偏差5.2のガンマ分布を使用します。これらの値をガンマ分布に必要な shape（形状）および scale（尺度）パラメータに変換するために、**epitrix** パッケージの `gamma_mucv2shapescale()` を使用します。

```{r epidemic_models_projections_distcrete,}

## 変動係数から形状と尺度パラメータを得ることができます
##（例：平均値に対する標準偏差の比）
shapescale <- epitrix::gamma_mucv2shapescale(mu = 12.0, cv = 5.2/12)

## distcrete オブジェクトを作成する
serial_interval_lit <- distcrete::distcrete(
  name = "gamma",
  interval = 1,
  shape = shapescale$shape,
  scale = shapescale$scale
)

```

ここでは、発症間隔が正しいことを確認するために簡単なチェックを行います。先ほど定義したガンマ分布の確率密度に `$d` でアクセスしますが、これは `dgamma` を呼び出した時と同じです。

```{r epidemic_models_projections_distcrete_plot,}

## 発症間隔が正しいことを確認する
qplot(
  x = 0:50, y = serial_interval_lit$d(0:50), geom = "area",
  xlab = "Serial interval", ylab = "Density"
)

```

#### データによる発症間隔の推定値を利用 {.unnumbered}

我々は症状の発症日と感染リンク（transmission links）のデータがあるので、感染者と被感染者のペアの発症日の遅れを計算することで、ラインリストから発症間隔を推定することもできます。**EpiNow2** のセクションで行ったように、**epicontacts** パッケージの `get_pairwise()` を用います。この関数によって、感染ペア（transmission pairs）間のラインリスト上の2組の特性の違いを計算することができます。まず epicontacts オブジェクトを作成します（[感染連鎖の図式化](#transmission-chains) の章を参照）：

```{r epidemic_models_epicontacts_projections, eval=F}
## コンタクトの作成
contacts <- linelist %>%
  transmute(
    from = infector,
    to = case_id
  ) %>%
  drop_na()

## epicontacts オブジェクトの作成
epic <- make_epicontacts(
  linelist = linelist,
  contacts = contacts, 
  directed = TRUE
)
```

次に、`get_pairwise()` を用いて、計算した感染ペアの発症日の差をガンマ分布にあてはめます。<u>離散化された</u>分布が必要なため、この適合（fitting）手順には **epitrix** パッケージの便利な `fit_disc_gamma()` を使います。

```{r epidemic_models_incubation_estimate_projections,  warning = FALSE}
## ガンマ分布に従う発症間隔の分布を推定する
serial_interval <- fit_disc_gamma(get_pairwise(epic, "date_onset"))

## 推定値
serial_interval[c("mu", "sd")]
```

#### 発生数（インシデンス）の予測（プロジェクション） {.unnumbered}

将来のインシデンスをプロジェクションするためには、過去の発生数を `incidence` オブジェクトの形で値供することに加えて、妥当な R<sub>t</sub> 値のサンプルを与える必要があります。前のセクション（R<sub>t</sub>推定）で **EpiEstim** によって作成され、`epiestim_res_emp` オブジェクトに格納された R<sub>t</sub> の推定値を使用して、インシデンスの予測値を作成します。以下のコードでは、アウトブレイクの最後の時間ウィンドウの R<sub>t</sub> の平均値と標準偏差の推定値を抜き出し（ベクトルの最後の要素にアクセスするために `tail()` を使用）、`rgamma()`を使用してガンマ関数から10000の値をシミュレーションします。また、事前予測に使用したいR<sub>t</sub> 値の独自のベクトルを提供することもできます。

```{r epidemic_models_projection_setup,  warning = FALSE}

## 発症日からincidenceオブジェクトを作成
inc <- incidence::incidence(linelist$date_onset)

## 最新の推定値から妥当な r 値を抽出する
mean_r <- tail(epiestim_res_emp$R$`Mean(R)`, 1)
sd_r <- tail(epiestim_res_emp$R$`Std(R)`, 1)
shapescale <- gamma_mucv2shapescale(mu = mean_r, cv = sd_r/mean_r)
plausible_r <- rgamma(1000, shape = shapescale$shape, scale = shapescale$scale)

## 分布をチェック
qplot(x = plausible_r, geom = "histogram", xlab = expression(R[t]), ylab = "Counts")

```

そして、`project()` を使って、実際の予測を行います。`n_days` 引数で何日間プロジェクションするかを指定し、`n_sim` 引数でシミュレーション回数を指定します。

```{r epidemic_models_make_projection,}

## プロジェクションの作成
proj <- project(
  x = inc,
  R = plausible_r,
  si = serial_interval$distribution,
  n_days = 21,
  n_sim = 1000
)

```

そして、`plot()` と `add_projections()` を使って、インシデンスとプロジェクションを簡単にプロットすることができます。各括弧演算子（[]）を使用すると、`incidence`オブジェクトを簡単に分けることができ、最近のケースのみを表示することができます。

```{r epidemic_models_plot_projection, out.width=c('100%', '100%'), fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}

## インシデンスとプロジェクションのプロット
plot(inc[inc$dates > as.Date("2015-03-01")]) %>%
  add_projections(proj)

```

また、アウトプットをデータフレームに変換することで、日々の症例数の生（raw）の推定値を簡単に取り出すことができます。

```{r epidemic_models_projection_df, eval=F, warning = FALSE}
## 生データをデータフレームに変換する
proj_df <- as.data.frame(proj)
proj_df
```

```{r epidemic_models_projection_dt,  echo = F}

## 生データをデータフレームに変換する
proj_df <- as.data.frame(proj)

## データテーブルのアウトプット
DT::datatable(
  proj_df[1:11],
  rownames = FALSE,
  filter = "top",
  options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap'
)

```

<!-- ======================================================= -->

## 資料

-   **EpiEstim** に実装されている方法論を説明した論文は[ここです](https://www.sciencedirect.com/science/article/pii/S1755436519300350)。
-   **EpiNow2** に実装されている方法論を説明した論文は[ここです](https://wellcomeopenresearch.org/articles/5-112/v1)。
-   R<sub>t</sub> を推定するための様々な方法論と実用上の配慮すべき点を説明した論文は[ここです](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1008409)。
