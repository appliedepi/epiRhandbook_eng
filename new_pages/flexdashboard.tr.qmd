
# R Markdown ile gösterge panelleri { }

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_output.png"))
```

Bu sayfa, **flexdashboard** paketinin temel kullanımını kapsayacaktır. Bu paket, R Markdown çıktısını paneller ve sayfalar içeren bir pano olarak kolayca biçimlendirmenize olanak tanır. Pano içeriği metin, istatistik şekiller/tablolar veya etkileşimli grafikler olabilir.

Flexdashboard'un avantajları:
• Minimum düzeyde standart dışı R kodlaması gerektirir - çok az pratikle hızlı bir şekilde bir gösterge paneli oluşturabilirsiniz
• Kontrol panelini genellikle bağımsız bir HTML dosyası olarak e-postayla gönderilebilirsiniz - sunucu gerekmez
• Etkileşim eklemek için flexdashboard'u shiny, ggplotly ve diğer "html widget'ları" ile birleştirebilirsiniz

Flexdashboard'un dezavantajları:
• Bir gösterge paneli oluşturmak için tek başına shiny kullanmaya kıyasla daha az özelleştirme

Bu sayfadaki bilgilerin esas kaynağı olan, esnek panel kullanımına ilişkin çok kapsamlı bilgileri kaynaklar bölümünde bulunabilir. Aşağıda, paketin temel özelliklerini açıklıyoruz ve vaka satır listesi verilerini kullanarak salgını araştırmak için bir gösterge paneli oluşturmaya ilişkin bir örnek veriyoruz. 



## Hazırlık

### Paketlerin yüklenmesi {.unnumbered}  

Bu el kitabında, gerekirse paketi kuran ve kullanım için yükleyen pacman'ın p_load() fonksiyonunu vurguluyoruz. Ayrıca, temel R'dan library() ile kurulu paketleri yükleyebilirsiniz. R paketleri hakkında daha fazla bilgi için R’ın temelleri sayfasına bakın.

```{r}
pacman::p_load(
  rio,             # verinin içe / dışa aktarımı   
  here,            # dosyaları bul
  tidyverse,       # veri yönetimi ve görselleştirme
  flexdashboard,   # R Markdown raporlarının panel sürümleri
  shiny,           # interaktif figürler
  plotly           # interaktif figürler
)
```

### Verileri içe aktarın {.unnumbered}  

Simüle edilmiş bir Ebola salgını vakalarının veri setini içe aktarıyoruz. Devam etmek istiyorsanız, “temiz” satır listesini (.rds dosyası olarak) indirmek için tıklayın. Verileri rio paketinden import() fonksiyonuyla içe aktarın (.xlsx, .csv, .rds gibi birçok dosya türünü işler - ayrıntılar için İçe Aktarma ve Dışa Aktarma sayfasına bakabilirsiniz).<a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>click to download the "clean" linelist</a> 

```{r, echo=F}
# satır listesini R'a aktar
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# satır listesini içe aktarma
linelist <- import("linelist_cleaned.rds")
```

Satır listesinin ilk 50 satırı aşağıda gösterilmiştir. 

```{r, message=FALSE, echo=F}
# satır listesini tablo olarak gösterin
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


## Yeni bir R Markdown oluştur 

Paketi kurduktan sonra, Dosya > Yeni dosya > R Markdown yolunu kullanarak yeni bir R Markdown dosyası oluşturun.

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_new1.png"))
```


Açılan pencerede “From Template-Şablondan”ı seçin ve “Flex Dashboard” şablonunu seçin. Daha sonra belgeyi adlandırmanız istenecektir. Bu sayfanın örneğinde, R Markdown'ımızı “outbreak_dashboard.Rmd” olarak adlandıracağız.
  

```{r out.width = "100%", out.height="75%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_new2.png"))
```



## Komutlar  

Komut dosyası bir R Markdown komut dosyasıdır ve bu nedenle R Markdown ile Raporlar sayfasında açıklananla aynı bileşenlere ve organizasyona sahiptir. Bunları kısaca yeniden inceleyeceğiz ve diğer R Markdown çıktı biçimlerinden farklılıklarını vurgulayacağız.


### YAML {.unnumbered}  

Komut dosyasının en üstünde “YAML” başlığı bulunur. Bu kısım, üç tire ile başlamalı --- ve üç tire ile kapatılmalıdır ---. YAML parametreleri anahtar:değer çiftleri halinde gelir. YAML'de iki nokta üst üste işaretinin girintisi ve yerleşimi önemlidir - anahtar:değer çiftleri iki nokta üst üste ile ayrılır (eşittir işaretleri değil!).

YAML, belge için meta verilerle başlamalıdır. Bu birincil YAML parametrelerinin (girintisiz) sırası önemli değildir. Örneğin:


```{r, eval=F}
title: "My document"
author: "Me"
date: "`r Sys.Date()`"
```

YAML değerlerinde R kodunu, satır içi kod gibi (backticks içinde r'den önce gelir) veya tırnak işaretleri içine koyarak (Tarih için yukarıya bakın) kullanabilirsiniz. Üretilecek dosyanın türünü bir YAML parametresi çıktısı belirtir. (ör. html_document, pdf_document, word_document veya powerpoint_presentation). 

Flexdashboard için bu parametre değeri biraz kafa karıştırıcıdır - output:flexdashboard::flex_dashboard olarak ayarlanmalıdır.  Tek ve çift sayıda iki nokta üst üste ve alt çizgiye noktalama işaretlerine dikkat edin. Bu YAML çıktı parametresini genellikle ek bir iki nokta üst üste ve girintili alt parametreler izler (aşağıdaki orientation:-oryantasyon: ve vertical_layout: -dikey_düzen: parametrelere bakın).

```{r, eval=F}
title: "My dashboard"
author: "Me"
date: "`r Sys.Date()`"
output:
  flexdashboard::flex_dashboard:
    orientation: rows
    vertical_layout: scroll
```

Yukarıda gösterildiği gibi, alt parametreler için girintiler (2 boşluk) kullanılır. Bu durumda, birincilden sonra anahtar:değer: gibi ek bir iki nokta üst üste koymayı unutmayın.Uygunsa, mantık değerleri YAML'de küçük harfle (true, false, null) verilmelidir. İki nokta üst üste karakteri değerinizin bir parçasıysa (örneğin başlıkta), değeri tırnak içine alın. Aşağıdaki bölümlerdeki örneklere bakın. 



### Kod parçaları {.unnumbered}  

Bir R Markdown komut dosyası birden çok kod "parçası" içerebilir - bunlar komut dosyasının çok satırlı R kodu yazabileceğiniz alanlarıdır ve tıpkı mini R komut dosyaları gibi çalışırlar.

Kod parçaları, içinde küçük bir "r" harfi bulunan üç ters tik işareti ve küme parantezleri ile oluşturulur. Kod parçası, üç ters tik ile kapatılır. Kendiniz yazarak, “Ctrl + Alt + i” (veya Mac'te Cmd + Shift + r) klavye kısayolunu kullanarak veya komut dosyası düzenleyicinizin en üstünde 'yeni bir kod parçası ekle' simgesini tıklayarak yeni bir kod parçası oluşturabilirsiniz.. Aşağıda birçok örnek verilmiştir.  


### Anlatı metni {.unnumbered}  

Bir R kodu "parçası" dışında, anlatı metni de yazabilirsiniz. R Markdown ile Raporlar sayfasında açıklandığı gibi, metni bir yıldız işaretiyle (*) çevreleyerek italik veya iki yıldız işaretiyle (**) çevreleyerek kalın yazabilirsiniz. Madde işaretleri ve numaralandırma düzenlerinin yeni satırlara, girintilere ve iki boşlukla bir satırı bitirmeye duyarlı olduğunu hatırlayın.

Ayrıca satır içi R kodunu, R Markdown ile Raporlar sayfasında açıklandığı gibi, kodu ters tiklerle çevreleyerek ve komutu “r”: ` 1+1` ile başlatarak metne ekleyebilirsiniz (yukarıdaki tarih içeren örneğe bakın). 




### Başlıklar {.unnumbered}  

R Markdown ile Raporlar sayfasında açıklandığı gibi, farklı sayıda hash sembolü ile farklı başlık seviyeleri oluşturulur.

Flexdashboard'da, birincil başlık (#) gösterge tablosunun bir "sayfasını" oluşturur. İkinci düzey başlıklar (##), oryantasyonunuza bağlı olarak bir sütun veya satır oluşturur: Parametre (aşağıdaki ayrıntılara bakın). Üçüncü düzey başlıklar (###) çizimler, çizelgeler, tablolar, metin vb. için paneller oluşturur.


```md
# Birinci düzey başlık (sayfa)

## İkinci düzey başlık (satır veya sütun)

### Üçüncü düzey başlık (çizim, çizelge vb. için bölme) 

```


## Bölüm Özellikleri  

Normal bir R Markdown dosyasında olduğu gibi, bir başlıktan sonra, küme parantezleri { } içinde anahtar=değer seçeneklerini ekleyerek gösterge tablonuzun bölümlerine uygulanacak özellikleri belirleyebilirsiniz. Örneğin, tipik bir HTML R Markdown raporunda, ## Başlığım {.tabset} ile alt başlıkları sekmeler halinde düzenleyebilirsiniz. Bu niteliklerin, komut dosyasının metin bölümünde bir başlıktan sonra yazıldığını unutmayın. Bunlar, out.height = gibi R kodu parçalarının üstüne eklenen knitr seçeneklerinden farklıdır. 

Flexdashboard'a özgü bölüm özellikleri şunları içerir:
• {data-orientation=} Satırlara veya sütunlara göre ayarlama. Gösterge panelinizde birden fazla sayfa varsa, oryantasyonu belirtmek için bu özelliği her sayfaya ekleyin (düzen bölümünde daha ayrıntılı açıklanmıştır).
• {data-width=} ve {data-height=}, aynı boyutta (yatay veya dikey) düzenlenen grafiklerin, sütunların, satırların göreli boyutunu ayarlar. Flexbox motoru sayesinde mutlak boyutlar, herhangi bir görüntüleme cihazındaki alanı en iyi şekilde dolduracak şekilde ayarlanır.
• Grafiklerin yüksekliği, YAML parametresini vertical_layout: fill (dolgu) olarak mı yoksa vertical_layout: scroll (kaydırma) olarak mı ayarladığınıza da bağlıdır. Kaydırılacak şekilde ayarlanırsa, şekil yüksekliği, R kodu öbeğindeki geleneksel fig.height = seçeneğini yansıtacaktır.
• flexdashboard web sitesindeki tam boyut belgelerine bakın
• {.hidden} Belirli bir sayfayı gezinme çubuğundan hariç tutmak için bunu kullanın
• {data-navbar=} Bunu, bir gezinme çubuğu açılır menüsü içine yerleştirmek için sayfa düzeyinde bir başlıkta kullanın. Açılır menünün adını (tırnak içinde) belirtin. Aşağıdaki örneğe bakın. 



## Yerleşim Düzeni {#layout}  

Kontrol panelinizin düzenini aşağıdaki şekillerde ayarlayın:
• R Markdown başlıklarına sahip sayfalar, sütunlar/satırlar ve grafikler ekleyin (ör. #, ## veya ###)
• YAML parametre yönünü ayarlayın: Satırlara veya sütunlara
• Düzenin tarayıcıyı dolduracağını ya da kaydırmaya mı izin vereceğini belirtin
• Belirli bir bölüm başlığına sekmeler ekleyin



### Sayfalar {.unnumbered}  

R Markdown'daki birinci düzey başlıklar (#), gösterge tablosunun "sayfalarını" temsil edecektir. 
Varsayılan olarak sayfalar, gösterge tablosunun üst kısmındaki bir gezinme çubuğunda görünür.


```{r, out.height = c('100%'), out.width = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_pages_top_script.png"))
```


```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_pages_top_view.png"))
```


Sayfa başlığına {data-navmenu=} özelliğini ekleyerek sayfaları üst gezinme çubuğunda bir "menü" halinde gruplayabilirsiniz. Dikkatli olun - eşittir işaretinin etrafına boşluk eklemeyin, aksi takdirde çalışmaz!


```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_navmenu_script.png"))
```


İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_navmenu_view.png"))
```

{.sidebar} özelliği ekleyerek, bir sayfayı veya sütunu kontrol panelinin sol tarafında bir "kenar çubuğuna" da dönüştürebilirsiniz. Metni (herhangi bir sayfadan görüntülenebilir) veya entegre shiny etkileşiminiz varsa, kaydırıcılar veya açılır menüler gibi kullanıcı giriş kontrollerini eklemek faydalı olabilir.


```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_sidebar_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_sidebar_view.png"))
```


### Oryantasyon {.unnumbered}  

İkinci düzey (##) R Markdown başlıklarınızın nasıl yorumlanması gerektiğini belirtmek için oryantasyon: yaml parametresini ayarlayın - oryantasyon: sütunlar (orientation: columns) veya oryantasyon: satırlar (orientation: rows) olarak. 

İkinci düzey başlıklar (##), bu yönlendirme ayarına göre yeni sütunlar veya satırlar olarak yorumlanacaktır. 

Oryantasyon: sütunlar (orientation: columns) olarak ayarlarsanız, ikinci düzey başlıklar gösterge tablosunda yeni sütunlar oluşturur. Aşağıdaki gösterge paneli, toplam üç panel içeren iki sütun içeren bir sayfaya sahiptir. Sütunların göreli genişliğini aşağıda gösterildiği gibi {data-width=} ile ayarlayabilirsiniz.

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_columns_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_columns_view.png"))
```

Oryantasyon: satırlar  (orientation: rows)olarak ayarlarsanız, ikinci düzey başlıklar sütunlar yerine yeni satırlar oluşturur. Aşağıda, yukarıdakiyle aynı komut dosyası vardır, ancak oryantasyon: satırlar olarak ayarlanmıştır, böylece ikinci düzey başlıklar sütunlar yerine satırlar oluşturur. {data-height=} ile satırların göreli yüksekliğini aşağıda gösterildiği gibi ayarlayabilirsiniz.

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_rows_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_rows_view.png"))
```

Kontrol panelinizde birden fazla sayfa varsa, her sayfanın başlığına {data-orientation=} özniteliğini ekleyerek (tırnak işaretleri olmadan satırları veya sütunları belirtin) seçili sayfanın yönünü belirleyebilirsiniz.  

### Sekmeler {.unnumbered} 

Diğer HTML R Markdown çıktılarında olduğu gibi içeriği {.tabset} özniteliği ile sekmelere bölebilirsiniz.

Bu özelliği istediğiniz başlıktan sonra eklemeniz yeterlidir. Bu başlığın altındaki alt başlıklar sekmeler halinde görüntülenecektir. Örneğin, aşağıdaki örnek komut dosyasında sağdaki 2. sütun (##), salgın eğrisi ve tablo bölmeleri (###) sekmelerde görüntülenecek şekilde değiştirilir.

Oryantasyonunuz satırlarsa, aynısını satırlarla da yapabilirsiniz.
 

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_tabs_script.png"))
```

İşte betiğin ürettiği: 

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_tabs_view.png"))
```


## İçerik Ekleme  

Bir kontrol paneli oluşturmaya başlayalım. Basit panomuz 1 sayfa, 2 sütun ve 4 panelden oluşacaktır. Gösteri için panelleri parça parça inşa edeceğiz.

Metin, ggplot'lar ve tablolar gibi standart R çıktılarını kolayca dahil edebilirsiniz (Sunum için Tablolar sayfasına bakın). Bunları, diğer herhangi bir R Markdown betiğinde yaptığınız gibi, bir R kod parçası içinde kodlayın.

Not: Tamamlanmış Rmd komut dosyasını ve HTML gösterge tablosu çıktısını indirebilirsiniz - El kitabı ve verilerin indirilmesi sayfasına bakın. 



### Metin {.unnumbered}  

Markdown metnini yazabilir ve diğer herhangi bir R Markdown çıktısında olduğu gibi satır içi kod ekleyebilirsiniz. Ayrıntılar için R Markdown ile Raporlar sayfasına bakın.

Bu panele, en son hastaneye yatış tarihini ve salgında bildirilen vaka sayısını gösteren dinamik metin içeren bir özet metin paneli ekledik. 


### Tablo {.unnumbered}  

Tablolar gibi çıktıları yazdıran R kodu parçalarını dahil edebilirsiniz. Ancak, tablolarınızı görüntülemek için knitr'den kable() fonksiyonunu kullanırsanız, çıktı en iyi şekilde görünecek ve pencere boyutuna yanıt verecektir. Flextable fonksiyonları, kısaltılmış/kesilmiş tablolar üretebilir.
Örneğin, hastaneye göre vakaların özet bir tablosunu oluşturmak için aşağıda linelist()'i bir count() komutuyla besliyoruz. Sonuç olarak, tablo knitr::kable()'a yönlendirilir ve sağ tarafında bir kaydırma çubuğu bulunur. Panelinizi kable() ve kableExtra ile özelleştirme hakkında daha fazla bilgiyi burada bulabilirsiniz. [buradan](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html).  

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_tables_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_tables_view.png"))
```

Kullanıcının veri çerçevesinin "sayfalarını" filtrelemesine, sıralamasına ve/veya tıklamasına izin veren dinamik bir tablo oluşturmak istiyorsanız, aşağıdaki kodda olduğu gibi DT paketini ve onun datatable() fonksiyonunu kullanın.

Aşağıdaki örnek kod, veri çerçevesi satır listesi yazdırılır. Yatay alanı korumak için rownames = FALSE ve her sütunun üstünde filtreler olması için filter = "top" argümanını ayarlayabilirsiniz. options =  argümanı diğer özelliklerin bir listesi verebilir. Aşağıda, 5 satır görünecek şekilde pageLength = argümanını ve kullanıcının yatay olarak kaydırmak için alttaki kaydırma çubuğunu kullanabilmesi için scrollX = argümanını ayarladık. class = 'white-space: nowrap' argümanı, her satırın yalnızca bir satır (birden çok satır değil) içermesini sağlar. Diğer olası argümanlar ve değerler hakkında [buradan](https://rstudio.github.io/DT/?_ga=2.2810736.1321860763.1619286819-369061888.1601594705) veya ?datatable komutunu girerek bilgi edinebilirsiniz.


```{r, eval=F}
DT::datatable(linelist, 
              rownames = FALSE, 
              options = list(pageLength = 5, scrollX = TRUE), 
              class = 'white-space: nowrap' )
```

### Grafikler {.unnumbered}  

Grafikleri, bir R komut dosyasında olduğu gibi bir panel bölmesine yazdırabilirsiniz. Örneğimizde, iki basit komutla yaş grubuna göre bir “salgın eğrisi” oluşturmak için incidence2 paketini kullanıyoruz (bkz. Salgın eğriler sayfası). Ancak, ggplot()'u kullanabilir ve aynı şekilde bir grafik oluşturabilirsiniz.  

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_plots_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_plots_view.png"))
```


### İnteraktif grafikler  {.unnumbered}  

Ayrıca standart bir ggplot veya başka bir grafik nesnesini plotly paketinden ggplotly() fonksiyonuna iletebilirsiniz (İnteraktif grafikler sayfasına bakabilirsiniz). Bu, grafiğinizi interaktif hale getirecek, okuyucunun "yaklaştırmasına" ve her veri noktasının değerinin (bu senaryoda eğrideki haftalık vaka sayısı ve yaş grubu) üzerinde fareyle gezinerek göstermesine izin verecektir. 

```{r, eval=F}
age_outbreak <- incidence(linelist, date_onset, "week", groups = age_cat)
plot(age_outbreak, fill = age_cat, col_pal = muted, title = "") %>% 
  plotly::ggplotly()
```

Gösterge panelinde bunun nasıl göründüğü aşağıda açıklanmıştır(gif). Bu interaktif fonksiyon, paneli statik bir dosya olarak e-posta olarak gönderseniz bile (bir sunucuda çevrimiçi değil) çalışmaya devam edecektir.   

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_ggplotly.gif"))
```

### HTML Araçları {.unnumbered}

[R için HTML widget'ları](http://www.htmlwidgets.org/), JavaScript kitaplıklarını kullanarak etkileşimi artıran özel bir R paketi sınıfıdır. Bunları R Markdown çıktılarına (bir flexdashboard gibi) ve shiny panolara gömebilirsiniz.

Bu widget'ların bazı yaygın örnekleri şunları içerir:

• Plotly (Bu el kitabı sayfasında ve [İnteraktif grafikler] sayfasında kullanılır)
• visNetwork (Bu el kitabının İletim Zincirleri sayfasında kullanılır)
• Leaflet (Bu el kitabının GIS Temelleri sayfasında kullanılır)
• dygraphs (Zaman serisi verilerini etkileşimli olarak göstermek için kullanışlıdır)
• DT (datatable()) (filtre, sıralama vb. ile dinamik tabloları göstermek için kullanılır)

Aşağıda, gösterge paneline visNetwork kullanan bir salgın iletim zinciri eklemeyi gösteriyoruz. Komut dosyası, yalnızca R Markdown komut dosyasının “Sütun 2” bölümüne eklenen yeni kodu gösterir. Kodu, bu el kitabının İletim zincirleri sayfasında bulabilirsiniz.


```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_chain_script.png"))
```

İşte betiğin ürettiği:

```{r, out.width=c('100%', '100%'), echo=F, fig.show='hold', fig.width = 12, fig.height = 9, message=F, warning=F}
knitr::include_graphics(here::here("images", "flexdashboard_chain.gif"))
```



## Kodun düzenlenmesi

Tüm kodun R Markdown flexdashboard komut dosyası içinde olmasını seçebilirsiniz. Alternatif olarak, daha temiz ve yoğun bir pano komut dosyasına sahip olmak için, harici R komut dosyalarında bulunan veya oluşturulan kod/şekilleri çağırmayı seçebilirsiniz. [R Markdown ile Raporlar] sayfasında daha ayrıntılı olarak açıklanmaktadır.  


## Shiny  

Shiny R paketini entegre etmek, gösterge panellerini kullanıcı girdilerine karşı daha da reaktif hale getirebilir. Örneğin, kullanıcının bir yetki alanı veya bir tarih aralığı seçmesini ve panellerin seçimlerine tepki vermesini sağlayabilirsiniz (örneğin, görüntülenen verileri filtreleme). Shiny’nin reaktif özelliklerini flexdashboard'a gömmek için, flexdashboard R Markdown betiğinizde sadece birkaç değişiklik yapmanız yeterlidir. 

flexdashboard olmadan da uygulamalar/gösterge panoları oluşturmak için shiny’i kullanabilirsiniz. Shiny ile gösterge panelleri sayfası, shiny sintaksı, uygulama dosyası yapısı ve paylaşım/yayınlama seçenekleri (ücretsiz sunucu seçenekleri dahil) ile ilgili temel bilgiler dahil olmak üzere bu yaklaşıma genel bir bakış sunar. Bu sintaks ve genel ipuçları, flexdashboard bağlamında da düşünülebilir.

Ancak, flexdashboard'a shiny’i yerleştirmek, flexdashboard'unuz için temel bir değişikliktir. Artık e-posta ile gönderebileceğiniz ve herkesin açıp görüntüleyebileceği bir HTML çıktısı üretmeyecektir. Bunun yerine, bir “uygulama” olacaktır. Komut dosyasının üstündeki "Knit-Ör" düğmesinin yerini, etkileşimli panelin bir örneğini bilgisayarınızda yerel olarak açacak olan bir " Run document- Belgeyi çalıştır" simgesi alacaktır.

Kontrol panelinizi paylaşmak artık şunları yapmanızı gerektirecek:

• Rmd komut dosyasını görüntüleyiciye gönderin, bilgisayarlarınızda R'da açın ve uygulamayı çalıştırın veya
• Uygulama/pano, izleyicinin erişebileceği bir sunucuda saklanmalıdır


Bu nedenle, shiny entegrasyonun faydaları vardır, aynı zamanda komplikasyonları da vardır. E-posta ile kolay paylaşım bir öncelikse ve shiny’nin reaktif özelliklerine ihtiyacınız yoksa, yukarıda gösterildiği gibi ggplotly() tarafından sunulan azaltılmış etkileşimli versiyonu düşünün.  

Aşağıda, yukarıdakiyle aynı “outbreak_dashboard.Rmd”yi kullanarak çok basit bir örnek veriyoruz. Shiny'yi flexdashboard'a entegre etmeye ilişkin kapsamlı belgeleri [buradan](https://rmarkdown.rstudio.com/flexdashboard/shiny.html) çevrimiçi olarak okuyabilirsiniz.  



### Ayarlar {.unnumbered}  

Aşağıdaki gibi çıktı (output:) ile aynı girinti düzeyinde YAML parametresi ekleyerek (runtime: shiny) flexdashboard‘da shiny özelliğini etkinleştirin:

```md
---
title: "Outbreak dashboard (Shiny demo)"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

```

Kullanıcıdan bilgi toplayacak shiny giriş widget'larını tutmak için bir "kenar çubuğunu-side bar" etkinleştirmek de uygundur. Yukarıda açıklandığı gibi, bir sütun oluşturun ve sol tarafta bir kenar çubuğu oluşturmak için {.sidebar} seçeneğini belirtin. Bu sütuna shiny giriş komutlarını içeren metin ve R parçaları ekleyebilirsiniz.

Uygulamanız/gösterge tablonuz bir sunucudaysa ve aynı anda birden çok kullanıcıya sahipse, ilk R kodu parçasına “global” adını verin. Verilerinizi içe aktarmak/yüklemek için bu kod parçasına gereken komutları ekleyin. Bu özel adlandırılmış kod parçası farklı şekilde ele alınır ve içine aktarılan veriler yalnızca bir kez içe aktarılır (sürekli değil) ve tüm kullanıcılar tarafından kullanılabilir. Bu, uygulamanın başlatma hızını artırır.  

### Üzerinde çalışılmış örnek {.unnumbered}  

Burada, “outbreak_dashboard.Rmd” flexdashboard komut dosyasını shiny’i içerecek şekilde uyarlıyoruz. Kullanıcıya açılır menüden bir hastane seçme yeteneği ekleyeceğiz ve salgın eğrisinin dinamik bir grafik başlığı ile yalnızca o hastaneden vakaları yansıtmasını sağlayacağız. Aşağıdakileri yapıyoruz:

* •	YAML ‘e runtime: shiny ekleyin 
•	Kurulum yığınını global şeklinde yeniden adlandırın
•	Bir kenar çubuğu oluşturun 
•	Benzersiz hastane adlarından oluşan vektörü oluşturmak için kod
•	Hastane isimleri seçimi ile bir selectInput() komutu (shiny açılır menüsü). Seçim, daha sonraki kodda input$hospital_choice olarak başvurulabilecek olan hospital_choice olarak kaydedilir.
•	Salgın eğrisi kodu (sütun 2) renderPlot({ })ile sarılmıştır ve bunları içerir:  
•	Hastane sütununu input$hospital_choice'in geçerli değeriyle sınırlayan veri kümesindeki bir filtre
•	input$hospital_choice içeren dinamik bir grafik başlığı

  
Bir input$ değerine başvuran herhangi bir kodun (reaktif olması için) render({}) fonkisyonu içinde olması gerektiğini unutmayın.

YAML, global kod parçası ve kenar çubuğu da dahil olmak üzere betiğin üst kısmı:




```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_script1.png"))
```
  
Reaktif eğri grafiğiyle birlikte 2. Sütun:

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_script2.png"))
```

Ve işte kontrol paneli:

```{r, out.width = c('100%'), out.height = c('100%'), echo=F}
knitr::include_graphics(here::here("images", "flexdashboard_shiny_view.gif"))
```




### Diğer Örnekler {.unnumbered}  

Shiny etkileşimi ve broşür haritalama widget'ını kullanan bir Shiny-flexdashboard'un sağlıkla ilgili bir örneğini incelemek için  [Geospatial Health Data: R-INLA ve Shiny ile Modelleme ve Görselleştirme çevrimiçi kitabının bu bölümüne](https://www.paulamoraga.com/book-geospatial/sec-dashboardswithshiny.html)  bakabilirsiniz.  




## Paylaşım  

Shiny öğeleri içermeyen panolar, boyutu izin veriyorsa e-postayla gönderilebilecek bir HTML dosyası (.html) verir. “Gösterge paneli” raporunu gönderebildiğiniz için ve bir web sitesi olarak saklamak için bir sunucu kurmanız gerekmediği için bu yararlıdır.

Shiny öğelerini yerleştirdiyseniz, e-posta ile çıktı gönderemezsiniz, ancak komut dosyasının kendisini bir R kullanıcısına gönderebilir veya yukarıda açıklandığı gibi gösterge panelini bir sunucuda saklayabilirsiniz. 



## Kaynaklar   

Bu sayfanın referans aldığı mükemmel eğitimleri aşağıda bulunabilir. Bunları gözden geçirirseniz, büyük olasılıkla bir saat içinde kendi gösterge tablonuzu hazırlayabilirsiniz.

https://bookdown.org/yihui/rmarkdown/dashboards.html

https://rmarkdown.rstudio.com/flexdashboard/

https://rmarkdown.rstudio.com/flexdashboard/using.html

https://rmarkdown.rstudio.com/flexdashboard/examples.html
