# Факторы {}


```{r, out.width=c('100%'), echo=F, message=F}
knitr::include_graphics(here::here("images", "Factors_1500x500.png"))
```

В R *факторы* - это класс данных, которые позволяют создавать упорядоченные категории с фиксированным набором приемлемых значений.  

Как правило, вам нужно конвертировать столбец из текстового или числового класса в фактор, если вы хотите задать предопределенный порядок значений ("*уровни*"), чтобы они отображались не в алфавитном порядке в графиках и таблицах. Еще одно частое применение факторов - стандартизация легенд графиков, чтобы они не изменялись, если какие-то значения временно отсутствуют в данных.   

На данной странице показано использование функций из пакета **forcats** (сокращение от "**For** **cat**egorical variables" (для категориальных переменных)) и некоторых функций **базового** R. Мы также упомянем использование **lubridate** и **aweek** для особых случаев факторов, связанных с эпидемиологическими неделями.  

Полный список функций **forcats** можно найти онлайн [тут](https://forcats.tidyverse.org/reference/index.html). Ниже мы продемонстрируем наиболее частые случаи применения.  


<!-- ======================================================= -->
## Подготовка  

### Загрузка пакетов {.unnumbered}  

Данный фрагмент кода показывает загрузку пакетов, необходимых для анализа. В данном руководстве мы фокусируемся на использовании `p_load()` из пакета **pacman**, которая устанавливает пакет, если необходимо, *и* загружает его для использования. Вы можете также загрузить установленные пакеты с помощью `library()` из **базового** R. См. страницу [Основы R](basics.ru.qmd) для получения дополнительной информации о пакетах R.  

```{r}
pacman::p_load(
  rio,           # импорт/экспорт
  here,          # пути к файлу
  lubridate,     # работа с датами
  forcats,       # факторы
  aweek,         # создание эпиднедель с автоматическими уровнями факторов
  janitor,       # таблицы
  tidyverse      # управление данными и визуализация
  )
```



### Импорт данных {.unnumbered}  

Мы импортируем набор данных о случаях из имитационной эпидемии Эболы. Если вы хотите выполнять шаги параллельно, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>кликните, чтобы скачать "чистый" построчный список</a> (as .rds file). Импортируйте ваши данные с помощью функции `import()` из пакета **rio** (она работает с многими типами файлов, такими как .xlsx, .rds, .csv - см. страницу [Импорт и экспорт](importing.ru.qmd) для получения детальной информации).  

```{r, echo=F}
# импорт построчного списка в R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```


```{r, eval=F}
# импорт вашего набора данных
linelist <- import("linelist_cleaned.rds")
```


### Новая категориальная переменная {#fct_newcat .unnumbered}  

Для демонстрации на этой странице мы будем использовать часто встречающийся сценарий - создание новой категориальной переменной.

Обратите внимание, что если вы конвертируете числовой столбец в класс фактор, вы не сможете рассчитывать числовую статистику по этому столбцу.  

#### Создание столбца {.unnumbered}  

Мы используем существующий столбец `days_onset_hosp` (дней с момента появления симптомов до госпитализации) и создаем новый столбец `delay_cat` путем классификации каждой строки в одну из нескольких категорий. Мы это делаем с помощью функции `case_when()` из **dplyr**, которая последовательно применяет логические критерии (правая сторона) к каждой строке и выдает соответствующее значение с левой стороны для нового столбца `delay_cat`. Более детально о `case_when()` вы можете почитать на странице [Вычистка данных и ключевые функции](cleaning.ru.qmd).  

```{r}
linelist <- linelist %>% 
  mutate(delay_cat = case_when(
    # критерии                                 # новое значение, если TRUE (истина)
    days_onset_hosp < 2                        ~ "<2 days",
    days_onset_hosp >= 2 & days_onset_hosp < 5 ~ "2-5 days",
    days_onset_hosp >= 5                       ~ ">5 days",
    is.na(days_onset_hosp)                     ~ NA_character_,
    TRUE                                       ~ "Check me"))  
```


#### Порядок значений по умолчанию {.unnumbered}  

Так как новый столбец `delay_cat` создан с помощью `case_when()`, он будет категориальным столбцом в текстовом классе - *а не* фактором. Таким образом, в частотной таблице мы увидим, что уникальные значения появляются в алфавитно-числовом порядке по умолчанию - этот порядок не имеет особого интуитивного смысла:  

```{r}
table(linelist$delay_cat, useNA = "always")
```

Аналогично, если мы будем создавать столбчатую диаграмму, значения также появятся в этом порядке на оси x (см. страницу [основы ggplot] для получения более подробной информации о **ggplot2** - наиболее часто используемом пакете для визуализации в R).  

```{r, warning=F, message=F}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = delay_cat))
```



## Конвертация в фактор  

Чтобы конвертировать текстовый или числовой столбец в класс *фактор*, вы можете использовать любую функцию из пакета **forcats** (многие детально рассматриваются [ниже](#fct_adjust)). Они конвертируют в класс фактор и затем также проводят или допускают определенное упорядочивание уровней - например, использование `fct_relevel()` позволяет вам вручную указать порядок уровней. Функция `as_factor()` просто конвертирует класс без дополнительных возможностей.  

**базовая** функция R `factor()` конвертирует столбец в фактор и позволяет вам вручную указать порядок уровней, как текстовый вектор в аргументе `levels = `.  

Ниже мы используем `mutate()` и `fct_relevel()`, чтобы конвертировать столбец `delay_cat` из текстового класса в фактор. Столбец `delay_cat` был создан в разделе [Подготовка](#fct_newcat) выше. 

```{r}
linelist <- linelist %>%
  mutate(delay_cat = fct_relevel(delay_cat))
```

*Уникальные "значения" в данном столбце теперь считаются "уровнями" фактора.*  Уровни имеют *порядок*, который можно напечатать с помощью функции **базового** R `levels()`, либо альтернативно можно просмотреть в таблице подсчета через `table()` из **базового** R или `tabyl()` из **janitor**. По умолчанию порядок уровней будет алфавитно-числовым, как ранее. Обратите внимание, что `NA` не является уровнем фактора.  

```{r}
levels(linelist$delay_cat)
```

Функция `fct_relevel()` имеет дополнительный функционал, поскольку позволяет вам вручную указать порядок уровней. Просто запишите значения уровня в нужном порядке в кавычках, разделенные запятыми, как показано ниже. Обратите внимание, что правописание должно быть идентичным значениям. Если вы хотите создать уровни, которые не существуют в данных, используйте [вместо этого `fct_expand()`](#fct_add)).  

```{r}
linelist <- linelist %>%
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", "2-5 days", ">5 days"))
```

Теперь мы видим, что уровни упорядочены, как указано в предыдущей команде, в понятном порядке.  

```{r}
levels(linelist$delay_cat)
```

Теперь порядок в графике имеет более интуитивно-понятный смысл.  

```{r, warning=F, message=F}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = delay_cat))
```


## Добавление или удаление уровней  

### Добавление {#fct_add .unnumbered}
Если вам нужно добавить уровни к фактору, вы это можете сделать с помощью `fct_expand()`. Просто напишите название столбца, после которого идут новые уровни (разделенные запятыми). С помощью табулирования значений мы можем увидеть новые уровни и количество ноль. Вы можете использовать `table()` из **базового** R, либо `tabyl()` из **janitor**:  

```{r}
linelist %>% 
  mutate(delay_cat = fct_expand(delay_cat, "Not admitted to hospital", "Transfer to other jurisdiction")) %>% 
  tabyl(delay_cat)   # печать таблицы
```


Примечание: существует специальная функция **forcats**, чтобы легко добавить отсутствующие значения (`NA`) в качестве уровня. См. раздел [Отсутствующие значения](#fct_missing) ниже.  


### Удаление {.unnumbered}  

Если вы используете `fct_drop()`, "неиспользованные" уровни с нулевым количеством будут удалены из набора уровней. Уровень, который мы добавили выше ("Not admitted to a hospital"), существует в качестве уровня, но ни в одной из строк на самом деле нет таких значений. Поэтому они будут удалены при применении `fct_drop()` к столбцу фактор:  

```{r}
linelist %>% 
  mutate(delay_cat = fct_drop(delay_cat)) %>% 
  tabyl(delay_cat)
```




## Корректировка порядка уровней {#fct_adjust} 

Пакет **forcats** предлагает полезные функции, чтобы легко скорректировать порядок уровней фактора (после того, как столбец определен как класс фактор): 

Эти функции можно применить к столбцу фактор в двух контекстах:  

1) К столбцу датафрейма, как обычно, чтобы трансформация была доступна при последующем использовании данных  
2) *Внутри графика*, чтобы это изменение применялось только к этому графику  



### Вручную {.unnumbered} 

Эта функция используется, чтобы вручную упорядочить уровни факторов. При использовании для столбца, который не относится к классу фактор, столбец сначала нужно конвертировать в класс фактор.  

В скобках сначала укажите имя столбца фактора, затем укажите:  

* Либо все уровни в желаемом порядке (как текстовый вектор `c()`),  
* Либо один уровень и его правильное размещение, используя аргумент `after = `  

Вот пример переопределения столбца `delay_cat` (который уже в классе Фактор) и уточнения желаемого порядка всех уровней.  

```{r}
# переопределение порядка уровней
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, c("<2 days", "2-5 days", ">5 days")))
```

Если вы хотите передвинуть только один уровень, вы можете его уточнить с помощью `fct_relevel()` отдельно и задать цифру в аргументе `after = `, чтобы указать, где в порядке он должен быть. Например, команда ниже сдвигает "<2 days" на вторую позицию: 

```{r, eval=F}
# переопределение порядка уровней
linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", after = 1)) %>% 
  tabyl(delay_cat)
```




### В графике {.unnumbered}  

Команды **forcats** могут быть использованы, чтобы задать порядок уровней в датафрейме, либо только на графике. Используя команду, чтобы "обернуть" имя столбца *внутри* команды построения графика `ggplot()`, вы можете поменять порядок/уровень и трансформация будет применена только на этом графике.  

Ниже мы создаем два графика с помощью `ggplot()` (см. страницу [Основы ggplot]). В первом, столбец `delay_cat` откладывается на оси x графика, с порядком уровней по умолчанию, как в данных `linelist`. Во втором примере, он обернут в `fct_relevel()`, и порядок меняется на графике.  

```{r, echo =F}
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, c("2-5 days", "<2 days", ">5 days")))

```



```{r, warning=F, message=F, out.width = c('50%', '50%'), fig.show='hold'}
# Алфавитно-цифровой порядок по умолчанию - без корректировки в ggplot
ggplot(data = linelist)+
    geom_bar(mapping = aes(x = delay_cat))

# Порядок уровней фактора корректируется в рамках ggplot
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = fct_relevel(delay_cat, c("<2 days", "2-5 days", ">5 days"))))
```

Обратите внимание, что подпись оси x по умолчанию теперь выглядит достаточно сложно - вы можете ее изменить с помощью аргумента `labs()` в **ggplot2**.  




### Обратный порядок {.unnumbered}  

Достаточно часто вам может потребоваться обратный порядок уровней. Просто оберните фактор в `fct_rev()`.  

Обратите внимание, что если вы хотите получить обратный порядок *только* в легенде графика, но не хотите менять сами уровни фактора, вы можете это сделать с помощью `guides()` (см. [советы по использованию ggplot]).  




### По частоте {.unnumbered}  

Чтобы упорядочить по частоте возникновения значения в данных, используйте `fct_infreq()`. Любые отсутствующие значения (`NA`) будут автоматически включены в конце, если только они не конвертированы в конкретный уровень (см. [этот раздел](#fct_missing)). Вы можете создать обратный порядок, дополнительно обернув в `fct_rev()`.  

Эту функцию можно использовать в рамках `ggplot()`, как показано ниже.  

```{r, out.width = c('50%', '50%', '50%'), fig.show='hold', warning=F, message=F}
# упорядочивание по частоте
ggplot(data = linelist, aes(x = fct_infreq(delay_cat)))+
  geom_bar()+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by frequency")

# обратная частота
ggplot(data = linelist, aes(x = fct_rev(fct_infreq(delay_cat))))+
  geom_bar()+
  labs(x = "Delay onset to admission (days)",
       title = "Reverse of order by frequency")
```


### По порядку появления {.unnumbered}  

Используйте `fct_inorder()`, чтобы установить порядок уровней в соответствии с порядком появления в данных, начиная с первой строки. Это может быть полезно, если вы сначала тщательно упорядочили данные в датафрейме с помощью `arrange()`, а затем используете это для определения порядка факторов.  




### По сводной статистике другого столбца {.unnumbered}  

Вы можете использовать `fct_reorder()`, чтобы упорядочить уровни одного столбца *по сводной статистике другого столбца*. Визуально это может создать красивые графики, где столбцы/точки расположены в возрастающем или убывающем порядке на графике.  

В примерах ниже ось х - это `delay_cat`, а ось y числовой столбец `ct_blood` (значение порогового цикла). Коробчатая диаграмма показывает распределение значения CT (порогового цикла) по группам `delay_cat`. Мы хотим упорядочить коробчатые диаграммы в возрастающем порядке по медианному значению CT в группе. 

В первом примере ниже используется алфавитно-числовой порядок уровней по умолчанию. Вы можете видеть, что высота коробчатой диаграммы смешана, в ней нет определенного порядка. Во втором примере столбец `delay_cat` (отложенный на оси x) обернут в `fct_reorder()`, столбец `ct_blood` указан как второй аргумент, а "median" (медиана) задана в качестве третьего аргумента (вы можете также использовать "max" (максимум), "mean" (среднее), "min" (минимум) и т.п.). Таким образом порядок уровней `delay_cat` теперь будет отражать медиану значений CT в возрастающем порядке для медианных значений CT каждой группы `delay_cat`. Это отражается на втором графике - коробчатая диаграмма была упорядочена по возрастанию. Обратите внимание, что `NA` (отсутствующие значения) будут показаны в конце, если они не конвертированы в конкретный уровень.  

```{r, fig.show='hold', message=FALSE, warning=FALSE, out.width=c('50%', '50%')}
# коробчатая диаграмма упорядочена по оригинальным уровням фактора
ggplot(data = linelist)+
  geom_boxplot(
    aes(x = delay_cat,
        y = ct_blood, 
        fill = delay_cat))+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by original alpha-numeric levels")+
  theme_classic()+
  theme(legend.position = "none")


# коробчатая диаграмма упорядочена по медианному значению CT
ggplot(data = linelist)+
  geom_boxplot(
    aes(x = fct_reorder(delay_cat, ct_blood, "median"),
        y = ct_blood,
        fill = delay_cat))+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by median CT value in group")+
  theme_classic()+
  theme(legend.position = "none")
```

Обратите внимание, что не требуется шагов до `ggplot()` - группирование и расчеты делаются внутри команды ggplot.  


### По "конечному" значению {.unnumbered}  

Используйте `fct_reorder2()` для сгруппированных линейных диаграмм. Она упорядочивает уровни (и следовательно, *легенду*) так, чтобы организовать вертикальный порядок линий в "конце" графика. Технически, "упорядочивание идет по значениям на оси y, связанным с самыми высокими значениями x."  

Например, если у вас линии показывают количество случаев по больницам по времени, вы можете применить `fct_reorder2()` к аргументу `color = ` в рамках `aes()`, так чтобы вертикальный порядок больниц, появляющийся в легенде, совпадал с порядком линий в конце графика. Более детально читайте в [онлайн документации](https://forcats.tidyverse.org/reference/fct_reorder.html).  

```{r, warning=F, message=F}
epidemic_data <- linelist %>%         # начинаем с построчного списка   
    filter(date_onset < as.Date("2014-09-21")) %>%    # пороговая дата для визуальной ясности
    count(                                            # получаем количество случаев по неделям и по больницам
      epiweek = lubridate::floor_date(date_onset, "week"),  
      hospital                                            
    ) 
  
ggplot(data = epidemic_data)+                       # начинаем построение графика
  geom_line(                                        # создаем линии
    aes(
      x = epiweek,                                  # ось x эпиднеделя
      y = n,                                        # высота - количество случаев в неделю
      color = fct_reorder2(hospital, epiweek, n)))+ # данные группируются и окрашиваются по больницам, а фактор упорядочен по высоте в конце графика
  labs(title = "Factor levels (and legend display) by line height at end of plot",
       color = "Hospital")                          # изменяем заголовок легенды
```




## Отсутствующие значения {#fct_missing}  

Если в вашем столбце фактора есть значения `NA`, вы с легкостью можете их конвертировать в именованный уровень, например, "Missing" с помощью `fct_explicit_na()`. Значения `NA` конвертируются в "(Missing)" в конце порядка уровней по умолчанию. Вы можете откорректировать имя уровня с помощью аргумента `na_level = `.  

Ниже мы проводим эту операцию для столбца `delay_cat` и печатаем таблицу с помощью `tabyl()`, а `NA` конвертируются в "Missing delay".  

```{r}
linelist %>% 
  mutate(delay_cat = fct_explicit_na(delay_cat, na_level = "Missing delay")) %>% 
  tabyl(delay_cat)
```





## Объединение уровней  


### Вручную {.unnumbered}  

Вы можете откорректировать отображения уровней вручную с помощью `fct_recode()`. Это похоже на функцию `recode()` в **dplyr** (см. страницу [Вычистка данных и ключевые функции]), но она позволяет создавать новые уровни факторов. Если вы используете просто `recode()` для фактора, новые перекодированные значения будут отклонены, если только они не заданы как разрешенные уровни. 

Этот инструмент можно также использовать для "объединения" уровней, путем присваивания нескольким уровням одинакового перекодированного значения. Просто будьте осторожны, чтобы не потерять информацию! Попробуйте выполнить эти шаги объединения в новом столбце (вместо того, чтобы переделывать существующий столбец).  

`fct_recode()` имеет иной синтаксис, чем `recode()`. `recode()` использует  `СТАРЫЙ = НОВЫЙ`, а `fct_recode()` использует `НОВЫЙ = СТАРЫЙ`.     

Текущие уровни `delay_cat`:  
```{r, echo=F}
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", after = 0))
```


```{r}
levels(linelist$delay_cat)
```

Новые уровни создаются с помощью синтаксиса `fct_recode(столбец, "новый" = "старый", "новый" = "старый", "новый" = "старый")` и печатаются:  

```{r}
linelist %>% 
  mutate(delay_cat = fct_recode(
    delay_cat,
    "Less than 2 days" = "<2 days",
    "2 to 5 days"      = "2-5 days",
    "More than 5 days" = ">5 days")) %>% 
  tabyl(delay_cat)
```

Здесь они вручную объединяются с помощью `fct_recode()`. Обратите внимание, что не возникает ошибки при создании нового уровня "Less than 5 days".  


```{r, warning=F, message=F}
linelist %>% 
  mutate(delay_cat = fct_recode(
    delay_cat,
    "Less than 5 days" = "<2 days",
    "Less than 5 days" = "2-5 days",
    "More than 5 days" = ">5 days")) %>% 
  tabyl(delay_cat)
```





### Свертывание в "Прочие" {.unnumbered}  

Вы можете использовать `fct_other()`, чтобы вручную присвоить уровни фактора к уровню "Other" (прочие). Ниже все уровни столбца `hospital`, кроме "Port Hospital" и "Central Hospital", объединяются в "Other" (прочие). Вы можете задать вектор либо для `keep = `, либо `drop = `. Вы можете изменить отображение уровня "Other" с помощью `other_level = `.  

```{r}
linelist %>%    
  mutate(hospital = fct_other(                      # корректируем уровни
    hospital,
    keep = c("Port Hospital", "Central Hospital"),  # эти оставляем отдельно
    other_level = "Other Hospital")) %>%            # все прочие идут в "Other Hospital"
  tabyl(hospital)                                   # печать таблицы

```




### Свертывание по частоте {.unnumbered}

Вы можете объединять наименее часто встречающиеся уровни факторов автоматически, используя `fct_lump()`.  

Чтобы объединить несколько уровней с низкой частотой в группу "Other" (прочие), выполните одно из следующих действий:  

* Задайте `n = ` как число групп, которые вы хотите сохранить. n количество наиболее часто встречающихся уровней будет сохранено, а все остальные будут объединены в "Other" (прочие).  
* Задайте `prop = ` как порог доли частоты для уровней, выше которого вы хотите сохранить уровни. Все остальные значения будут объединены в "Other" (прочие).  

Вы можете изменить отображение уровня "Other" с помощью `other_level = `. Ниже все больницы, кроме двух встречающихся наиболее часто, объединены в "Other Hospital" (прочие больницы).  

```{r, warning=F, message=F}
linelist %>%    
  mutate(hospital = fct_lump(                      # корректируем уровни
    hospital,
    n = 2,                                          # сохраняем 2 верхних уровня
    other_level = "Other Hospital")) %>%            # все другие идут в "Other Hospital"
  tabyl(hospital)                                   # печать таблицы

```




, warn
## Показать все уровни  

Одно из преимуществ использования факторов - стандартизировать вид легенд графиков и таблиц, вне зависимости от того, какие значения собственно присутствуют в наборе данных. 

Если вы готовите много рисунков (например, по множеству юрисдикций), вам нужно, чтобы легенды и таблицы выглядели идентично даже при разных уровнях полноты и состава данных.  

### На графиках {.unnumbered}  

На рисунке `ggplot()` просто добавьте аргумент `drop = FALSE` в соответствующей функции `scale_xxxx()`. Все уровни факторов будут отображены, вне зависимости от того, присутствуют ли они в данных. Если ваши уровни столбца фактора отображены с помощью `fill = `, тогда в scale_fill_discrete() вам нужно включить `drop = FALSE`, как показано ниже. Если ваши уровни отображены с помощью `x = ` (по оси x) `color = ` или `size = ` задайте этот аргумент в `scale_color_discrete()` или `scale_size_discrete()`, соответственно.  

В данном примере мы строим столбчатую диаграмму с накоплением возрастных категорий по больницам. Добавление `scale_fill_discrete(drop = FALSE)` гарантирует, что все возрастные группы отобразятся в легенде, даже если их нет в данных. 

```{r}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = hospital, fill = age_cat)) +
  scale_fill_discrete(drop = FALSE)+                        # покажет все возрастные группы в легенде, даже если их нет
  labs(
    title = "All age groups will appear in legend, even if not present in data")
```

### В таблицах {.unnumbered}  

Как функция `table()` из **базового** R, так и `tabyl()` из **janitor** покажет все уровни факторов (даже неиспользуемые уровни).  

Если вы используете `count()` или `summarise()` из **dplyr**, чтобы создать таблицу, добавьте аргумент `.drop = FALSE`, чтобы включить подсчет количества всех уровней фактора, даже не используемых.  

Читайте дополнительную информацию на странице [Описательные таблицы], либо [документацию scale_discrete](https://ggplot2.tidyverse.org/reference/scale_discrete.html), либо [документацию count()](https://dplyr.tidyverse.org/reference/count.html). См. еще один пример на странице [Отслеживание контактов].  


## Эпиднедели  

Пожалуйста, см. детальное обсуждение того, как создавать эпидемиологические недели на странице [Группирование данных].  
Также см. страницу [Работа с датами] для получения советов по тому, как создавать и форматировать эпидемиологические недели.  


### Эпиднедели на графике {.unnumbered}  

Если ваша цель - создать эпиднедели для отображения на графике, вы можете это сделать с помощью `floor_date()` из **lubridate**, как объясняется на странице [Группирование данных]. Выданные значения будут в классе Дата в формате ГГГГ-ММ-ДД. Если вы используете этот столбец в графике, даты будут естественным образом отображены правильно, и вам нет необходимости переживать об уровнях или конвертации в класс Фактор. См. гистограмму `ggplot()` дат заболевания ниже.  

В данном подходе вы можете откорректировать *отображение* дат на оси с помощью `scale_x_date()`. См. страницу [Эпидемические кривые] для получения более детальной информации. Вы можете уточнить формат отображения "strptime" в аргументе `date_labels = ` в `scale_x_date()`. Эти форматы используют заполнители "%" и рассматриваются на странице [Работа с датами]. Используйте "%Y", чтобы представить 4-значный год, и либо "%W", либо "%U", чтобы отобразить номер недели (недели с понедельника или воскресенья, соответственно).  

```{r, warning=F, message=F}
linelist %>% 
  mutate(epiweek_date = floor_date(date_onset, "week")) %>%  # создаем столбец недель (week)
  ggplot()+                                                  # начинаем ggplot
  geom_histogram(mapping = aes(x = epiweek_date))+           # гистограмма по дате заболевания
  scale_x_date(date_labels = "%Y-W%W")                       # корректируем отображение дат в формат ГГГГ-Ннн
```


### Эпиднедели в данных {.unnumbered}  

Однако, если ваша цель использования факторов заключается *не в построении* графиков, вы можете подойти к этому одним из двух способов:  

1) *Для детального контроля отображения*, конвертируйте столбец эпиднедели **lubridate** (ГГГГ-ММ-ДД) в желаемый формат отображения (ГГГГ-Ннн) *внутри самого датафрейма*, а затем конвертируйте его в класс Фактор.  

Во-первых, используйте `format()` из **базового** R для конвертации отображения даты из ГГГГ-ММ-ДД в ГГГГ-Ннн (см. страницу [Работа с датами]). В этом процессе класс будет конвертирован в текстовый. Затем конвертируйте из текстового класса в класс Фактор с помощью `factor()`.  


```{r}
linelist <- linelist %>% 
  mutate(epiweek_date = floor_date(date_onset, "week"),       # создаем эпиднедели (ГГГГ-ММ-ДД)
         epiweek_formatted = format(epiweek_date, "%Y-W%W"),  # Конвертируем для отображения (ГГГГ-Ннн)
         epiweek_formatted = factor(epiweek_formatted))       # Конвертируем в фактор

# Отображаем уровни
levels(linelist$epiweek_formatted)
```

<span style="color: red;">**_ВНИМАНИЕ:_** Если вы разместите недели перед годами ("Ннн-ГГГГ") ("%W-%Y"), алфавитно-числовое упорядочивание по умолчанию будет неверным (например, 01-2015 будет стоять раньше 35-2014). Возможно, вам потребуется вручную откорректировать порядок, что будет долгим и сложным процессом.</span>  

2) *Для быстрого отображения по умолчанию* используйте пакет **aweek** и его функцию `date2week()`. Вы можете задать день начала недели `week_start = `, и если вы зададите `factor = TRUE`, тогда выходной столбец будет упорядоченным фактором. В качестве бонуса, фактор включает уровни для *всех* возможных недель в диапазоне - даже если нет случаев в эту неделю.  

```{r, eval=F}
df <- linelist %>% 
  mutate(epiweek = date2week(date_onset, week_start = "Monday", factor = TRUE))

levels(df$epiweek)
```

См. страницу [Работа с датами] для получения более детальной информации о **aweek**. На ней также предлагается обратная функция `week2date()`.  



<!-- ======================================================= -->
## Ресурсы {} 

R for Data Science страница [факторы](https://r4ds.had.co.nz/factors.html)  
[виньетка по пакету aweek](https://cran.r-project.org/web/packages/aweek/vignettes/introduction.html)
