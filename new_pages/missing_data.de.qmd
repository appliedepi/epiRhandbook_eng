# Fehlende Daten { }

```{r, out.width=c("50%"), echo=F}
knitr::include_graphics(here::here("images", "missingness.png"))
knitr::include_graphics(here::here("images", "missingness_overview.png"))
```

Auf dieser Seite erfährst du, wie du:

1) Fehlende Informationen einschätzen
2) Zeilen nach Fehlenden herausfiltern
3) Missingness über die Zeit aufzeichnen
4) Wie handhaben `NA` in Diagrammen angezeigt wird
5) Imputation fehlender Werte durchführen: MCAR, MAR, MNAR

<!-- ======================================================= -->

## Vorbereitung { }

### Pakete laden {.unnumbered}

Dieser Codechunk zeigt das Laden der Pakete, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,           # import/export
  tidyverse,     # data mgmt and viz
  naniar,        # assess and visualize missingness
  mice           # missing data imputation
)
```

### Daten importieren {.unnumbered}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere deine Daten mit der `import()` Funktion aus der **rio**Paket (sie akzeptiert viele Dateitypen wie .xlsx, .rds, .csv - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

### Konvertierung fehlt beim Import {.unnumbered}

Achte beim Importieren deiner Daten auf Werte, die als fehlend klassifiziert werden sollten. Zum Beispiel 99, 999, "Fehlend", leere Zellen ("") oder Zellen mit einem Leerzeichen (" "). Du kannst sie umwandeln in `NA` (Rs Version von fehlenden Daten) während des Datenimports umwandeln.  
Siehe die Seite zum Importieren von Seiten auf [Fehlende Daten](#import_missing) für Details, da die genaue Syntax je nach Dateityp variiert.

<!-- ======================================================= -->

## Fehlende Werte in R { }

Im Folgenden untersuchen wir, wie fehlende Werte in R dargestellt und bewertet werden, sowie einige angrenzende Werte und Funktionen.

### `NA` {.unnumbered}

In R werden fehlende Werte durch einen reservierten (speziellen) Wert dargestellt - `NA`. Beachte, dass dieser typisiert wird *ohne* Anführungszeichen. "NA" ist anders und ist ein normaler Zeichenwert (auch ein Beatles-Text aus dem Song Hey Jude).

In deinen Daten gibt es vielleicht noch andere Möglichkeiten, fehlende Angaben darzustellen, z. B. "99", "Missing" oder "Unknown" - vielleicht hast du sogar einen leeren Zeichenwert "", der "leer" aussieht, oder ein einzelnes Leerzeichen " ". Sei dir dessen bewusst und überlege, ob du [sie umwandeln in `NA` während des Imports](#import_missing) oder während der Datenbereinigung mit `na_if()`.

Bei der Datenbereinigung kannst du auch in die andere Richtung konvertieren - indem du alle `NA` zu "Missing" oder ähnlichem mit `replace_na()` oder mit `fct_explicit_na()` für Faktoren.

### Versionen von `NA` {.unnumbered}

Die meiste Zeit, `NA` für einen fehlenden Wert und alles funktioniert gut. Unter bestimmten Umständen kann es jedoch erforderlich sein, dass du *Abweichungen* von `NA` spezifisch für eine Objektklasse (Zeichen, numerisch, etc.). Das kommt zwar selten vor, aber du solltest dir dessen bewusst sein.  
Das typische Szenario dafür ist die Erstellung einer neuen Spalte mit der Option **dplyr** Funktion `case_when()`. Wie in der Beschreibung der [Reinigung von Daten und Kernfunktionen](#clean_case_when) beschrieben, wertet diese Funktion jede Zeile im Datenrahmen aus, prüft, ob die Zeile bestimmte logische Kriterien erfüllt (rechte Seite des Codes), und weist den richtigen neuen Wert zu (linke Seite des Codes). *Wichtig: Alle Werte auf der rechten Seite müssen der gleichen Klasse ange*.

```{r, eval=F}
linelist <- linelist %>% 
  
  # Create new "age_years" column from "age" column
  mutate(age_years = case_when(
    age_unit == "years"  ~ age,       # if age is given in years, assign original value
    age_unit == "months" ~ age/12,    # if age is given in months, divide by 12
    is.na(age_unit)      ~ age,       # if age UNIT is missing, assume years
    TRUE                 ~ NA_real_)) # any other circumstance, assign missing
```

Wenn du willst `NA` auf der rechten Seite haben willst, musst du eventuell eine der speziellen `NA` Optionen angeben, die unten aufgeführt sind. Wenn die anderen Werte auf der rechten Seite Zeichen sind, solltest du stattdessen "Missing" verwenden oder andernfalls `NA_character_`. Wenn sie alle numerisch sind, verwende `NA_real_`. Wenn es sich um Daten oder logische Werte handelt, kannst du `NA`.

- `NA` - Verwendung für Daten oder logisches TRUE/FALSE
- `NA_character_` - Verwendung für Zeichen
- `NA_real_`  - für numerische Zeichen verwenden

Auch hier ist es unwahrscheinlich, dass du auf diese Variationen stoßen wirst *es sei denn,* du verwendest `case_when()` um eine neue Spalte zu erstellen. Siehe die [R-Dokumentation über NA](https://stat.ethz.ch/R-manual/R-devel/library/base/html/NA.html) für weitere Informationen.

### `NULL` {.unnumbered}

`NULL` ist ein weiterer reservierter Wert in R. Er ist die logische Darstellung einer Aussage, die weder wahr noch falsch ist. Er wird von Ausdrücken oder Funktionen zurückgegeben, deren Werte undefiniert sind. Im Allgemeinen solltest du NULL nicht als Wert zuweisen, es sei denn, du schreibst Funktionen oder vielleicht eine **[Shiny-App][Dashboards mit Shiny]** zurückgeben `NULL` in bestimmten Szenarien.

Die Nullstellung kann wie folgt bewertet werden `is.null()` und die Umrechnung kann mit `as.null()`.

Siehe dies [Blogbeitrag](https://www.r-bloggers.com/2010/04/r-na-vs-null/) über den Unterschied zwischen `NULL` und `NA`.

### `NaN` {.unnumbered}

Unmögliche Werte werden durch den speziellen Wert `NaN`. Ein Beispiel dafür ist, wenn du R zwingst, 0 durch 0 zu dividieren. Du kannst dies mit `is.nan()`. Du kannst auch auf ergänzende Funktionen stoßen, z. B. `is.infinite()` und `is.finite()`.

### `Inf` {.unnumbered}

`Inf` steht für einen unendlichen Wert, zum Beispiel, wenn du eine Zahl durch 0 teilst.

Ein Beispiel dafür, wie sich das auf deine Arbeit auswirken könnte: Nehmen wir an, du hast einen Vektor/Spalte `z` die diese Werte enthält: `z <- c(1, 22, NA, Inf, NaN, 5)`

Wenn du die `max()` auf die Spalte anwenden willst, um den höchsten Wert zu finden, kannst du die `na.rm = TRUE` verwenden, um die `NA` aus der Berechnung zu entfernen, aber die `Inf` und `NaN` bleiben und `Inf` zurückgegeben werden. Um dies zu lösen, kannst du Klammern verwenden `[ ]` und `is.finite()` verwenden, um eine Untermenge zu bilden, so dass nur endliche Werte für die Berechnung verwendet werden: `max(z[is.finite(z)])`.

```{r, eval=F}
z <- c(1, 22, NA, Inf, NaN, 5)
max(z)                           # returns NA
max(z, na.rm=T)                  # returns Inf
max(z[is.finite(z)])             # returns 22
```

### Beispiele {.unnumbered}

| R-Befehl | Ergebnis    | 
| -------- | ----------- |
| `5 / 0`         | `Inf`            | 
| `0 / 0`         | `NaN`            | 
| `5 / NA`         | `NA`            | 
| \`5 / Inf | `0`            | 
| `NA - 5`         | `NA`            | 
| `Inf / 5`         | `Inf`            | 
| `class(NA)`         | "logisch"   | 
| `class(NaN)`         | "numerisch" | 
| `class(Inf)`         | "numerisch" | 
| `class(NULL)`         | "NULL"      | 

"NAs durch Zwang eingeführt" ist eine häufige Warnmeldung. Das kann passieren, wenn du versuchst, eine unzulässige Konvertierung vorzunehmen, z. B. wenn du einen Zeichenwert in einen Vektor einfügst, der ansonsten numerisch ist.

```{r}
as.numeric(c("10", "20", "thirty", "40"))
```

`NULL` wird in einem Vektor ignoriert.

```{r}
my_vector <- c(25, NA, 10, NULL)  # define
my_vector                         # print
```

Die Abweichung von einer Zahl ergibt `NA`.

```{r}
var(22)
```

<!-- ======================================================= -->

## Nützliche Funktionen { }

Die folgenden Funktionen sind nützlich **Basis** R-Funktionen, wenn du fehlende Werte auswertest oder behandelst:

### `is.na()` und `!is.na()` {.unnumbered}

Verwende `is.na()`um fehlende Werte zu identifizieren, oder verwenden Sie das Gegenteil (mit `!` vorangestellt), um nicht fehlende Werte zu identifizieren. Diese beiden geben einen logischen Wert zurück (`TRUE` oder `FALSE`). Denke daran, dass du `sum()` den resultierenden Vektor zum Zählen der Anzahl `TRUE` z.B.. `sum(is.na(linelist$date_outcome))`.

```{r}
my_vector <- c(1, 4, 56, NA, 5, NA, 22)
is.na(my_vector)
!is.na(my_vector)
sum(is.na(my_vector))
```

### `na.omit()` {.unnumbered}

Wenn diese Funktion auf einen Datenrahmen angewendet wird, entfernt sie Zeilen mit *jeder* fehlenden Werten. Sie ist auch von **Basis** R.  
Wenn sie auf einen Vektor angewendet wird, entfernt sie `NA` Werte aus dem Vektor, auf den er angewandt wird. Zum Beispiel:

```{r}
na.omit(my_vector)
```

### `drop_na()` {.unnumbered}

Dies ist ein **tidyr**Funktion, die nützlich ist in einer [Pipeline zur Datenbereinigung][Datenbereinigung und Kernfunktionen]. Wenn sie mit leeren Klammern ausgeführt wird, entfernt sie Zeilen mit*jeder* fehlenden Werten. Wenn Spaltennamen in den Klammern angegeben werden, werden Zeilen mit fehlenden Werten in diesen Spalten gelöscht. Du kannst auch die "tidyselect"-Syntax verwenden, um die Spalten anzugeben.

```{r, eval=F}
linelist %>% 
  drop_na(case_id, date_onset, age) # drops rows missing values for any of these columns
```

### `na.rm = TRUE` {.unnumbered}

Wenn du eine mathematische Funktion ausführst, wie z.B. `max()`, `min()`, `sum()` oder `mean()`, wenn es welche gibt `NA` Werte vorhanden sind, ist der zurückgegebene Wert `NA`. Dieses Standardverhalten ist beabsichtigt, damit du gewarnt wirst, wenn irgendwelche Daten fehlen.

Du kannst dies vermeiden, indem du fehlende Werte aus der Berechnung entfernst. Dazu fügst du das Argument `na.rm = TRUE` ("na.rm" steht für "remove `NA`").

```{r}
my_vector <- c(1, 4, 56, NA, 5, NA, 22)

mean(my_vector)     

mean(my_vector, na.rm = TRUE)
```

<!-- ======================================================= -->

## Missingness in einem Datenrahmen bewerten { }

Du kannst das Paket verwenden **naniar** verwenden, um Missingness im Datenrahmen zu bewerten und zu visualisieren `linelist`.

```{r}
# install and/or load package
pacman::p_load(naniar)
```

### Quantifizierung der Lückenhaftigkeit {.unnumbered}

Um den Prozentsatz aller fehlenden Werte zu ermitteln, verwende `pct_miss()`. Verwende `n_miss()` um die Anzahl der fehlenden Werte zu ermitteln.

```{r}
# percent of ALL data frame values that are missing
pct_miss(linelist)
```

Die beiden folgenden Funktionen geben den prozentualen Anteil der Zeilen zurück, in denen ein Wert fehlt bzw. die vollständig ausgefüllt sind. Denke daran, dass `NA` fehlend bedeutet, und dass \`\`""`or`" "\` nicht als fehlend gezählt wird.

```{r}
# Percent of rows with any value missing
pct_miss_case(linelist)   # use n_complete() for counts
```

```{r}
# Percent of rows that are complete (no values missing)  
pct_complete_case(linelist) # use n_complete() for counts
```

### Fehlende Angaben visualisieren {.unnumbered}

Die `gg_miss_var()` Funktion zeigt dir die Anzahl (oder %) der fehlenden Werte in jeder Spalte an. Ein paar Feinheiten:

- Du kannst dem Argument einen Spaltennamen (nicht in Anführungszeichen) hinzufügen `facet = ` um die Darstellung nach Gruppen zu sehen
- Standardmäßig werden Zählungen anstelle von Prozenten angezeigt, ändere dies mit `show_pct = TRUE`
- Du kannst Achsen- und Titelbeschriftungen wie bei einer normalen `ggplot()` mit `+ labs(...)`

```{r}
gg_miss_var(linelist, show_pct = TRUE)
```

Hier werden die Daten gepiped `%>%` in die Funktion geleitet. Die `facet = ` Argument wird auch zum Aufteilen der Daten verwendet.

```{r}
linelist %>% 
  gg_miss_var(show_pct = TRUE, facet = outcome)
```

Du kannst `vis_miss()` kannst du den Datenrahmen als Heatmap visualisieren, die anzeigt, ob ein Wert fehlt oder nicht. Du kannst auch `select()` bestimmte Spalten aus dem Datenrahmen entfernen und nur diese Spalten an die Funktion weitergeben.

```{r}
# Heatplot of missingness across the entire data frame  
vis_miss(linelist)
```

### Missingness-Beziehungen erforschen und visualisieren {.unnumbered}

Wie visualisierst du etwas, das nicht da ist??? Standardmäßig, `ggplot()` werden Punkte mit fehlenden Werten aus den Diagrammen entfernt.

**naniar** bietet eine Lösung über `geom_miss_point()`. Wenn du ein Streudiagramm mit zwei Spalten erstellst, werden Datensätze, bei denen einer der Werte fehlt und der andere Wert vorhanden ist, angezeigt, indem die fehlenden Werte auf einen Wert gesetzt werden, der 10 % niedriger ist als der niedrigste Wert in der Spalte, und indem sie farblich hervorgehoben werden.

Im folgenden Streudiagramm sind die roten Punkte Datensätze, bei denen der Wert für eine Spalte vorhanden ist, aber der Wert für die andere Spalte fehlt. So kannst du die Verteilung der fehlenden Werte im Verhältnis zu den nicht fehlenden Werten sehen.

```{r}
ggplot(
  data = linelist,
  mapping = aes(x = age_years, y = temp)) +     
  geom_miss_point()
```

So bewertest du fehlende Werte im Datenrahmen *nach einer anderen Spalte geschichtet* betrachten `gg_miss_fct()` die eine Heatmap der prozentualen Missingness im Datenrahmen liefert *nach einem Faktor/einer kategorischen Spalte (oder einem Datum)*:

```{r}
gg_miss_fct(linelist, age_cat5)
```

Diese Funktion kann auch mit einer Datumsspalte verwendet werden, um zu sehen, wie sich die Fehlzeiten im Laufe der Zeit verändert haben:

```{r}
gg_miss_fct(linelist, date_onset)
```

### "Schatten"-Spalten {.unnumbered}

Eine weitere Möglichkeit, fehlende Werte in einer Spalte durch Werte in einer zweiten Spalte zu visualisieren, ist die Verwendung des "Schattens", der **naniar** erstellen kann. `bind_shadow()` erstellt eine Binärdatei `NA`/nicht `NA` Spalte für jede bestehende Spalte und bindet alle diese neuen Spalten mit dem Anhang "\_NA" an den ursprünglichen Datensatz. Dadurch verdoppelt sich die Anzahl der Spalten - siehe unten:

```{r}
shadowed_linelist <- linelist %>% 
  bind_shadow()

names(shadowed_linelist)
```

Diese "Schattenspalten" können verwendet werden, um den Anteil der fehlenden Werte in einer beliebigen anderen Spalte darzustellen.

Die folgende Grafik zeigt zum Beispiel den Anteil der fehlenden Datensätze `days_onset_hosp` (Anzahl der Tage vom Auftreten der Symptome bis zum Krankenhausaufenthalt) nach dem Wert des Datensatzes in `date_hospitalisation`. Im Wesentlichen stellst du die Dichte der Spalte auf der x-Achse dar, schichtest aber die Ergebnisse (`color = `) nach einer Schattenspalte von Interesse. Diese Analyse funktioniert am besten, wenn die x-Achse eine numerische oder eine Datumsspalte ist.

```{r, message=F}
ggplot(data = shadowed_linelist,          # data frame with shadow columns
  mapping = aes(x = date_hospitalisation, # numeric or date column
                colour = age_years_NA)) + # shadow column of interest
  geom_density()                          # plots the density curves
```

Du kannst diese "Schattenspalten" auch verwenden, um eine statistische Zusammenfassung zu schichten, wie unten gezeigt:

```{r}
linelist %>%
  bind_shadow() %>%                # create the shows cols
  group_by(date_outcome_NA) %>%    # shadow col for stratifying
  summarise(across(
    .cols = age_years,             # variable of interest for calculations
    .fns = list("mean" = mean,     # stats to calculate
                "sd" = sd,
                "var" = var,
                "min" = min,
                "max" = max),  
    na.rm = TRUE))                 # other arguments for the stat calculations
```

Eine alternative Möglichkeit, den Anteil der fehlenden Werte einer Spalte im Zeitverlauf darzustellen, findest du unten. Sie tut *nicht* mit **naniar**. Dieses Beispiel zeigt den Prozentsatz der wöchentlichen Beobachtungen, die fehlen).

1) Aggregiere die Daten zu einer sinnvollen Zeiteinheit (Tage, Wochen usw.) und fasse den Anteil der Beobachtungen mit `NA` (und alle anderen Werte von Interesse)
2) Zeichne den Anteil der fehlenden Beobachtungen als Linie mit `ggplot()`

Im Folgenden fügen wir der Linienliste eine neue Spalte für die Woche hinzu, gruppieren die Daten nach Woche und berechnen dann den Prozentsatz der Datensätze dieser Woche, in denen der Wert fehlt. (Hinweis: Wenn du den Prozentsatz von 7 Tagen ermitteln willst, sieht die Berechnung etwas anders aus).

```{r}
outcome_missing <- linelist %>%
  mutate(week = lubridate::floor_date(date_onset, "week")) %>%   # create new week column
  group_by(week) %>%                                             # group the rows by week
  summarise(                                                     # summarize each week
    n_obs = n(),                                                  # number of records
    
    outcome_missing = sum(is.na(outcome) | outcome == ""),        # number of records missing the value
    outcome_p_miss  = outcome_missing / n_obs,                    # proportion of records missing the value
  
    outcome_dead    = sum(outcome == "Death", na.rm=T),           # number of records as dead
    outcome_p_dead  = outcome_dead / n_obs) %>%                   # proportion of records as dead
  
  tidyr::pivot_longer(-week, names_to = "statistic") %>%         # pivot all columns except week, to long format for ggplot
  filter(stringr::str_detect(statistic, "_p_"))                  # keep only the proportion values
```

Dann stellen wir den Anteil der fehlenden Werte als Linie nach Woche dar. Die [ggplot Grundlagen] Seite, falls du mit dem ggplot-Programm nicht vertraut bist .**ggplot2** Plot-Paket vertraut bist.

```{r, message=F, warning=F}
ggplot(data = outcome_missing)+
    geom_line(
      mapping = aes(x = week, y = value, group = statistic, color = statistic),
      size = 2,
      stat = "identity")+
    labs(title = "Weekly outcomes",
         x = "Week",
         y = "Proportion of weekly records") + 
     scale_color_discrete(
       name = "",
       labels = c("Died", "Missing outcome"))+
    scale_y_continuous(breaks = c(seq(0,1,0.1)))+
  theme_minimal()+
  theme(legend.position = "bottom")
```

<!-- ======================================================= -->

## Daten mit fehlenden Werten verwenden

### Zeilen mit fehlenden Werten herausfiltern {.unnumbered}

Um Zeilen mit fehlenden Werten schnell zu entfernen, verwendest du die **dplyr** Funktion `drop_na()`.

Das Original `linelist` hat ` nrow(linelist)` Zeilen. Die angepasste Anzahl der Zeilen wird unten angezeigt:

```{r}
linelist %>% 
  drop_na() %>%     # remove rows with ANY missing values
  nrow()
```

Du kannst festlegen, dass Zeilen, die in bestimmten Spalten fehlen, weggelassen werden:

```{r}
linelist %>% 
  drop_na(date_onset) %>% # remove rows missing date_onset 
  nrow()
```

Du kannst die Spalten nacheinander auflisten, oder du kannst ["tidyselect"-Hilfsfunktionen](#clean_tidyselect):

```{r}
linelist %>% 
  drop_na(contains("date")) %>% # remove rows missing values in any "date" column 
  nrow()
```

<!-- ======================================================= -->

### Handhabung `NA` in `ggplot()` {.unnumbered}

Oft ist es sinnvoll, die Anzahl der ausgeschlossenen Werte in einer Beschriftung anzugeben. Nachfolgend ein Beispiel:

In `ggplot()` kannst du hinzufügen `labs()` und darin eine `caption = `. In der Beschriftung kannst du `str_glue()` von **stringr** Paket, um Werte dynamisch in einen Satz einzufügen, damit sie sich an die Daten anpassen. Ein Beispiel findest du unten:

- Beachten Sie die Verwendung von `\n` für eine neue Zeile.
- Wenn mehrere Spalten dazu beitragen, dass Werte nicht dargestellt werden (z. B. Alter oder Geschlecht, wenn diese in der Darstellung berücksichtigt werden), musst du auch nach diesen Spalten filtern, um die nicht angezeigte Zahl korrekt zu berechnen.

```{r, eval=F}
labs(
  title = "",
  y = "",
  x = "",
  caption  = stringr::str_glue(
  "n = {nrow(central_data)} from Central Hospital;
  {nrow(central_data %>% filter(is.na(date_onset)))} cases missing date of onset and not shown."))  
```

Manchmal ist es einfacher, die Zeichenkette als Objekt in Befehlen zu speichern, bevor die `ggplot()` Befehls zu speichern und einfach auf das benannte String-Objekt innerhalb des `str_glue()`.

<!-- ======================================================= -->

### `NA` in Faktoren {.unnumbered}

Wenn deine Spalte von Interesse ein Faktor ist, verwende `fct_explicit_na()` aus der **forcats** Paket zu konvertieren `NA`Werte in einen Zeichenwert umzuwandeln. Weitere Details findest du in der [Faktoren] Seite. Standardmäßig ist der neue Wert "(Missing)", aber das kann über die Option`na_level =` Argument angepasst werden.

```{r}
pacman::p_load(forcats)   # load package

linelist <- linelist %>% 
  mutate(gender = fct_explicit_na(gender, na_level = "Missing"))

levels(linelist$gender)
```

<!-- ======================================================= -->

## Anrechnung { }

Manchmal ist es bei der Analyse deiner Daten wichtig, "Lücken zu füllen" und fehlende Daten zu imputieren. Du kannst einen Datensatz zwar immer einfach analysieren, nachdem du alle fehlenden Werte entfernt hast, aber das kann in vielerlei Hinsicht Probleme verursachen. Hier sind zwei Beispiele:

1) Wenn du alle Beobachtungen mit fehlenden Werten oder Variablen mit einer großen Menge an fehlenden Daten entfernst, kannst du deine Aussagekraft oder deine Fähigkeit, bestimmte Analysen durchzuführen, verringern. Wie wir bereits herausgefunden haben, hat zum Beispiel nur ein kleiner Teil der Beobachtungen in unserem Linelist-Datensatz keine fehlenden Daten in allen Variablen. Würden wir den Großteil unseres Datensatzes entfernen, würden wir eine Menge Informationen verlieren! Außerdem haben die meisten unserer Variablen eine gewisse Menge an fehlenden Daten - für die meisten Analysen ist es wahrscheinlich auch nicht sinnvoll, jede Variable mit vielen fehlenden Daten herauszunehmen.

2) Je nachdem, warum deine Daten fehlen, kann die Analyse nur der nicht fehlenden Daten zu verzerrten oder irreführenden Ergebnissen führen. Wie wir bereits erfahren haben, fehlen zum Beispiel bei einigen Patienten Daten darüber, ob sie wichtige Symptome wie Fieber oder Husten hatten. Es könnte aber auch sein, dass diese Informationen bei Personen, die offensichtlich nicht sehr krank waren, nicht erfasst wurden. In diesem Fall würden wir einige der gesündesten Menschen in unserem Datensatz ausschließen, wenn wir diese Beobachtungen einfach weglassen würden, und das könnte die Ergebnisse verfälschen.

Es ist wichtig, nicht nur zu sehen, wie viele Daten fehlen, sondern auch darüber nachzudenken, warum sie fehlen könnten. Auf diese Weise kannst du entscheiden, wie wichtig es ist, fehlende Daten zu imputieren, und welche Methode zur Imputation fehlender Daten in deiner Situation am besten geeignet ist.

### Arten von fehlenden Daten {.unnumbered}

Es gibt drei allgemeine Arten von fehlenden Daten:

1) **Völlig zufällig fehlende D**(MCAR). Das bedeutet, dass es keinen Zusammenhang zwischen der Wahrscheinlichkeit fehlender Daten und einer der anderen Variablen in deinen Daten gibt. Die Wahrscheinlichkeit, dass Daten fehlen, ist in allen Fällen gleich hoch. Wenn du aber Grund zu der Annahme hast, dass deine Daten MCAR sind, wird die Analyse nur der nicht fehlenden Daten ohne Imputation deine Ergebnisse nicht verfälschen (auch wenn du vielleicht etwas an Aussagekraft verlierst). [TODO: Erörtere statistische Tests für MCAR]

2) **Zufälliges Fehlen** (MAR). Dieser Name ist eigentlich etwas irreführend, denn MAR bedeutet, dass deine Daten auf eine systematische, vorhersehbare Weise fehlen, die auf den anderen Informationen basiert, die du hast. Zum Beispiel könnte es sein, dass jede Beobachtung in unserem Datensatz mit einem fehlenden Wert für Fieber gar nicht aufgezeichnet wurde, weil bei jedem Patienten mit Schüttelfrost und Schmerzen einfach davon ausgegangen wurde, dass er Fieber hat und seine Temperatur nie gemessen wurde. Wenn das stimmt, könnten wir leicht vorhersagen, dass jede fehlende Beobachtung mit Schüttelfrost und Schmerzen auch Fieber hat, und diese Information nutzen, um unsere fehlenden Daten zu ergänzen. In der Praxis ist das eher ein Spektrum. Wenn ein Patient sowohl Schüttelfrost als auch Schmerzen hat, ist die Wahrscheinlichkeit höher, dass er auch Fieber hat, wenn er seine Temperatur nicht messen lässt, aber nicht immer. Das ist immer noch vorhersehbar, auch wenn es nicht perfekt vorhersehbar ist. Dies ist eine häufige Art von fehlenden Daten

3) **Nicht zufällige fehlende** (MNAR). Manchmal wird dies auch als **Nicht zufällig fehlend** (NMAR). Dabei wird davon ausgegangen, dass die Wahrscheinlichkeit, dass ein Wert fehlt, NICHT systematisch oder anhand der anderen uns vorliegenden Informationen vorhersehbar ist, sondern dass er auch nicht zufällig fehlt. In diesem Fall fehlen die Daten aus unbekannten Gründen oder aus Gründen, über die du keine Informationen hast. In unserem Datensatz fehlen zum Beispiel Informationen über das Alter, weil einige sehr alte Patienten entweder nicht wissen oder sich weigern, ihr Alter anzugeben. In diesem Fall hängen die fehlenden Daten zum Alter mit dem Wert selbst zusammen (und sind daher nicht zufällig) und sind anhand der anderen Informationen, die wir haben, nicht vorhersehbar. MNAR ist komplex und oft ist es am besten, mehr Daten oder Informationen darüber zu sammeln, warum die Daten fehlen, anstatt zu versuchen, sie zu unterstellen.

Im Allgemeinen ist die Imputation von MCAR-Daten oft recht einfach, während MNAR sehr schwierig, wenn nicht sogar unmöglich ist. Viele der gängigen Methoden zur Imputation von Daten gehen von MAR aus.

### Nützliche Pakete {.unnumbered}

Einige nützliche Pakete für die Imputation fehlender Daten sind Mmisc, missForest (das Random Forests zur Imputation fehlender Daten verwendet) und mice (Multivariate Imputation durch verkettete Gleichungen). In diesem Abschnitt werden wir nur das mice-Paket verwenden, das eine Vielzahl von Techniken implementiert. Der Betreuer des mice-Pakets hat ein Online-Buch über die Imputation fehlender Daten veröffentlicht, das hier ausführlicher beschrieben wird ([https://stefvanbuuren.name/fimd/](https://stefvanbuuren.name/fimd/)).

Hier ist der Code zum Laden des Mäusepakets:

```{r}
pacman::p_load(mice)
```

### Mittelwert-Imputation {.unnumbered}

Wenn du eine einfache Analyse durchführst oder gute Gründe hast, von MCAR auszugehen, kannst du fehlende numerische Werte einfach auf den Mittelwert der Variable setzen. Vielleicht können wir davon ausgehen, dass die fehlenden Temperaturmessungen in unserem Datensatz entweder MCAR oder ganz normale Werte waren. Hier ist der Code, um eine neue Variable zu erstellen, die die fehlenden Temperaturwerte durch den mittleren Temperaturwert in unserem Datensatz ersetzt. In vielen Situationen kann das Ersetzen von Daten durch den Mittelwert jedoch zu Verzerrungen führen, sei also vorsichtig.

```{r}
linelist <- linelist %>%
  mutate(temp_replace_na_with_mean = replace_na(temp, mean(temp, na.rm = T)))
```

Du könntest auch einen ähnlichen Prozess durchführen, um kategoriale Daten durch einen bestimmten Wert zu ersetzen. Stell dir vor, du wüsstest, dass alle Beobachtungen mit einem fehlenden Wert für das Ergebnis (das "Tod" oder "Genesung" sein kann) tatsächlich Personen sind, die gestorben sind (Hinweis: Das trifft für diesen Datensatz nicht zu):

```{r}
linelist <- linelist %>%
  mutate(outcome_replace_na_with_death = replace_na(outcome, "Death"))
```

### Regressions-Imputation {.unnumbered}

Eine etwas fortschrittlichere Methode besteht darin, eine Art statistisches Modell zu verwenden, um vorherzusagen, wie ein fehlender Wert wahrscheinlich sein wird, und ihn durch den vorhergesagten Wert zu ersetzen. Hier ist ein Beispiel für die Erstellung von Vorhersagewerten für alle Beobachtungen, bei denen die Temperatur fehlt, das Alter und das Fieber aber nicht, mithilfe einer einfachen linearen Regression, die den Fieberstatus und das Alter in Jahren als Prädiktoren verwendet. In der Praxis wirst du ein besseres Modell als diesen einfachen Ansatz verwenden wollen.

```{r, warning=F, message=F}
simple_temperature_model_fit <- lm(temp ~ fever + age_years, data = linelist)

#using our simple temperature model to predict values just for the observations where temp is missing
predictions_for_missing_temps <- predict(simple_temperature_model_fit,
                                        newdata = linelist %>% filter(is.na(temp))) 
```

Oder du verwendest denselben Modellierungsansatz mit dem Mäusepaket, um imputierte Werte für die fehlenden Temperaturbeobachtungen zu erstellen:

```{r}
model_dataset <- linelist %>%
  select(temp, fever, age_years)  

temp_imputed <- mice(model_dataset,
                            method = "norm.predict",
                            seed = 1,
                            m = 1,
                            print = F)

temp_imputed_values <- temp_imputed$imp$temp

```

Dies ist derselbe Ansatz wie bei einigen fortgeschritteneren Methoden, z. B. bei der Verwendung des missForest-Pakets, um fehlende Daten durch vorhergesagte Werte zu ersetzen. In diesem Fall ist das Vorhersagemodell ein Random Forest anstelle einer linearen Regression. Du kannst auch andere Arten von Modellen verwenden. Auch wenn dieser Ansatz unter MCAR gut funktioniert, solltest du ein bisschen vorsichtig sein, wenn du glaubst, dass MAR oder MNAR deine Situation besser beschreibt. Die Qualität deiner Imputation hängt davon ab, wie gut dein Vorhersagemodell ist, und selbst bei einem sehr guten Modell kann die Variabilität deiner imputierten Daten unterschätzt werden.

### LOCF und BOCF {.unnumbered}

Last observation carried forward (LOCF) und baseline observation carried forward (BOCF) sind Imputationsmethoden für Zeitreihen/Längsschnittdaten. Die Idee ist, den letzten beobachteten Wert als Ersatz für die fehlenden Daten zu nehmen. Wenn mehrere Werte nacheinander fehlen, sucht die Methode nach dem letzten beobachteten Wert.

Die `fill()` Funktion aus dem **tidyr** Paket kann sowohl für die LOCF- als auch für die BOCF-Imputation verwendet werden (andere Pakete wie **HMISC**, **zoo**, und **daten.tabelle** enthalten ebenfalls Methoden, um dies zu tun). Zum Anzeigen der `fill()` Syntax zu zeigen, erstellen wir einen einfachen Zeitreihendatensatz, der die Anzahl der Krankheitsfälle für jedes Quartal der Jahre 2000 und 2001 enthält. Allerdings fehlen die Jahreswerte für die folgenden Quartale nach Q1, so dass wir sie imputieren müssen. Die `fill()`Kreuzung wird auch in der [Daten spiegeln] Seite.

```{r}
#creating our simple dataset
disease <- tibble::tribble(
  ~quarter, ~year, ~cases,
  "Q1",    2000,    66013,
  "Q2",      NA,    69182,
  "Q3",      NA,    53175,
  "Q4",      NA,    21001,
  "Q1",    2001,    46036,
  "Q2",      NA,    58842,
  "Q3",      NA,    44568,
  "Q4",      NA,    50197)

#imputing the missing year values:
disease %>% fill(year)

```

Hinweis: Stelle sicher, dass deine Daten richtig sortiert sind, bevor du die `fill()` Funktion verwenden. `fill()`  füllt standardmäßig "nach unten" aus, aber du kannst auch Werte in andere Richtungen unterstellen, indem du die `.direction` Parameter. Wir können einen ähnlichen Datensatz erstellen, bei dem der Jahreswert nur am Ende des Jahres erfasst wird und für frühere Quartale fehlt:

```{r}
#creating our slightly different dataset
disease <- tibble::tribble(
  ~quarter, ~year, ~cases,
  "Q1",      NA,    66013,
  "Q2",      NA,    69182,
  "Q3",      NA,    53175,
  "Q4",    2000,    21001,
  "Q1",      NA,    46036,
  "Q2",      NA,    58842,
  "Q3",      NA,    44568,
  "Q4",    2001,    50197)

#imputing the missing year values in the "up" direction:
disease %>% fill(year, .direction = "up")

```

In diesem Beispiel sind LOCF und BOCF eindeutig das Richtige, aber in komplizierteren Situationen kann es schwieriger sein, zu entscheiden, ob diese Methoden geeignet sind. Es kann zum Beispiel sein, dass bei einem Krankenhauspatienten nach dem ersten Tag Laborwerte fehlen. Manchmal kann das bedeuten, dass sich die Laborwerte nicht verändert haben... es kann aber auch bedeuten, dass der Patient sich erholt hat und seine Werte nach dem ersten Tag ganz anders aussehen! Verwende diese Methoden mit Vorsicht.

### Mehrfache Imputation {.unnumbered}

Das bereits erwähnte Online-Buch des Autors des Mäusepakets ([https://stefvanbuuren.name/fimd/](https://stefvanbuuren.name/fimd/)) enthält eine ausführliche Erklärung der multiplen Imputation und warum du sie verwenden solltest. Hier findest du jedoch eine grundlegende Erklärung der Methode:

Bei der multiplen Imputation erstellst du mehrere Datensätze, bei denen die fehlenden Werte mit plausiblen Datenwerten imputiert werden (je nach deinen Forschungsdaten möchtest du vielleicht mehr oder weniger dieser imputierten Datensätze erstellen, aber das Mäusepaket setzt die Standardanzahl auf 5). Der Unterschied besteht darin, dass jeder unterstellte Wert aus einer geschätzten Verteilung entnommen wird (er enthält also einen gewissen Zufallswert). Das hat zur Folge, dass jeder dieser Datensätze leicht unterschiedliche imputierte Werte hat (die nicht fehlenden Daten sind jedoch in jedem dieser imputierten Datensätze gleich). Du verwendest für die Imputation in jedem dieser neuen Datensätze eine Art Vorhersagemodell (mice bietet viele Optionen für Vorhersagemethoden, darunter *Prädiktives Mittelwert-Matching*, *logistische Regression* und *Zufallsforst*), aber das Mäusepaket kann sich um viele der Modellierungsdetails kümmern.

Sobald du diese neuen imputierten Datensätze erstellt hast, kannst du das statistische Modell oder die Analyse, die du für jeden dieser neuen imputierten Datensätze geplant hast, anwenden und die Ergebnisse dieser Modelle zusammenführen. Das funktioniert sehr gut, um Verzerrungen sowohl in MCAR- als auch in vielen MAR-Einstellungen zu reduzieren und führt oft zu genaueren Standardfehlerschätzungen.

Hier ist ein Beispiel für die Anwendung des Multiple-Imputation-Verfahrens zur Vorhersage der Temperatur in unserem Linelist-Datensatz anhand von Alter und Fieberstatus (unser vereinfachter model\_dataset von oben):

```{r}
# imputing missing values for all variables in our model_dataset, and creating 10 new imputed datasets
multiple_imputation = mice(
  model_dataset,
  seed = 1,
  m = 10,
  print = FALSE) 

model_fit <- with(multiple_imputation, lm(temp ~ age_years + fever))

base::summary(mice::pool(model_fit))
```

Hier haben wir die Standardmethode der Mäuse für die Imputation verwendet, nämlich Predictive Mean Matching. Anschließend haben wir diese imputierten Datensätze verwendet, um die Ergebnisse der einfachen linearen Regressionen für jeden dieser Datensätze separat zu schätzen und dann zusammenzuführen. Es gibt viele Details, die wir nicht erwähnt haben, und viele Einstellungen, die du während des Multiple-Imputation-Prozesses mit dem Mäusepaket anpassen kannst. Du wirst zum Beispiel nicht immer numerische Daten haben und vielleicht andere Imputationsmethoden verwenden müssen (du kannst das mice-Paket auch für viele andere Datentypen und Methoden verwenden). Aber für eine robustere Analyse, bei der fehlende Daten ein großes Problem darstellen, ist die Mehrfach-Imputation eine gute Lösung, die nicht immer viel mehr Arbeit macht als eine vollständige Fallanalyse.

<!-- ======================================================= -->

## Ressourcen { }

Vignette über die [naniar Paket](https://cran.r-project.org/web/packages/naniar/vignettes/getting-started-w-naniar.html)

Galerie der [Visualisierungen fehlender Werte](https://cran.r-project.org/web/packages/naniar/vignettes/naniar-visualisation.html)

[Online Buch](https://stefvanbuuren.name/fimd/) über Multiple Imputation in R vom Betreuer der **Mäuse** Pakets


