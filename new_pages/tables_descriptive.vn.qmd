# Bảng mô tả {#tables-descriptive}

```{r out.width = c('75%'), fig.align='center', fig.show='hold', echo=F}
knitr::include_graphics(here::here("images", "descriptive_tables.png"))
```

Chương này minh họa cách sử dụng các package **janitor**, **dplyr**, **gtsummary**, **rstatix**, và **base** R để tóm tắt dữ liệu và tạo bảng với thống kê mô tả.

*Chương này bao gồm cách để tạo* bảng cơ bản, trong khi đó chương [Trình bày bảng](tables_presentation.vn.qmd) bao gồm cách để định dạng đẹp và in chúng.\*

Mỗi package này đều có những ưu và nhược điểm trong từng khía cạnh như sự đơn giản, khả năng tiếp cận kết quả, chất lượng kết quả được hiển thị. Sử dụng chương này để quyết định cách tiếp cận nào phù hợp với trường hợp của bạn.

Bạn có một số lựa chọn khi tạo bảng tóm tắt và bảng chéo. Một số yếu tố cần xem xét bao gồm tính đơn giản của code, khả năng tùy chỉnh, đầu ra mong muốn (được in ra R console, dưới dạng dataframe hoặc dưới dạng hình ảnh "đẹp" .png/.jpeg /.html) và dễ xử lý hậu kỳ. Hãy xem xét các điểm dưới đây khi bạn chọn công cụ cho tình huống của mình.

-   Dùng `tabyl()` từ **janitor** để tạo và "làm đẹp" cho bảng và bảng chéo\
-   Dùng `get_summary_stats()` từ **rstatix** để dễ dàng tạo data frame các tóm tắt thống kê dạng số cho nhiều cột và / hoặc nhóm\
-   Dùng `summarise()` và `count()` từ **dplyr** dành choo các thống kê phức tạp hơn, đầu ra của tidy dataframe hoặc chuẩn bị dữ liệu cho `ggplot()`\
-   Dùng `tbl_summary()` từ **gtsummary** để tạo ra các bảng chi tiết sẵn sàng xuất bản\
-   Dùng `table()` từ **base** R nếu bạn không có khả năng truy cập vào các package trên

<!-- ======================================================= -->

## Chuẩn bị

### Gọi packages {.unnumbered}

Đoạn code này hiển thị việc gọi các packages cần thiết cho các phân tích. Trong sổ tay này, chúng tôi nhấn mạnh đến lệnh `p_load()` từ **pacman**, giúp cài đặt các package nếu cần *và* gọi chúng để sử dụng. Bạn cũng có thể gọi các package đã được cài đặt với `library()` từ **base** R. Xem chương [R cơ bản](basics.vn.qmd) để biết thêm thông tin về các package của R.

```{r, warning=F, message=F}
pacman::p_load(
  rio,          # File import
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics 
  gtsummary,    # summary statistics and tests
  rstatix,      # summary statistics and statistical tests
  janitor,      # adding totals and percents to tables
  scales,       # easily convert proportions to percents  
  flextable     # converting tables to pretty images
  )
```

### Nhập dữ liệu {.unnumbered}

Chúng ta sẽ nhập bộ dữ liệu về các trường hợp từ một vụ dịch Ebola mô phỏng. Nếu bạn muốn theo dõi, <a href='https://github.com/epirhandbook/Epi_R_handbook/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>bấm để tải xuống dữ liệu linelist "đã làm sạch"</a> (as .rds file). Nhập dữ liệu của bạn bằng hàm `import()` từ package **rio** (chấp nhận nhiều loại tệp như .xlsx, .rds, .csv - xem thêm chi tiết tại chương [Nhập xuất dữ liệu](importing.vn.qmd)).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```

50 hàng đầu tiên của linelist được hiển thị như dưới đây.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<!-- ======================================================= -->

## Duyệt dữ liệu

### **skimr** package {.unnumbered}

Khi sử dụng package **skimr** package, bạn có thể có được cái nhìn tổng quan chi tiết và đẹp về mặt thẩm mỹ của từng biến trong tập dữ liệu của mình. Đọc thêm về **skimr** tại [trang github](https://github.com/ropensci/skimr) của nhà phát triển.

Dưới đây, hàm `skim()` được áp dụng cho toàn bộ data frame `linelist` giúp bạn có cái nhìn tổng quan về data frame và tóm tắt của tất cả các cột (theo lớp).

```{r eval=F}
## get information about each variable in a dataset 
skim(linelist)
```

```{r  echo=F}
# sparkline histograms not showing correctly, so avoiding them.
skim_without_charts(linelist)
```

Bạn cũng có thể sử dụng hàm `summary()` từ **base** R, để lấy thông tin về toàn bộ tập dữ liệu, nhưng kết quả đầu ra có thể khó đọc hơn so với sử dụng **skimr**. Do đó, kết quả không được hiển thị bên dưới để tiết kiệm không gian trang.

```{r, eval=F}
## get information about each column in a dataset 
summary(linelist)
```

### Thống kê tóm tắt {.unnumbered}

Bạn có thể sử dụng các hàm **base** R để trả về thống kê tóm tắt trên một cột dữ liệu dạng số. Bạn có thể trả về hầu hết các thống kê tóm tắt hữu ích cho một cột dạng số bằng cách sử dụng hàm `summary()`, như dưới đây. Lưu ý rằng tên data frame cũng phải được xác định như hình dưới đây.

```{r}
summary(linelist$age_years)
```

Bạn có thể truy cập và lưu một phần cụ thể của nó bằng dấu ngoặc vuông [ ]:

```{r}
summary(linelist$age_years)[[2]]            # return only the 2nd element
# equivalent, alternative to above by element name
# summary(linelist$age_years)[["1st Qu."]]  
```

Bạn có thể trả về các thống kê riêng lẻ với các hàm **base** R như `max()`, `min()`, `median()`, `mean()`, `quantile()`, `sd()`, và `range()`. Xem chương [R cơ bản](basics.vn.qmd) để có danh sách đầy đủ.

[***THẬN TRỌNG:*** Nếu dữ liệu của bạn chứa các giá trị missing, R muốn bạn biết điều này và do đó sẽ trả về `NA` trừ khi bạn chỉ định cho các hàm toán học ở trên mà bạn muốn R bỏ qua các giá trị bị thiếu, thông qua đối số `na.rm = TRUE`.]{style="color: orange;"}

Bạn có thể sử dụng hàm `get_summary_stats()` từ package **rstatix** để trả về thống kê tóm tắt *ở định dạng data frame*. Điều này có thể hữu ích cho việc thực hiện các hoạt động tiếp theo hoặc vẽ biểu đồ trên các con số. Xem chương [Các kiểm định thống kê cơ bản](stat_tests.vn.qmd) để biết thêm chi tiết về package **rstatix** và các hàm của nó.

```{r}
linelist %>% 
  get_summary_stats(
    age, wt_kg, ht_cm, ct_blood, temp,  # columns to calculate for
    type = "common")                    # summary stats to return

```

## **janitor** package {#tbl_janitor}

Package **janitor** cung cấp hàm `tabyl()` giúp tạo ra các bảng đơn và bảng chéo, có thể được "tô điểm" hoặc sửa đổi bằng các hàm trợ giúp để hiển thị phần trăm, tỷ lệ, số đếm, v.v.

Sau đây, chúng ta sẽ pipe `linelist` data frame tới các hàm của **janitor** và in kết quả. Nếu muốn, bạn cũng có thể lưu các bảng kết quả bằng toán tử gán `<-`.

### tabyl đơn giản {.unnumbered}

Cách sử dụng mặc định của hàm `tabyl()` trên một cột cụ thể tạo ra các giá trị duy nhất, số lượng và "phần trăm" (tỷ lệ thực tế) theo cột. Tỷ lệ có thể có nhiều chữ số thập phân. Bạn có thể điều chỉnh số lượng số thập phân với hàm `adorn_rounding()` như được mô tả bên dưới.

```{r}
linelist %>% tabyl(age_cat)
```

Như bạn có thể thấy ở trên, các giá trị missing sẽ được hiển thị trong một hàng có nhãn `<NA>`. Bạn có thể ngăn điều này bằng cách thêm `show_na = FALSE`. Nếu không có giá trị missing, hàng này sẽ không xuất hiện. Nếu có giá trị missing, tất cả các tỷ lệ sẽ được trình bày dưới dạng thô (mẫu số bao gồm cả `NA`) và "hợp lý" (mẫu số không bao gồm `NA`).

Nếu giá trị cột là dạng Factor và chỉ một vài level nhất định có trong dữ liệu của bạn, thì tất cả các level sẽ vẫn xuất hiện trong bảng. Bạn có thể loại bỏ tính năng này bằng cách thêm `show_missing_levels = FALSE`. Đọc thêm trong chương [Factors](factors.vn.qmd).

### Bảng chéo {.unnumbered}

Bảng chéo được tạo bằng cách thêm một hoặc nhiều cột vào hàm `tabyl()`. Lưu ý rằng bây giờ chỉ có số lượng được hiện thị - tỷ lệ và phần trăm có thể được thêm vào bằng các bước bổ sung sẽ được trình bày bên dưới.

```{r}
linelist %>% tabyl(age_cat, gender)
```

### "Tô điểm" cho tabyl {#tbl_adorn .unnumbered}

Sử dụng các hàm "tô điểm" của **janitor** để thêm tổng hoặc chuyển đổi thành tỷ lệ, phần trăm hoặc điều chỉnh hiển thị. Thông thường, bạn sẽ pipe tabyl thông qua một số hàm này..

+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Hàm                      | Đầu ra                                                                                                                                                             |
+==========================+====================================================================================================================================================================+
| `adorn_totals()`         | Thêm tổng (`where =` "row", "col", or "both"). Đặt `name =` cho "Tổng".                                                                                            |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `adorn_percentages()`    | Chuyển đổi số lượng thành tỷ lệ, với `denominator =` "row", "col", hoặc "all"                                                                                      |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `adorn_pct_formatting()` | Chuyển đổi tỷ lệ thành tỷ lệ phần trăm. Chỉ rõ `digits =`. Loại bỏ ký hiệu "%" bằng `affix_sign = FALSE`.                                                          |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `adorn_rounding()`       | Làm tròn tỷ lệ bằng `digits =`. Để làm tròn tỷ lệ phần trăm, sử dụng hàm `adorn_pct_formatting()` với `digits =`.                                                  |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `adorn_ns()`             | Thêm số lượng vào bảng tỷ lệ hoặc phần trăm. Chỉ định `position =` "rear" để hiện thị số lượng trong ngoặc đơn, hoặc "front" để đặt phần trăm vào trong ngoặc đơn. |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| `adorn_title()`          | Thêm tiều đề thông qua đối số `row_name =` và/hoặc `col_name =`                                                                                                    |
+--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Hãy cẩn trọng về thứ tự bạn áp dụng các hàm trên. Dưới đây là một số ví dụ.

Bảng một chiều đơn giản với phần trăm thay vì tỷ lệ mặc định.

```{r}
linelist %>%               # case linelist
  tabyl(age_cat) %>%       # tabulate counts and proportions by age category
  adorn_pct_formatting()   # convert proportions to percents
```

Bảng chéo với tổng hàng và phần trăm hàng.

```{r}
linelist %>%                                  
  tabyl(age_cat, gender) %>%                  # counts by age and gender
  adorn_totals(where = "row") %>%             # add total row
  adorn_percentages(denominator = "row") %>%  # convert counts to proportions
  adorn_pct_formatting(digits = 1)            # convert proportions to percents
```

Bảng chéo được điều chỉnh để cả số lượng và phần trăm đều được hiển thị.

```{r}
linelist %>%                                  # case linelist
  tabyl(age_cat, gender) %>%                  # cross-tabulate counts
  adorn_totals(where = "row") %>%             # add a total row
  adorn_percentages(denominator = "col") %>%  # convert to proportions
  adorn_pct_formatting() %>%                  # convert to percents
  adorn_ns(position = "front") %>%            # display as: "count (percent)"
  adorn_title(                                # adjust titles
    row_name = "Age Category",
    col_name = "Gender")
```

### In với tabyl {.unnumbered}

Theo mặc định, lệnh tabyl sẽ in kết quả thô vào R console của bạn.

Ngoài ra, bạn có thể chuyển tabyl sang **flextable** hoặc package tương tự để in dưới dạng hình ảnh “đẹp” trong RStudio Viewer, có thể được xuất dưới dạng .png, .jpeg, .html, v.v. Điều này đã được thảo luận trong chương Trình bày bảng . Lưu ý rằng nếu in theo cách này và sử dụng `adorn_titles()`, bạn cần thêm vào `placement = "combined"`.

```{r}
linelist %>%
  tabyl(age_cat, gender) %>% 
  adorn_totals(where = "col") %>% 
  adorn_percentages(denominator = "col") %>% 
  adorn_pct_formatting() %>% 
  adorn_ns(position = "front") %>% 
  adorn_title(
    row_name = "Age Category",
    col_name = "Gender",
    placement = "combined") %>% # this is necessary to print as image
  flextable::flextable() %>%    # convert to pretty image
  flextable::autofit()          # format to one line per row 

```

### Sử dụng trên các bảng khác {.unnumbered}

Bạn có thể sử dụng các hàm`adorn_*()` của **janitor** lên các bảng khác, chẳng hạn các bảng được tạo bởi hàm `summarise()` và `count()` của **dplyr**, hoặc `table()` từ **base** R. Đơn giản chỉ cần pipe bảng đến hàm mong muốn của package **janitor**. Ví dụ:


```{r}
linelist %>% 
  count(hospital) %>%   # dplyr function
  adorn_totals()        # janitor function
```

### Lưu với tabyl {.unnumbered}

Nếu bạn muốn chuyển đổi bảng thành một hình ảnh “đẹp” với package **flextable**, bạn có thể lưu nó bằng các hàm như `save_as_html()`, `save_as_word()`, `save_as_ppt()`, và `save_as_image()` từ package **flextable** (sẽ được bàn luận kỹ hơn ở chương [Trình bày bảng](tables_presentation.vn.qmd)). Ví dụ dưới đây, bảng được lưu lại dưới dạng tệp Word, và có khả năng chỉnh sửa được.

```{r, eval=F}
linelist %>%
  tabyl(age_cat, gender) %>% 
  adorn_totals(where = "col") %>% 
  adorn_percentages(denominator = "col") %>% 
  adorn_pct_formatting() %>% 
  adorn_ns(position = "front") %>% 
  adorn_title(
    row_name = "Age Category",
    col_name = "Gender",
    placement = "combined") %>% 
  flextable::flextable() %>%                     # convert to image
  flextable::autofit() %>%                       # ensure only one line per row
  flextable::save_as_docx(path = "tabyl.docx")   # save as Word document to filepath
```

```{r out.width = "50%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "tabyl_word.png"))
```

### Thống kê {#janitor_age_out_stats .unnumbered}

Bạn có thể áp dụng các kiểm định thống kê bằng tabyls, ví dụ như `chisq.test()` hoặc `fisher.test()` từ package **stats**, như được trình bày dưới đây. Chú ý là giá trị missing không được cho phép vì vậy chúng được loại bỏ khỏi tabyl bằng tùy chọn `show_na = FALSE`.

```{r, warning=F, message=F}
age_by_outcome <- linelist %>% 
  tabyl(age_cat, outcome, show_na = FALSE) 

chisq.test(age_by_outcome)
```

Xem chương [Các kiểm định thống kê cơ bản](stat_tests.vn.qmd) để có thêm code và các mẹo liên quan đến thống kê.

### Các mẹo khác {.unnumbered}

-   Thêm đối số `na.rm = TRUE` để loại bỏ các giá trị missing.\
-   Nếu áp dụng bất kỳ hàm trợ giúp `adorn_*()` nào cho các bảng không được tạo bởi `tabyl()`, bạn có thể chỉ định (các) cột cụ thể để áp dụng chúng chẳng hạn như `adorn_percentage(,,,c(cases,deaths))` (chỉ định chúng cho đối số không tên thứ 4). Thay vào đó, hãy cân nhắc sử dụng hàm `summarise()`.\
-   Bạn có thể tìm đọc thêm ở [janitor page](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html) và [tabyl vignette](https://cran.r-project.org/web/packages/janitor/vignettes/tabyls.html).

## **dplyr** package

**dplyr** là một phần của package **tidyverse** và là một công cụ quản lý dữ liệu rất phổ biến. Tạo bảng với các hàm của **dplyr** như `summarise()` và `count()` là một cách tiếp cận hữu ích để tính toán các tóm tắt thống kê, tổng hợp *theo nhóm*, hoặc chuyển bảng tới `ggplot()`.

`summarise()` tạo một *data frame tổng hợp mới*. Nếu dữ liệu được *tách nhóm*, nó sẽ trả về data frame có một hàng với thống kê tóm tắt được chỉ định cho toàn bộ data frame. Nếu dữ liệu được *nhóm lại*, data frames sẽ có một hàng cho từng *nhóm* (xem chương [Nhóm dữ liệu](grouping.vn.qmd)).

Bên trong dấu ngoặc đơn của hàm `summarise()`, bạn sẽ cung cấp tên của từng cột cần tổng hợp mới, theo sau là dấu bằng và một hàm thống kê để áp dụng.

[***MẸO:*** Hàm summarise hoạt động được với cả cách viết Anh-Anh và Anh-Mỹ (`summarise()` và `summarize()`).]{style="color: darkgreen;"}

### Lấy số lượng {.unnumbered}

Hàm đơn giản nhất để áp dụng cùng với hàm `summarise()` là `n()`. Để trống dấu ngoặc đơn để đếm số hàng.

```{r}
linelist %>%                 # begin with linelist
  summarise(n_rows = n())    # return new summary dataframe with column n_rows
```

Điều này sẽ thú vị hơn nếu chúng ta đã nhóm dữ liệu trước đó.

```{r}
linelist %>% 
  group_by(age_cat) %>%     # group data by unique values in column age_cat
  summarise(n_rows = n())   # return number of rows *per group*
```

Lệnh trên có thể được rút ngắn bằng cách sử dụng hàm`count()` thay thế. `count()` làm những việc sau:

1)  Nhóm dữ liệu theo các cột được cung cấp cho nó\
2)  Tổng hợp chúng với `n()` (tạo cột `n`)\
3)  Tách nhóm dữ liệu

```{r}
linelist %>% 
  count(age_cat)
```

Bạn có thể thay đổi tên của cột đếm từ mặc định là `n` thành một cái gì đó cụ thể chẳng hạn như `name =`.

Tạo bảng đếm cho hai hoặc nhiều cột sẽ vẫn trả về địng dạng "dọc", với số lượng ở cột `n`. Xem chương [Pivoting dữ liệu](pivoting.vn.qmd) để hiểu thêm về định dạng dữ liệu "dọc" và "ngang".

```{r}
linelist %>% 
  count(age_cat, outcome)
```

### Hiện tất cả các cấp độ {.unnumbered}

Nếu bạn tạo bảng cho một cột có kiểu dữ liệu là *factor*, bạn có thể chắc chắng rằng *tất cả* các cấp độ được trình bày (không chỉ các cấp có giá trị trong dữ liệu) bằng cách thêm `.drop = FALSE` vào lệnh `summarise()` hoặc `count()`.

Kỹ thuật này rất hữu ích để chuẩn hóa các bảng/biểu đồ của bạn. Ví dụ: nếu bạn đang tạo số liệu cho nhiều nhóm con, hoặc liên tục tạo số liệu cho các báo cáo thường quy. Trong các trường hợp này, sự hiện diện của các giá trị trong dữ liệu có thể dao động, nhưng bạn có thể xác định các mức không đổi.

Xem chương [Factors](factors.vn.qmd) để có nhiều thông tin hơn.

### Tỷ lệ {#tbl_dplyr_prop .unnumbered}

Tỷ lệ có thể được thêm vào bằng cách piping bảng tới hàm `mutate()` để tạo một cột mới. Định nghĩa cột mới là thương của số quan sát của từng yếu tố (mặc định là `n`) và tổng số quan sát `sum()` của cột (sẽ trả về giá trị là một tỷ lệ).

Lưu ý trong trường hợp này, `sum()` trong lệnh `mutate()` sẽ trả về giá trị của toàn bộ cột `n` để dùng làm mẫu số của tỷ lệ. Như đã được giải thích [trong chương Nhóm dữ liệu](grouping.vn.qmd#group_summarise), *nếu* `sum()` được sử dụng với dữ liệu *đã được nhóm* (vd: nếu hàm `mutate()` được theo ngay phía sai hàm `group_by()`), nó sẽ trả về kết quả tổng hợp *theo nhóm*. Như đã nếu ở trên, `count()` hoàn thành nhiệm vụ của mình bằng cách *tách nhóm*. Vì vậy, trong trường hợp này chúng ta sẽ lấy toàn bộ tỷ lệ của cột.

Để dễ dàng hiển thị phần trăm, bạn có thể đưa tỷ lệ vào trong hàm `percent()` từ package **scales** (lưu ý là điều nãy sẽ chuyển kết quả thành dạng ký tự (character)).

```{r}
age_summary <- linelist %>% 
  count(age_cat) %>%                     # group and count by gender (produces "n" column)
  mutate(                                # create percent of column - note the denominator
    percent = scales::percent(n / sum(n))) 

# print
age_summary
```

Dưới đây là phương pháp tính tỷ lệ *trong nhóm*. Nó dựa trên các cấp độ nhóm dữ liệu khác nhau được áp dụng và loại bỏ một cách có chọn lọc. Đầu tiên, dữ liệu được nhóm theo `outcome` thông qua hàm `group_by()`. Sau đó, hàm `count()` được áp dụng. Hàm này sẽ tiếp tục nhóm dữ liệu phân theo `age_cat` và trả vế số lượng theo từng tổ hợp `outcome`-`age-cat`. Quan trọng là - khi nó kết thúc quy trình của mình, hàm `count()` sẽ *tách nhóm* theo `age_cat`, nên nhóm dữ liệu duy nhất còn lại là nhóm ban đầu theo `outcome`. Do đó, bước cuối cùng để tính toán tỷ lệ (mẫu số là `sum(n)`) vẫn được nhóm theo `outcome`.

```{r}
age_by_outcome <- linelist %>%                  # begin with linelist
  group_by(outcome) %>%                         # group by outcome 
  count(age_cat) %>%                            # group and count by age_cat, and then remove age_cat grouping
  mutate(percent = scales::percent(n / sum(n))) # calculate percent - note the denominator is by outcome group
```

```{r, echo=F}
DT::datatable(age_by_outcome, rownames = FALSE, options = list(pageLength = 12, scrollX=T), class = 'white-space: nowrap' )
```

### Vẽ biểu đồ {.unnumbered}

Để hiển thị kết quả từ một bảng "dài" như trên thì vẽ biểu đồ bằng hàm `ggplot()` tương đối trực quan. Dữ liệu một cách tự nhiên có định dạng "dọc", nên tương thích với `ggplot()` một cách tự nhiên. Xem thêm các ví dụ ở chương [ggplot cơ bản](ggplot_basics.vn.qmd) và [Các mẹo với ggplot](ggplot_tips.vn.qmd).

```{r, warning=F, message=F}
linelist %>%                      # begin with linelist
  count(age_cat, outcome) %>%     # group and tabulate counts by two columns
  ggplot()+                       # pass new data frame to ggplot
    geom_col(                     # create bar plot
      mapping = aes(   
        x = outcome,              # map outcome to x-axis
        fill = age_cat,           # map age_cat to the fill
        y = n))                   # map the counts column `n` to the height
```

### Tổng hợp thống kê {.unnumbered}

Một điểm mạnh của **dplyr** và `summarise()` là khả năng trả về các bảng tổng hợp thống kê nâng cao hơn như `median()`, `mean()`, `max()`, `min()`, `sd()` (độ lệch chuẩn), và phân vị. Bạn cũng có thể sử dụng `sum()` để trả vể số lượng dòng thỏa mãn một điều kiện logic nào đó. Như trên, các kết quả đầu ra này có thể được tạo cho toàn bộ data frame hoặc theo nhóm.

Cú pháp là tương tự- bên trong dấu ngoặc hàm `summarise()` bạn cung cấp tên của từng cột tổng hợp được theo sau bởi dâu bằng và hàm thống kê được áp dụng. Trong hàm thống kê, cung cấp (các) cột sẽ được tính toán và bất kỳ các đối số có liên quan (vd: `na.rm = TRUE` cho tất cả các hàm toán học).

Bạn cũng có thể sử dụng hàm `sum()` để trả vể số lượng dòng thỏa mãn một điều kiện logic cụ thể. Biểu thức điều kiện sẽ được đếm nếu nó được đánh giá là `TRUE`. Ví dụ:

-   `sum(age_years < 18, na.rm=T)`\
-   `sum(gender == "male", na.rm=T)`\
-   `sum(response %in% c("Likely", "Very Likely"))`

Dưới đây, bộ dữ liệu `linelist` được tổng hợp để mô tả những ngày trì hoãn từ khi bắt đầu có triệu chứng đến khi nhập viện (cột `days_onset_hosp`), phân theo bệnh viện.

```{r}
summary_table <- linelist %>%                                        # begin with linelist, save out as new object
  group_by(hospital) %>%                                             # group all calculations by hospital
  summarise(                                                         # only the below summary columns will be returned
    cases       = n(),                                                # number of rows per group
    delay_max   = max(days_onset_hosp, na.rm = T),                    # max delay
    delay_mean  = round(mean(days_onset_hosp, na.rm=T), digits = 1),  # mean delay, rounded
    delay_sd    = round(sd(days_onset_hosp, na.rm = T), digits = 1),  # standard deviation of delays, rounded
    delay_3     = sum(days_onset_hosp >= 3, na.rm = T),               # number of rows with delay of 3 or more days
    pct_delay_3 = scales::percent(delay_3 / cases)                    # convert previously-defined delay column to percent 
  )

summary_table  # print
```

Một vài mẹp:

-   Sử dụng `sum()` với một biểu thức logic để "đếm" các dòng đáp ứng các tiêu chí nhất định (`==`)\

-   Lưu ý cách sử dụng của `na.rm = TRUE` bên trong biểu thức toán học như là `sum()`, nếu không `NA` sẽ được trả lại nếu dữ liệu có giá trị missing\

-   Sử dụng hàm `percent()` từ package **scales** để dễ dàng chuyển đổi tỷ lệ phần trăm

    -   Thiết lập `accuracy =` bằng 0.1 hoặc 0.01 để đảm bảo kết quả hiển thị 1 hoặc 2 chữ số thập phân sau dấ phẩy\

-   Sử dụng hàm `round()` từ **base** R để chỉ định số thập phân\

-   Để tính toán các thống kê này trên toàn bộ tập dữ liệu, sử dụng `summarise()` và không có `group_by()`\

-   Bạn có thể tạo các cột cho các mục đích tính toán sau này (ví dụ: mẫu số) mà thậm chí bạn bỏ ra khỏi data frame của mình với hàm `select()`.

### Thống kê có điều kiện {.unnumbered}

Bạn có thể sẽ muốn trả về các *thống kê có điều kiện* - vd: số hàng tối đa đáp ứng các tiêu chí nhất định. Điều này có thể thực hiện được bằng cáhc subsetting cột bằng dấu ngoặc vuông `[ ]`. Ví dụ dưới đây trả về nhiệt độ tối đa cho những bệnh nhân được phân loại là có hoặc không bị sốt. Tuy nhiên hãy lưu ý - có thể thích hợp hơn nếu thêm một cột khác vào hàm `group_by()` và `pivot_wider()` (như được minh họa [dưới đây](#tbls_pivot_wider)).

```{r}
linelist %>% 
  group_by(hospital) %>% 
  summarise(
    max_temp_fvr = max(temp[fever == "yes"], na.rm = T),
    max_temp_no = max(temp[fever == "no"], na.rm = T)
  )
```

### Gắn với nhau {.unnumbered}

Hàm `str_glue()` từ package **stringr** rất hữu ích để kết hợp các giá trị từ một số cột thành một cột mới. Trong trường hợp này nó được sử dụng *sau* hàm `summarise()`.

Trong chương [Ký tự và chuỗi](characters_strings.vn.qmd), có nhiều lựa chọn khác nhau để kết hợp các cột được thảo luận, bao gồm cả `unite()`, và `paste0()`. Trong trường hợp sử dụng này, chúng tôi ủng hộ `str_glue()` bởi vì nó linh hoạt hơn `unite()` và có cú pháp đơn giẩn hơn `paste0()`.

Dưới đây, data frame `summary_table` (được tạo bên trên) được biến đổi để kết hợp cột `delay_mean` và `delay_sd`, định dạng dấu ngoặc đơn được thêm vào cột mới, và các cột cũ tương ứng của chúng bị xóa.

Sau đó, để làm cho bảng dễ nhìn hơn, tổng hàng được thêm vào bằng hàm `adorn_totals()` từ **janitor** (bỏ qua các cột không phải số). Cuối cùng, chúng tôi sử dụng hàm `select()` từ **dplyr** để sắp xếp và đặt tên lại cho các cột.

Bây giờ bạn có thể chuyển kết quả tới **flextable** và in chúng thành bảng trong Word, .png, .jpeg, .html, Powerpoint, RMarkdown, v.v.! (xem chương [Trình bày bảng](tables_presentation.vn.qmd)).

```{r}
summary_table %>% 
  mutate(delay = str_glue("{delay_mean} ({delay_sd})")) %>%  # combine and format other values
  select(-c(delay_mean, delay_sd)) %>%                       # remove two old columns   
  adorn_totals(where = "row") %>%                            # add total row
  select(                                                    # order and rename cols
    "Hospital Name"   = hospital,
    "Cases"           = cases,
    "Max delay"       = delay_max,
    "Mean (sd)"       = delay,
    "Delay 3+ days"   = delay_3,
    "% delay 3+ days" = pct_delay_3
    )
```

#### Bách phân vị {.unnumbered}

*Bách phân vị* và tứ phân vị trong **dplyr** xứng đáng được đề cập tới. Để trả về tứ phân vị, sử dụng `quantile()` với các giá trị mặc định hoặc chỉ rõ giá trị bạn muốn bằng đối số `probs =`.

```{r}
# get default percentile values of age (0%, 25%, 50%, 75%, 100%)
linelist %>% 
  summarise(age_percentiles = quantile(age_years, na.rm = TRUE))

# get manually-specified percentile values of age (5%, 50%, 75%, 98%)
linelist %>% 
  summarise(
    age_percentiles = quantile(
      age_years,
      probs = c(.05, 0.5, 0.75, 0.98), 
      na.rm=TRUE)
    )
```

Nếu bạn muốn trả về phân vị *theo nhóm*, bạn có thể gặp phải các kết quả đầu ra dài và ít hữu ích hơn nếu bạn chỉ cần thêm cột vào `group_by()`. Thay vào đó, hãy thử cách tiếp cận này - tạo một cột cho mỗi mức phân vị mong muốn.

```{r}
# get manually-specified percentile values of age (5%, 50%, 75%, 98%)
linelist %>% 
  group_by(hospital) %>% 
  summarise(
    p05 = quantile(age_years, probs = 0.05, na.rm=T),
    p50 = quantile(age_years, probs = 0.5, na.rm=T),
    p75 = quantile(age_years, probs = 0.75, na.rm=T),
    p98 = quantile(age_years, probs = 0.98, na.rm=T)
    )
```

Mặc dù **dplyr** `summarise()` chắc chắn cung cấp khả năng kiểm soát tốt hơn, bạn có thể thấy rằng tất cả các thống kê tổng hợp mà bạn cần có thể được tạo ra với hàm `get_summary_stat()` từ package **rstatix**. Nếu thực hiện trên dữ liệu đã được nhóm, nó sẽ trả về các phân vị 0%, 25%, 50%, 75%, và 100%. If applied to ungrouped data, you can specify the percentiles with `probs = c(.05, .5, .75, .98)`.

```{r}
linelist %>% 
  group_by(hospital) %>% 
  rstatix::get_summary_stats(age, type = "quantile")
```

```{r}
linelist %>% 
  rstatix::get_summary_stats(age, type = "quantile")
```

### Tóm tắt dữ liệu tổng hợp {.unnumbered}

*Nếu bạn bắt đầu với dữ liệu tổng hợp (aggregated data)*, sử dụng `n()` để trả về số lượng các *dòng*, không phải là tổng của các số lượng được đếm. Để lấy tổng, sử dụng `sum()` trên cột của dữ liệu đếm.

Ví dụ, giả sử bạn đang bắt đầu với data frame đếm số lượng như bên dưới, gọi là `linelist_agg` - nó hiển thị ở định dạng "dọc", các trường hợp được tính theo outcome và giới tính.

Sau đây chúng ta sẽ tạo data frame minh hoạt số trường hợp của `linelist` được đếm theo outcome và gender (các giá trị missing được loại bỏ để rõ ràng).

```{r}
linelist_agg <- linelist %>% 
  drop_na(gender, outcome) %>% 
  count(outcome, gender)

linelist_agg
```

Để tính tổng số lượng (trong cột `n`) theo nhóm bạn có thể sử dụng hàm `summarise()` nhưng đặt cột mới bằng `sum(n, na.rm=T)`. Để thêm phần tử điều kiện vào phép toán tổng, bạn có thể sử dụng cú pháp dấu ngoặc vuông tập hợp con [ ] trên cột đếm.

```{r}
linelist_agg %>% 
  group_by(outcome) %>% 
  summarise(
    total_cases  = sum(n, na.rm=T),
    male_cases   = sum(n[gender == "m"], na.rm=T),
    female_cases = sum(n[gender == "f"], na.rm=T))
```

### `across()` trên nhiều cột {.unnumbered}

Bạn có thể sử dụng `summarise()` trên nhiều cột bằng hàm `across()`. Điều này làm cho mọi thứ dễ dàng hơn khi bạn muốn tính toán các thống kê giống nhau cho nhiều cột. Đặt `across()` bên trong `summarise()` và chỉ rõ những điều sau:

-   `.cols =` tên cột viết dưới dạng vector `c()` hoặc sử dụng các hàm trợ giúp chọn cột "tidyselect" (được giải thích bên dưới)\
-   `.fns =` hàm thực hiện (không có dấu ngoặc) - bạn có thể đưa nhiều hàm vào thông qua `list()`

Ví dụ dưới đây, `mean()` được áp dụng cho các cột dữ liệu dạng số. Một vectơ tên của các cột được gán cho `.cols =` và hàm duy nhất `mean` được xác định (không có dấu ngoặc) cho `.fns =`. Bất kỳ đối số bổ sung nào cho hàm (vd: `na.rm=TRUE`) được cung cấp phía sau `.fns =`, ngăn cách bởi dấu phẩy.

Có thể khó để hiểu được thứ tự của dấu ngoặc đơn và dấu phẩy chính xác khi sử dụng `across()`. Hãy nhớ là bên trong hàm `across()` bạn phải bao gồm các cột, các hàm, và tất cả những đối số cần thiết cho các hàm.

```{r}
linelist %>% 
  group_by(outcome) %>% 
  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm),  # columns
                   .fns = mean,                               # function
                   na.rm=T))                                  # extra arguments
```

Nhiều hàm có thể được chạy cùng một lúc. Dưới đây hàm `mean` và `sd` được cung cấp cho `.fns =` bên trong một `list()`. Bạn có cơ hội cung cấp tên ký tự (vd: "mean" và "sd") để thêm vào tên các cột mới.

```{r}
linelist %>% 
  group_by(outcome) %>% 
  summarise(across(.cols = c(age_years, temp, wt_kg, ht_cm), # columns
                   .fns = list("mean" = mean, "sd" = sd),    # multiple functions 
                   na.rm=T))                                 # extra arguments
```

Dưới đây là danh sách các hàm trợ giúp "tidyselect" bạn có thể cung cấp cho `.cols =` để lựa chọn cột:

-   `everything()` - tất cả các cột khác không được đề cập\
-   `last_col()` - cột cuối cùng\
-   `where()` - áp dụng một hàm cho tất cả các cột và chọn những cột trả về giá trị TRUE\
-   `starts_with()` - khớp với một tiền tố được chỉ định. Ví dụ: `starts_with("date")`
-   `ends_with()` - khớp với một hậu tố được chỉ định. Ví dụ: `ends_with("_end")`\
-   `contains()` - cột chứa một chuỗi ký tự. Ví dụ: `contains("time")`
-   `matches()` - áp dụng một biểu thức chính quy (regex). Ví dụ: `contains("[pt]al")`\
-   `num_range()` - khoảng giá trị số
-   `any_of()` - khớp nếu cột được đặt tên. Hữu ích nếu tên có thể không tồn tại. Ví dụ: `any_of(date_onset, date_death, cardiac_arrest)`

Ví dụ, để trả về giá trị trung bình của tất cả các cột dạng số, sử dụng `where()` và thêm vào hàm `is.numeric()` (không có dấu ngoặc). Tất cả những thứ này vẫn được đặt trong hàm `across()`.

```{r}
linelist %>% 
  group_by(outcome) %>% 
  summarise(across(
    .cols = where(is.numeric),  # all numeric columns in the data frame
    .fns = mean,
    na.rm=T))
```

### Xoay trục ngang (Pivot wider) {#tbls_pivot_wider .unnumbered}

Nếu bạn thích bảng của mình ở định dạng "rộng", bạn có thể biến đổi nó sử dụng hàm **tidyr** `pivot_wider()`. Bạn có thể sẽ cần đặt lại tên cho các cột bằng `rename()`. Để tìm hiểu thêm, vui lòng xem chương [Pivoting dữ liệu](pivoting.vn.qmd).

Ví dụ sau đây bắt đầu bằng một bảng "dài" `age_by_outcome` từ mục [Tỷ lệ](#tbl_dplyr_prop). Để dễ hình dung, chúng ta tạo lại bảng và in ra:

```{r}
age_by_outcome <- linelist %>%                  # begin with linelist
  group_by(outcome) %>%                         # group by outcome 
  count(age_cat) %>%                            # group and count by age_cat, and then remove age_cat grouping
  mutate(percent = scales::percent(n / sum(n))) # calculate percent - note the denominator is by outcome group
```

```{r, echo=F}
DT::datatable(age_by_outcome, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Để xoay trục ngang, chúng ta tạo các cột mới từ các *giá trị* trong cột hiện có `age_cat` (bằng cách đặt `names_from = age_cat`). Chúng ta cũng chỉ định rằng các giá trị bảng mới sẽ đến từ cột hiện có `n`, với `values_from = n`. Các cột không được đề cập trong lệnh pivoting (`outcome`) sẽ không thay đổi ở phía ngoài cùng bên trái.

```{r}
age_by_outcome %>% 
  select(-percent) %>%   # keep only counts for simplicity
  pivot_wider(names_from = age_cat, values_from = n)  
```

### Tổng các hàng {#tbl_dplyr_totals .unnumbered}

Khi hàm `summarise()` vận hành trên dữ liệu đã được nhóm, nó không tính "tổng" một cách tự động. Sau đây là hai cách tiếp cận giúp bạn thêm tổng hàng:

#### **janitor**'s `adorn_totals()` {.unnumbered}

Nếu bảng của bạn chỉ chứa duy nhất số lượng hoặc tỷ lệ/tỷ lệ phần trăm có thể được tổng hợp thành một tổng, thì bạn có thể tính *tổng* sử dụng hàm `adorn_totals()` của package **janitor** như đã được mô tả bên trên. Lưu ý là hàm này chỉ có thể tính tổng của các cột định dạng là số - nếu bạn muốn tính các loại tổng khác, vui lòng xem cách tiếp cận tiếp theo bằng **dplyr**.

Dưới đây, bộ dữ liệu `linelist` được nhóm theo giới và tóm tắt thành một bảng mô tả số trường hợp có outcome đã biết, tử vong và phục hồi. Piping bảng tới hàm `adorn_totals()` để thêm tổng các hàng ở hàng dưới cùng thể hiện giá trị tổng của từng cột. Các hàm `adorn_*()` khác điều chỉnh cách kết quả được hiển thị như được comment trong phần code.

```{r}
linelist %>% 
  group_by(gender) %>%
  summarise(
    known_outcome = sum(!is.na(outcome)),           # Number of rows in group where outcome is not missing
    n_death  = sum(outcome == "Death", na.rm=T),    # Number of rows in group where outcome is Death
    n_recover = sum(outcome == "Recover", na.rm=T), # Number of rows in group where outcome is Recovered
  ) %>% 
  adorn_totals() %>%                                # Adorn total row (sums of each numeric column)
  adorn_percentages("col") %>%                      # Get column proportions
  adorn_pct_formatting() %>%                        # Convert proportions to percents
  adorn_ns(position = "front")                      # display % and counts (with counts in front)
```

#### `summarise()` trên dữ liệu "tổng" rồi sau đó `bind_rows()` {.unnumbered}

Nếu bảng của bạn chứa các phép tính thống kế chẳng hạn như `median()`, `mean()`, v.v, thì cách tiếp cận dùng hàm `adorn_totals()` bên trên sẽ *không* đủ. Thay vào đó, để có được thống kê tóm tắt cho toàn bộ tập dữ liệu, bạn phải tính toán chúng bằng lệnh `summarise()` một cách độc lập sau đó gắn các kết quả này với bảng tổng hợp theo nhóm ban đầu. Để làm điều này, bạn có thể sử dụng hàm `bind_rows()` từ **dplyr** như được mô tả trong chương [Nối dữ liệu](joining_matching.vn.qmd). Dưới đây là một ví dụ:

Bạn có thể tạo bảng tổng hợp của outcome *theo bệnh viện* với `group_by()` và `summarise()` như sau:

```{r, warning=F, message=F}
by_hospital <- linelist %>% 
  filter(!is.na(outcome) & hospital != "Missing") %>%  # Remove cases with missing outcome or hospital
  group_by(hospital, outcome) %>%                      # Group data
  summarise(                                           # Create new summary columns of indicators of interest
    N = n(),                                            # Number of rows per hospital-outcome group     
    ct_value = median(ct_blood, na.rm=T))               # median CT value per group
  
by_hospital # print table
```

Để tính tổng, vẫn sử dụng hàm `summarise()` nhưng chỉ nhóm dữ liệu theo outcome (không theo bệnh viện), như dưới đây:

```{r}
totals <- linelist %>% 
      filter(!is.na(outcome) & hospital != "Missing") %>%
      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    
      summarise(
        N = n(),                                       # These statistics are now by outcome only     
        ct_value = median(ct_blood, na.rm=T))

totals # print table
```

Bây giờ chúng ta có thể nối hai data frames này lại với nhau. Lưu ý là bảng `by_hospital` có 4 cột trong khi đó bảng kết quả `totals` có 3 cột. Bằng việc sử dụng `bind_rows()`, các cột được kết hợp theo tên, và bất kỳ khoảng trống nào sẽ được điền vào bằng giá trị `NA` (ví dụ ở cột `hospital` là các giá trị cho hai hàng `totals` mới). Sau khi gắn các hàng, chúng ta chuyển các khoảng trống đó thành "Tổng" bằng cách sử dụng `replace_na()` (xem chương [Làm sạch số liệu và các hàm quan trọng](cleaning.vn.qmd)).

```{r}
table_long <- bind_rows(by_hospital, totals) %>% 
  mutate(hospital = replace_na(hospital, "Total"))
```

Đây là bảng mới với các hàng "Tổng" ở các hàng dưới cùng của bảng.

```{r, message=FALSE, echo=F}
DT::datatable(table_long, rownames = FALSE, options = list(pageLength = 12, scrollX=T), class = 'white-space: nowrap' )
```

Bảng này đang có định dạng "dài", có thể là những gì bạn muốn. *Tuy nhiên*, bạn có thể *xoay* bảng này *rộng hơn* theo chiều ngang để dễ đọc. Xem thêm ở phần Xoay trục ngang (Pivot wider) bên trên, và chương [Xoay trục dữ liệu](pivoting.vn.qmd). Bạn cũng có thêm nhiều cột nữa, và sắp xếp chúng một cách đẹp mắt. Phần code được trình bày bên dưới.

```{r}
table_long %>% 
  
  # Pivot wider and format
  ########################
  mutate(hospital = replace_na(hospital, "Total")) %>% 
  pivot_wider(                                         # Pivot from long to wide
    values_from = c(ct_value, N),                       # new values are from ct and count columns
    names_from = outcome) %>%                           # new column names are from outcomes
  mutate(                                              # Add new columns
    N_Known = N_Death + N_Recover,                               # number with known outcome
    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)
    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)
  select(                                              # Re-order columns
    hospital, N_Known,                                   # Intro columns
    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns
    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns
  arrange(N_Known)                                  # Arrange rows from lowest to highest (Total row at bottom)

```

Tiếp đó bạn có thể in bảng kết quả dưới dạng một bức ảnh đẹp - sau đây là output được in bằng **flextable**. Bạn có thể đọc chuyên sâu hơn về ví dụ này và cách tạo được bảng "đẹp" tương tự thế này trong chương [Trình bày bảng](tables_presentation.vn.qmd).

```{r echo=FALSE, fig.show='hold', message=FALSE, warning=FALSE, out.width=c('50%', '50%')}

linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds")) 

border_style = officer::fp_border(color="black", width=1)

pacman::p_load(
  rio,            # import/export
  here,           # file pathways
  flextable,      # make pretty images of tables 
  officer,        # helper functions for tables
  tidyverse)      # data management, summary, and visualization

table <- linelist %>% 
  # filter
  ########
  #filter(!is.na(outcome) & hospital != "Missing") %>%  # Remove cases with missing outcome or hospital
  
  # Get summary values per hospital-outcome group
  ###############################################
  group_by(hospital, outcome) %>%                      # Group data
  summarise(                                           # Create new summary columns of indicators of interest
    N = n(),                                            # Number of rows per hospital-outcome group     
    ct_value = median(ct_blood, na.rm=T)) %>%           # median CT value per group
  
  # add totals
  ############
  bind_rows(                                           # Bind the previous table with this mini-table of totals
    linelist %>% 
      filter(!is.na(outcome) & hospital != "Missing") %>%
      group_by(outcome) %>%                            # Grouped only by outcome, not by hospital    
      summarise(
        N = n(),                                       # Number of rows for whole dataset     
        ct_value = median(ct_blood, na.rm=T))) %>%     # Median CT for whole dataset
  
  # Pivot wider and format
  ########################
  mutate(hospital = replace_na(hospital, "Total")) %>% 
  pivot_wider(                                         # Pivot from long to wide
    values_from = c(ct_value, N),                       # new values are from ct and count columns
    names_from = outcome) %>%                           # new column names are from outcomes
  mutate(                                              # Add new columns
    N_Known = N_Death + N_Recover,                               # number with known outcome
    Pct_Death = scales::percent(N_Death / N_Known, 0.1),         # percent cases who died (to 1 decimal)
    Pct_Recover = scales::percent(N_Recover / N_Known, 0.1)) %>% # percent who recovered (to 1 decimal)
  select(                                              # Re-order columns
    hospital, N_Known,                                   # Intro columns
    N_Recover, Pct_Recover, ct_value_Recover,            # Recovered columns
    N_Death, Pct_Death, ct_value_Death)  %>%             # Death columns
  arrange(N_Known) %>%                                 # Arrange rows from lowest to highest (Total row at bottom)

  # formatting
  ############
  flextable() %>% 
  add_header_row(
    top = TRUE,                # New header goes on top of existing header row
    values = c("Hospital",     # Header values for each column below
               "Total cases with known outcome", 
               "Recovered",    # This will be the top-level header for this and two next columns
               "",
               "",
               "Died",         # This will be the top-level header for this and two next columns
               "",             # Leave blank, as it will be merged with "Died"
               "")) %>% 
    set_header_labels(         # Rename the columns in original header row
      hospital = "", 
      N_Known = "",                  
      N_Recover = "Total",
      Pct_Recover = "% of cases",
      ct_value_Recover = "Median CT values",
      N_Death = "Total",
      Pct_Death = "% of cases",
      ct_value_Death = "Median CT values")  %>% 
  merge_at(i = 1, j = 3:5, part = "header") %>% # Horizontally merge columns 3 to 5 in new header row
  merge_at(i = 1, j = 6:8, part = "header") %>%  
  border_remove() %>%  
  theme_booktabs() %>% 
  vline(part = "all", j = 2, border = border_style) %>%   # at column 2 
  vline(part = "all", j = 5, border = border_style) %>%   # at column 5
  merge_at(i = 1:2, j = 1, part = "header") %>% 
  merge_at(i = 1:2, j = 2, part = "header") %>% 
  width(j=1, width = 2.7) %>% 
  width(j=2, width = 1.5) %>% 
  width(j=c(4,5,7,8), width = 1) %>% 
  flextable::align(., align = "center", j = c(2:8), part = "all") %>% 
  bg(., part = "body", bg = "gray95")  %>% 
  colformat_num(., j = c(4,7), digits = 1) %>% 
  bold(i = 1, bold = TRUE, part = "header") %>% 
  bold(i = 6, bold = TRUE, part = "body")


table
```

## **gtsummary** package {#tbl_gt}

Nếu bạn muốn in các thống kê tóm tắt của mình dưới dạng đồ họa đẹp mắt, sẵn sàng xuất bản, bạn có thể sử dụng package **gtsummary** và hàm của nó `tbl_summary()`. Phần code ban đầu có thể trông phức tạp một chút, nhưng kết quả đầu ra trông rất đẹp và in ra Viewer panel của RStudio dưới dạng một ảnh HTML. Đọc [bản tóm tắt ở đây](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html).

Bạn cũng có thể thêm kết quả của các kiểm định thống kê vào các bảng của **gtsummary**. Quy trình này được trình bày ở mục **gtsummary** trong chương [Các kiểm định thống kê cơ bản](#stats_gt).

Để giới thiệu về `tbl_summary()`, trước tiên chúng ta sẽ chỉ ra các quy trình cơ bản nhất, giúp bạn thực sự tạo ra một bảng lớn và đẹp. Sau đó, chúng ta sẽ tìm hiểu chi tiết hơn về cách thực hiện các điều chỉnh và các bảng được thiết kế sẵn.

### Bảng tổng hợp {.unnumbered}

Cách làm việc mặc định của `tbl_summary()` khá kinh ngạc - nó lấy các cột bạn cung cấp và tạo một bảng tóm tắt chỉ trong một lệnh. Hàm in ra số liệu thống kê phù hợp với lớp cột: trung vị và khoảng tứ phân vị (IQR) cho các cột số, và số lượng (%) cho các cột danh mục. Giá trị missing được chuyển đổi thành "Unknown". Chú thích được thêm vào cuối bảng để giải thích các phép tính thống kê, trong khi tổng N được hiển thị ở trên cùng.

```{r, warning=F, message=F}
linelist %>% 
  select(age_years, gender, outcome, fever, temp, hospital) %>%  # keep only the columns of interest
  tbl_summary()                                                  # default
```

### Các điều chỉnh {.unnumbered}

Bây giờ chúng tôi sẽ giải thích cách hoạt động của hàm và cách điều chỉnh. Các đối số chính được trình bày chi tiết bên dưới:

**`by =`**\
Bạn có thể phân tầng bảng của mình theo một cột (ví dụ theo `outcome`), để tạo thành bảng 2 chiều.

**`statistic =`**\
Sử dụng phương trình để chỉ định thống kê nào sẽ được hiển thị và cách hiển thị chúng. Có hai vế của phương trình, được ngăn cách bởi dấu `~`. Ở vế phải, trong dấu ngoặc kép, là hiển thị phép toán thống kê mong muốn, và ở vế trái là các cột mà phép thống kê đó sẽ áp dụng.

-   Vế phải của phương trình sử dụng cú pháp của hàm `str_glue()` từ **stringr** (xem [Ký tự và chuỗi](characters_strings.vn.qmd)), với chuỗi hiển thị mong muốn trong dấu ngoặc kép và các phép toán thống kê trong dấu ngoặc nhọn. Bạn có thể thêm các phép thống kê như là "n" (số lượng), "N" (mẫu số), "mean", "median", "sd", "max", "min", phân vị "p\#\#" như là  "p25", hoặc phần trăm của một tổng như là "p". Xem `?tbl_summary` để biết thêm chi tiết.\
-   Đối với phía bên trái của phương trình, bạn có thể chỉ định các cột theo tên (ví dụ: `age` hoặc `c(age, gender)`) hoặc sử dụng các hàm trợ giúp như `all_continuous()`, `all_categorical()`, `contains()`, `starts_with()`, v.v.

Một ví dụ đơn giản về phương trình `statistic =` có thể tham khảo ở bên dưới, để chỉ in giá trị trung bình của cột `age_years`:

```{r}
linelist %>% 
  select(age_years) %>%         # keep only columns of interest 
  tbl_summary(                  # create summary table
    statistic = age_years ~ "{mean}") # print mean of age
```

Một phương trình phức tạp hơn một chút có thể như`"({min}, {max})"`, kết hợp các giá trị max và min trong dấu ngoặc đơn và được phân tách bằng dấu phẩy:

```{r}
linelist %>% 
  select(age_years) %>%                       # keep only columns of interest 
  tbl_summary(                                # create summary table
    statistic = age_years ~ "({min}, {max})") # print min and max of age
```

Bạn cũng có thể phân biệt cú pháp cho các cột hoặc loại cột riêng biệt. Trong ví dụ phức tạp hơn bên dưới, giá trị được cung cấp cho `statistc =` là một **danh sách** chỉ ra rằng đối với tất cả các cột dạng số thì bảng sẽ in ra giá trị trung bình và độ lệch chuẩn bên trong ngoặc, trong khi các cột dạng danh sách thì sẽ in ra n, mẫu số, và phần trăm.

**`digits =`**\
Điều chỉnh các chữ số và làm tròn. Theo tùy chọn, điều này có thể được chỉ định chỉ dành cho các cột dạng số liên tục (như bên dưới).

**`label =`**\
Điều chỉnh cách hiển thị tên cột. Cung cấp tên cột và nhãn mong muốn của nó được phân tách bằng dấu ngã. Theo mặc định thì tên cột được hiển thị.

**`missing_text =`**\
Điều chỉnh cách giá trị missing được hiển thị. Mặc định hiển thị là "Unknown".

**`type =`**\
Sử dụng để điều chỉnh số lượng cấp độ của thống kê được hiển thị Cú pháp tương tự như `statistic =` trong đó bạn cung cấp một phương trình với các cột ở bên trái và một giá trị ở bên phải. Hai trường hợp phổ biến bao gồm:

-   `type = all_categorical() ~ "categorical"` Buộc các cột nhị phân (ví dụ: `fever` có/không) hiển thị tất cả các cấp độ thay vì chỉ hiện thị hàng "có"\
-   `type = all_continuous() ~ "continuous2"` Cho phép các kết quả thống kê được trình bày theo nhiều dòng cho mỗi biến, như được trình bày trong phần sau

Trong ví dụ dưới đây, mỗi đối số này được sử dụng để điều chỉnh bảng ban đầu:

```{r}
linelist %>% 
  select(age_years, gender, outcome, fever, temp, hospital) %>% # keep only columns of interest
  tbl_summary(     
    by = outcome,                                               # stratify entire table by outcome
    statistic = list(all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
                     all_categorical() ~ "{n} / {N} ({p}%)"),   # stats and format for categorical columns
    digits = all_continuous() ~ 1,                              # rounding for continuous columns
    type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
    label  = list(                                              # display labels for column names
      outcome   ~ "Outcome",                           
      age_years ~ "Age (years)",
      gender    ~ "Gender",
      temp      ~ "Temperature",
      hospital  ~ "Hospital"),
    missing_text = "Missing"                                    # how missing values should display
  )
```

### Thống kê nhiều dòng cho các biến liên tục {.unnumbered}

Nếu bạn muốn in nhiều dòng thống kê cho các biến liên tục, bạn có thể thiết lập `type =` thành "continuous2". Bạn có thể kết hợp tất cả các yếu tố được hiển thị trước đó trong một bảng bằng cách chọn thống kê bạn muốn hiển thị. Để làm điều này, bạn cần cho hàm biết rằng bạn muốn khôi phục bảng bằng cách nhập type là "continuous2". Số lượng các giá trị missing được hiển thị là "Unknown".

```{r}
linelist %>% 
  select(age_years, temp) %>%                      # keep only columns of interest
  tbl_summary(                                     # create summary table
    type = all_continuous() ~ "continuous2",       # indicate that you want to print multiple statistics 
    statistic = all_continuous() ~ c(
      "{mean} ({sd})",                             # line 1: mean and SD
      "{median} ({p25}, {p75})",                   # line 2: median and IQR
      "{min}, {max}")                              # line 3: min and max
    )
```

Có nhiều cách khác để chỉnh sửa các bảng này, bao gồm thêm giá trị p, chỉnh sửa màu sắc và tiêu đề, v.v. Các phần này được đề cập trong tài liệu trợ giúp đính kèm (nhập `?tbl_summary` trong cửa sổ Console), và một số được đề cập trong chương [Các kiểm định thống kê cơ bản](#stat-tests).

## **base** R

Bạn có thể sử dụng hàm `table()` để tạo bảng đơn và bảng chéo các cột. Không giống như các cách ở trên, bạn phải chỉ định data frame mỗi khi bạn tham chiếu đến tên cột, như được trình bày dưới đây.

[***THẬN TRỌNG:*** Giá trị `NA` (missing) sẽ **không** sẽ không được lập bảng trừ khi bạn bao gồm đối số `useNA = "always"` (cũng có thể được đặt thành "no" hoặc "ifany").]{style="color: orange;"}

[***MẸO:*** Bạn có thể sử dụng `%$%` từ package **magrittr** để loại bỏ việc lặp lại các data frame trong các hàm **base**. Chẳng hạn, ví dụ bên dưới có thể được viết lại thành `linelist %$% table(outcome, useNA = "always")` ]{style="color: darkgreen;"}

```{r}
table(linelist$outcome, useNA = "always")
```

Có thể lập bảng chéo từ nhiều cột bằng cách liệt kê chúng nối tiếp nhau, phân tách bằng dấu phẩy. Hoặc là, bạn có thể gán cho mỗi cột một “tên” như `Outcome = linelist$outcome`.

```{r}
age_by_outcome <- table(linelist$age_cat, linelist$outcome, useNA = "always") # save table as object
age_by_outcome   # print table
```

### Tỷ lệ {.unnumbered}

Để trả về tỷ lệ, hãy chuyển bảng trên vào hàm `prop.table()`. Sử dụng đối số `margins =` để chỉ định xem bạn muốn tỷ lệ của hàng (1), của cột (2) hay của toàn bảng (3). Để dễ nhìn, chúng ta pipe bảng trên vào hàm `round()` của **base** R, chỉ định 2 chữ số sau dấu phẩy.

```{r}
# get proportions of table defined above, by rows, rounded
prop.table(age_by_outcome, 1) %>% round(2)
```

### Tổng {.unnumbered}

Để thêm tổng hàng và tổng cột, hãy chuyển bảng vào hàm `addmargins()`. Cách này hoạt động cho cả số lượng và tỷ lệ.

```{r}
addmargins(age_by_outcome)
```

### Chuyển đổi thành data frame {.unnumbered}

Chuyển đổi trực tiếp một đối tượng dạng `table()` sang một data frame không phải là một đường thẳng. Cách tiếp cận được trình bày như dưới đây:

1)  Tạo một bảng, mà *không sử dụng* `useNA = "always"`. Thay vào đó chuyển giá trị `NA` thành “(Missing)” với hàm `fct_explicit_na()` của package **forcats**.\
2)  Thêm tổng (tùy chọn) bằng cách piping tới `addmargins()`\
3)  Pipe tới hàm `as.data.frame.matrix()` của **base** R\
4)  Pipe bảng trên vào hàm `rownames_to_column()` của package **tibble**, ghi rõ tên cho cột đầu tiên\
5)  In, Xem hoặc xuất bảng như mong muốn. Trong ví dụ này, chúng ta sử dụng hàm `flextable()` từ package **flextable** như đã được mô tả trong chương [Trình bày bảng](tables_presentation.vn.qmd) Kết quả sẽ được in ra cửa sổ RStudio viewer dưới dạng một hình ảnh HTML đẹp.

```{r, warning=F, message=F}
table(fct_explicit_na(linelist$age_cat), fct_explicit_na(linelist$outcome)) %>% 
  addmargins() %>% 
  as.data.frame.matrix() %>% 
  tibble::rownames_to_column(var = "Age Category") %>% 
  flextable::flextable()
```

<!-- ======================================================= -->

## Nguồn

Phần lớn thông tin trong chương này được tham khảo từ các nguồn và bản tóm tắt trực tuyến dưới đây:

[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)

[dplyr](https://dplyr.tidyverse.org/articles/grouping.html)
