# Organisieren von Routineberichten {  }

Diese Seite behandelt die **reportfactory** Paket, das ein *Begleitung für die Verwendung von R Markdown für Berichte*.

In Szenarien, in denen du routinemäßig Berichte erstellst (täglich, wöchentlich usw.), erleichtert es die Zusammenstellung mehrerer R Markdown-Dateien und die Organisation ihrer Ergebnisse. Im Wesentlichen bietet es eine "Fabrik", von der aus du die R Markdown-Berichte ausführen kannst, automatisch Ordner mit Datums- und Zeitstempeln für die Ausgaben erhältst und eine "leichte" Versionskontrolle hast.

**reportfactory** ist eines der Pakete, die vom RECON (R Epidemics Consortium) entwickelt wurden. Hier ist ihr [Website](https://www.repidemicsconsortium.org/) und [Github](https://github.com/reconverse).

## Vorbereitung

### Pakete laden {.unnumbered}

Installieren Sie in RStudio die neueste Version der **reportfactory** Paket von Github.

Du kannst dies über die **pacman** Paket mit `p_load_current_gh()` was die Installation der neuesten Version von Github erzwingt. Gib die Zeichenkette "reconverse/reportfactory" ein, die die Github-Organisation (reconverse) und das Repository (reportfactory) angibt. Du kannst auch verwenden `install_github()` aus dem **remotes** Paket, als eine Alternative.

```{r, eval=FALSE}
# Install and load the latest version of the package from Github
pacman::p_load_current_gh("reconverse/reportfactory")
#remotes::install_github("reconverse/reportfactory") # alternative
```

## Neue Fabrik

Um eine neue Fabrik zu erstellen, führen Sie die Funktion `new_factory()`. Dadurch wird ein neuer, in sich geschlossener R-Projektordner erstellt. Standardmäßig:

- Die Factory wird zu deinem Arbeitsverzeichnis hinzugefügt
- Der Name des R-Projekts der Fabrik wird "new\_factory.Rproj" heißen.
- Deine RStudio-Sitzung wird in dieses R-Projekt "einziehen".

```{r, eval=F}
# This will create the factory in the working directory
new_factory()
```

Wenn du dir die Factory ansiehst, kannst du sehen, dass Unterordner und einige Dateien automatisch erstellt wurden.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_new2.png"))
```

- Die *report\_sources* werden deine R Markdown-Skripte gespeichert, die deine Berichte erstellen
- Der *Ausgaben* werden die Berichtsausgaben gespeichert (z.B. HTML, Word, PDF, etc.)
- Die *Skripte* kann verwendet werden, um andere R-Skripte zu speichern (z.B. solche, die von deinen Rmd-Skripten stammen)
- Der *Daten* kann für deine Daten verwendet werden (Unterordner "raw" und "clean" sind enthalten)
- A *.hier* Datei, damit du die **hier**Paket verwenden, um Dateien in Unterordnern über ihre Beziehung zu diesem Stammordner aufzurufen (siehe [R-Projekte] Seite für Details)
- A *gitignore*Datei wurde erstellt, falls du dieses R-Projekt mit einem Github-Repository verknüpfst (siehe [Versionskontrolle und Zusammenarbeit mit Github])
- Eine leere README-Datei, für den Fall, dass du ein Github-Repository verwendest

<span style="color: orange;">***VORSICHT!*** Je nach Einstellung deines Computers können Dateien wie ".here" zwar existieren, aber unsichtbar sein.</span>

Im Folgenden sind einige der Standardeinstellungen aufgeführt, die du vielleicht innerhalb der `new_factory()` Befehl:

- `factory = ` - Gib einen Namen für den Werksordner an (Standard ist "new\_factory")
- `path = ` - Gib einen Dateipfad für die neue Fabrik an (Standard ist das Arbeitsverzeichnis)
- `report_sources = ` Gib einen alternativen Namen für den Unterordner an, der die R Markdown-Skripte enthält (Standard ist "report\_sources")
- `outputs = ` Gib einen alternativen Namen für den Ordner an, der die Berichtsausgaben enthält (Standard ist "outputs")

Siehe `?new_factory` für eine vollständige Liste der Argumente.

Wenn du die neue Factory erstellst, wird deine R-Sitzung in das neue R-Projekt übertragen, daher solltest du erneut die **reportfactory** Paket laden.

```{r, eval=FALSE}
pacman::p_load(reportfactory)
```

Jetzt kannst du die `factory_overview()` Befehl ausführen, um die interne Struktur (alle Ordner und Dateien) in der Fabrik zu sehen.

```{r, eval=F}
factory_overview()            # print overview of the factory to console
```

Der folgende "Baum" mit den Ordnern und Dateien der Fabrik wird auf der R-Konsole ausgegeben. Beachte, dass es im Ordner "data" Unterordner für "raw" und "clean" Daten sowie für Beispiel-CSV-Daten gibt. Außerdem gibt es im Ordner "report\_sources" die Datei "example\_report.Rmd".

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_overview.png"))
```

## Einen Bericht erstellen

Erstelle im R-Fabrikprojekt einen R-Markdown-Bericht, wie du es normalerweise tun würdest, und speichere ihn im Ordner "report_sources". Siehe die [R Markdown][Berichte mit R Markdown] Seite für Anweisungen. Für das Beispiel haben wir der Factory Folgendes hinzugefügt:

- Ein neues R-Markdown-Skript mit dem Titel "daily\_sitrep.Rmd", das im Ordner "report\_sources" gespeichert ist
- Daten für den Bericht ("linelist\_cleaned.rds"), die im Unterordner "clean" im Ordner "data" gespeichert werden

Wir können sehen, dass die `factory_overview()` unser R Markdown im Ordner "report\_sources" und die Datendatei im Ordner "clean" data (hervorgehoben):

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_overview2.png"))
```

Unten siehst du einen Screenshot vom Anfang des R Markdowns "daily\_sitrep.Rmd". Du kannst sehen, dass das Ausgabeformat über den YAML-Header auf HTML eingestellt ist `output: html_document`.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_new_rmd.png"))
```

In diesem einfachen Skript gibt es Befehle für:

- die notwendigen Pakete zu laden
- Importiere die Linelist-Daten mit einem Dateipfad aus dem **hier**Paket (mehr dazu auf der Seite über [Import und Export])

```{r, eval=F}
linelist <- import(here("data", "clean", "linelist_cleaned.rds"))
```

- Drucke eine Übersichtstabelle der Fälle und exportiere sie mit `export()` als .csv-Datei
- Drucke eine Epikurve und exportiere sie mit `ggsave()` als .png-Datei

Mit diesem Befehl kannst du nur die Liste der R Markdown-Berichte im Ordner "report\_sources" überprüfen:

```{r, eval=F}
list_reports()
```

## Kompilieren

In einer Report Factory bedeutet das "Kompilieren" eines R Markdown-Berichts, dass das .Rmd-Skript ausgeführt und die Ausgabe erzeugt wird (wie im Skript YAML angegeben, z. B. als HTML, Word, PDF usw.).

*Die Factory erstellt automatisch einen mit Datum und Zeitstempel versehenen Ordner für die Ausgaben im Ordner "outputs".*

Der Bericht selbst und alle vom Skript erstellten Exportdateien (z. B. csv, png, xlsx) werden in diesem Ordner gespeichert. Außerdem wird das Rmd-Skript selbst in diesem Ordner gespeichert, damit du eine Aufzeichnung dieser Version des Skripts hast.

Dies steht im Gegensatz zum normalen Verhalten eines "gestrickten" R Markdown, bei dem die Ausgaben am Ort des Rmd-Skripts gespeichert werden. Dieses Standardverhalten kann zu überfüllten, unordentlichen Ordnern führen. Die Factory soll die Organisation verbessern, wenn man Berichte häufig ausführen muss.

### Nach Namen kompilieren {.unnumbered}

Du kannst einen bestimmten Bericht kompilieren, indem du `compile_reports()` und den Namen des Rmd-Skripts (ohne .Rmd-Erweiterung) an `reports = `. Der Einfachheit halber kannst du die `reports = ` weglassen und einfach den R Markdown-Namen in Anführungszeichen schreiben, wie unten.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_compile1.png"))
```

Dieser Befehl kompiliert nur den Bericht "daily\_sitrep.Rmd" und speichert den HTML-Bericht sowie die .csv-Tabelle und die .png-Epikurven-Exporte in einem mit Datum und Zeitstempel versehenen Unterordner im Ordner "outputs".

Wenn du die Endung .Rmd angibst, musst du die Endung so schreiben, wie sie im Dateinamen gespeichert ist (.rmd vs. .Rmd).

Beachte auch, dass beim Kompilieren vorübergehend mehrere Dateien im Ordner "report\_sources" erscheinen können - sie werden aber bald verschwinden, wenn sie in den richtigen Ordner "outputs" übertragen werden.

### Kompilieren nach Nummer {.unnumbered}

Du kannst das zu kompilierende Rmd-Skript auch angeben, indem du eine Zahl oder einen Vektor von Zahlen an `reports = `. Die Nummern müssen mit der Reihenfolge übereinstimmen, in der die Berichte erscheinen, wenn du die `list_reports()`.

```{r, eval=F}
# Compile the second and fourth Rmds in the "report_sources" folder
compile_reports(reports = c(2, 4))
```

### Kompiliere alle {.unnumbered}

Du kannst kompilieren *alle* R Markdown-Berichte im Ordner "report\_sources" zusammenstellen, indem du die `reports = ` Argument auf TRUE setzt.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_compile_all.png"))
```

### Kompilieren aus Unterordner {.unnumbered}

Du kannst Unterordner zum Ordner "report\_sources" hinzufügen. Um einen R Markdown-Bericht aus einem Unterordner auszuführen, gib einfach den Namen des Ordners an `subfolder = `. Im Folgenden findest du ein Beispiel für einen Rmd-Bericht, der sich in einem Unterordner von "report\_sources" befindet.

```{r, eval=F}
compile_reports(
     reports = "summary_for_partners.Rmd",
     subfolder = "for_partners")
```

Du kannst alle Rmd-Berichte innerhalb eines Unterordners kompilieren, indem du den Namen des Unterordners an `reports = ` mit einem Schrägstrich am Ende, wie unten.

```{r, eval=F}
compile_reports(reports = "for_partners/")
```

### Parametrisierung {.unnumbered}

Wie bereits auf der Seite über [Berichte mit R Markdown] beschrieben, kannst du Berichte mit bestimmten Parametern ausführen. Du kannst diese Parameter als Liste an`compile_reports()` über die `params = ` Argument übergeben. In diesem fiktiven Bericht gibt es zum Beispiel drei Parameter, die den R Markdown-Berichten übergeben werden.

```{r, eval=F}
compile_reports(
  reports = "daily_sitrep.Rmd",
  params = list(most_recent_data = TRUE,
                region = "NORTHERN",
                rates_denominator = 10000),
  subfolder = "regional"
)
```

### Verwendung einer "run-file" {.unnumbered}

Wenn du mehrere Berichte auszuführen hast, solltest du ein R-Skript erstellen, das alle Berichte enthält. `compile_reports()` Befehle enthält. Ein Benutzer kann einfach alle Befehle in diesem R-Skript ausführen und alle Berichte werden kompiliert. Du kannst diese "Run-Datei" im Ordner "Scripts" speichern.

## Ausgaben

Nachdem wir die Berichte ein paar Mal zusammengestellt haben, könnte der "Outputs"-Ordner wie folgt aussehen (Hervorhebungen zur Verdeutlichung hinzugefügt):

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_overview_all.png"))
```

- Innerhalb von "outputs" wurden für jeden Rmd-Bericht Unterordner erstellt
- Innerhalb dieser Ordner wurden weitere Unterordner für jede einzelne Kompilierung erstellt
  - Diese sind mit einem Datums- und Zeitstempel versehen ("2021-04-23\_T11-07-36" bedeutet 23. April 2021 um 11:07:36)
  - Du kannst das Format des Datums-/Zeitstempels bearbeiten. Siehe `?compile_reports`
- In jedem Datums-/Zeitstempel-Ordner wird die Berichtsausgabe (z. B. HTML, PDF, Word) zusammen mit dem Rmd-Skript (Versionskontrolle!) und allen anderen exportierten Dateien (z. B. table.csv, epidemic\_curve.png) gespeichert

Hier ist ein Blick in einen der Ordner mit Datums- und Zeitstempel für den Bericht "daily\_sitrep". Der Dateipfad ist zur Verdeutlichung gelb hervorgehoben.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_compile_folder.png"))
```

Zum Schluss folgt ein Screenshot der HTML-Berichtsausgabe.

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "factory_html.png"))
```

Du kannst `list_outputs()` um eine Liste der Ausgaben zu sehen.

## Sonstiges

### Stricken {.unnumbered}

Du kannst einen deiner R Markdown-Berichte immer noch "stricken", indem du auf die Schaltfläche "Stricken" drückst, wenn du möchtest. Wenn du dies tust, erscheinen die Ausgaben standardmäßig in dem Ordner, in dem die Rmd gespeichert ist - dem Ordner "report\_sources". In früheren Versionen von **reportfactory** wurde die Kompilierung verhindert, wenn sich im Ordner "report\_sources" Dateien befanden, die keine Rmd-Dateien waren, aber das ist jetzt nicht mehr der Fall. Du kannst `compile_reports()` ausführen und es wird kein Fehler auftreten.

### Skripte {.unnumbered}

Wir empfehlen dir, den Ordner "scripts" zu verwenden, um "runfiles" oder .R-Skripte zu speichern, die von deinen .Rmd-Skripten stammen. Siehe die Seite über [R Markdown][Berichte mit R Markdown] findest du Tipps, wie du deinen Code über mehrere Dateien hinweg strukturieren kannst.

### Extras {.unnumbered}

- Mit **reportfactory** kannst du die Funktion `list_deps()` verwenden, um alle Pakete aufzulisten, die für alle Berichte in der gesamten Fabrik benötigt werden.

- In der Entwicklung befindet sich ein Begleitpaket namens **rfextras** das weitere Hilfsfunktionen bietet, die dich bei der Erstellung von Berichten unterstützen, wie z. B:
  
  - `load_scripts()` - sources/loadet alle .R-Skripte in einem bestimmten Ordner (standardmäßig der Ordner "scripts")
  - `find_latest()` - findet die neueste Version einer Datei (z. B. den neuesten Datensatz)

<!-- ======================================================= -->

## Ressourcen {  }

Siehe die **reportfactory** des Pakets [Github-Seite](https://github.com/reconverse/reportfactory)

Siehe die **rfextras** des Pakets [Github-Seite](https://github.com/reconhub/rfextras)


