# Interaktive Diagramme { }

Die Visualisierung von Daten muss für das Publikum zunehmend abfragbar sein. Daher ist es üblich, interaktive Diagramme zu erstellen. Es gibt verschiedene Möglichkeiten, diese einzubinden, aber die beiden häufigsten sind **Plotly** und **glänzend**.

Auf dieser Seite konzentrieren wir uns auf die Umwandlung einer bestehenden `ggplot()` Plots in einen interaktiven Plot mit **plotly**. Du kannst mehr darüber lesen **glänzend**in den [Dashboards mit Shiny] Seite. Erwähnenswert ist, dass interaktive Diagramme nur in R-Markdown-Dokumenten im HTML-Format verwendet werden können, nicht in PDF- oder Word-Dokumenten.

Nachfolgend siehst du eine einfache Epikurve, die durch die Integration von R interaktiv gemacht wurde. **ggplot2** und **plotly** (fahre mit der Maus über das Diagramm, zoome hinein oder klicke auf Elemente in der Legende).

```{r plotly_demo, out.width=c("75%"), out.height=c("500px"), echo=F, warning=F, message=F}
pacman::p_load(plotly, rio, here, ggplot2, dplyr, lubridate)
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

## these buttons are superfluous/distracting
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- linelist %>% 
  mutate(outcome = if_else(is.na(outcome), "Unknown", outcome),
         date_earliest = if_else(is.na(date_infection), date_onset, date_infection),
         week_earliest = floor_date(date_earliest, unit = "week",week_start = 1))%>% 
  count(week_earliest, outcome) %>% 
  ggplot()+
  geom_col(aes(week_earliest, n, fill = outcome))+
  xlab("Week of infection/onset") + ylab("Cases per week")+
  theme_minimal()

p %>% 
  ggplotly() %>% 
  partial_bundle() %>% 
  config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)

```

<!-- ======================================================= -->

## Vorbereitung {  }

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,       # import/export
  here,      # filepaths
  lubridate, # working with dates
  plotly,    # interactive plots
  scales,    # quick percents
  tidyverse  # data management and visualization
  ) 
```

### Beginne mit einer `ggplot()` {.unnumbered}

Auf dieser Seite gehen wir davon aus, dass du mit einer `ggplot()` Diagramm beginnst, das du in ein interaktives Diagramm umwandeln möchtest. Wir werden auf dieser Seite mehrere dieser Diagramme erstellen, indem wir den Fall `linelist` der auf vielen Seiten dieses Handbuchs verwendet wird.

### Daten importieren {.unnumbered}

Zunächst importieren wir die bereinigte Liste der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Liste herunterzuladen</a> (als .rds-Datei). Importiere Daten mit dem `import()` Funktion aus der **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import case linelist 
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<!-- ======================================================= -->

## Plot mit `ggplotly()` {  }

Die Funktion `ggplotly()` aus dem **plotly** Paket macht es einfach, eine `ggplot()` interaktiv zu machen. Speichere einfach deine `ggplot()` und leite es dann über die Pipe an die `ggplotly()` Funktion.

Unten stellen wir eine einfache Linie dar, die den Anteil der Fälle zeigt, die in einer bestimmten Woche gestorben sind:

Zunächst erstellen wir einen zusammenfassenden Datensatz für jede epidemiologische Woche und den Prozentsatz der Fälle mit bekanntem Ausgang, die gestorben sind.

```{r}
weekly_deaths <- linelist %>%
  group_by(epiweek = floor_date(date_onset, "week")) %>%  # create and group data by epiweek column
  summarise(                                              # create new summary data frame:
    n_known_outcome = sum(!is.na(outcome), na.rm=T),      # number of cases per group with known outcome
    n_death  = sum(outcome == "Death", na.rm=T),          # number of cases per group who died
    pct_death = 100*(n_death / n_known_outcome)           # percent of cases with known outcome who died
  )
```

Hier sind die ersten 50 Zeilen des `weekly_deaths` Datensatzes.

```{r, message=FALSE, echo=F}
DT::datatable(head(weekly_deaths, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Dann erstellen wir das Diagramm mit **ggplot2** und verwenden `geom_line()`.

```{r, warning=F, message=F}
deaths_plot <- ggplot(data = weekly_deaths)+            # begin with weekly deaths data
  geom_line(mapping = aes(x = epiweek, y = pct_death))  # make line 

deaths_plot   # print
```

Wir können dies interaktiv machen, indem wir diesen Plot einfach an `ggplotly()` übergeben, wie unten gezeigt. Bewege deine Maus über die Linie, um die x- und y-Werte anzuzeigen. Du kannst das Diagramm zoomen und es verschieben. Außerdem siehst du oben rechts im Diagramm Symbole. Mit ihnen kannst du in der Reihenfolge:

- Die aktuelle Ansicht als PNG-Bild herunterladen
- Vergrößern mit einer Auswahlbox
- "Schwenken" oder Bewegen über das Diagramm durch Klicken und Ziehen des Diagramms
- Vergrößern, verkleinern oder zum Standardzoom zurückkehren
- Achsen auf Standardwerte zurücksetzen
- "Spike-Linien" ein-/ausschalten, d.h. gepunktete Linien, die sich vom interaktiven Punkt bis zur x- und y-Achse erstrecken
- Einstellen, ob Daten angezeigt werden, wenn du den Mauszeiger nicht über die Linie bewegst

```{r}
deaths_plot %>% plotly::ggplotly()
```

Gruppierte Daten arbeiten mit `ggplotly()` ebenfalls. Unten wird eine wöchentliche Epikurve erstellt, die nach Ergebnissen gruppiert ist. Die gestapelten Balken sind interaktiv. Versuche, auf die verschiedenen Elemente in der Legende zu klicken (sie erscheinen/verschwinden dann).

```{r plot_show, eval=F}
# Make epidemic curve with incidence2 pacakge
p <- incidence2::incidence(
  linelist,
  date_index = date_onset,
  interval = "weeks",
  groups = outcome) %>% plot(fill = outcome)
```

```{r, echo=T, eval=F}
# Plot interactively  
p %>% plotly::ggplotly()
```

```{r, warning=F, message=F, out.width=c("95%"), out.height=c("500px"), echo=FALSE}
p %>% 
  ggplotly() %>% 
  partial_bundle() 
```

<!-- ======================================================= -->

## Änderungen {  }

### Dateigröße {.unnumbered}

Beim Export in ein von R Markdown generiertes HTML (wie in diesem Buch!) möchtest du die Datengröße des Plots so gering wie möglich halten (in den meisten Fällen ohne negative Nebeneffekte). Dazu leitest du den interaktiven Plot einfach nach `partial_bundle()`, auch von **plotly**.

```{r plot_tidyshow, eval=F}
p <- p %>% 
  plotly::ggplotly() %>%
  plotly::partial_bundle()
```

### Buttons {.unnumbered}

Einige der Schaltflächen in einem Standard-Plotly sind überflüssig und können ablenken, deshalb kannst du sie entfernen. Das kannst du ganz einfach tun, indem du die Ausgabe in `config()` von **plotly** und geben an, welche Schaltflächen entfernt werden sollen. Im folgenden Beispiel geben wir im Voraus die Namen der zu entfernenden Schaltflächen an und übergeben sie an das Argument `modeBarButtonsToRemove = `. Wir setzen auch `displaylogo = FALSE` um das Plotly-Logo zu entfernen.

```{r plot_tidyshow2, eval=F}
## these buttons are distracting and we want to remove them
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- p %>%          # re-define interactive plot without these buttons
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```

<!-- ======================================================= -->

## Wärmekacheln {  }

Du kannst fast jede `ggplot()`Plot interaktiv machen, einschließlich Wärmekacheln. Auf der Seite über [Wärmeplots] kannst du nachlesen, wie du die folgende Grafik erstellst, die den Anteil der Tage pro Woche anzeigt, an denen bestimmte Einrichtungen Daten an ihre Provinz gemeldet haben.

Hier ist der Code, den wir an dieser Stelle nicht näher beschreiben werden.

```{r, message=F, warning=F}
# import data
facility_count_data <- rio::import(here::here("data", "malaria_facility_count_data.rds"))

# aggregate data into Weeks for Spring district
agg_weeks <- facility_count_data %>% 
  filter(District == "Spring",
         data_date < as.Date("2020-08-01")) %>% 
  mutate(week = aweek::date2week(
    data_date,
    start_date = "Monday",
    floor_day = TRUE,
    factor = TRUE)) %>% 
  group_by(location_name, week, .drop = F) %>%
  summarise(
    n_days          = 7,
    n_reports       = n(),
    malaria_tot     = sum(malaria_tot, na.rm = T),
    n_days_reported = length(unique(data_date)),
    p_days_reported = round(100*(n_days_reported / n_days))) %>% 
  ungroup(location_name, week) %>% 
  right_join(tidyr::expand(., week, location_name)) %>% 
  mutate(week = aweek::week2date(week))

# create plot
metrics_plot <- ggplot(agg_weeks,
       aes(x = week,
           y = location_name,
           fill = p_days_reported))+
  geom_tile(colour="white")+
  scale_fill_gradient(low = "orange", high = "darkgreen", na.value = "grey80")+
  scale_x_date(expand = c(0,0),
               date_breaks = "2 weeks",
               date_labels = "%d\n%b")+
  theme_minimal()+ 
  theme(
    legend.title = element_text(size=12, face="bold"),
    legend.text  = element_text(size=10, face="bold"),
    legend.key.height = grid::unit(1,"cm"),
    legend.key.width  = grid::unit(0.6,"cm"),
    axis.text.x = element_text(size=12),
    axis.text.y = element_text(vjust=0.2),
    axis.ticks = element_line(size=0.4),
    axis.title = element_text(size=12, face="bold"),
    plot.title = element_text(hjust=0,size=14,face="bold"),
    plot.caption = element_text(hjust = 0, face = "italic")
    )+
  labs(x = "Week",
       y = "Facility name",
       fill = "Reporting\nperformance (%)",
       title = "Percent of days per week that facility reported data",
       subtitle = "District health facilities, April-May 2019",
       caption = "7-day weeks beginning on Mondays.")

metrics_plot # print
```

Im Folgenden machen wir ihn interaktiv und passen ihn für einfache Schaltflächen und die Dateigröße an.

```{r, out.width=c("95%"), out.height=c("500px")}
metrics_plot %>% 
  plotly::ggplotly() %>% 
  plotly::partial_bundle() %>% 
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```

<!-- ## Karten {.unnumbered} -->

<!-- Du kannst auch `ggplot()` GIS-Karten interaktiv machen, obwohl das ein bisschen mehr Sorgfalt erfordert.  -->

<!-- DIESER ABSCHNITT IST NOCH IN ARBEIT -->

<!-- Obwohl **plotly** mit `ggplot2::geom_sf` in RStudio gut funktioniert, funktioniert es nicht gut, wenn du versuchst, seine Ausgaben in R Markdown HTML-Dateien einzubinden (wie dieses Buch).   -->

<!-- Stattdessen kannst du die eigenen Mapping-Tools von {**plotly**} verwenden, die zwar knifflig sein können, aber einfach sind, wenn du weißt, wie es geht. Lies weiter...   -->

<!-- GeoJSON-Dateien werden in R als komplexe Listen gespeichert und du musst sie ein wenig maipulieren. -->

<!-- ```{r, echo=T,} -->

<!-- ## Du brauchst zwei neue Pakete: {rjson} und {purrr} -->

<!-- pacman::p_load(plotly, rjson, purrr) -->

<!-- ## Dies ist eine vereinfachte Version der WHO-Daten -->

<!-- df <- rio::import(hier::hier("data", "gis", "covid_incidence.csv")) -->

<!-- ## Lade deine geojson-Datei -->

<!-- geoJSON <- rjson::fromJSON(file=here::here("data", "gis", "africa_countries.geo.json")) -->

<!-- ## Hier sind einige der Eigenschaften für jedes Element des Objekts -->

<!-- ``` -->

<!-- Das ist der knifflige Teil. Damit {**plotly**} deine Inzidenzdaten mit dem GeoJSON abgleichen kann, brauchen die Länder im GeoJSON eine Id an einer bestimmten Stelle in der Liste der Listen. Dafür müssen wir eine grundlegende Funktion erstellen: -->

<!-- ```{r} -->

<!-- ## Die Eigenschaftsspalte, die wir hier auswählen müssen, ist "sovereignt", da sie die Namen für jedes Land enthält -->

<!-- give_id <- function(x){ -->

<!-- x$id <- x$properties$sovereignt ## Nimm sovereignt aus properties und setze es als id -->

<!-- return(x) -->

<!-- } -->

<!-- ## Verwende {purrr}, um diese Funktion auf jedes Element der Merkmalsliste des geoJSON-Objekts anzuwenden -->

<!-- geoJSON$features <- purrr::map(.x = geoJSON$features, give_id) -->

<!-- ``` -->

<!-- <!-- ======================================================= --> -->

<!-- ### Maps - plot { } -->

<!-- IM AUFBAU -->

<!-- ```{r, echo=FALSE, eval=FALSE, out.width=c('95%'), out.height=c('500px'),warning=F} -->

<!-- plotly::plot_ly() %>% -->

<!-- plotly::add_trace( #Die wichtigste Plot-Mapping-Funktionn -->

<!-- type="choropleth", -->

<!-- geojson=geoJSON, -->

<!-- locations=df$Name, #Die Spalte mit den Namen (muss id entsprechen) -->

<!-- z=df$Cumulative_incidence, #Die Spalte mit den Inzidenzwerten -->

<!-- zmin=0, -->

<!-- zmax=57008, -->

<!-- colorscale="Viridis", -->

<!-- marker=list(line=list(width=0)) -->

<!-- ) %>% -->

<!-- colorbar(title = "Cases per million") %>% -->

<!-- layout(title = "Covid-19 kumulative Inzidenz", -->

<!-- geo = list(scope = 'africa')) %>% -->

<!-- config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove) -->

<!-- ``` -->

<!-- ======================================================= -->

## Ressourcen {  }

Plotly ist nicht nur für R geeignet, sondern funktioniert auch gut mit Python (und eigentlich mit jeder anderen Data-Science-Sprache, da es in JavaScript geschrieben ist). Du kannst mehr darüber auf der [Plotly-Website](https://plotly.com/r/)


