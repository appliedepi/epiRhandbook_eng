# Einfache statistische Tests { }

Auf dieser Seite wird gezeigt, wie man einfache statistische Tests durchführt. **Basis** R, **rstatix** und **gtsummary**.

- T-Test
- Shapiro-Wilk-Test
- Wilcoxon-Rangsummentest
- Kruskal-Wallis-Test
- Chi-Quadrat-Test
- Korrelationen zwischen numerischen Variablen

...es können noch viele andere Tests durchgeführt werden, aber wir stellen nur diese gängigen Tests vor und verlinken auf weiterführende Dokumentation.

Jedes der oben genannten Pakete bringt bestimmte Vor- und Nachteile mit sich:

- Nutze **Basis** R-Funktionen, um eine statistische Ausgabe auf der R-Konsole zu drucken
- verwenden **rstatix** Funktionen, um die Ergebnisse in einem Datenrahmen zurückzuliefern, oder wenn du die Tests nach Gruppen durchführen willst
- Verwende **gtsummary** wenn du schnell veröffentlichungsreife Tabellen drucken willst

<!-- ======================================================= -->

## Vorbereitung {  }

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,          # File import
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics, 
  gtsummary,    # summary statistics and tests
  rstatix,      # statistics
  corrr,        # correlation analayis for numeric variables
  janitor,      # adding totals and percents to tables
  flextable     # converting tables to HTML
  )
```

### Daten importieren {.unnumbered}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere deine Daten mit der `import()` Funktion aus der **rio**Paket (sie akzeptiert viele Dateitypen wie .xlsx, .rds, .csv - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## **Basis** R {}

Du kannst verwenden **Basis** R-Funktionen verwenden, um statistische Tests durchzuführen. Die Befehle sind relativ einfach und die Ergebnisse werden in die R-Konsole gedruckt, damit du sie einfach betrachten kannst. Allerdings handelt es sich bei den Ausgaben in der Regel um Listen, die schwieriger zu bearbeiten sind, wenn du die Ergebnisse in späteren Operationen verwenden willst.

### T-Tests {.unnumbered}

A [t-test](https://en.wikipedia.org/wiki/Student%27s_t-test) auch "Student's t-Test" genannt, wird normalerweise verwendet, um festzustellen, ob ein signifikanter Unterschied zwischen den Mittelwerten einer numerischen Variable zwischen zwei Gruppen besteht. Hier zeigen wir dir die Syntax, mit der du diesen Test durchführen kannst, je nachdem, ob sich die Spalten im selben Datenrahmen befinden.

**Syntax 1:** Dies ist die Syntax, wenn sich deine numerischen und kategorialen Spalten im selben Datenrahmen befinden. Gib die numerische Spalte auf der linken Seite der Gleichung an und die kategoriale Spalte auf der rechten Seite. Bestimme den Datensatz für `data = `. Optional kannst du festlegen `paired = TRUE`, und `conf.level = ` (Standardwert 0,95), und `alternative = ` (entweder "zweiseitig", "kleiner" oder "größer"). Gib  ein. `?t.test` für weitere Details ein.

```{r}
## compare mean age by outcome group with a t-test
t.test(age_years ~ gender, data = linelist)
```

**Syntax 2:** Mit dieser alternativen Syntax kannst du zwei separate numerische Vektoren vergleichen. Zum Beispiel, wenn die beiden Spalten in verschiedenen Datensätzen sind.

```{r, eval=F}
t.test(df1$age_years, df2$age_years)
```

Du kannst auch einen t-Test verwenden, um festzustellen, ob sich ein Stichprobenmittelwert signifikant von einem bestimmten Wert unterscheidet. Hier führen wir einen t-Test für eine Stichprobe mit dem bekannten/hypothetischen Mittelwert der Grundgesamtheit als `mu = `:

```{r, eval=F}
t.test(linelist$age_years, mu = 45)
```

### Shapiro-Wilk-Test {.unnumbered}

Die [Shapiro-Wilk-Test](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test) kann verwendet werden, um festzustellen, ob eine Stichprobe aus einer normalverteilten Grundgesamtheit stammt (eine Annahme vieler anderer Tests und Analysen, wie z. B. des t-Tests). Er kann jedoch nur bei einer Stichprobe mit 3 bis 5000 Beobachtungen angewendet werden. Bei größeren Stichproben kann ein [Quantil-Quantil-Diagramm](https://ggplot2.tidyverse.org/reference/geom_qq.html) hilfreich sein.

```{r, eval=F}
shapiro.test(linelist$age_years)
```

### Wilcoxon-Rangsummentest {.unnumbered}

Der Wilcoxon-Rangsummentest, auch als [Mann-Whitney U-Test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test) Der Wilcoxon-Rangsummentest, auch Mann-Whitney-U-Test genannt, wird häufig verwendet, um festzustellen, ob zwei numerische Stichproben aus derselben Verteilung stammen, wenn ihre Grundgesamtheiten nicht normal verteilt sind oder eine ungleiche Varianz aufweisen.

```{r wilcox_base}

## compare age distribution by outcome group with a wilcox test
wilcox.test(age_years ~ outcome, data = linelist)

```

### Kruskal-Wallis-Test {.unnumbered}

Der [Kruskal-Wallis-Test](https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance) ist eine Erweiterung des Wilcoxon-Rangsummentests, mit dem auf Unterschiede in der Verteilung von mehr als zwei Stichproben getestet werden kann. Wenn nur zwei Stichproben verwendet werden, liefert er die gleichen Ergebnisse wie der Wilcoxon-Rangsummentest.

```{r}

## compare age distribution by outcome group with a kruskal-wallis test
kruskal.test(age_years ~ outcome, linelist)

```

### Chi-Quadrat-Test {.unnumbered}

[Pearson's Chi-Quadrat-Test](https://en.wikipedia.org/wiki/Chi-squared_test) wird zum Testen auf signifikante Unterschiede zwischen kategorialen Gruppen verwendet.

```{r}

## compare the proportions in each group with a chi-squared test
chisq.test(linelist$gender, linelist$outcome)

```

## **rstatix** Paket {}

Die **rstatix** Paket bietet die Möglichkeit, statistische Tests durchzuführen und die Ergebnisse in einem "pipe-freundlichen" Rahmen abzurufen. Die Ergebnisse werden automatisch in einem Datenrahmen gespeichert, so dass du spätere Operationen mit den Ergebnissen durchführen kannst. Es ist auch einfach, die Daten, die an die Funktionen übergeben werden, zu gruppieren, sodass die Statistiken für jede Gruppe ausgeführt werden.

### Zusammenfassende Statistiken {.unnumbered}

Die Funktion `get_summary_stats()` ist eine schnelle Methode, um zusammenfassende Statistiken zu erstellen. Gib einfach deinen Datensatz über die Pipeline an diese Funktion weiter und gib die zu analysierenden Spalten an. Wenn keine Spalten angegeben werden, wird die Statistik für alle Spalten berechnet.

Standardmäßig wird eine ganze Reihe von zusammenfassenden Statistiken zurückgegeben: n, max, min, Median, 25 %-Pile, 75 %-Pile, IQR, absolute Medianabweichung (mad), Mittelwert, Standardabweichung, Standardfehler und ein Konfidenzintervall für den Mittelwert.

```{r}
linelist %>%
  rstatix::get_summary_stats(age, temp)
```

Du kannst eine Teilmenge der zurückgegebenen Statistiken angeben, indem du einen der folgenden Werte für `type = `: "full", "common", "robust", "five\_number", "mean\_sd", "mean\_se", "mean\_ci", "median\_iqr", "median\_mad", "quantile", "mean", "median", "min", "max".

Sie kann auch mit gruppierten Daten verwendet werden, sodass für jede Gruppierungsvariable eine Zeile zurückgegeben wird:

```{r}
linelist %>%
  group_by(hospital) %>%
  rstatix::get_summary_stats(age, temp, type = "common")
```

Du kannst auch Folgendes verwenden **rstatix** verwenden, um statistische Tests durchzuführen:

### T-Test {.unnumbered}

Verwende eine Formelsyntax, um die numerischen und kategorischen Spalten anzugeben:

```{r}
linelist %>% 
  t_test(age_years ~ gender)
```

Oder verwende `~ 1` und gib an `mu = ` für einen T-Test mit einer Stichprobe. Dies kann auch nach Gruppen erfolgen.

```{r}
linelist %>% 
  t_test(age_years ~ 1, mu = 30)
```

Falls zutreffend, können die statistischen Tests nach Gruppen durchgeführt werden, wie unten gezeigt:

```{r}
linelist %>% 
  group_by(gender) %>% 
  t_test(age_years ~ 1, mu = 18)
```

### Shapiro-Wilk-Test {.unnumbered}

Wie oben erwähnt, muss die Stichprobengröße zwischen 3 und 5000 liegen.

```{r}
linelist %>% 
  head(500) %>%            # first 500 rows of case linelist, for example only
  shapiro_test(age_years)
```

### Wilcoxon-Rangsummentest {.unnumbered}

```{r}
linelist %>% 
  wilcox_test(age_years ~ gender)
```

### Kruskal-Wallis-Test {.unnumbered}

Auch bekannt als Mann-Whitney-U-Test.

```{r}
linelist %>% 
  kruskal_test(age_years ~ outcome)
```

### Chi-Quadrat-Test {.unnumbered}

Die Chi-Quadrat-Testfunktion akzeptiert eine Tabelle, also erstellen wir zunächst eine Kreuztabelle. Es gibt viele Möglichkeiten, eine Kreuztabelle zu erstellen (siehe [Beschreibende Tabellen]), aber hier verwenden wir`tabyl()` von **Hausmeister** und entferne die linke Spalte der Wertelabels, bevor du sie an `chisq_test()`.

```{r}
linelist %>% 
  tabyl(gender, outcome) %>% 
  select(-1) %>% 
  chisq_test()

```

Viele, viele weitere Funktionen und statistische Tests können mit **rstatix** Funktionen durchgeführt werden. Siehe die Dokumentation für **rstatix** [hier online](https://github.com/kassambara/rstatix) oder indem du ?rstatix eingibst.

## `gtsummary` Paket {#stats\_gt}

Verwende **gtsummary** wenn du die Ergebnisse eines statistischen Tests zu einer hübschen Tabelle hinzufügen möchtest, die mit diesem Paket erstellt wurde (wie in der **gtsummary** Abschnitt des [Beschreibenden Tabellen](#tbl_gt) Seite).

Durchführung von statistischen Vergleichstests mit `tbl_summary` erfolgt durch Hinzufügen der
`add_p` Funktion zu einer Tabelle hinzufügt und angibt, welcher Test verwendet werden soll. Es ist möglich, für Mehrfachtests korrigierte p-Werte zu erhalten, indem du die Funktion
`add_q` Funktion. ausführen `?tbl_summary` für Details aus.

### Chi-Quadrat-Test {.unnumbered}

Vergleiche die Proportionen einer kategorialen Variable in zwei Gruppen. Der statistische Standardtest für `add_p()` auf eine kategoriale Variable wird ein Chi-Quadrat-Test auf Unabhängigkeit mit Stetigkeitskorrektur durchgeführt. Wenn die erwartete Anzahl der Anrufe unter 5 liegt, wird ein exakter Test von Fisher verwendet.

```{r chi_gt}
linelist %>% 
  select(gender, outcome) %>%    # keep variables of interest
  tbl_summary(by = outcome) %>%  # produce summary table and specify grouping variable
  add_p()                        # specify what test to perform
```

### T-Tests {.unnumbered}

Vergleiche die Differenz der Mittelwerte einer kontinuierlichen Variable in zwei Gruppen.
Vergleiche z.B. das Durchschnittsalter nach Patientenergebnis.

```{r ttest_gt}

linelist %>% 
  select(age_years, outcome) %>%             # keep variables of interest
  tbl_summary(                               # produce summary table
    statistic = age_years ~ "{mean} ({sd})", # specify what statistics to show
    by = outcome) %>%                        # specify the grouping variable
  add_p(age_years ~ "t.test")                # specify what tests to perform


```

### Wilcoxon-Rangsummentest{.unnumbered}

Vergleiche die Verteilung einer kontinuierlichen Variable in zwei Gruppen. Der Standard
ist die Verwendung des Wilcoxon-Rangsummentests und des Medians (IQR) beim Vergleich zweier
Gruppen. Bei nicht-normalverteilten Daten oder beim Vergleich mehrerer Gruppen,
ist der Kruskal-Wallis-Test besser geeignet.

```{r wilcox_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # keep variables of interest
  tbl_summary(                                         # produce summary table
    statistic = age_years ~ "{median} ({p25}, {p75})", # specify what statistic to show (this is default so could remove)
    by = outcome) %>%                                  # specify the grouping variable
  add_p(age_years ~ "wilcox.test")                     # specify what test to perform (default so could leave brackets empty)


```

### Kruskal-Wallis-Test {.unnumbered}

Vergleiche die Verteilung einer kontinuierlichen Variable in zwei oder mehr Gruppen,
unabhängig davon, ob die Daten normal verteilt sind.

```{r kruskal_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # keep variables of interest
  tbl_summary(                                         # produce summary table
    statistic = age_years ~ "{median} ({p25}, {p75})", # specify what statistic to show (default, so could remove)
    by = outcome) %>%                                  # specify the grouping variable
  add_p(age_years ~ "kruskal.test")                    # specify what test to perform


```

<!-- ## `dplyr` Paket {} -->

<!-- Das Durchführen von statistischen Tests in `dplyr` allein ist sehr dicht, wiederum weil es -->

<!-- nicht in das tidy-data Framework passt. Es erfordert die Verwendung von `purrr`, um -->

<!-- Eine einfachere Alternative kann das Paket `rstatix` sein.  -->

<!-- ### T-Tests {.unnumbered} -->

<!-- ``{r ttest_dplyr} -->

<!-- linelist %>% -->

<!-- ## behalte nur Variablen von Interesse -->

<!-- select(Alter, Ergebnis) %>% -->

<!-- ## lass die fehlenden Ergebnisse weg -->

<!-- filter(!is.na(ergebnis)) %>% -->

<!-- ## gib die Gruppierungsvariable an -->

<!-- group_by(ergebnis) %>% -->

<!-- ## Erstelle eine Teilmenge der Daten für jede Gruppe (als Liste) -->

<!-- nest() %>% -->

<!-- ## in ein breites Format ausbreiten -->

<!-- pivot_wider(names_from = outcome, values_from = data) %>% -->

<!-- mutate( -->

<!-- ## Berechne das Durchschnittsalter für die Todesgruppe -->

<!-- Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)), -->

<!-- ## berechne den sd unter den Toten -->

<!-- Tod_sd = map(Tod, ~sd(.x$alter, na.rm = TRUE)), -->

<!-- ## berechne das Durchschnittsalter für die Gruppe der Genesenden -->

<!-- Erholen_mittel = map(Erholen, ~mittel(.x$Alter, na.rm = TRUE)), -->

<!-- ## berechne den sd unter den Erholten -->

<!-- Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)), -->

<!-- ## mit beiden gruppierten Datensätzen vergleiche das mittlere Alter mit einem t-Test -->

<!-- ## behalte nur den p.-Wert -->

<!-- t_test = map2(Tod, Erholen, ~t.test(.x$Alter, .y$Alter)$p.Wert) -->

<!-- ) %>% -->

<!-- ## drop datasets -->

<!-- select(-Death, -Recover) %>% -->

<!-- ## Rückgabe eines Datensatzes mit den Medianen und dem p.-Wert (drop missing) -->

<!-- unnest(spalten = alles()) -->

<!-- ``` -->

<!-- ### Wilcoxon-Rangsummentest {.unnumbered} -->

<!-- ```{r wilcox_dplyr} -->

<!-- linelist %>% -->

<!-- ## nur Variablen von Interesse behalten -->

<!-- select(Alter, Ergebnis) %>% -->

<!-- ## lass die fehlenden Ergebnisse weg -->

<!-- filter(!is.na(ergebnis)) %>% -->

<!-- ## gib die Gruppierungsvariable an -->

<!-- group_by(ergebnis) %>% -->

<!-- ## Erstelle eine Teilmenge der Daten für jede Gruppe (als Liste) -->

<!-- nest() %>% -->

<!-- ## auf ein breites Format ausbreiten -->

<!-- pivot_wider(names_from = outcome, values_from = data) %>% -->

<!-- mutate( -->

<!-- ## Berechne das Medianalter für die Todesgruppe -->

<!-- Tod_median = map(Tod, ~median(.x$alter, na.rm = TRUE)), -->

<!-- ## berechne den sd unter den Toten -->

<!-- Tod_iqr = map(Tod, ~str_c( -->

<!-- quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), -->

<!-- collapse = ", " -->

<!-- )), -->

<!-- ## Berechne das Medianalter für die Erholungsgruppe -->

<!-- Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), -->

<!-- ## berechne den sd unter den Erholten -->

<!-- Recover_iqr = map(Recover, ~str_c( -->

<!-- quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), -->

<!-- collapse = ", " -->

<!-- )), -->

<!-- ## mit beiden gruppierten Datensätzen die Altersverteilung mit einem Wilcox-Test vergleichen -->

<!-- ## behalte nur den p.Wert -->

<!-- wilcox = map2(Tod, Erholen, ~wilcox.test(.x$alter, .y$alter)$p.wert) -->

<!-- ) %>% -->

<!-- ## Drop Datasets -->

<!-- select(-Death, -Recover) %>% -->

<!-- ## Rückgabe eines Datensatzes mit den Medianen und dem p.-Wert (drop missing) -->

<!-- unnest(spalten = alles()) -->

<!-- ``` -->

<!-- ### Kruskal-wallis test {.unnumbered} -->

<!-- ```{r kruskal_dplyr} -->

<!-- linelist %>% -->

<!-- ## nur Variablen von Interesse behalten -->

<!-- select(Alter, Ergebnis) %>% -->

<!-- ## Lass die fehlenden Ergebnisse weg -->

<!-- filter(!is.na(ergebnis)) %>% -->

<!-- ## gib die Gruppierungsvariable an -->

<!-- group_by(ergebnis) %>% -->

<!-- ## Erstelle eine Teilmenge der Daten für jede Gruppe (als Liste) -->

<!-- nest() %>% -->

<!-- ## in ein breites Format ausbreiten -->

<!-- pivot_wider(names_from = outcome, values_from = data) %>% -->

<!-- mutate( -->

<!-- ## Berechne das Medianalter für die Todesgruppe -->

<!-- Tod_median = map(Tod, ~median(.x$alter, na.rm = TRUE)), -->

<!-- ## berechne den sd unter den Toten -->

<!-- Tod_iqr = map(Tod, ~str_c( -->

<!-- quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), -->

<!-- collapse = ", " -->

<!-- )), -->

<!-- ## Berechne das Medianalter für die Erholungsgruppe -->

<!-- Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)), -->

<!-- ## Berechne den sd unter den Erholten -->

<!-- Recover_iqr = map(Recover, ~str_c( -->

<!-- quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE), -->

<!-- collapse = ", " -->

<!-- )), -->

<!-- ## mit dem ursprünglichen Datensatz die Altersverteilung mit einem Kruskal-Test vergleichen -->

<!-- ## behalte nur den p.Wert -->

<!-- kruskal = kruskal.test(linelist$Alter, linelist$Ergebnis)$p.Wert -->

<!-- ) %>% -->

<!-- ## Datensätze fallen lassen -->

<!-- select(-Death, -Recover) %>% -->

<!-- ## Rückgabe eines Datensatzes mit den Medianen und dem p.-Wert (drop missing) -->

<!-- unnest(spalten = alles()) -->

<!-- ``` -->

<!-- ### Chi-Quadrat-Test {.unnumbered} -->

<!-- ```{r} -->

<!-- linelist %>% -->

<!-- ## alles nach Geschlecht tun -->

<!-- group_by(outcome) %>% -->

<!-- ## zähle die Variable von Interesse -->

<!-- count(gender) %>% -->

<!-- ## Anteil berechnen -->

<!-- ## beachte, dass der Nenner hier die Summe der einzelnen Geschlechter ist --> -->

<!-- mutate(percentage = n / sum(n) * 100) %>% -->

<!-- pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>% -->

<!-- filter(!is.na(gender)) %>% -->

<!-- mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value) -->

<!-- ``` -->

<!-- ======================================================= -->

## Korrelationen

Die Korrelation zwischen numerischen Variablen kann mit der **tidyverse**  
**corrr** Paket. Es ermöglicht die Berechnung von Korrelationen nach Pearson, Kendall
tau oder Spearman rho berechnen. Das Paket erstellt eine Tabelle und hat auch eine Funktion, um
um die Werte automatisch darzustellen.

```{r, warning=F, message=F}

correlation_tab <- linelist %>% 
  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # keep numeric variables of interest
  correlate()      # create correlation table (using default pearson)

correlation_tab    # print

## remove duplicate entries (the table above is mirrored) 
correlation_tab <- correlation_tab %>% 
  shave()

## view correlation table 
correlation_tab

## plot correlations 
rplot(correlation_tab)
```

<!-- ======================================================= -->

## Ressourcen {  }

Ein Großteil der Informationen auf dieser Seite wurde aus diesen Ressourcen und Vignetten online übernommen:

[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)
[dplyr](https://dplyr.tidyverse.org/articles/grouping.html)
[corrr](https://corrr.tidymodels.org/articles/using-corrr.html)
[sthda-Korrelation](http://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r)


