
# Стандартизированные коэффициенты { }  

На этой странице мы покажем два способа стандартизировать исход, например, госпитализации или смертность, по таким характеристикам как возраст и пол. 

* Используя пакет **dsr** 
* Используя пакет **PHEindicatormethods**  

Мы начнем с подробной демонстрации процесса подготовки/вычистки/соединения данных, так как это часто требуется при объединении популяционных данных из разных стран, данных о стандартном населении, смертях и т.п.  

## Обзор  

Существует два основных способа стандартиации: прямая и косвенная стандартизация
Представим, что вам нужно стандартизировать коэффициент смертности по возрасту и полу для страны A и страны B, а также сравнить стандартизированные коэффициенты между этими странами.

* Для прямой стандартизации необходимо знать численность населения, подверженного риску, и количество смертей для каждой половозрастной страты в стране А и стране Б. Одной из страт в нашем примере могут быть женщины в возрасте 15-44 лет.  
* Для косвенной стандартизации достаточно знать общее число умерших и половозрастную структуру населения каждой страны. Поэтому этот вариант возможен, если отсутствуют возрастные и половые коэффициенты смертности или численность населения. Кроме того, косвенная стандартизация предпочтительна в случае небольшого числа страт, так как на оценки при прямой стандартизации будет влиять значительный разброс выборки. 

<!-- ======================================================= -->
## Подготовка {  }

Чтобы показать, как проводится стандартизация, мы будем использовать фиктивные данные о численности населения и смертности в странах А и Б с разбивкой по возрасту (в категориях 5 лет) и полу (женщины, мужчины). Чтобы подготовить наборы данных к использованию, выполним следующие подготовительные действия:  

1. Загрузим пакеты  
2. Загрузим наборы данных  
3. Соединим данные по населению и смертям по двум странам
4. Повернем вертикально, чтобы была одна строка на половозрастную страту
5. Вычистим референтную популяцию (мировое стандартное население) и присоединим ее к страновым данным  

В вашем сценарии данные могут быть представлены в другом формате. Возможно, данные представлены по провинциям, городам или другим районам. У вас может быть одна строка для каждого случая смерти и информация о возрасте и поле для каждого (или значительной части) из этих случаев смерти. В таком случае, см. страницы [Группирование данных](grouping.ru.qmd), [Поворот данных](pivoting.ru.qmd) и [Описательные таблицы](tables_descriptive.ru.qmd), чтобы создать набор данных с подсчетом событий и населения по половозрастным стратам.  

Нам также нужна референтная популяция, стандартное население. В этом упражнении мы будет использовать `world_standard_population_by_sex`. Мировое стандартное население основано на населении 46 стран и было разработано в 1960. Существует много "стандартных" популяций - в качестве примера см. веб-сайт [Медицинской службы Шотландии](https://www.opendata.nhs.scot/dataset/standard-populations), который является очень информативным в вопросах Европейского стандартного населения, Мирового стандартного населения и Стандартного населения Шотландии. 

<!-- ======================================================= -->
### Загрузка пакетов {.unnumbered}

Данный фрагмент кода показывает загрузку пакетов, необходимых для анализа. В данном руководстве мы фокусируемся на использовании `p_load()` из пакета **pacman**, которая устанавливает пакет, если необходимо, *и* загружает его для использования. Вы можете также загрузить установленные пакеты с помощью `library()` из **базового** R. См. страницу [Основы R](basics.ru.qmd) для получения дополнительной информации о пакетах R.  

```{r}
pacman::p_load(
     rio,                 # импорт/экспорт данных
     here,                # путь к файлам
     stringr,             # вычистка текста и последовательностей
     frailtypack,         # необходим для dsr, для моделей, учитывающих индивидуальную уязвимость
     dsr,                 # стандартизированные коэффициенты
     PHEindicatormethods, # альтернатива для стандартизации коэффициентов
     tidyverse)           # управление данными и визуализация
```


<span style="color: orange;">**_ВНИМАНИЕ:_** Если у вас более новая версия R, пакет **dsr** нельзя напрямую скачать с CRAN. Однако он все еще доступен в архиве CRAN. Вы можете установить и использовать этот. </span>

Дляф всех пользователей, кроме Mac:  

```{r, eval=F} 
packageurl <- "https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
```

```{r, eval=FALSE}
# другое решение, которое может сработать
require(devtools)
devtools::install_version("dsr", version="0.2.2", repos="http:/cran.us.r.project.org")
```

Для пользователей Mac:  

```{r, eval=FALSE}
require(devtools)
devtools::install_version("dsr", version="0.2.2", repos="https://mac.R-project.org")
```




### Загружаем популяционные данные {.unnumbered}  

Для получения инструкций о том, как скачать все данные для примеров из руководства см. страницу [Скачивание руководства и данных]. Вы можете импортировать данные для страницы Стандартизация напрямую в R из нашего репозитория Github, выполнив следующие команды `import()`:  

```{r, eval=F}
# импорт демографических данных по стране A напрямую из Github
A_demo <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/standardization/country_demographics.csv")

# импорт данных о смертях для страны A напрямую из Github
A_deaths <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/standardization/deaths_countryA.csv")

# импорт демографических данных по стране B напрямую из Github
B_demo <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/standardization/country_demographics_2.csv")

# импорт данных о смертях для страны B напрямую из Github
B_deaths <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/standardization/deaths_countryB.csv")

# импорт демографических данных по стране B напрямую из Github
standard_pop_data <- import("https://github.com/appliedepi/epirhandbook_eng/raw/master/data/standardization/world_standard_population_by_sex.csv")

```


Сначала мы загружаем демографические данные (количество мужчин и женщин по 5-летним возрастным категориям) для двух стран, которые мы будем сравнивать, "Страны A" и "Страны B".  

```{r, echo=F}
# Страна A
A_demo <- rio::import(here::here("data", "standardization", "country_demographics.csv")) %>% 
     mutate(Country = "A") %>% 
     select(Country, everything()) %>% # переупорядочивание
     mutate(age_cat5 = str_replace_all(age_cat5, "\\+", "")) # удаляем + символы
```

```{r, eval=F}
# Страна A
A_demo <- import("country_demographics.csv")
```

```{r message=FALSE, echo=F}
DT::datatable(A_demo, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


```{r, echo=F}
# Страна B
B_demo <- rio::import(here::here("data", "standardization", "country_demographics_2.csv")) %>% 
     mutate(Country = "B") %>% 
     select(Country, everything()) # переупорядочивание
```

```{r, eval=F}
# Страна B
B_demo <- import("country_demographics_2.csv")
```

```{r message=FALSE, echo=F}
DT::datatable(B_demo, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```





### Загружаем данные о количестве смертей {.unnumbered}  

Что удобно, у нас также естьт количество смертей за интересующий временной период по полу и возрасту. Количество по каждой стране представлено в отдельном файле, показанном ниже.   

```{r, echo=F}
A_males <- c(224, 257, 251, 245, 334, 245, 154, 189, 334, 342, 565, 432, 543, 432, 245, 543, 234, 354) # для мужчин в стране A
B_males <- c(34, 37, 51, 145, 434, 120, 100, 143, 307, 354, 463, 639, 706, 232, 275, 543, 234, 274) # для мужчин в стране B
A_females <- c(194, 254, 232, 214, 316, 224, 163, 167, 354, 354, 463, 574, 493, 295, 175, 380, 177, 392) # для женщин в стране A
B_females <- c(54, 24, 32, 154, 276, 254, 123, 164, 254, 354, 453, 654, 435, 354, 165, 432, 287, 395) # для женщин в стране B

age_cat5 <- c("0-4", "5-9", "10-14", "15-19", "20-24", "25-29",  "30-34", "35-39", "40-44",
                                                                                "45-49", "50-54", "55-59",
                                                                                "60-64", "65-69", "70-74",
                                                                                "75-79", "80-84", "85")
A_deaths <- data.frame(Country = "A", AgeCat = age_cat5, Male = A_males, Female = A_females)
B_deaths <- data.frame(Country = "B", AgeCat = age_cat5, Male = B_males, Female = B_females)
```

Смерти в Стране A
```{r message=FALSE, echo=F}
DT::datatable(A_deaths, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Смерти в Стране B

```{r message=FALSE, echo=F}
DT::datatable(B_deaths, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


```{r, echo=F}
rio::export(A_deaths, here::here("data", "standardization", "deaths_countryA.csv"))
rio::export(B_deaths, here::here("data", "standardization", "deaths_countryB.csv"))
```



### Вычищаем данные по населению и смертям {.unnumbered}  


Нам нужно соединить и трансформировать эти данные следующим образом:  

* Объединить населения стран в один набор данных и повернуть вертикально, чтобы каждая половозрастная страта занимала одну строку  
* Объединить количество смертей стран и повернуть вертикально, чтобы каждая половозрастная страта занимала одну строку  
* Присоединить смерти к популяциям  

Сначала объединим наборы данных с населением стран, повернем вертикально и проведем небольшую вычистку. См. страницу [Поворот данных] для получения более подробной информации.  

```{r}
pop_countries <- A_demo %>%  # начнем с набора данных по Стране A
     bind_rows(B_demo) %>%        # связываем строки, поскольку столбцы имеют одинаковые названия
     pivot_longer(                       # поворачиваем вертикально
          cols = c(m, f),                   # столбцы объединяются в один
          names_to = "Sex",                 # имя для нового столбца, содержащего категорию ("m" или "f") 
          values_to = "Population") %>%     # имя для нового столбца, содержащего повернутые числовые значения
     mutate(Sex = recode(Sex,            # перекодируем значения для ясности
          "m" = "Male",
          "f" = "Female"))
```

Объединенные данные по населению теперь выглядят вот так (пролистайте, чтобы увидеть страны A и B):  

```{r message=FALSE, echo=F}
DT::datatable(pop_countries, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Теперь проведем похожие операции с двумя наборами данных о смертях.

```{r}
deaths_countries <- A_deaths %>%    # начинаем с набора данных о смертях в стране A
     bind_rows(B_deaths) %>%        # связываем строки с набором данных B, поскольку столбцы имеют одинаковые названия
     pivot_longer(                  # поворачиваем вертикально
          cols = c(Male, Female),        # столбцы трансформируются в один
          names_to = "Sex",              # имя для нового столбца, содержащего категорию ("m" или "f") 
          values_to = "Deaths") %>%      # имя для нового столбца, содержащего повернутые числовые значения
     rename(age_cat5 = AgeCat)      # переименуем для ясности
```

Данные о смертях теперь выглядят вот так и содержат данные из обеих стран: 

```{r message=FALSE, echo=F}
DT::datatable(deaths_countries, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


Теперь мы соединим данные о смертях и о населении на основе общих столбцов `Country` (страна), `age_cat5` (возрастная категория) и `Sex` (пол). Это добавит столбец `Deaths` (смерти).  

```{r}
country_data <- pop_countries %>% 
     left_join(deaths_countries, by = c("Country", "age_cat5", "Sex"))
```

Теперь мы классифицируем `Sex`, `age_cat5` и `Country` как факторы и установим порядок уровней с помощью функции `fct_relevel()` из пакета **forcats**, как описано на странице [Факторы]. Обратите внимание, что классификация уровней фактора не меняет видимые данные, а команда `arrange()` сортирует по Стране, возрастной категории и полу.  

```{r, warning=F, message=F}
country_data <- country_data %>% 
  mutate(
    Country = fct_relevel(Country, "A", "B"),
      
    Sex = fct_relevel(Sex, "Male", "Female"),
        
    age_cat5 = fct_relevel(
      age_cat5,
      "0-4", "5-9", "10-14", "15-19",
      "20-24", "25-29",  "30-34", "35-39",
      "40-44", "45-49", "50-54", "55-59",
      "60-64", "65-69", "70-74",
      "75-79", "80-84", "85")) %>% 
          
  arrange(Country, age_cat5, Sex)

```

```{r message=FALSE, echo=F}
DT::datatable(country_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<span style="color: orange;">**_ВНИМАНИЕ:_** Если у вас мало смертей на страту, рассмотрите возможность использования 10- или 15-летних категорий вместо 5-летних категорий возраста.</span>




### Загрузка референтной популяции {.unnumbered}  

И последнее, для прямой стандартизации мы импортируем референтную популяцию (мировое "стандартное население" по полу)

```{r, echo=F}
# референтная популяция
standard_pop_data <- rio::import(here::here("data", "standardization", "world_standard_population_by_sex.csv")) %>% 
     rename(age_cat5 = AgeGroup)
```

```{r, eval=F}
# референтная популяция
standard_pop_data <- import("world_standard_population_by_sex.csv")
```

```{r message=FALSE, echo=F}
DT::datatable(standard_pop_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```



<!-- ======================================================= -->
### Вычистка референтной популяции {.unnumbered}

Значения возрастных категорий в `country_data` и `standard_pop_data` необходимо унифицировать.  

В настоящее время значения столбца `age_cat5` в датафрейме `standard_pop_data` содержат слова "years" и "plus", а в датафрейме `country_data` их нет. Нам нужно, чтобы значения возрастных категорий совпадали. Мы используем `str_replace_all()` из пакета **stringr**, как описано на странице [Текст и последовательности], чтобы заменить эти комбинации символов на отсутствие пробела `""`.  

Более того, пакет **dsr** ожидает, что в стандартном населении столбец, где содержится количество, должен называться `"pop"`. Поэтому нам нужно переименовать столбец соответствующим образом.  

```{r}
# удаляем конкретную последовательность из значений столбца
standard_pop_clean <- standard_pop_data %>%
     mutate(
          age_cat5 = str_replace_all(age_cat5, "years", ""),   # удаляем "year"
          age_cat5 = str_replace_all(age_cat5, "plus", ""),    # удаляем "plus"
          age_cat5 = str_replace_all(age_cat5, " ", "")) %>%   # удаляем пробел " "
     
     rename(pop = WorldStandardPopulation)   # меняем имя столбца на "pop", так как этого ожидает пакет dsr
```

<span style="color: orange;">**_ВНИМАНИЕ:_** Если вы будете пытаться использовать `str_replace_all()`, чтобы удалить *символ* плюс, она не сработает, поскольку это специальный символ. "Изолируйте" этот особый характер символа, поставив перед ним два обратных слэша, вот так `str_replace_call(column, "\\+", "")`. </span>

### Создание набора данных со стандартным населением {#standard_all .unnumbered}  

Наконец пакет **PHEindicatormethods**, который де6тально описан [ниже](#standard_phe), ожидает присоединения стандартных популяций к данным о количестве случаев события и населении. Поэтому в этих целях мы создадим набор данных `all_data`.  

```{r}
all_data <- left_join(country_data, standard_pop_clean, by=c("age_cat5", "Sex"))
```

Этот полный набор данных выглядит следующим образом:  

```{r message=FALSE, echo=F}
DT::datatable(all_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```



<!-- ======================================================= -->
## Пакет **dsr** {  }
 
Ниже мы демонстрируем расчет и сравнение прямых стандартизированных коэффициентов, используя пакет **dsr**. Пакет **dsr** позволяет вам рассчитывать и сравнивать прямые стандартизированные коэффициенты (не косвенные стандартизированные коэффициенты!).
  
В разделе Подготовка данных мы создали отдельные наборы данных для подсчета по странам и стандартного населения:  

1) объект `country_data`, который является популяционной таблицей с количеством населения и количеством смертей по стратам по стране  
2) объект `standard_pop_clean`, содержащий количество населения по стратам для референтной популяции, Мирового стандартного населения  

Мы будем использовать эти отдельные наборы данных для подхода с использованием **dsr**.  


<!-- ======================================================= -->
### Стандартизированные коэффициенты {.unnumbered}

Ниже мы рассчитываем коэффициенты по стране, стандартизированные прямым образом по полу и возрасту. Мы используем функцию `dsr()`. 

Необходимо отметить, что `dsr()` ожидает одного датафреймя для населения страны и количество случаев события (смертей) *и **отдельный** датафрейм с референтной популяцией*. Она также ожидает, что в этом наборе референтной популяции имя столбца за единицу времени будет "pop" (мы это сделали на этапе Подготовки данных).  

Существует много аргументов, как показано в коде ниже. Необходимо отметить, что `event = ` задается как столбец `Deaths`, а `fu = ` ("отслеживание") задается как столбец `Population`. Мы устанавливаем подгруппы сравнения как столбец `Country` и стандартизируем на основе `age_cat5` и `Sex`. Этим последним двум столбцам не присваивается конкретный именованный аргумент. См. `?dsr` для получения дополнительной информации. 

```{r, warning=F, message=F}
# Рассчитываем коэффициенты по стране, стандартизированные прямым образом по возрасту и полу
mortality_rate <- dsr::dsr(
     data = country_data,  # уточняем объект, содержащий количество смертей по страте
     event = Deaths,       # столбец, содержащий количество смертей по страте 
     fu = Population,      # столбец, содержащий количество населения по страте
     subgroup = Country,   # единицы, которые мы бы хотели сравнить
     age_cat5,             # другие столбцы - коэффициенты будут стандартизированы по этим
     Sex,
     refdata = standard_pop_clean, # датафрейм референтной популяции со столбцом под названием pop
     method = "gamma",      # метод расчета 95% ДИ
     sig = 0.95,            # уровень значимости
     mp = 100000,           # нам нужны коэффициенты на 100 000 населения
     decimals = 2)          # количество десятичных знаков)


# Печать выходнрых данных в виде красивой таблицы HTML
knitr::kable(mortality_rate) # показываем коэффициент смертности до и после прямой стандартизации
```

Выше мы видим, что хотя у страны A был ниже общий коэффициент смертности, чем у страны B, у нее выше стандартизированный коэффициент после прямой стандартизации по полу и возрасту.




<!-- ======================================================= -->
### Standardized rate ratios {.unnumbered}

```{r,warning=F, message=F}
# Рассчитываем ОР
mortality_rr <- dsr::dsrr(
     data = country_data, # уточняем объект, содержащий количество смертей по страте
     event = Deaths,      # столбец, содержащий количество смертей по страте 
     fu = Population,     # столбец, содержащий количество населения по страте
     subgroup = Country,  # единицы, которые мы бы хотели сравнить
     age_cat5,
     Sex,                 # характеристики, по которым мы хотим стандартизировать 
     refdata = standard_pop_clean, # референтная популяция, с числами в столбце под названием pop
     refgroup = "B",      # референс для сравнения
     estimate = "ratio",  # тип оценки
     sig = 0.95,          # уровень значимости
     mp = 100000,         # нам нужны коэффициенты на 100 000 населения
     decimals = 2)        # количество десятичных знаков

# Печать таблицы
knitr::kable(mortality_rr) 
```

Стандартизированный коэффициент смертности в 1.22 раза выше в стране A по сравнению со страной B (95% ДИ 1.17-1.27).

<!-- ======================================================= -->
### Разница стандартизированных коэффициентов {.unnumbered}

```{r, warning=F, message=F}
# Calculate RD
mortality_rd <- dsr::dsrr(
     data = country_data,       # уточняем объект, содержащий количество смертей по страте
     event = Deaths,            # столбец, содержащий количество смертей по страте 
     fu = Population,           # столбец, содержащий количество населения по страте
     subgroup = Country,        # единицы, которые мы бы хотели сравнить
     age_cat5,                  # характеристики, по которым мы хотим стандартизировать
     Sex,                        
     refdata = standard_pop_clean, # референтная популяция, с числами в столбце под названием pop
     refgroup = "B",            # референс для сравнения
     estimate = "difference",   # тип оценки
     sig = 0.95,                # уровень значимости
     mp = 100000,               # нам нужны коэффициенты на 100 000 населения
     decimals = 2)              # количество десятичных знаков

# Печать таблицы
knitr::kable(mortality_rd) 
```

В стране A имеется 4.24 дополнительных смертей на 100.000 населения (95% ДИ 3.24-5.24) по сравнению со страной A.







<!-- ======================================================= -->
## Пакет **PHEindicatormethods** {#standard_phe  }

Еще один способ расчета стандартизированных коэффициентов - использовать пакет **PHEindicatormethods**. Этот пакет позволяет вам рассчитывать как прямые, так и косвенные стандартизированные коэффициенты. Мы покажем оба варианта.  

В этом разделе используется датафрейм `all_data`, созданный в конце раздела Подготовка. Этот датафрейм включает населения стран, смерти и мировую стандартную референтную популяцию. Вы можете посмотреть это [тут](#standard_all).  



<!-- ======================================================= -->
### Прямые стандартизированные коэффициенты {.unnumbered}

Ниже мы сначала группируем данные по Стране, затем передаем их в функцию `phe_dsr()`, чтобы получить прямые стандартизированные коэффициенты по странам.

Следует отметить, что референтное (стандартное) население может быть указано как **столбец внутри датафрейма для конкретной страны**, либо как **отдельный вектор**. Если вы его указываете внутри странового датафрейма, вы должны установить аргумент `stdpoptype = "field"`. Если вы его указываете как вектор, установите `stdpoptype = "vector"`. В последнем случае вам необходимо убедиться, что упорядочивание строк по стратам аналогично и в страновом датафрейме, и в референтной популяции, так как записи будут сопоставляться по позиции. В примере ниже мы задали референтную популяцию как столбец внутри странового датафрейма.

См. справку с помощью `?phr_dsr` или ссылки в разделе Ресурсы для получения более подробной информации.  

```{r}
# Рассчитываем коэффициенты по стране, стандартизированные прямым образом по полу и возрасту
mortality_ds_rate_phe <- all_data %>%
     group_by(Country) %>%
     PHEindicatormethods::phe_dsr(
          x = Deaths,                 # столбец с наблюдаемым количеством событий
          n = Population,             # столбец с нестандартным населением для каждой страты
          stdpop = pop,               # стандартное население для каждой страты
          stdpoptype = "field")       # либо "vector" (вектор) для отдельного вектора, либо "field" (поле), что означает, что стандартное население указано в данных  

# Печать таблицы
knitr::kable(mortality_ds_rate_phe)
```

<!-- ======================================================= -->
### Косвенные стандартизированные коэффиенты {#standard_indirect .unnumbered}

Для косвенной стандартизации вам нужна референтная популяция с количеством смертей и количеством населения на страту. В данном примере мы будем рассчитывать коэффициенты для Страны A, *используя страну B в качестве референтной популяции*, так как референтная популяция `standard_pop_clean` не включает количество смертей на страту. 

Ниже мы сначала создаем референтную популяцию из страны B. Затем мы передаем данные о смертности и населении страны A, объединяем их с референтной популяцией и передаем в функцию `calculate_ISRate()`, чтобы получить косвенные стандартизированные коэффициенты. Конечно, можно сделать и наоборот.

Следует отметить - в примере ниже референтная популяция задается как отдельный датафрейм. В этом случае нужно убедиться, что векторы `x = `, `n = `, `x_ref = ` и `n_ref = ` все упорядочены по тем же значениям категории стандартизации (страты), что и в страновом датафрейме, так как сопоставление записей делается по позиции.

См. справку `?phr_isr` или ссылки в разделе Ресурсы для получения дополнительной информации.  

```{r}
# Создаем референтную популяцию
refpopCountryB <- country_data %>% 
  filter(Country == "B") 

# Рассчитываем коэффициенты для страны А, косвенным образом стандартизированные по возрасту и полу
mortality_is_rate_phe_A <- country_data %>%
     filter(Country == "A") %>%
     PHEindicatormethods::calculate_ISRate(
          x = Deaths,                 # столбец с наблюдаемым количеством событий
          n = Population,             # столбец с нестандартным населением для каждой страты
          x_ref = refpopCountryB$Deaths,  # референтное количество смертей для каждой страты
          n_ref = refpopCountryB$Population)  # референтная популяция по каждой страте

# Печать таблицы
knitr::kable(mortality_is_rate_phe_A)
```

<!-- ======================================================= -->
## Ресурсы {  }

Если вам нужен еще один воспроизводимый пример использования **dsr**, см. [эту виньетку]( https://mran.microsoft.com/snapshot/2020-02-12/web/packages/dsr/vignettes/dsr.html)  

Еще один пример использования **PHEindicatormethods** доступен на [этом сайте](https://mran.microsoft.com/snapshot/2018-10-22/web/packages/PHEindicatormethods/vignettes/IntroductiontoPHEindicatormethods.html)  

См. **PHEindicatormethods** [справочный pdf файл](https://cran.r-project.org/web/packages/PHEindicatormethods/PHEindicatormethods.pdf)  


