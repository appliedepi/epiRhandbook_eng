# Funktionen schreiben

<!-- ======================================================= -->

## Vorbereitung

### Pakete laden {-}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r, echo=F, warning=F, message=F}
pacman::p_load(
  rio,          # File import
  here,         # File locator
  skimr,        # get overview of data
  tidyverse,    # data management + ggplot2 graphics, 
  gtsummary,    # summary statistics and tests
  janitor,      # adding totals and percents to tables
  scales,       # easily convert proportions to percents  
  flextable,     # converting tables to HTML
  purrr,          #makes functional programming easier
  readr,          #to read csv files
  highcharter     #to create highchart object and draw particular plot
  )
```

### Daten importieren {-}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du die Daten herunterladen möchtest, um Schritt für Schritt vorzugehen, lies die Anweisungen im [Buch und Daten herunterladen] Seite. Der Datensatz wird importiert, indem die`import()` Funktion aus dem **rio**Paket. Siehe die Seite über [Import und Export] für verschiedene Möglichkeiten, Daten zu importieren.

Im letzten Teil dieser Seite werden wir auch einige Daten zur H7N9-Grippe aus dem Jahr 2013 verwenden.

```{r, echo=F}
# import the linelists into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

flu_china <- rio::import(here::here("data", "case_linelists", "fluH7N9_China_2013.csv"))

```

## Funktionen

Funktionen sind beim Programmieren hilfreich, da sie es ermöglichen, den Code verständlicher, kürzer und weniger fehleranfällig zu machen (vorausgesetzt, es gibt keine Fehler in der Funktion selbst).

Wenn du bis zu diesem Handbuch vorgedrungen bist, bedeutet das, dass du schon unzählige Funktionen kennengelernt hast, denn in R ist jede Operation ein Funktionsaufruf
`+, for, if, [, $, { …`. Zum Beispiel `x + y` ist dasselbe wie`'+'(x, y)`

R ist eine der Sprachen, die die meisten Möglichkeiten bietet, mit Funktionen zu arbeiten und dem Benutzer genügend Werkzeuge an die Hand gibt, um sie einfach zu schreiben. Wir sollten Funktionen nicht als etwas betrachten, das am Anfang oder am Ende der Programmierkette steht. R bietet die Möglichkeit, sie wie Vektoren zu verwenden und sie sogar innerhalb anderer Funktionen, Listen usw. einzusetzen.

Es gibt viele sehr fortgeschrittene Ressourcen zur funktionalen Programmierung. Wir werden hier nur einen Einblick geben, um dir den Einstieg in die funktionale Programmierung mit kurzen praktischen Beispielen zu erleichtern. Wir empfehlen dir, die Links unter Referenzen zu besuchen, um mehr darüber zu erfahren.

## Warum solltest du eine Funktion verwenden?

Bevor du diese Frage beantwortest, ist es wichtig zu wissen, dass du bereits Tipps zum Schreiben deiner allerersten R-Funktionen auf der Seite über [Iteration, Schleifen und Listen] in diesem Handbuch. Tatsächlich ist die Verwendung von "if/else" und Schleifen oft ein zentraler Bestandteil vieler unserer Funktionen, da sie uns helfen, entweder die Anwendung unseres Codes zu erweitern und mehrere Bedingungen zuzulassen oder Codes für wiederkehrende Aufgaben zu iterieren.

- Ich wiederhole mehrmals denselben Codeblock, um ihn auf eine andere Variable oder Daten anzuwenden?

- Wenn ich ihn loswerde, wird mein Code dann wesentlich kürzer und schneller?

- Ist es möglich, dass der Code, den ich geschrieben habe, wieder verwendet wird, aber mit einem anderen Wert an vielen Stellen des Codes?

Wenn die Antwort auf eine der vorherigen Fragen "JA" lautet, dann musst du wahrscheinlich eine Funktion schreiben

## Wie baut R Funktionen auf?

Funktionen in R haben drei Hauptkomponenten:

- die `formals()` ist die Liste der Argumente, die steuert, wie wir die Funktion aufrufen können

- die `body()` das ist der Code innerhalb der Funktion, d.h. innerhalb der Klammern oder nach der Klammer, je nachdem, wie wir ihn schreiben

und,

- die `environment()` die dabei helfen, die Variablen der Funktion zu finden und bestimmen, wie die Funktion ihren Wert findet.

Wenn du deine Funktion erstellt hast, kannst du jede dieser Komponenten überprüfen, indem du die zugehörige Funktion aufrufst.

## Grundlegende Syntax und Struktur

- Eine Funktion muss richtig benannt werden, damit ihre Aufgabe leicht verständlich ist, sobald wir ihren Namen lesen. Eigentlich ist das bei den meisten Funktionen der R-Basisarchitektur bereits der Fall. Funktionen wie `mean()`, `print()`, `summary()` haben Namen, die sehr einfach sind

- Eine Funktion benötigt Argumente, wie z. B. die zu bearbeitenden Daten und andere Objekte, die unter anderem statische Werte sein können

- Und schließlich gibt eine Funktion eine Ausgabe, die auf ihrer Kernaufgabe und den Argumenten basiert, die sie erhalten hat. Normalerweise verwenden wir die eingebauten Funktionen als `print()`, `return()`... um die Ausgabe zu erzeugen. Bei der Ausgabe kann es sich um einen logischen Wert, eine Zahl, ein Zeichen, einen Datenrahmen usw. handeln, also um jede Art von R-Objekt.

Im Grunde ist dies die Zusammensetzung einer Funktion:

```{r, eval=FALSE}

function_name <- function(argument_1, argument_2, argument_3){
  
           function_task
  
           return(output)
}


```

Wir können unsere erste Funktion erstellen, die folgendermaßen heißen wird `contain_covid19()`.

```{r}

contain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){
  
                            if(barrier_gest == "yes" & wear_mask == "yes" & get_vaccine == "yes" ) 
       
                            return("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


```

Dann können wir die Komponenten unserer neu erstellten Funktion überprüfen.

```{r}

formals(contain_covid19)
body(contain_covid19)
environment(contain_covid19)

```

Jetzt werden wir unsere Funktion testen. Um unsere geschriebene Funktion aufzurufen, verwendest du sie wie alle R-Funktionen, d.h. du schreibst den Funktionsnamen und fügst die erforderlichen Argumente hinzu.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "yes")

```

Wir können die Namen der einzelnen Argumente vorsichtshalber noch einmal aufschreiben. Aber auch ohne sie anzugeben, sollte der Code funktionieren, da R die Position jedes Arguments im Speicher hat. Solange du also die Werte der Argumente in der richtigen Reihenfolge angibst, kannst du es dir sparen, die Namen der Argumente beim Aufruf der Funktionen zu schreiben.

```{r}

contain_covid19("yes", "yes", "yes")

```

Schauen wir uns nun an, was passiert, wenn einer der Werte `"no"` oder **nicht** `"yes"`.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "no")
```

Wenn wir ein Argument angeben, das nicht erkannt wird, erhalten wir einen Fehler:

```{r, eval=F}
contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", get_vaccine = "no")
```

`Error in contain_covid19(barrier_gest = "sometimes", wear_mask = "yes",  :  could not find function "contain_covid19"`

<span style="color: black;">***HINWEIS:*** Einige Funktionen (meist sehr kurz und einfach) brauchen keinen Namen und können direkt in einer Codezeile oder innerhalb einer anderen Funktion verwendet werden, um eine schnelle Aufgabe zu erledigen. Sie werden genannt **anonyme Funktionen** .</span>

Im Folgenden findest du zum Beispiel eine erste anonyme Funktion, die nur Zeichenvariablen im Datensatz behält.

```{r, eval=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  #equivalent to R base "head" function and that return first n observation of the  dataset
  select(function(x) is.character(x)) 
```

```{r, echo=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  #equivalent to R base "head" function and that return first n observation of the  dataset
  select(function(x) is.character(x)) %>%  
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```

Dann eine weitere Funktion, die jede zweite Beobachtung unseres Datensatzes auswählt (das kann relevant sein, wenn wir Längsschnittdaten mit vielen Datensätzen pro Patient haben, z. B. nachdem wir nach Datum oder Besuch geordnet haben).
In diesem Fall wäre die richtige Funktion, die außerhalb von dplyr geschrieben wird, folgende `function (x) (x%%2 == 0)` auf den Vektor anwenden, der alle Zeilennummern enthält.

```{r, eval=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # add indices of each obs as rownames to clearly see the final selection
   filter(row_number() %%2 == 0)
```

```{r, echo=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>%    # add indices of each obs as rownames to clearly see the final selection
   filter(row_number() %%2 == 0) %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```

Ein möglicher Basis-R-Code für dieselbe Aufgabe wäre:

```{r, eval=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]
```

```{r, echo=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```

<span style="color: orange;">***VORSICHT!*** Es stimmt zwar, dass die Verwendung von Funktionen uns bei unserem Code helfen kann, aber es kann trotzdem zeitaufwändig sein, einige Funktionen zu schreiben oder eine Funktion zu korrigieren, wenn sie nicht gründlich durchdacht und angemessen geschrieben wurde und als Ergebnis Fehler zurückgibt. Aus diesem Grund wird oft empfohlen, zuerst den R-Code zu schreiben, sicherzustellen, dass er das tut, was wir beabsichtigen, und ihn dann in eine Funktion mit den drei oben genannten Hauptkomponenten umzuwandeln. </span>

## Beispiele

### Proportionstabellen für mehrere Spalten zurückgeben {.unnumbered}

Ja, in vielen Paketen gibt es bereits nette Funktionen, mit denen man Informationen auf einfache und schöne Weise zusammenfassen kann. Aber wir werden trotzdem versuchen, unsere eigenen Funktionen zu erstellen, um uns an das Schreiben von Funktionen zu gewöhnen.

In diesem Beispiel wollen wir zeigen, wie man durch das Schreiben einer einfachen Funktion vermeiden kann, dass man denselben Code mehrfach einfügt.

```{r}

proptab_multiple <- function(my_data, var_to_tab){
  
  #print the name of each variable of interest before doing the tabulation
  print(var_to_tab)

  with(my_data,
       rbind( #bind the results of the two following function by row
        #tabulate the variable of interest: gives only numbers
          table(my_data[[var_to_tab]], useNA = "no"),
          #calculate the proportions for each variable of interest and round the value to 2 decimals
         round(prop.table(table(my_data[[var_to_tab]]))*100,2)
         )
       )
}


proptab_multiple(linelist, "gender")

proptab_multiple(linelist, "age_cat")

proptab_multiple(linelist, "outcome")


```

<span style="color: darkgreen;">***TIPP:*** Wie oben gezeigt, ist es sehr wichtig, deine Funktionen zu kommentieren, wie du es auch bei der allgemeinen Programmierung tun würdest. Bedenke, dass eine Funktion das Ziel hat, einen Code lesbar, kürzer und effizienter zu machen. Dann sollte man in der Lage sein, zu verstehen, was die Funktion tut, wenn man nur ihren Namen liest, und sollte mehr Details beim Lesen der Kommentare erfahren.</span>

Eine zweite Möglichkeit ist, diese Funktion in einer anderen Funktion über eine Schleife zu verwenden, um den Prozess auf einmal zu machen:

```{r}


for(var_to_tab in c("gender","age_cat",  "outcome")){
  
  print(proptab_multiple(linelist, var_to_tab))
  
}

```

Eine einfachere Möglichkeit wäre die Verwendung der R-Basis "apply" anstelle einer "for-Schleife", wie unten beschrieben:

```{r, include=FALSE, eval=FALSE}

base::lapply(linelist[,c("gender","age_cat", "outcome")], table)

```

<span style="color: darkgreen;">***TIPP:*** R wird oft als funktionale Programmiersprache definiert und fast jedes Mal, wenn du eine Codezeile ausführst, verwendest du einige integrierte Funktionen. Eine gute Angewohnheit, um sich beim Schreiben von Funktionen besser zurechtzufinden, ist es, sich oft intern anzusehen, wie die grundlegenden Funktionen, die du täglich verwendest, aufgebaut sind. Die Abkürzung dafür ist, den Funktionsnamen auszuwählen und dann auf`Ctrl+F2` oder `fn+F2` oder `Cmd+F2` (abhängig von deinem Computer) .</span>

## verwenden **purrr**: Funktionen schreiben, die iterativ angewendet werden können

### Ändern der Klasse mehrerer Spalten in einem Datensatz {.unnumbered}

Nehmen wir an, dass viele Zeichenvariablen in der ursprünglichen `linelist` Daten zu Analyse- und Plotzwecken in "Faktor" geändert werden müssen. Anstatt den Schritt mehrmals zu wiederholen, können wir einfach Folgendes verwenden `lapply()` verwenden, um die Umwandlung aller betroffenen Variablen in einer einzigen Codezeile durchzuführen.

<span style="color: orange;">***VORSICHT!*** `lapply()` gibt eine Liste zurück, daher kann ihre Verwendung eine zusätzliche Änderung als letzten Schritt erfordern.</span>

```{r, include=FALSE}

linelist_factor1 <- linelist %>%
      lapply(
          function(x) if(is.character(x)) as.factor(x) else x) %>%
      as.data.frame() %>% 
      glimpse()

```

Derselbe Schritt kann mit `map_if()` Funktion aus dem **purrr** Paket

```{r}

linelist_factor2 <- linelist %>%
  purrr::map_if(is.character, as.factor)


linelist_factor2 %>%
        glimpse()

```

### Iterativ Diagramme für verschiedene Stufen einer Variablen erstellen {.unnumbered}

Wir werden hier ein Kreisdiagramm erstellen, um die Verteilung der Patientenergebnisse in China während des H7N9-Ausbruchs für jede Provinz zu betrachten. Anstatt den Code für jede einzelne Provinz zu wiederholen, wenden wir einfach eine Funktion an, die wir erstellen.

```{r}

#precising options for the use of highchart
options(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))


#create a function called "chart_outcome_province" that takes as argument the dataset and the name of the province for which to plot the distribution of the outcome.

chart_outcome_province <- function(data_used, prov){
  
  tab_prov <- data_used %>% 
    filter(province == prov,
           !is.na(outcome))%>% 
    group_by(outcome) %>% 
    count() %>%
    adorn_totals(where = "row") %>% 
    adorn_percentages(denominator = "col", )%>%
    mutate(
        perc_outcome= round(n*100,2))
  
  
  tab_prov %>%
    filter(outcome != "Total") %>% 
  highcharter::hchart(
    "pie", hcaes(x = outcome, y = perc_outcome),
    name = paste0("Distibution of the outcome in:", prov)
    )
  
}

chart_outcome_province(flu_china, "Shanghai")
chart_outcome_province(flu_china,"Zhejiang")
chart_outcome_province(flu_china,"Jiangsu")


```

### Iterativ Tabellen für verschiedene Ebenen einer Variablen erstellen {.unnumbered}

Hier werden wir drei Indikatoren erstellen, die wir in einer Tabelle zusammenfassen und diese Tabelle für jede Provinz erstellen möchten. Unsere Indikatoren sind die Verzögerung zwischen Krankheitsbeginn und Krankenhausaufenthalt, der Prozentsatz der Genesung und das Durchschnittsalter der Fälle.

```{r}


indic_1 <- flu_china %>% 
  group_by(province) %>% 
  mutate(
    date_hosp= strptime(date_of_hospitalisation, format = "%m/%d/%Y"),
    date_ons= strptime(date_of_onset, format = "%m/%d/%Y"), 
    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,
    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%
  select(province, mean_delay_onset_hosp)  %>% 
  distinct()
     

indic_2 <-  flu_china %>% 
            filter(!is.na(outcome)) %>% 
            group_by(province, outcome) %>% 
            count() %>%
            pivot_wider(names_from = outcome, values_from = n) %>% 
    adorn_totals(where = "col") %>% 
    mutate(
        perc_recovery= round((Recover/Total)*100,2))%>% 
  select(province, perc_recovery)
    
    
    
indic_3 <-  flu_china %>% 
            group_by(province) %>% 
            mutate(
                    median_age_cases = median(as.numeric(age), na.rm = TRUE)
            ) %>% 
  select(province, median_age_cases)  %>% 
  distinct()

#join the three indicator datasets

table_indic_all <- indic_1 %>% 
  dplyr::left_join(indic_2, by = "province") %>% 
        left_join(indic_3, by = "province")


#print the indicators in a flextable


print_indic_prov <-  function(table_used, prov){
  
  #first transform a bit the dataframe for printing ease
  indic_prov <- table_used %>%
    filter(province==prov) %>%
    pivot_longer(names_to = "Indicateurs", cols = 2:4) %>% 
   mutate( indic_label = factor(Indicateurs,
   levels= c("mean_delay_onset_hosp","perc_recovery","median_age_cases"),
   labels=c("Mean delay onset-hosp","Percentage of recovery", "Median age of the cases"))
   ) %>% 
    ungroup(province) %>% 
    select(indic_label, value)
  

    tab_print <- flextable(indic_prov)  %>%
    theme_vanilla() %>% 
    flextable::fontsize(part = "body", size = 10) 
    
    
     tab_print <- tab_print %>% 
                  autofit()   %>%
                  set_header_labels( 
                indic_label= "Indicateurs", value= "Estimation") %>%
    flextable::bg( bg = "darkblue", part = "header") %>%
    flextable::bold(part = "header") %>%
    flextable::color(color = "white", part = "header") %>% 
    add_header_lines(values = paste0("Indicateurs pour la province de: ", prov)) %>% 
bold(part = "header")
 
 tab_print <- set_formatter_type(tab_print,
   fmt_double = "%.2f",
   na_str = "-")

tab_print 
    
}




print_indic_prov(table_indic_all, "Shanghai")
print_indic_prov(table_indic_all, "Jiangsu")


```

## Tipps und Best Practices für gut funktionierende Funktionen

Funktionale Programmierung soll den Code vereinfachen und das Lesen erleichtern. Sie soll das Gegenteil bewirken. Die folgenden Tipps helfen dir, einen sauberen und leicht lesbaren Code zu haben.

### Benennung und Syntax {.unnumbered}

- Vermeide es, Zeichen zu verwenden, die leicht schon von anderen, in deiner Umgebung vorhandenen Funktionen übernommen werden könnten

- Es wird empfohlen, dass der Funktionsname kurz und für einen anderen Leser einfach zu verstehen ist.

- Es wird empfohlen, Verben als Funktionsnamen und Substantive für die Argumente zu verwenden.

### Spaltennamen und saubere Auswertung {.unnumbered}

Wenn du wissen willst, wie du auf *Spaltennamen* die deinem Code als Argumente übergeben werden, lies dies [tidyverse Programmieranleitung](https://dplyr.tidyverse.org/articles/programming.html). Zu den behandelten Themen gehören *Tidy-Auswertung* und die Verwendung der *umarmen* `{{ }}` "Doppelte Klammern"

Hier ist zum Beispiel ein schnelles Skelett des Vorlagencodes von der oben erwähnten Seite:

```{r, eval=F}

var_summary <- function(data, var) {
  data %>%
    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
}
mtcars %>% 
  group_by(cyl) %>% 
  var_summary(mpg)

```

### Testen und Fehlerbehandlung {.unnumbered}

Je komplizierter die Aufgabe einer Funktion ist, desto höher ist die Wahrscheinlichkeit von Fehlern. Daher ist es manchmal notwendig, innerhalb der Funktion eine Überprüfung vorzunehmen, um schnell herauszufinden, woher der Fehler kommt, und einen Weg zu finden, ihn zu beheben.

- Es kann mehr als empfehlenswert sein, eine Prüfung auf das Fehlen eines Arguments einzuführen, indem man `missing(argument)`. Diese einfache Prüfung kann den Wert "TRUE" oder "FALSE" zurückgeben.

```{r, error=TRUE}

contain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){
  
  if (missing(barrier_gest)) (print("please provide arg1"))
  if (missing(wear_mask)) print("please provide arg2")
  if (missing(get_vaccine)) print("please provide arg3")


  if (!barrier_gest == "yes" | wear_mask =="yes" | get_vaccine == "yes" ) 
       
       return ("you can do better")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_missing(get_vaccine = "yes")

```

- Verwenden Sie `stop()` für besser erkennbare Fehler.

```{r, error=TRUE}

contain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){
  
  if(!is.character(barrier_gest)) (stop("arg1 should be a character, please enter the value with `yes`, `no` or `sometimes"))
  
  if (barrier_gest == "yes" & wear_mask =="yes" & get_vaccine == "yes" ) 
       
       return ("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_stop(barrier_gest=1, wear_mask="yes", get_vaccine = "no")

```

- Wenn wir die meisten eingebauten Funktionen ausführen, gibt es Meldungen und Warnungen, die unter bestimmten Bedingungen auftauchen können. Wir können diese in unsere geschriebenen Funktionen integrieren, indem wir die Funktionen `message()` und `warning()`.

- Wir können auch Fehler behandeln, indem wir `safely()` verwenden, die eine Funktion als Argument annimmt und sie sicher ausführt. Die Funktion wird nämlich ausgeführt, ohne anzuhalten, wenn sie auf einen Fehler stößt. `safely()` gibt als Ausgabe eine **Liste** mit zwei Objekten zurück, die die Ergebnisse und den übersprungenen Fehler enthalten.

Wir können das überprüfen, indem wir zuerst die `mean()` als Funktion ausführen, dann mit `safely()`.

```{r, warning=FALSE}

map(linelist, mean)
```

```{r, warning=FALSE}
safe_mean <- safely(mean)
linelist %>% 
  map(safe_mean)

```

Wie schon gesagt, ist das Auskommentieren unseres Codes eine gute Möglichkeit, unsere Arbeit zu dokumentieren.

<!-- ======================================================= -->

## Ressourcen

[R für Data Science Link](https://r4ds.had.co.nz/functions.html)

[Cheatsheet R-Programmierung für Fortgeschrittene](https://www.rstudio.com/wp-content/uploads/2016/02/advancedR.pdf)

[Cheatsheet purr Paket](https://purrr.tidyverse.org/)

[Video-ACM Vortrag von Hadley Wickham: Die Freude am funktionalen Programmieren (wie funktioniert map\_dbl)](https://youtube.videoken.com/embed/bzUmK0Y07ck)


