# Diagramme und Tabellen { }

```{r, out.width=c("50%"), fig.show="hold", echo=F}
knitr::include_graphics(here::here("images", "flow_chart.png"))
knitr::include_graphics(here::here("images", "sankey_diagram.png"))
```

Auf dieser Seite geht es um Code zum Erstellen:

- Flussdiagramme mit **DiagrammeR** und der DOT-Sprache
- Alluvial/Sankey-Diagramme
- Zeitleisten für Ereignisse

<!-- * DAGs (Directed Acyclic Graphs) -->

<!-- * GANTT-Diagramme -->

<!-- ======================================================= -->

## Vorbereitung { }

### Pakete laden {.unnumbered}

Dieser Codechunk zeigt das Laden der Pakete, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  DiagrammeR,     # for flow diagrams
  networkD3,      # For alluvial/Sankey diagrams
  tidyverse)      # data management and visualization
```

### Daten importieren {.unnumbered}

Für die meisten Inhalte auf dieser Seite wird kein Datensatz benötigt. Im Abschnitt über das Sankey-Diagramm werden wir jedoch die Fallliste einer simulierten Ebola-Epidemie verwenden. Wenn du bei diesem Teil mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere die Daten mit dem `import()` Funktion aus der **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import the linelist
linelist <- import("linelist_cleaned.rds")
```

Die ersten 50 Zeilen der Linienliste werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

<!-- ======================================================= -->

## Flussdiagramme { }

Man kann das R-Paket verwenden **DiagrammeR** verwenden, um Diagramme/Flussdiagramme zu erstellen. Sie können statisch sein oder sich dynamisch an Änderungen in einem Datensatz anpassen.

**Werkzeuge**

Die Funktion `grViz()` wird verwendet, um ein "Graphviz"-Diagramm zu erstellen. Diese Funktion akzeptiert eine *Zeichenketteneingabe mit Anweisungen* für die Erstellung des Diagramms enthält. Innerhalb dieser Zeichenkette werden die Anweisungen in einer anderen Sprache geschrieben, die [DOT](https://graphviz.org/doc/info/lang.html) - Es ist ganz einfach, die Grundlagen zu lernen.

**Grundlegende Struktur**

1) Öffne die Anleitung `grViz("`
2) Gib die Richtung und den Namen des Diagramms an und öffne die Klammern, z. B. `digraph my_flow_chart {`
3) Graph-Anweisung (Layout, Rangrichtung)
4) Knoten-Anweisungen (Knoten erstellen)
5) Edges-Anweisungen (geben Verbindungen zwischen Knoten)
6) Schließen Sie die Anweisungen `}")`

### Einfache Beispiele {.unnumbered}

Im Folgenden sind zwei einfache Beispiele aufgeführt

Ein sehr minimales Beispiel:

```{r, out.width="50%"}
# A minimal plot
DiagrammeR::grViz("digraph {
  
graph[layout = dot, rankdir = LR]

a
b
c

a -> b -> c
}")
```

Ein Beispiel, das vielleicht ein bisschen mehr Bezug zum öffentlichen Gesundheitswesen hat:

```{r, out.width="50%"}
grViz("                           # All instructions are within a large character string
digraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name 
  
  # graph statement
  #################
  graph [layout = dot,
         rankdir = TB,
         overlap = true,
         fontsize = 10]
  
  # nodes
  #######
  node [shape = circle,           # shape = circle
       fixedsize = true
       width = 1.3]               # width of circles
  
  Primary                         # names of nodes
  Secondary
  Tertiary

  # edges
  #######
  Primary   -> Secondary [label = ' case transfer']
  Secondary -> Tertiary [label = ' case transfer']
}
")
```

### Syntax {.unnumbered}

**Grundlegende Syntax**

Knotennamen oder Kantenanweisungen können durch Leerzeichen, Semikolons oder Zeilenumbrüche getrennt werden.

**Rangrichtung**

Ein Plot kann so ausgerichtet werden, dass er sich von links nach rechts bewegt, indem du die `rankdir` Argument in der Diagramm-Anweisung angepasst wird. Die Standardeinstellung ist TB (von oben nach unten), aber es kann auch LR (von links nach rechts), RL oder BT sein.

**Knotennamen**

Knotennamen können aus einzelnen Wörtern bestehen, wie in dem einfachen Beispiel oben. Wenn du Namen mit mehreren Wörtern oder Sonderzeichen (z. B. Klammern, Bindestriche) verwenden willst, setze den Knotennamen in einfache Anführungszeichen (' '). Es kann einfacher sein, einen kurzen Knotennamen zu haben und einen *Bezeichnung*zu vergeben, wie unten in Klammern gezeigt []. Wenn du einen Zeilenumbruch im Namen des Knotens haben möchtest, musst du dies über ein Label tun - verwende`\n` in der Knotenbezeichnung in einfachen Anführungszeichen, wie unten gezeigt.

**Untergruppen**  
Innerhalb von Randanweisungen können Untergruppen auf beiden Seiten des Randes mit geschweiften Klammern ({ }). Die Kante gilt dann für alle Knoten in der Klammer - das ist eine Kurzform.

**Layouts**

- Punkt (setzen `rankdir` entweder auf TB, LR, RL, BT, )
- schön
- twopi
- circo

**Knoten - bearbeitbare Attribute**

- `label` (Text, in einfachen Anführungszeichen, wenn es sich um mehrere Wörter handelt)
- `fillcolor` (viele mögliche Farben)
- `fontcolor`
- `alpha` (Transparenz 0-1)
- `shape` (Ellipse, Oval, Raute, Ei, Klartext, Punkt, Quadrat, Dreieck)
- `style`
- `sides`
- `peripheries`
- `fixedsize` (h x b)
- `height`
- `width`
- `distortion`
- `penwidth` (Breite des Formrandes)
- `x` (Verschiebung links/rechts)
- `y` (Verschiebung nach oben/unten)
- `fontname`
- `fontsize`
- `icon`

**Kanten - bearbeitbare Attribute**

- `arrowsize`
- `arrowhead` (normal, Kasten, Krähe, Kurve, Raute, Punkt, inv, keine, T-Stück, V-Stück)
- `arrowtail`
- `dir` (Richtung, )
- `style` (gestrichelt, ...)
- `color`
- `alpha`
- `headport` (Text vor der Pfeilspitze)
- `tailport` (Text hinter der Pfeilspitze)
- `fontname`
- `fontsize`
- `fontcolor`
- `penwidth` (Breite des Pfeils)
- `minlen` (Mindestlänge)

**Farbnamen**: Hexadezimalwerte oder "X11"-Farbnamen, siehe [hier für X11-Details](http://rich-iannone.github.io/DiagrammeR/graphviz_and_mermaid.html)

### Komplexe Beispiele {.unnumbered}

Das folgende Beispiel erweitert das surveillance\_diagram und fügt komplexe Knotennamen, gruppierte Kanten, Farben und Styling hinzu

```
DiagrammeR::grViz("               # All instructions are within a large character string
digraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name 
  
  # graph statement
  #################
  graph [layout = dot,
         rankdir = TB,            # layout top-to-bottom
         fontsize = 10]
  

  # nodes (circles)
  #################
  node [shape = circle,           # shape = circle
       fixedsize = true
       width = 1.3]                      
  
  Primary   [label = 'Primary\nFacility'] 
  Secondary [label = 'Secondary\nFacility'] 
  Tertiary  [label = 'Tertiary\nFacility'] 
  SC        [label = 'Surveillance\nCoordination',
             fontcolor = darkgreen] 
  
  # edges
  #######
  Primary   -> Secondary [label = ' case transfer',
                          fontcolor = red,
                          color = red]
  Secondary -> Tertiary [label = ' case transfer',
                          fontcolor = red,
                          color = red]
  
  # grouped edge
  {Primary Secondary Tertiary} -> SC [label = 'case reporting',
                                      fontcolor = darkgreen,
                                      color = darkgreen,
                                      style = dashed]
}
")
```

```{r, out.width="50%", echo=F}
DiagrammeR::grViz("               # All instructions are within a large character string
digraph surveillance_diagram {    # 'digraph' means 'directional graph', then the graph name 
  
  # graph statement
  #################
  graph [layout = dot,
         rankdir = TB,            # layout top-to-bottom
         fontsize = 10]
  

  # nodes (circles)
  #################
  node [shape = circle,           # shape = circle
       fixedsize = true
       width = 1.3]                      
  
  Primary   [label = 'Primary\nFacility'] 
  Secondary [label = 'Secondary\nFacility'] 
  Tertiary  [label = 'Tertiary\nFacility'] 
  SC        [label = 'Surveillance\nCoordination',
             fontcolor = darkgreen] 
  
  # edges
  #######
  Primary   -> Secondary [label = 'case transfer',
                          fontcolor = red,
                          color = red]
  Secondary -> Tertiary [label = 'case transfer',
                          fontcolor = red,
                          color = red]
  
  # grouped edge
  {Primary Secondary Tertiary} -> SC [label = 'case reporting',
                                      fontcolor = darkgreen,
                                      color = darkgreen,
                                      style = dashed]
}
")
```

**Untergraphen-Cluster**

Um Knoten in Box-Cluster zu gruppieren, musst du sie innerhalb desselben benannten Teilgraphen platzieren (`subgraph name {}`). Um jeden Untergraphen innerhalb eines Begrenzungsrahmens zu identifizieren, beginnst du den Namen des Untergraphen mit "cluster", wie in den 4 Kästchen unten gezeigt.

```
DiagrammeR::grViz("             # All instructions are within a large character string
digraph surveillance_diagram {  # 'digraph' means 'directional graph', then the graph name 
  
  # graph statement
  #################
  graph [layout = dot,
         rankdir = TB,            
         overlap = true,
         fontsize = 10]
  

  # nodes (circles)
  #################
  node [shape = circle,                  # shape = circle
       fixedsize = true
       width = 1.3]                      # width of circles
  
  subgraph cluster_passive {
    Primary   [label = 'Primary\nFacility'] 
    Secondary [label = 'Secondary\nFacility'] 
    Tertiary  [label = 'Tertiary\nFacility'] 
    SC        [label = 'Surveillance\nCoordination',
               fontcolor = darkgreen] 
  }
  
  # nodes (boxes)
  ###############
  node [shape = box,                     # node shape
        fontname = Helvetica]            # text font in node
  
  subgraph cluster_active {
    Active [label = 'Active\nSurveillance'] 
    HCF_active [label = 'HCF\nActive Search']
  }
  
  subgraph cluster_EBD {
    EBS [label = 'Event-Based\nSurveillance (EBS)'] 
    'Social Media'
    Radio
  }
  
  subgraph cluster_CBS {
    CBS [label = 'Community-Based\nSurveillance (CBS)']
    RECOs
  }

  
  # edges
  #######
  {Primary Secondary Tertiary} -> SC [label = 'case reporting']

  Primary   -> Secondary [label = 'case transfer',
                          fontcolor = red]
  Secondary -> Tertiary [label = 'case transfer',
                          fontcolor = red]
  
  HCF_active -> Active
  
  {'Social Media' Radio} -> EBS
  
  RECOs -> CBS
}
")

```

```{r, out.width="120%", echo=F}
DiagrammeR::grViz("             # All instructions are within a large character string
digraph surveillance_diagram {  # 'digraph' means 'directional graph', then the graph name 
  
  # graph statement
  #################
  graph [layout = dot,
         rankdir = TB,            
         overlap = true,
         fontsize = 10]
  

  # nodes (circles)
  #################
  node [shape = circle,                  # shape = circle
       fixedsize = true
       width = 1.3]                      # width of circles
  
  subgraph cluster_passive {
    Primary   [label = 'Primary\nFacility'] 
    Secondary [label = 'Secondary\nFacility'] 
    Tertiary  [label = 'Tertiary\nFacility'] 
    SC        [label = 'Surveillance\nCoordination',
               fontcolor = darkgreen] 
  }
  
  # nodes (boxes)
  ###############
  node [shape = box,                     # node shape
        fontname = Helvetica]            # text font in node
  
  subgraph cluster_active {
    Active [label = 'Active\nSurveillance'] 
    HCF_active [label = 'HCF\nActive Search']
  }
  
  subgraph cluster_EBD {
    EBS [label = 'Event-Based\nSurveillance (EBS)'] 
    'Social Media'
    Radio
  }
  
  subgraph cluster_CBS {
    CBS [label = 'Community-Based\nSurveillance (CBS)']
    RECOs
  }

  
  # edges
  #######
  {Primary Secondary Tertiary} -> SC [label = 'case reporting']

  Primary   -> Secondary [label = 'case transfer',
                          fontcolor = red]
  Secondary -> Tertiary [label = 'case transfer',
                          fontcolor = red]
  
  HCF_active -> Active
  
  {'Social Media' Radio} -> EBS
  
  RECOs -> CBS
}
")

```

**Knotenformen**

Das folgende Beispiel stammt aus [diesem Tutorial](http://rich-iannone.github.io/DiagrammeR/) zeigt die angewandten Knotenformen und eine Kurzform für serielle Kantenverbindungen

```{r, out.width="75%"}
DiagrammeR::grViz("digraph {

graph [layout = dot, rankdir = LR]

# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]

data1 [label = 'Dataset 1', shape = folder, fillcolor = Beige]
data2 [label = 'Dataset 2', shape = folder, fillcolor = Beige]
process [label =  'Process \n Data']
statistical [label = 'Statistical \n Analysis']
results [label= 'Results']

# edge definitions with the node IDs
{data1 data2}  -> process -> statistical -> results
}")
```

### Ausgänge {.unnumbered}

Wie man Ausgaben behandelt und speichert

- Die Ausgaben werden im RStudio-Viewer-Fenster angezeigt, standardmäßig unten rechts neben Dateien, Plots, Paketen und Hilfe.
- Zum Exportieren kannst du im Ansichtsfenster "Als Bild speichern" oder "In die Zwischenablage kopieren" wählen. Die Grafik wird an die angegebene Größe angepasst.

### Parametrisierte Zahlen {.unnumbered}

Hier ist ein Zitat aus diesem Tutorial [https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/](https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/)

" Parametrisierte Zahlen: Ein großer Vorteil beim Entwerfen von Zahlen in R ist, dass wir die Zahlen direkt mit unserer Analyse verbinden können, indem wir R-Werte direkt in unsere Flussdiagramme einlesen. Angenommen, du hast einen Filterprozess erstellt, bei dem nach jeder Stufe eines Prozesses Werte entfernt werden, dann kannst du in einer Abbildung die Anzahl der Werte anzeigen lassen, die nach jeder Stufe deines Prozesses noch im Datensatz vorhanden sind. Dazu kannst du das @@ X-Symbol direkt in der Abbildung verwenden und dann in der Fußzeile des Diagramms darauf verweisen, indem du [X]:, wobei X ein eindeutiger numerischer Index ist."

Wenn du dich für die Parametrisierung interessierst, empfehlen wir dir, dieses Tutorial zu lesen.

<!-- Und hier ist ein Beispielcode aus diesem Tutorial. -->

<!-- ```{r, eval=F} -->

<!-- # Definiere einige Beispieldaten -->

<!-- Daten <- list(a=1000, b=800, c=600, d=400) -->

<!-- DiagrammeR::grViz(" -->

<!-- digraph graph2 { -->

<!-- # Knoten-Definitionen mit ersetztem Beschriftungstext -->

<!-- a -> b -> c -> d -->

<!-- } -->

<!-- ") -->

<!-- ``` -->

<!-- ### CONSORT-Diagramm {.unnumbered} -->

<!-- DIESER ABSCHNITT IST IM AUFBAU -->

<!-- https://scriptsandstatistics.wordpress.com/2017/12/22/how-to-draw-a-consort-flow-diagram-using-r-and-graphviz/ -->

<!-- Der obige Hinweis ist über DiagrammeR veraltet -->

<!-- ======================================================= -->

## Alluvial/Sankey Diagramme { }

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

Wir laden die **NetzwerkD3** Paket, um das Diagramm zu erstellen, und auch **tidyverse** für die Datenaufbereitung.

```{r}
pacman::p_load(
  networkD3,
  tidyverse)
```

### Plotten aus dem Datensatz {.unnumbered}

Plotten der Verbindungen in einem Datensatz. Nachfolgend demonstrieren wir die Verwendung dieses Pakets an dem Fall `linelist`. Hier ist eine [Online-Tutorial](https://www.r-graph-gallery.com/321-introduction-to-interactive-sankey-diagram-2.html).

Wir beginnen damit, die Fallzahlen für jede einzelne Kombination aus Alterskategorie und Krankenhaus zu ermitteln. Werte mit fehlender Alterskategorie haben wir aus Gründen der Übersichtlichkeit entfernt. Außerdem kennzeichnen wir die `hospital` und `age_cat` Spalten als `source` und `target` bezeichnen. Dies sind die beiden Seiten des Anschwemmungsdiagramms.

```{r}
# counts by hospital and age category
links <- linelist %>% 
  drop_na(age_cat) %>% 
  select(hospital, age_cat) %>%
  count(hospital, age_cat) %>% 
  rename(source = hospital,
         target = age_cat)
```

Der Datensatz sieht nun wie folgt aus:

```{r, message=FALSE, echo=F}
DT::datatable(links, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```

Jetzt erstellen wir einen Datenrahmen mit allen Diagrammknoten, unter der Spalte `name`. Dieser besteht aus allen Werten für `hospital` und `age_cat`. Beachte, dass wir sicherstellen, dass sie alle Klassenzeichen sind, bevor wir sie kombinieren. und passe die ID-Spalten so an, dass sie Zahlen statt Bezeichnungen sind:

```{r}
# The unique node names
nodes <- data.frame(
  name=c(as.character(links$source), as.character(links$target)) %>% 
    unique()
  )

nodes  # print
```

Wir bearbeiten die `links` Datenrahmen, den wir oben mit `count()`. Wir fügen zwei numerische Spalten hinzu `IDsource` und `IDtarget` hinzu, die die Verbindungen zwischen den Knoten wiedergeben/erstellen. Diese Spalten enthalten die Rownummern (Position) der Quell- und Zielknoten. 1 wird abgezogen, damit diese Positionsnummern bei 0 (nicht 1) beginnen.

```{r}
# match to numbers, not names
links$IDsource <- match(links$source, nodes$name)-1 
links$IDtarget <- match(links$target, nodes$name)-1
```

Der Links-Datensatz sieht nun wie folgt aus:

```{r, message=FALSE, echo=F}
DT::datatable(links, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```

Zeichne nun das Sankey-Diagramm mit `sankeyNetwork()`. Du kannst mehr über jedes Argument lesen, indem du `?sankeyNetwork` in der Konsole aufrufst. Beachte, dass du, wenn du die `iterations = 0` gesetzt hast, ist die Reihenfolge der Knoten möglicherweise nicht wie erwartet.

```{r}

# plot
######
p <- sankeyNetwork(
  Links = links,
  Nodes = nodes,
  Source = "IDsource",
  Target = "IDtarget",
  Value = "n",
  NodeID = "name",
  units = "TWh",
  fontSize = 12,
  nodeWidth = 30,
  iterations = 0)        # ensure node order is as in data
p
```

Hier ist ein Beispiel, in dem auch der Patient Outcome enthalten ist. Beachte, dass wir bei der Datenaufbereitung die Anzahl der Fälle zwischen Alter und Krankenhaus und separat zwischen Krankenhaus und Ergebnis berechnen müssen. `bind_rows()`.

```{r}
# counts by hospital and age category
age_hosp_links <- linelist %>% 
  drop_na(age_cat) %>% 
  select(hospital, age_cat) %>%
  count(hospital, age_cat) %>% 
  rename(source = age_cat,          # re-name
         target = hospital)

hosp_out_links <- linelist %>% 
    drop_na(age_cat) %>% 
    select(hospital, outcome) %>% 
    count(hospital, outcome) %>% 
    rename(source = hospital,       # re-name
           target = outcome)

# combine links
links <- bind_rows(age_hosp_links, hosp_out_links)

# The unique node names
nodes <- data.frame(
  name=c(as.character(links$source), as.character(links$target)) %>% 
    unique()
  )

# Create id numbers
links$IDsource <- match(links$source, nodes$name)-1 
links$IDtarget <- match(links$target, nodes$name)-1

# plot
######
p <- sankeyNetwork(Links = links,
                   Nodes = nodes,
                   Source = "IDsource",
                   Target = "IDtarget",
                   Value = "n",
                   NodeID = "name",
                   units = "TWh",
                   fontSize = 12,
                   nodeWidth = 30,
                   iterations = 0)
p

```

[https://www.displayr.com/sankey-diagrams-r/](https://www.displayr.com/sankey-diagrams-r/)

<!-- ======================================================= -->

## Zeitleisten der Ereignisse { }

Um eine Zeitleiste mit bestimmten Ereignissen zu erstellen, kannst du die `vistime` Paket.

Siehe dies [Vignette](https://cran.r-project.org/web/packages/vistime/vignettes/vistime-vignette.html#ex.-2-project-planning)

```{r}
# load package
pacman::p_load(vistime,  # make the timeline
               plotly    # for interactive visualization
               )
```

```{r, echo=F}
# reference: https://cran.r-project.org/web/packages/vistime/vignettes/vistime-vignette.html#ex.-2-project-planning

data <- read.csv(text="event, group, start, end, color
                       Event 1, Group A,2020-01-22,2020-01-22, #90caf9
                       Event 1, Group B,2020-01-23,2020-01-23, #90caf9
                       Event 1, Group C,2020-01-23,2020-01-23, #1565c0
                       Event 1, Group D,2020-01-25,2020-01-25, #f44336
                       Event 1, Group E,2020-01-25,2020-01-25, #90caf9
                       Event 1, Group F,2020-01-26,2020-01-26, #8d6e63
                       Event 1, Group G,2020-01-27,2020-01-27, #1565c0
                       Event 1, Group H,2020-01-27,2020-01-27, #90caf9
                       Event 1, Group I,2020-01-27,2020-01-27,#90a4ae
                       Event 2, Group A,2020-01-28,2020-01-28,#fc8d62
                       Event 2, Group C,2020-01-28,2020-01-28, #6a3d9a
                       Event 2, Group J,2020-01-28,2020-01-28, #90caf9
                       Event 2, Group J,2020-01-28,2020-01-28, #fc8d62
                       Event 2, Group J,2020-01-28,2020-01-28, #1565c0
")
```

Hier ist der Ereignisdatensatz, mit dem wir beginnen:

```{r, message=FALSE, echo=F}
DT::datatable(data, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap')
```

```{r}
p <- vistime(data)    # apply vistime

library(plotly)

# step 1: transform into a list
pp <- plotly_build(p)

# step 2: Marker size
for(i in 1:length(pp$x$data)){
  if(pp$x$data[[i]]$mode == "markers") pp$x$data[[i]]$marker$size <- 10
}

# step 3: text size
for(i in 1:length(pp$x$data)){
  if(pp$x$data[[i]]$mode == "text") pp$x$data[[i]]$textfont$size <- 10
}


# step 4: text position
for(i in 1:length(pp$x$data)){
  if(pp$x$data[[i]]$mode == "text") pp$x$data[[i]]$textposition <- "right"
}

#print
pp

```

<!-- ======================================================= -->

## DAGs { }

Du kannst eine DAG manuell erstellen, indem du die **DiagammeR** Paket und der DOT-Sprache wie oben beschrieben erstellen.

Alternativ dazu gibt es Pakete wie **ggdag** und **daggity**

[Einführung in DAGs ggdag Vignette](https://cran.r-project.org/web/packages/ggdag/vignettes/intro-to-dags.html)

[Kausale Inferenz mit DAGs in R](https://www.r-bloggers.com/2019/08/causal-inference-with-dags-in-r/#:~:text=In%20a%20DAG%20all%20the,for%20drawing%20and%20analyzing%20DAGs.)

<!-- ======================================================= -->

## Ressourcen { }

Vieles von dem, was oben über die DOT-Sprache steht, stammt aus dem Tutorial [auf dieser Seite](https://mikeyharper.uk/flowcharts-in-r-using-diagrammer/)

Eine andere, ausführlichere [Tutorium über DiagammeR](http://rich-iannone.github.io/DiagrammeR/)

Diese Seite auf [Sankey-Diagramme](https://www.displayr.com/sankey-diagrams-r/)


