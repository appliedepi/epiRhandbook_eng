
# Dizin etkileşimleri { }

Bu sayfada, dizinler (klasörler) oluşturduğunuz, etkileşimde bulunduğunuz, kaydettiğiniz ve içe aktardığınız genel senaryoları ele alıyoruz.


## Hazırlık

### **fs** paketi {.unnumbered}

**fs** paketi, dizin etkileşimlerini kolaylaştıran ve bazı R **tabanı** fonksiyonlarını geliştiren bir **tidyverse** paketidir. Aşağıdaki bölümlerde genellikle **fs**'den gelen fonksiyonları kullanacağız.

```{r}
pacman::p_load(
  fs,             # dosya/dizin etkileşimleri
  rio,            # içe aktar/dışa aktar
  here,           # göreceli dosya yolakları
  tidyverse)      # veri yönetimi ve görselleştirme
```


### Dizini bir dendrogram ağacı olarak yazdır {.unnumbered}

**fs**'den `dir_tree()` fonksiyonunu kullanın.

Klasör dosya yolunu `path =` olarak sağlayın ve yalnızca bir seviyeyi mi (`recurse = FALSE`) yoksa tüm alt seviyelerdeki tüm dosyaları mı (`recurse = TRUE`) göstermek istediğinize karar verin. Aşağıda, R projesi için kısayol olarak `here()` kullanıyoruz ve bu R el kitabı için kullanılan tüm verileri içeren alt klasör "verilerini" belirledik. "veri" ve alt klasörlerindeki (örneğin "önbellek", "salgın modelleri", "nüfus", "shp" ve "hava durumu") içindeki tüm dosyaları gösterecek şekilde ayarladık.


```{r}
fs::dir_tree(path = here("data"), recurse = TRUE)
```


## Bir dizindeki dosyaları listeleyin

Bir dizindeki yalnızca dosya adlarını listelemek için R **tabanı**ndan `dir()` kullanabilirsiniz. Örneğin, bu komut, içindeki "data" klasörünün "population" alt klasöründeki dosyaların adlarını listeler. Göreli dosya yolu, 'here()' kullanılarak sağlanır (bunun hakkında daha fazla bilgiyi [İçe aktarma ve dışa aktarma] sayfasında okuyabilirsiniz).

```{r}
# dosya adları
dir(here("data", "gis", "population"))
```

Dizin dosyalarının tam dosya yollarını listelemek için **fs**'den `dir_ls()` kullanabilirsiniz. Bir diğer R alternatifi "list.files()"dir.

```{r}
# dosya yolları
dir_ls(here("data", "gis", "population"))
```

Bir dizindeki her dosyayla ilgili tüm meta veri bilgilerini almak için (ör. yol, değişiklik tarihi vb.), **fs**'den `dir_info()` kullanabilirsiniz.

Bu, örneğin dosyanın en son sürümünü içe aktarmak istediğinizde, dosyanın son değişiklik zamanını çıkarmak istiyorsanız özellikle yararlı olabilir. Bunun bir örneği için [İçe ve dışa aktar] sayfasına bakın.   

```{r, eval=F}
# dosya bilgisi
dir_info(here("data", "gis", "population"))
```

İşte döndürülen veri çerçevesi. Tüm sütunları görmek için sağa kaydırın.

```{r, echo=F}
DT::datatable(dir_info(here("data", "gis", "population")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## Dosya bilgisi

Belirli bir dosya hakkında meta veri bilgilerini çıkarmak için, **fs**'den `file_info()` (veya R **tabanı**ndan `file.info()`) kullanabilirsiniz.  

```{r, eval=F}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, echo=F}
DT::datatable(file_info(here("data", "case_linelists", "linelist_cleaned.rds")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Burada sonucu dizine eklemek ve yalnızca "modification_time" değerini döndürmek için `$` kullanıyoruz.

```{r}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))$modification_time
```



## Var olup olmadığını kontrol edin

### R nesneleri {.unnumbered}

Bir R nesnesinin * R içinde * olup olmadığını kontrol etmek için  'exists()' kullanabilirsiniz (nesne adını tırnak içinde sağlayın).  

```{r}
exists("linelist")
```

Bazı R **tabanı** paketlerinin, sahne arkasında "data" gibi genel nesne adları kullandığını ve "inherit= YANLIŞ" belirtilmediği sürece DOĞRU olarak görüneceğini unutmayın. Bu, veri kümenizi "data" olarak adlandırmamanın bir nedenidir.

```{r}
exists("data")
exists("data", inherit = FALSE)
```

Bir fonksiyon yazıyorsanız, bir değişken olup olmadığını kontrol etmek için 'exists()' yerine 'missing()' kullanmalısınız.

### Dizinler {.unnumbered}

Bir dizinin var olup olmadığını kontrol etmek için, **fs**'den `is_dir()` dizinine dosya yolunu (ve dosya adını) sağlayın. "TRUE" yazısının yazdırıldığını görmek için sağa kaydırın.

```{r}
is_dir(here("data"))
```

Alternatif olarak `file.exists()` kullanılabilir.


### Dosyalar {.unnumbered}

Belirli bir dosyanın var olup olmadığını kontrol etmek için **fs**'den `is_file()` kullanın. "TRUE" yazısının yazdırıldığını görmek için sağa kaydırın.

```{r}
is_file(here("data", "case_linelists", "linelist_cleaned.rds"))
```

Alternatif olarak `file.exists()` kullanılabilir.



## Oluşturmak

### Dizinler {.unnumbered}

Yeni bir dizin (klasör) oluşturmak için **fs**'den `dir_create()` kullanabilirsiniz. Dizin zaten mevcutsa, üzerine yazılmaz ve hiçbir hata döndürülmez.

```{r, eval=F}
dir_create(here("data", "test"))
```

Bir alternatif, dizin zaten mevcutsa bir hata gösterecek olan `dir.create()`dir. Buna karşılık, bu senaryoda `dir_create()` sessiz olacaktır.

### Dosyalar {.unnumbered}

**fs**'den `file_create()` ile (boş) bir dosya oluşturabilirsiniz. Dosya zaten mevcutsa, üzerine yazılmaz veya değiştirilmez.

```{r, eval=F}
file_create(here("data", "test.rds"))
```

Alternatifi `file.create()`. Ancak dosya zaten mevcutsa, bu seçenek dosyayı kesecektir. `file_create()` kullanırsanız, dosya değişmeden kalacaktır.


### Yoksa oluştur {.unnumbered}

YAPIM AŞAMASINDA...


## Silmek

### R nesneleri {.unnumbered}

Bir R nesnesini kaldırmak için 'rm()' kullanın.

### Dizinler {.unnumbered}

**fs**'den `dir_delete()` kullanın.


### Dosyalar {.unnumbered}

Dosyaları **fs** içinden `file_delete()` ile silebilirsiniz.



## Diğer dosyaları çalıştırma

### `source()` {.unnumbered}

Bir R betiğini başka bir R betiğinden çalıştırmak için `source()` komutunu kullanabilirsiniz (R **tabanı**ndan).

```{r, eval=F}
source(here("scripts", "cleaning_scripts", "clean_testing_data.R"))
```

Bu, yukarıdaki R komut dosyasını görüntülemeye ve komut dosyasının sağ üst köşesindeki "Kaynak" düğmesine tıklamaya eşdeğerdir. Bu, betiği çalıştıracak, ancak özellikle istenmedikçe sessizce yapacak (R konsoluna çıktı yok). Soru-cevap modunda R konsolu aracılığıyla bir kullanıcıyla etkileşim kurmak için "source()" kullanma örnekleri için [Etkileşimli konsol] sayfasındaki sayfaya bakabilirsiniz.

```{r, fig.align = "center", out.height = '300%', echo=F}
knitr::include_graphics(here::here("images", "source_button.png"))
```


### `render()` {.unnumbered}

"render()", en sık R işaretleme komut dosyaları için kullanılan "source()"un bir varyasyonudur. R işaretleme dosyası olan `input = ` ve ayrıca `output_format =` (tipik olarak "html_document", "pdf_document", "word_document", "") sağlamaktadır.

Daha fazla ayrıntı için [R Markdown ile Raporlar] hakkındaki sayfaya bakabilirsiniz. Ayrıca "render()" belgelerine [buradan](https://rmarkdown.rstudio.com/docs/reference/render.html) veya "?render" girerek bakabilirsiniz.

### Dosyaları dizinde çalıştırın {.unnumbered}

Bir *for loop* oluşturabilir ve bunu 'dir()' ile tanımlanan bir dizindeki her dosyayı 'source()' için kullanabilirsiniz.

```{r, eval=F}
for(script in dir(here("scripts"), pattern = ".R$")) {   # R Project'in "scripts" klasöründeki her bir komut dosyası adı için (.R uzantılı)
  source(here("scripts", script))                        # dosyayı, komut dosyaları klasöründe bulunan eşleşen adla kaynaklayın
}
```

Yalnızca belirli komut dosyalarını çalıştırmak istiyorsanız, bunları şu şekilde adlarıyla tanımlayabilirsiniz:

```{r, eval=F}

scripts_to_run <- c(
     "epicurves.R",
     "demographic_tables.R",
     "survival_curves.R"
)

for(script in scripts_to_run) {
  source(here("scripts", script))
}

```



**fs** ve R **tabanı** fonksiyonlarının [karşılaştırması](https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html)

### Dosyaları dizine aktarın {.unnumbered} 

Tek tek dosyaları içe ve dışa aktarmak için [İçe ve dışa aktarma] hakkındaki sayfaya bakabilirsiniz.

Ayrıca dosya meta verilerine bakarak *veya* dosya adındaki bir tarihe dayalı olarak en son dosyayı otomatik olarak içe aktarma yöntemleri için [İçe ve dışa aktar] sayfasına bakabilirsiniz.

**purrr** paketinin aşağıdakileri gösterdiği bir örnek için [Yineleme, döngüler ve listeler] hakkındaki sayfaya bakabilirsiniz:

* Bir veri çerçevesini bölme ve birden çok CSV dosyası olarak kaydetme
* Bir veri çerçevesini bölme ve her bir parçayı tek bir Excel çalışma kitabında ayrı bir sayfa olarak kaydetme
* Birden fazla CSV dosyasını içe aktarma ve bunları tek bir veri çerçevesinde birleştirme
* Birden çok sayfa içeren bir Excel çalışma kitabını içe aktarma ve bunları tek bir veri çerçevesinde birleştirme




##  R **tabanı**

Belirtilen bir dizindeki dosyaları listelemekle aynı işlemi gerçekleştiren `list.files()` ve `dir()` fonksiyonlarına aşağıda bakın. "ignore.case =" veya aranacak belirli bir desen belirtebilirsiniz.

```{r, eval=F}
list.files(path = here("data"))

list.files(path = here("data"), pattern = ".csv")
# dir(path = here("data"), pattern = ".csv")

list.files(path = here("data"), pattern = "evd", ignore.case = TRUE)

```

Bir dosya şu anda "açık" ise, klasörünüzde "~$hospital_linelists.xlsx" gibi bir yaklaşık işareti olacak şekilde görüntülenir. 


<!-- ======================================================= -->
## Kaynaklar {  }

https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html



