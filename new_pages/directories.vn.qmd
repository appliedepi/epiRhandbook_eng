
# Tương tác với thư mục làm việc {#directories}  

Trong chương này, chúng tôi sẽ bao gồm các tình huống phổ biến, nơi chúng ta sẽ tạo, tương tác, lưu và nhập với thư mục.  


## Chuẩn bị  

### **fs** package {.unnumbered}  

Package **fs** thuộc hệ sinh thái **tidyverse** giúp thuận tiện cho việc tương tác với thư mục, cải thiện một số hàm trong **base** R. Trong các phần bên dưới, chúng ta sẽ dùng các hàm từ **fs**.  

```{r}
pacman::p_load(
  fs,             # file/directory interactions
  rio,            # import/export
  here,           # relative file pathways
  tidyverse)      # data management and visualization
```


### In thư mục dưới dạng cây biểu đồ dendrogram {.unnumbered}  

Sử dụng hàm `dir_tree()` từ package **fs**.  

Cung cấp đường dẫn thư mục cho đối số `path = ` và quyết định xem có hay không chúng ta muốn hiển thị chỉ ở một cấp độ (`recurse = FALSE`) hay tất cả các tập tin trong tất cả các thư mục con (`recurse = TRUE`). Bên dưới chúng ta sử dụng hàm `here()` để hiển thị kết quả dưới dạng viết tốc ký trong dự án R và cụ thể thư mục con "data" của nó, mà chứa tất các số liệu được sử dụng cho cuốn sổ tay này. Chúng ta thiết lập nó để hiện thị tất cả các tệp bên trong thư mục "data" và các thư mục con của nó (vd: "cache", "epidemic models", "population", "shp", và "weather").  


```{r}
fs::dir_tree(path = here("data"), recurse = TRUE)
```


## Liệt kê các tập tin trong một thư mục 

Để chỉ liệt kê các tên tập tin trong một thư mục, chúng ta có thể sử dụng hàm `dir()` từ **base** Ví dụ, lệnh này liệt kê tên các tập tin của các tập tin trong thư mục con có tên "population" trong thư mục "data" của một dự án R. Đường dẫn tập tin tương đối được cung cấp bằng cách sử dụng hàm `here()` (đọc thêm trong chương [Nhập xuất dữ liệu](importing.vn.qmd)).  

```{r}
# file names
dir(here("data", "gis", "population"))
```

Để liệt kê đường dẫn đầy đủ của các tập tin trong thư mục, chúng ta có thể sử dụng hàm `dir_ls()` từ package **fs**. Một cách khác là dùng hàm `list.files()` trong **base** R.  

```{r}
# file paths
dir_ls(here("data", "gis", "population"))
```

Để lấy tất cả thông tin chi tiết của mỗi tập tin trong một thư mục (ví dụ: đường dẫn, ngày sửa đổi, .v.v.), chúng ta có thể sử dụng hàm `dir_info()` của package **fs**.  

Điều này có thể đặc biệt hữu ích nếu chúng ta muốn trích xuất thời gian sửa đổi sau cùng của tập tin, ví dụ như nếu chúng ta muốn nhập phiên bản mới nhất của tập tin. Ví dụ cho việc này, xem trong chương [Nhập xuất dữ liệu](importing.vn.qmd).     

```{r, eval=F}
# file info
dir_info(here("data", "gis", "population"))
```

Sau đây là data frame được trả về. Cuộn qua phải để xem tất cả các cột.  

```{r, echo=F}
DT::datatable(dir_info(here("data", "gis", "population")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## Thông tin tệp  

Để trích xuất thông tin chi tiết của một tập tin cụ thể, chúng ta có thể sử dụng hàme `file_info()` từ package **fs** (hoặc `file.info()` từ **base** R).  

```{r, eval=F}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, echo=F}
DT::datatable(file_info(here("data", "case_linelists", "linelist_cleaned.rds")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Ở đây, chúng ta sử dụng ký hiệu `$` để chỉ rõ kết quả và xuất chỉ mỗi giá trị về thời gian sửa đổi `modification_time`.  

```{r}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))$modification_time
```




## Kiểm tra sự tồn tại  

### Đối tượng R {.unnumbered}  

Bạn có thể sử dụng hàm `exists()` trong **base** R để kiểm tra xem một đối tượng R có tồn tại *bên trong* môi trường R hay không (cung cấp tên đối tượng trong dấu ngoặc kép).  

```{r}
exists("linelist")
```

Lưu ý rằng một số gói lệnh trong **base** R sử dụng các tên chung làm tên cho các đối tượng như “data” trong môi trường R, mà kết quả kiểm tra sẽ là TRUE trừ khi chúng ta chỉ rõ `inherit = FALSE`. Đây là một lý do để không đặt tên cho bộ số liệu của chúng ta là “data”.  

```{r}
exists("data")
exists("data", inherit = FALSE)
```

Nếu bạn đang viết một hàm, bạn nên sử dụng hàm `missing()` từ **base** R để kiểm tra xem có một đối số hiện diện hay không, thay vì dùng hàm `exists()`.  



### Thư mục {.unnumbered}  

Để kiểm tra xem một thư mục có tồn tại không, cung cấp đường dẫn tập tin (và tên tập tin) đến hàm `is_dir()` của package **fs**. Cuộn qua bên phải để thấy thông báo `TRUE` được in ra.    

```{r}
is_dir(here("data"))
```

Một cách làm khác là dùng hàm `file.exists()` từ **base** R.  


### Tệp {.unnumbered}  

Để kiểm tra xem một tập tin cụ thể có tồn tại hay không, sử dụng hàm `is_file()` của package **fs**. Cuộn qua bên phải để thấy thông báo `TRUE` được in ra.  

```{r}
is_file(here("data", "case_linelists", "linelist_cleaned.rds"))
```

Một cách làm khác là dùng hàm `file.exists()` từ **base** R.  



## Tạo mới  

### Thư mục {.unnumbered}  

Để tạo một thư mục mới, bạn có thể sử dụng hàm `dir_create()` từ package **fs**. Nếu thư mục đã tồn tại, thư mục này sẽ không bị ghi đè và không bị trả lại lỗi. 

```{r, eval=F}
dir_create(here("data", "test"))
```

Một cách làm khác là dùng hàm `dir.create()` từ **base** R, mà sẽ hiển thị lỗi nếu thư mục đó đã tồn tại. Ngược lại, `dir_create()` sẽ không thông báo gì.  

### Tệp {.unnumbered}  

Chúng ta có thể tạo một tâp tin (rỗng) bằng hàm  `file_create()` từ package **fs**. Nếu tập tin này đã tồn tại, nó sẽ không bị ghi đè hoặc thay đổi.  

```{r, eval=F}
file_create(here("data", "test.rds"))
```

Một cách làm khác là dùng hàm `file.create()` từ **base** R. Nhưng nếu tập tin này đã tồn tại, tùy chọn này sẽ cắt xén tập tin đó. Nếu dùng hàm `file_create()` tập tin này sẽ được giữ nguyên.  


### Tạo nếu không tồn tại {.unnumbered}  

ĐANG XÂY DỰNG  


## Xóa

### Đối tượng R {.unnumbered}  

Dùng hàm `rm()` từ **base** R để loại bỏ một đối tượng R.  

### Thư mục {.unnumbered}  

Dùng hàm `dir_delete()` từ package **fs**. 


### Tệp {.unnumbered}  

Chúng ta có thể xóa các tệp bằng hàm `file_delete()` từ package **fs**.  



## Chạy các tệp khác  

### `source()` {.unnumbered}  

Để chạy một R script từ một R script khác, bạn có thể sử dụng hàm `source()` (trong **base** R).

```{r, eval=F}
source(here("scripts", "cleaning_scripts", "clean_testing_data.R"))
```

ở phía trên bên phải của tập lệnh. Điều này sẽ thực hiện tập lệnh này nhưng sẽ thực hiện một cách âm thầm (không có kết quả đầu ra trong bảng điều khiển R) trừ khi có chủ ý cụ thể. Xem các ví dụ ở chương [Bảng điều khiển tương tác] về cách sử dụng `source()` để tương tác với người dùng qua bảng điều khiên R ở chế độ hỏi và trả lời.  

```{r, fig.align = "center", out.height = '300%', echo=F}
knitr::include_graphics(here::here("images", "source_button.png"))
```


### `render()` {.unnumbered}  

Hàm `render()` là một biến thể của hàm `source()` mà thường được sử dụng nhất cho các tập lệnh của R markdown. Chúng ta cung cấp `input = ` tập tin R markdown, và cũng vậy  `output_format = ` (thường là “html_document”, “pdf_document”, “word_document”, "") 

Xem chương [Báo cáo với R Markdown](rmarkdown.vn.qmd) để biết thêm chi tiết. Ngoài ra, bạn có thể xem thêm tài liệu về `render()` [tại đây](https://rmarkdown.rstudio.com/docs/reference/render.html) hoặc bằng cách gõ `?render`.  



### Chạy các tệp trong một thư mục {.unnumbered}

Bạn có thể tạo một *vòng lặp for* và sử dụng nó để `source()` từng tệp trong một thư mục, đã được nhận dạng bởi hàm `dir()`. 

```{r, eval=F}
for(script in dir(here("scripts"), pattern = ".R$")) {   # for each script name in the R Project's "scripts" folder (with .R extension)
  source(here("scripts", script))                        # source the file with the matching name that exists in the scripts folder
}
```

Nếu chúng ta chỉ muốn thực hiện một vài scripts, chúng ta có thể xác định chúng bằng tên như sau:  

```{r, eval=F}

scripts_to_run <- c(
     "epicurves.R",
     "demographic_tables.R",
     "survival_curves.R"
)

for(script in scripts_to_run) {
  source(here("scripts", script))
}

```



Đây là một [so sánh](https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html) giữa các hàm của **fs** và **base** R.  

### Nhập tệp vào một thư mục  {.unnumbered}

Xem chương [Nhập xuất dữ liệu] để nhập và xuất các tập tin riêng lẻ.  

Ngoài ra cũng xem thêm chương [Nhập xuất dữ liệu] để biết các phương pháp nhập một cách tự động các tập tin gần đây nhất dựa trên ngày trong tên tập tin *hoặc* bằng cách xem các thông tin chi tiết của tập tin.  

Xem một ví dụ trong chương [Lặp, vòng lặp và danh sách] để thấy rõ cách sử dụng package **purrr**:  

* Để tách một data frame và lưu nó ra dưới dạng nhiều tập tin  
* Tách một data frame và lưu từng phần vào một trang tính riêng biệt trong một tập tin Excel  
* Nhập nhiều tập tin CSV và kết hợp chúng thành một dataframe  
* Nhập một tập tin Excel có nhiều trang tính riêng biệt và kết hợp chúng thành một dataframe  




## **base** R  

Xem bên dưới các hàm `list.files()` và `dir()`, thực hiện cùng một thao tác liệt kê các tập tin trong một thư mục cụ thể. Chúng ta có thể cụ thể cho đối số `ignore.case =` hoặc cụ thể một pattern để tìm kiếm. 

```{r, eval=F}
list.files(path = here("data"))

list.files(path = here("data"), pattern = ".csv")
# dir(path = here("data"), pattern = ".csv")

list.files(path = here("data"), pattern = "evd", ignore.case = TRUE)

```

Nếu một tập tin hiện tại đang “mở”, nó sẽ hiện thị trong thư mục với dấu ngã phía trước, chẳng hạn như "~$hospital_linelists.xlsx".  


<!-- ======================================================= -->
## Nguồn {  }

https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html



