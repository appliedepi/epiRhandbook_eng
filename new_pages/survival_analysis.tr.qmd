
<!-- ======================================================= -->
<!-- ======================================================= -->
<!-- ======================================================= -->
# Sağkalım Analizi { }  


```{r out.width = c('75%'), fig.align='center', fig.show='hold', echo=F}
knitr::include_graphics(here::here("images", "survival_analysis.png"))
```

<!-- ======================================================= -->
## Genel Bakış {}


*Sağkalım analizi*, belirli bir birey veya birey grubu için, **_başarısızlık_** (bir hastalığın ortaya çıkması, bir hastalıktan iyileşme, ölüm, tedaviye yanıttan sonra nüks...) olarak adlandırılan  bir olay noktasını tanımlamaya odaklanır. Bu, bireylerin gözlemlendiği **_başarısızlık süresi_** (veya kohort/nüfus temelli çalışmalarda **_izleme süresi_**) olarak adlandırılan bir süreden sonra ortaya çıkar. Başarısızlık süresini belirlemek için, daha sonra bir başlangıç zamanı tanımlamak gerekir (bu, dahil etme tarihi, teşhis tarihi olabilir...). 

Sağkalım analizinin nihayi çıktısı, başlangıç noktası ile  olay arasındaki zamandır. Mevcut tıbbi araştırmalarda, örneğin klinik çalışmalarda bir tedavinin etkisini veya çeşitli kanser sağkalım ölçümlerini değerlendirmek için kanser epidemiyolojisinde yaygın olarak kullanılmaktadır.


Genellikle **_sağkalım ihtimali_** ile ifade edilir;ki bu, ilgilenilen olayın t süresi boyunca gerçekleşmemiş olma olasılığıdır.


**_Sansürleme_**: Sansür; izlem sonunda, bazı kişilerin ilgilendikleri olay olmadığında ve bu nedenle gerçek zamanlarının bilinmediği durumlarda meydana gelir. Burada çoğunlukla doğru sansürlemeye odaklanacağız, ancak genel olarak sansürleme ve sağkalım analizi hakkında daha fazla ayrıntı için referansları görebilirsiniz. 


```{r echo=F, eval=F, out.width = "80%", out.height="80%", fig.align = "center"}
 
#Add a figure from the following chunks for the last version of the page
#do not forget to save the output figure in "images"
# knitr::include_graphics(here::here("images", "survanalysis.png"))

```  

<!-- ======================================================= -->
## Hazırlık {  }

### Paketleri yükleyin {.unnumbered}

R'da sağkalım analizlerini çalıştırmak için en yaygın kullanılan paketlerden biri **survival** paketidir. Önce o kurulur ve ardından bu bölümde kullanılacak diğer paketlerin yanı sıra o da yüklenir:

Bu el kitabında, gerekirse paketi kuran *ve* kullanım için yükleyen **pacman**'dan `p_load()` vurgusu yapılmaktadır. R tabanı'ndan `library()` ile kurulu paketler de yüklenebilir. R paketleri hakkında daha fazla bilgi için [R'ın temelleri] sayfasına bakabilirsiniz.  

```{r, echo=F, message=FALSE, warning=FALSE}

# install/load the different packages needed for this page
pacman::p_load(
  survival,      # survival analysis 
  survminer,     # survival analysis
  rio,           # importing data  
  here,          # relative file pathways  
  janitor,       # tabulations
  SemiCompRisks, # dataset examples and advanced tools for working with Semi-Competing Risks data
  tidyverse,     # data manipulation and visualization
  Epi,           # stat analyses in Epi
  survival,      # survival analysis
  survminer      # survival analysis: advanced KM curves
)


```


Bu sayfa, önceki sayfaların çoğunda kullanılan ve uygun bir sağkalım verisine sahip olmak için bazı değişiklikler uyguladığımız satır listesini kullanarak sağkalım analizlerini araştırmaktadır.


### Veri kümesini içe aktar {.unnumbered}

Simüle edilmiş bir Ebola salgınından vakaların veri seti içe aktarılmaktadır. Takip etmek için; <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>"temiz satır listesi" dosyasını indirmek için tıklayın.</a> (.rds dosyası olarak). **rio** paketinden `import()` işleviyle veriler içe aktarılabilir (.xlsx, .csv, .rds gibi birçok dosya türünü işler - ayrıntılar için [İçe ve dışa aktarma] sayfasına bakılabilir).  

```{r echo=F}
# import linelist
linelist_case_data <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r eval=F}
# import linelist
linelist_case_data <- rio::import("linelist_cleaned.rds")
```

### Veri yönetimi ve dönüştürme {.unnumbered}

Kısacası, sağkalım verileri aşağıdaki üç özelliğe sahip olarak tanımlanabilir:

1) Bağımlı değişken veya sonuç, iyi tanımlanmış bir olayın meydana gelmesine kadar geçen bekleme süresidir.
2) Gözlemler, bazı birimler için verilerin analiz edildiği sırada ilgili olayın meydana gelmediği anlamında sansürlenir.
3) Bekleme süresi üzerindeki etkisini değerlendirmek veya kontrol etmek istediğimiz öngörüler veya açıklayıcı değişkenler vardır.

Böylece, bu yapıya uymak ve sağkalım analizini yürütmek için gereken farklı değişkenler ortaya çıkarılmaktadır.

- Bu analiz için yeni bir veri çerçevesini `linelist_surv` olarak;
- İlgilendiğimiz olayı "ölüm" olarak; (dolayısıyla sağkalım olasılığımız, başlangıç zamanından belirli bir süre sonra sağkalım olasılığı olacaktır),
- Başlangıç zamanı ile sonuç zamanı arasındaki izlem süresini (`futime`) *gün olarak*;
- Sansürlenmiş hastalar iyileşen veya nihai sonucu bilinmeyen, yani "ölüm" olayının gözlemlenmediği hastalar olarak  (`event=0`);
tanımlanmaktadır.

<span style="color: orange;">**_DİKKAT:_** Gerçek bir kohort çalışmasında, bireyler gözlendiğinde, başlangıç zamanı ve izlem sonu hakkındaki bilgiler bilindiği için, başlangıç tarihi veya sonuç tarihi bilinmiyorsa gözlemler kaldırılacaktır. Ayrıca başlangıç tarihinin sonuç tarihinden sonra olduğu durumlar da yanlış kabul edildiğinden kaldırılacaktır.</span>

<span style="color: darkgreen;">**_İPUCU:_** Bir tarihe göre büyük (>) veya küçük (<) olarak filtrelemenin eksik değerlere sahip satırları kaldırabileceği göz önüne alındığında, filtreyi yanlış tarihlere uygulamak eksik tarihlere sahip satırları da kaldıracaktır.</span>

Ardından, içinde yalnızca 3 yaş kategorisi bulunan bir `age_cat_small` sütunu oluşturmak için `case_while()` kullanılmaktadır.

```{r }
#create a new data called linelist_surv from the linelist_case_data

linelist_surv <-  linelist_case_data %>% 
     
  dplyr::filter(
       # remove observations with wrong or missing dates of onset or date of outcome
       date_outcome > date_onset) %>% 
  
  dplyr::mutate(
       # create the event var which is 1 if the patient died and 0 if he was right censored
       event = ifelse(is.na(outcome) | outcome == "Recover", 0, 1), 
    
       # create the var on the follow-up time in days
       futime = as.double(date_outcome - date_onset), 
    
       # create a new age category variable with only 3 strata levels
       age_cat_small = dplyr::case_when( 
            age_years < 5  ~ "0-4",
            age_years >= 5 & age_years < 20 ~ "5-19",
            age_years >= 20   ~ "20+"),
       
       # previous step created age_cat_small var as character.
       # now convert it to factor and specify the levels.
       # Note that the NA values remain NA's and are not put in a level "unknown" for example,
       # since in the next analyses they have to be removed.
       age_cat_small = fct_relevel(age_cat_small, "0-4", "5-19", "20+")
       )
```


<span style="color: darkgreen;">**_İPUCU:_** Oluşturulan yeni sütunlar, `futime` hakkında bir özet ve oluşturulduğu `event` ve `outcome` arasında bir çapraz tablo yapılarak doğrulanabilir. Bu doğrulamanın yanı sıra, sağkalım analizi sonuçlarını yorumlarken medyan takip süresini iletmek iyi bir alışkanlıktır.</span>

```{r }

summary(linelist_surv$futime)

# cross tabulate the new event var and the outcome var from which it was created
# to make sure the code did what it was intended to
linelist_surv %>% 
  tabyl(outcome, event)
```

Doğru atamaları sağlamak için yeni age_cat_small var ve eski age_cat sütunu çapraz tablo haline getirilmektedir.  

```{r}
linelist_surv %>% 
  tabyl(age_cat_small, age_cat)
```

Şimdi, belirli değişkenlere (yeni oluşturulanlar dahil) bakarak `linelist_surv` verilerinin ilk 10 gözlemi gözden geçirilmektedir.


```{r}
linelist_surv %>% 
  select(case_id, age_cat_small, date_onset, date_outcome, outcome, event, futime) %>% 
  head(10)
```

Bu yeni sütunun cinsiyete göre dağılımı hakkında daha fazla ayrıntıya sahip olmak için `age_cat_small` ve `gender` sütunları da çapraz tablo haline getirilebilir. [Açıklayıcı tablolar] sayfasında açıklandığı gibi **janitor**'dan `tabyl()` ve *adorn* fonksiyonları kullanılmaktadır. 

<!-- For this we use the `stat.table()` function of the **Epi** package. -->

```{r}

linelist_surv %>% 
  tabyl(gender, age_cat_small, show_na = F) %>% 
  adorn_totals(where = "both") %>% 
  adorn_percentages() %>% 
  adorn_pct_formatting() %>% 
  adorn_ns(position = "front")

```

<!-- Epi::stat.table(  -->
<!--   #give variables for the cross tabulation -->
<!--   list( -->
<!--     gender,  -->
<!--     age_cat_small -->
<!--     ), -->

<!--   #precise the function you want to call (mean,count..) -->
<!--   list(  -->
<!--     count(), -->
<!--     percent(age_cat_small) -->
<!--     ),  -->

<!--   #add margins -->
<!--   margins=T,  -->

<!--   #data used -->
<!--   data = linelist_surv  -->
<!--   ) -->

<!-- ``` -->


<!-- ======================================================= -->
## Sağkalım analizinin temelleri {}


### Sağkalım analiz materyali oluşturma {.unnumbered}

İzlem süresi ve olay sütunlarından bir hayatta kalma nesnesi oluşturmak için ilk olarak **survival**'den `Surv()` kısmını kullanılır.

Böyle bir adımın sonucu, zaman bilgisini ve ilgilenilen olayın (ölüm) gözlemlenip gözlemlenmediğini özetleştiren *surv* türünde bir nesne üretmektir. Bu nesne nihai olarak sonraki model formüllerinin sağ tarafında kullanılacaktır (bkz. [belgeler](https://cran.r-project.org/web/packages/survival/vignettes/survival.pdf)).  


```{r survobj }
# Use Suv() syntax for right-censored data
survobj <- Surv(time = linelist_surv$futime,
                event = linelist_surv$event)
```

<!-- ```{r} -->
<!-- survobj <- with(linelist_surv, -->

<!--                 survival::Surv(futime, event) -->

<!--                 ) -->
<!-- ``` -->


İncelemek için, burada yalnızca bazı önemli sütunları görüntüleyen `linelist_surv` verilerinin ilk 10 satırı verilmiştir.  

```{r}
linelist_surv %>% 
  select(case_id, date_onset, date_outcome, futime, outcome, event) %>% 
  head(10)
```

Burada `survobj`un ilk 10 unsuru izlenmektedir. Esasen bir gözlemin doğru sansürlenip sansürlenmediğini göstermek için, "+" ile  birlikte izlem süresi vektörü olarak yazdırılır. Rakamların yukarıda ve aşağıda nasıl hizalandığını görülmektedir.  

```{r}
#print the 50 first elements of the vector to see how it presents
head(survobj, 10)
```


### İlk analizleri çalıştırma {.unnumbered}

Gözlemlenen olay zamanlarında atlamalı bir adım fonksiyonu olan genel (marjinal) hayatta kalma eğrisinin **_Kaplan Meier_** (KM) tahminleri için varsayılan hesaplamalara uyan bir *survfit nesnesi* üretmek için `survfit()` işlevini kullanarak analize başlanır. Sonuçta *survfit nesnesi* bir veya daha fazla sağkalım eğrisi içerir ve model formülünde bir yanıt değişkeni olarak *Surv* nesnesi kullanılarak oluşturulur.  

<span style="color: black;">**_NOT:_** Kaplan-Meier tahmini, sağkalım fonksiyonunun parametrik olmayan maksimum olabilirlik tahminidir (MLE). . (daha fazla bilgi için kaynaklara bakın).</span>

Bu *survfit nesnesinin* özeti, *yaşam tablosu*'nu verecektir. Gerçekleşen (artan şekilde) bir olayın takip edilen her bir zaman adımı için (`time`):  

* Olayı geliştirme riski altında olan kişi sayısı (henüz olaya sahip olmayan veya sansürlenmemiş kişiler: `n.risk`),
* Olayı geliştirenler: (`n.event`),
* Yukarıdakilerin devamı olarak: Olayın *gelişmeme* olasılığı (ölmeme veya belirli bir zamandan sonra sağkalım olasılığı) bulunur;
* Son olarak, bu olasılık için standart hata ve güven aralığı türetilir ve görüntülenir. 

KM tahminleri, daha önce Surv nesnesi "survobj" un yanıt değişkeni olduğu formül kullanılarak oturtulur. Genel sağkalım için modeli çalıştırılan kesinlik "~ 1" 'dir.  

```{r fit}
# fit the KM estimates using a formula where the Surv object "survobj" is the response variable.
# "~ 1" signifies that we run the model for the overall survival  
linelistsurv_fit <-  survival::survfit(survobj ~ 1)

#print its summary for more details
summary(linelistsurv_fit)

```


`summary()` kullanılırken `times` seçeneği eklenebilir ve sağkalım bilgisinin görülmek istendiği zamanlar belirtilebilir.

```{r print_spec_times}

#print its summary at specific times
summary(linelistsurv_fit, times = c(5,10,20,30,60))

```


`print()` fonksiyonu da kullanılabilir. `print.rmean = TRUE` argümanı, ortalama sağkalım süresini ve standart hatayı (se) elde etmek için kullanılır.

<span style="color: black;">**_NOT:_** Kısıtlı ortalama sağkalım süresi (RMST), kanser sağkalım analizinde giderek daha fazla kullanılan ve kısıtlı T süresine kadar hastaları gözlemlediğimiz, göz önüne alındığında genellikle hayatta kalma eğrisinin altındaki alan olarak tanımlanan spesifik bir hayatta kalma ölçüsüdür. (Daha fazla ayrıntı için kaynaklar bölümüne bakın).


```{r, mean_survtime}
# print linelistsurv_fit object with mean survival time and its se. 
print(linelistsurv_fit, print.rmean = TRUE)

```


<span style="color: darkgreen;">**_İPUCU:_** *surv nesnesi* doğrudan `survfit()` işlevinde oluşturulabilir ve bir kod satırı kaydedilebilir. Bu daha sonra şöyle görünecektir: `linelistsurv_quick <-  survfit(Surv(futime, event) ~ 1, data=linelist_surv)`.</span>


### Kümülatif risk {.unnumbered}  

`summary()` işlevinin yanı sıra, `survfit()` nesnesinin yapısı hakkında daha fazla ayrıntı veren `str()` işlevi de kullanılabilir. Liste 16 unsurdan meydana gelir.  

Bu unsurlardan önemli bir tanesi de sayısal bir vektör olan `cumhaz` 'dır. Bu, **_kümülatif risk_**  in gösterilmesine izin verecek şekilde belirlenebilir, **_risk_** **_olayın anlık meydana gelme oranı_** dır (kaynaklara bakınız).

```{r fit_struct}

str(linelistsurv_fit)

```

<!-- ======================================================= -->
### Kaplan-Meier eğrilerinin çizilmesi  {.unnumbered}

KM tahminleri yerleştirildikten sonra, "Kaplan-Meier eğrisi" ni çizen temel `plot()` işlevi kullanılarak belirli bir süre boyunca sağkalım olasılığı görselleştirilebilir. Başka bir deyişle, aşağıdaki eğri, tüm hasta grubunda sağkalım deneyiminin geleneksel bir gösterimidir.

Eğrideki min ve max takip süresi hızlı bir şekilde doğrulanabilir.  

Yorumlamanın kolay bir yolu, başlangıçta tüm katılımcıların hala hayatta olduğunu ve sağkalım olasılığının %100 olduğunu söylemektir. Hastalar öldükçe bu olasılık zamanla azalır. 60 günlük izlemden sağ kalanların oranı %40 civarındadır.

```{r }

plot(linelistsurv_fit, 
     xlab = "Days of follow-up",    # x-axis label
     ylab="Survival Probability",   # y-axis label
     main= "Overall survival curve" # figure title
     )

```

KM sağkalım tahminlerinin güven aralığı da varsayılan olarak çizilir ve `plot()` komutuna `conf.int = FALSE` seçeneği eklenerek reddedilebilir.

İlgilenilen olay "ölüm" olduğu için, sağkalım oranlarının tamamlayıcılarını tanımlayan bir eğri çizmek, kümülatif ölüm oranlarının çizilmesini sağlayacaktır. Bu, mevcut bir çizime bilgi ekleyen `lines()` ile yapılabilir.  


```{r}

# original plot
plot(
  linelistsurv_fit,
  xlab = "Days of follow-up",       
  ylab = "Survival Probability",       
  mark.time = TRUE,              # mark events on the curve: a "+" is printed at every event
  conf.int = FALSE,              # do not plot the confidence interval
  main = "Overall survival curve and cumulative mortality"
  )

# draw an additional curve to the previous plot
lines(
  linelistsurv_fit,
  lty = 3,             # use different line type for clarity
  fun = "event",       # draw the cumulative events instead of the survival 
  mark.time = FALSE,
  conf.int = FALSE
  )

# add a legend to the plot
legend(
  "topright",                               # position of legend
  legend = c("Survival", "Cum. Mortality"), # legend text 
  lty = c(1, 3),                            # line types to use in the legend
  cex = .85,                                # parametes that defines size of legend text
  bty = "n"                                 # no box type to be drawn for the legend
  )

```

<!-- ======================================================= -->
## Sağkalım eğrilerinin karşılaştırılması 

Gözlemlenen katılımcılarımızın veya hastalarımızın farklı gruplar içindeki sağkalımını karşılaştırmak için, önce ilgili sağkalım eğrilerine bakmamız ve ardından bağımsız gruplar arasındaki farkı değerlendirmek için testler yapmamız gerekebilir. Bu karşılaştırma cinsiyet, yaş, tedavi, komorbidite bazında gruplarla ilgili olabilir...

### Log rank testi {.unnumbered}

Log rank testi, iki veya daha fazla *bağımsız* grup arasındaki tüm sağkalım deneyimini karşılaştıran popüler bir testtir ve sağkalım eğrilerinin aynı (örtüşen) olup olmadığını gösteren bir test olarak düşünülebilir (gruplar arasında sağkalımda hiçbir farkın olmadığı sıfır hipotezi).  **Hayatta kalma paketi**  nin `survdiff()` işlevi, `rho = 0` (varsayılan) belirttiğimizde log rank testinin çalıştırılmasına izin verir. Log rank istatistiği yaklaşık olarak bir ki-kare test istatistiği şeklinde dağıtıldığından, test sonuçları bir p-değeri ile birlikte bir ki-kare değeri verir.

İlk önce sağkalım eğrileri cinsiyet grubuna göre karşılaştırılır. Bunun için eğriler önce görselleştirilmeye çalışılır (iki hayatta kalma eğrisinin örtüşüp örtüşmediğini kontrol edilir). Biraz farklı bir formülle yeni bir *survfit nesnesi* oluşturulup; ardından *survdiff nesnesi* oluşturulur.

Formülün sağ tarafına ` ~ gender` yerleştirilerek, genel sağkalıma göre değil, cinsiyete göre planlama yapılır.  


```{r comp_surv, warning=FALSE}

# create the new survfit object based on gender
linelistsurv_fit_sex <-  survfit(Surv(futime, event) ~ gender, data = linelist_surv)
```

Şimdi sağkalım eğrileri cinsiyete göre çizilebilir. Renkler ve açıklamalar tanımlanmadan önce cinsiyet sütunundaki katman düzeylerinin *sıra* sına bakılır.  

```{r}
# set colors
col_sex <- c("lightgreen", "darkgreen")

# create plot
plot(
  linelistsurv_fit_sex,
  col = col_sex,
  xlab = "Days of follow-up",
  ylab = "Survival Probability")

# add legend
legend(
  "topright",
  legend = c("Female","Male"),
  col = col_sex,
  lty = 1,
  cex = .9,
  bty = "n")
```

Şimdi `survdiff()` kullanılarak sağkalım eğrileri arasındaki fark testi hesaplanabilir.

```{r}
#compute the test of the difference between the survival curves
survival::survdiff(
  Surv(futime, event) ~ gender, 
  data = linelist_surv
  )

```

Kadınlar ve erkekler için sağkalım eğrilerinin örtüştüğü ve log-rank testinin kadınlar ve erkekler arasında bir sağkalım farkı olduğuna dair kanıt vermediği görülmektedir.

Diğer bazı R paketleri, farklı gruplar için sağkalım eğrilerinin gösterilmesine ve bir defada farkın test edilmesine izin verir. **survminer** paketindeki `ggsurvplot()` işlevi kullanılarak, eğriye her grup için yazdırılmış risk tabloları ve log-rank testinden elde edilen p değeri de eklenebilir. 

<span style="color: orange;">**_DİKKAT:_** **survminer** işlevleri, sağkalım nesnesini * ve* sağkalım nesnesine sığdırmak için kullanılan verilerin yeniden belirtilmesini gerektirir. Spesifik olmayan hata mesajlarından kaçınmak için bu işlemin yapılması ihmal edilmemelidir. </span>

```{r, warning=F, message=F}

survminer::ggsurvplot(
    linelistsurv_fit_sex, 
    data = linelist_surv,          # again specify the data used to fit linelistsurv_fit_sex 
    conf.int = FALSE,              # do not show confidence interval of KM estimates
    surv.scale = "percent",        # present probabilities in the y axis in %
    break.time.by = 10,            # present the time axis with an increment of 10 days
    xlab = "Follow-up days",
    ylab = "Survival Probability",
    pval = T,                      # print p-value of Log-rank test 
    pval.coord = c(40,.91),        # print p-value at these plot coordinates
    risk.table = T,                # print the risk table at bottom 
    legend.title = "Gender",       # legend characteristics
    legend.labs = c("Female","Male"),
    font.legend = 10, 
    palette = "Dark2",             # specify color palette 
    surv.median.line = "hv",       # draw horizontal and vertical lines to the median survivals
    ggtheme = theme_light()        # simplify plot background
)

```


Ayrıca enfeksiyon kaynağına (kontaminasyon kaynağı) göre sağkalım farklılıkları test edilmek istenebilir.  

Bu durumda, Log rank testi, `alfa= 0,005` değerinde sağkalım olasılıkları arasında bir fark olduğuna dair yeterli kanıt sağlar. Cenazelerde enfekte olan hastaların sağkalım olasılıkları, başka yerlerde enfekte olan hastaların sağkalım olasılıklarından daha yüksektir; bu da sağkalım avantajı olduğunu düşündürür.

```{r}

linelistsurv_fit_source <-  survfit(
  Surv(futime, event) ~ source,
  data = linelist_surv
  )

# plot
ggsurvplot( 
  linelistsurv_fit_source,
  data = linelist_surv,
  size = 1, linetype = "strata",   # line types
  conf.int = T,
  surv.scale = "percent",  
  break.time.by = 10, 
  xlab = "Follow-up days",
  ylab= "Survival Probability",
  pval = T,
  pval.coord = c(40,.91),
  risk.table = T,
  legend.title = "Source of \ninfection",
  legend.labs = c("Funeral", "Other"),
  font.legend = 10,
  palette = c("#E7B800","#3E606F"),
  surv.median.line = "hv", 
  ggtheme = theme_light()
)

```

<!-- ======================================================= -->
## Cox regresyon analizi {}

Cox orantılı hazards regresyonu, sağkalım analizi için en popüler regresyon tekniklerinden biridir. Cox modeli, orantılı hazards varsayımı gibi uygun bir kullanım için doğrulanması gereken *önemli varsayımlar* gerektirdiğinden başka modeller de kullanılabilir (kaynaklara bakın). 

Cox orantılı hazards regresyon modelinde, etkinin ölçüsü, katılımcının belirli bir süreye kadar yaşadığı göz önüne alındığında, başarısızlık riski (veya örneğimizde ölüm riski) olan **_hazard rate_** (HR)'dir. Genellikle, *bağımsız* grupları risklerine göre karşılaştırmakla ilgileniriz ve çoklu lojistik regresyon analizi ortamındaki bir olasılık oranına benzer bir tehlike oranı (HR) kullanırız. **survival** paketindeki `cox.ph()` işlevi modele uyması için kullanılır. **survival** paketindeki `cox.zph()` işlevi ise bir Cox regresyon modeli uyumu için orantılı hazards varsayımını test etmek için kullanılabilir. 

<span style="color: black;">**_NOT:_** Bir olasılık 0 ile 1 aralığında olmalıdır. Ancak hazard (tehlike/risk), bir zaman birimi başına beklenen olay sayısını temsil eder. 

* Bir prediktör için tehlike oranı 1'e yakınsa, o prediktör sağkalımı etkilemez,
* HR 1'den küçükse, prediktör koruyucudur (yani, iyileştirilmiş sağkalım ile ilişkilidir),
* ve HR 1'den büyükse, prediktör risk artışı (veya azalmış sağkalım) ile ilişkilidir.</span> 

### Cox modelini uyarlama {.unnumbered}

İlk olarak yaş ve cinsiyetin sağkalım üzerindeki etkilerini değerlendirmek için bir model uyarlanabilir. Sadece modeli yazdırarak elde edilen bilgiler:

  + prediktörler ile sonuç arasındaki ilişkiyi ölçen tahmini regresyon katsayıları `coef`,
   + *hazard oranı* nı üreten üstelleri (yorumlanabilirlik için `exp(coef)`),
   + onların standart hatası `se(coef)`,
   + z-skoru: 0'dan uzakta tahmin edilen katsayının standart hata miktarı,
   + ve p değeri: Tahmini katsayının 0 olma olasılığı.
  
Cox model nesnesine uygulanan `summary()` işlevi, tahmini HR'nin güven aralığı ve farklı test puanları gibi daha fazla bilgi verir.

İlk ortak değişken `gender` in etkisi ilk satırda sunulmaktadır. `genderm` (erkek) yazdırılır, bu da ilk katman seviyesinin ("f"), yani kadın grubunun cinsiyet için referans grubu olduğunu gösterir. Bu nedenle, test parametresinin yorumu, kadınlara kıyasla erkeklerinkiyle aynıdır. p değeri, cinsiyetin beklenen tehlike üzerindeki etkisine veya cinsiyet ile tüm nedenlere bağlı ölüm arasındaki ilişkiye dair yeterli kanıt olmadığını gösterir.

Aynı kanıt eksikliği, yaş grubuyla ilgili olarak da belirtilmiştir.

```{r coxmodel_agesex}

#fitting the cox model
linelistsurv_cox_sexage <-  survival::coxph(
              Surv(futime, event) ~ gender + age_cat_small, 
              data = linelist_surv
              )


#printing the model fitted
linelistsurv_cox_sexage


#summary of the model
summary(linelistsurv_cox_sexage)

```


Modeli çalıştırmak ve sonuçlara bakmak ilginç olsa da, orantılı hazards varsayımlarına uyulup uyulmadığını doğrulamak için göz atmak zamandan tasarruf etmenize yardımcı olabilir..

```{r test_assumption}

test_ph_sexage <- survival::cox.zph(linelistsurv_cox_sexage)
test_ph_sexage

```


<span style="color: black;">**_NOT:_** Cox modeli hesaplanırken, bağların nasıl ele alınacağını belirleyen *yöntem* adlı ikinci bir argüman belirtilebilir. *varsayılan* "efron" dur ve diğer seçenekler "breslow" ve "exact" dır.</span>

Başka bir modelde, enfeksiyonun kaynağı ve başlangıç tarihi ile kabul arasındaki gün sayısı gibi daha fazla risk faktörü eklenir. Bu sefer, ilerlemeden önce orantılı hazards varsayımını doğrularız.

Bu modele sürekli bir prediktör (`days_onset_hosp`) eklendi. Bu durumda, parametre tahminlerini, diğer prediktörleri sabit tutarak, prediktördeki her bir birimlik artış için nispi tehlikenin beklenen logundaki artış olarak yorumlanır. İlk önce orantılı hazards varsayımı doğrulanır.  

```{r coxmodel_fit_ph,  message=FALSE}

#fit the model
linelistsurv_cox <-  coxph(
                        Surv(futime, event) ~ gender + age_years+ source + days_onset_hosp,
                        data = linelist_surv
                        )


#test the proportional hazard model
linelistsurv_ph_test <- cox.zph(linelistsurv_cox)
linelistsurv_ph_test
```

Bu varsayımın grafiksel doğrulaması, **survminer** paketindeki `ggcoxzph()` fonksiyonu ile gerçekleştirilebilir.

```{r}
survminer::ggcoxzph(linelistsurv_ph_test)

```


Model sonuçları, başlangıçtan hastaneye başvurana kadar olan süre ile tüm nedenlere bağlı mortalite arasında negatif bir ilişki olduğunu göstermektedir. Cinsiyet sabit tutulduğunda, bir gün sonra hastaneye başvuran bir kişide beklenen risk, diğerinden 0,9 kat daha düşüktür. Ya da daha açık bir anlatımla, hastaneye başvuruya başlama süresindeki bir birimlik artış, ölüm riskinde %10,7'lik (`coef *100`) bir azalma ile ilişkilidir.

Ayrıca sonuçlar enfeksiyon kaynağı ile tüm nedenlere bağlı ölümler arasında pozitif bir ilişki olduğunu göstermektedir. Yani cenaze dışında bir enfeksiyon kaynağı olan hastalarda ölüm riski (1.21x) artmaktadır.


```{r coxmodel_summary,  message=FALSE}

#print the summary of the model
summary(linelistsurv_cox)

```


Bu ilişki bir tablo ile doğrulanabilir:  


```{r}
linelist_case_data %>% 
  tabyl(days_onset_hosp, outcome) %>% 
  adorn_percentages() %>%  
  adorn_pct_formatting()

```


Bu ilişkinin verilerde neden var olduğunun düşünülmesi ve araştırılması gerekir. Olası bir açıklama, daha sonra kabul edilecek kadar uzun yaşayan hastaların başlangıçta daha az şiddetli hastalığa sahip olmaları olabilir. Belki de daha olası bir başka açıklama, simüle edilmiş sahte bir veri seti kullanıldığı için bu modelin gerçeği yansıtmamasıdır!  


<!-- ======================================================= -->

### Forest grafikleri {.unnumbered}

Daha sonra, **survminer paketi** nin `ggforest()` işleviyle pratik forest grafikleri kullanılarak cox modelinin sonuçları görselleştirilebilir..

```{r forestp}

ggforest(linelistsurv_cox, data = linelist_surv)

```

<!-- ======================================================= -->
## Sağkalım modellerinde zamana bağlı değişkenler {}

Aşağıdaki bölümlerden bazıları, faydalı bir kaynaktan izin alınarak uyarlanmıştır [introduction to survival analysis in R](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html) by [Dr. Emily Zabor](https://www.emilyzabor.com/) 

Son bölümde, ilgilenilen ortak değişkenler ve sağkalım sonuçları arasındaki ilişkileri incelemek için Cox regresyonunu kullanma ele alındı. Ancak bu analizler, başlangıçta, yani olayın takip süresi başlamadan önce ölçülen ortak değişkene dayanır.

Takip süresi başladıktan **sonra** ölçülen bir ortak değişkenle ilgileniyorsanız ne olur? Ya da zamanla değişebilen bir ortak değişkeniniz varsa?

Örneğin, zaman içinde değişebilen hastane laboratuvar değerleri ölçümlerini tekrarladığınız klinik verilerle çalışıyor olabilirsiniz. Bu, bir **Zaman Bağımlı Ortak Değişken** örneğidir. Bunu ele almak için özel bir kuruluma ihtiyacınız var, ancak neyse ki cox modeli çok esnektir ve bu tür veriler **sağkalım** paketindeki araçlarla da modellenebilir. 

### Zaman bağımlı ortak değişken kurulumu {.unnumbered} 

R'daki zaman bağımlı ortak değişkenlerin analizi, özel bir veri setinin kurulmasını gerektirir. İlgileniyorsanız, **sağkalım** paketi yazarının bu konu hakkındaki daha ayrıntılı makalesine bakılabilir [Cox Modelinde Zamana Bağlı Ortak Değişkenleri ve Zamana Bağlı Katsayıları Kullanma](https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf).

Bunun için, 137 kemik iliği nakli hastasının verilerini içeren `BMT` adlı `SemiCompRisks` paketinden yeni bir veri seti kullanılabilir. Odaklanılacak değişkenler şunlardır:  

* `T1` - ölüme veya son takibe kadar geçen süre (gün olarak)
* `delta1` - ölüm göstergesi; 1-Ölü, 0-Canlı
* `TA` - akut graft-versus-host hastalığına kadar geçen süre (gün olarak)
* `deltaA` - akut graft-versus-host hastalığı göstergesi;
   * 1 - Gelişmiş akut graft-versus-host hastalığı
   * 0 - Hiçbir zaman akut graft-versus-host hastalığı geliştirmedi.

Bu veri seti **sağkalım** paketinden **temel** R komutu `data()` kullanarak yüklenir; bu, zaten yüklü olan bir R paketine dahil olan verileri yüklemek için kullanılabilir. `BMT` veri çerçevesi R ortamında görünecektir.  

```{r}
data(BMT, package = "SemiCompRisks")
```

#### Özgün hasta tanımlayıcısı ekleme {.unnumbered}  

`BMT` verilerinde, istenilen veri seti çeşidini oluşturmak için gerekli olan özgün bir ID sütunu yoktur. Bu nedenle, **tidyverse** paketinden **tibble** `rowid_to_column()` işlevini `my_id` adlı yeni bir ID sütunu oluşturmak için kullanılır (1'den başlayarak sıralı satır kimlikleriyle veri çerçevesinin başına sütun ekler) . Veri çerçevesi `bmt` olarak adlandırılır.  

```{r}
bmt <- rowid_to_column(BMT, "my_id")
```

Veri seti şimdi şöyle görünür:  

```{r message=FALSE, echo=F}
DT::datatable(bmt, rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

#### Hasta dizilerini genişletme {.unnumbered}  

Daha sonra, yeniden yapılandırılmış veri setini oluşturmak için `event()` ve `tdc()` yardımcı işlevleriyle `tmerge()` işlevi kullanılır. Amaç; her hasta için, farklı bir `deltaA` değerine sahip oldukları her zaman aralığı için ayrı bir satır oluşturmak üzere veri setini yeniden yapılandırmaktır. Bu durumda, veri toplama döneminde akut graft-versus-host hastalığı geliştirip geliştirmediğine bağlı olarak her hasta en fazla iki sıraya sahip olabilir. Akut graft-versus-host hastalığı gelişimi için yeni göstergeye `agvhd` adı verilir.

- `tmerge()`, her hasta için tanımlanan farklı ortak değişken değerler için birden fazla zaman aralığı içeren uzun bir veri seti oluşturur
- `event()`, yeni oluşturulan zaman aralıklarıyla uyumlu olacak yeni olay göstergesini yaratır
- `tdc()` , yeni oluşturulan zaman aralıklarına uygun olarak zamana bağlı ortak değişken sütunu `agvhd` yi oluşturur

```{r}
td_dat <- 
  tmerge(
    data1 = bmt %>% select(my_id, T1, delta1), 
    data2 = bmt %>% select(my_id, T1, delta1, TA, deltaA), 
    id = my_id, 
    death = event(T1, delta1),
    agvhd = tdc(TA)
    )
```

Bunun ne işe yaradığını görmek için ilk 5 özgün hastaya ait verilere bakıldığında orijinal verilerdeki ilgili değişkenler bu şekilde görünür:

```{r}
bmt %>% 
  select(my_id, T1, delta1, TA, deltaA) %>% 
  filter(my_id %in% seq(1, 5))
```

Aynı hastalar için yeni veri seti şuna benzer:

```{r}
td_dat %>% 
  filter(my_id %in% seq(1, 5))
```

Şimdi bazı hastalarımızın veri setinde yeni değişkenimiz `agvhd` için farklı bir değere sahip oldukları aralıklara karşılık gelen iki satırı var. Örneğin, Hasta 1 artık 0 zamanından 67. zamana kadar sıfır `agvhd` değerine ve 67'den 2081'e kadar 1 değerine sahip iki satıra sahiptir. 

### Zamana bağlı ortak değişkenlerle cox regresyonu {.unnumbered} 

Veriler yeniden şekillendirildiğine ve yeni zamana bağlı `aghvd` değişkeni eklediğine göre, şimdi basit tek değişkenli bir cox regresyon modeli uygulanabilir. Daha önce olduğu gibi aynı `coxph()` işlevi kullanılabilir; `time1 = ` ve `time2 = ` bağımsız değişkenlerini kullanarak her bir aralık için hem başlangıç hem de bitiş zamanını belirtmek için `Surv()` işlevini değiştirmek yeterlidir. 


```{r}
bmt_td_model = coxph(
  Surv(time = tstart, time2 = tstop, event = death) ~ agvhd, 
  data = td_dat
  )

summary(bmt_td_model)
```

Yine, **survminer paketi** 'nden `ggforest()` işlevi kullanılarak cox model sonuçları görselleştirilebilir.:

```{r}

ggforest(bmt_td_model, data = td_dat)

```

Forest grafiğinden, güven aralığından ve p-değerinden görülebildiği üzere, basit modelimiz bağlamında ölüm ile akut graft-versus-host hastalığı arasında güçlü bir ilişki yok gibi görünmektedir. 

<!-- ======================================================= -->
## Kaynaklar {  }

[Sağkalım Analizi Bölüm I: Temel kavramlar ve ilk analizler](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2394262/)

[R'da Sağkalım Analizi](https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html)

[Bulaşıcı hastalık araştırmalarında sağkalım analizi: Olayları zaman içinde tanımlama](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2954271/)

[Gelişmiş sağkalım modelleri Princeton ile ilgili bölüm](https://data.princeton.edu/wws509/notes/c7.pdf)

[Cox Modelinde Zamana Bağlı Ortak Değişkenleri ve Zamana Bağlı Katsayıları Kullanma](https://cran.r-project.org/web/packages/survival/vignettes/timedep.pdf)

[R kopya kağıdında sağkalım analizi](https://publicifsv.sund.ku.dk/~ts/survival/survival-cheat.pdf)

[Survminer kopya kağıdı](https://paulvanderlaken.files.wordpress.com/2017/08/survminer_cheatsheet.pdf)

[Ek materyal olarak sağlanan R Kodu ile kanser kayıt verileri için farklı sağkalım ölçüleri hakkında bir sayfa](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6322561/)
