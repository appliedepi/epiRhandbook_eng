
# 動的な図の作成 {#interactive-plots}

データの視覚化においては、データの受け取り手がデータと対話可能になることがますます求められています。そのため、動的な図を作成することが一般的になっています。これらを組み込む方法はいくつかありますが、最も一般的な方法は **plotly** パッケージと **shiny** パッケージの 2 つです。

この章では、既存の `ggplot()` で作成したプロットを **plotly** パッケージで動的な図に変換することに焦点を当てます。**shiny** パッケージについては、 [Shiny で作るダッシュボード](#shiny-basics)の章を参照してください。特筆すべき点は、動的な図は HTML 形式の R  Markdown 文書でのみ使用可能であり、PDF や Word 文書では使用できないということです。

**ggplot2** パッケージと **plotly** パッケージの統合により、動的に変換された最低限の情報を持つ流行曲線（エピカーブ）を以下に示します（プロット上にマウスを置き、拡大したり、凡例の項目をクリックしたりします）。

```{r plotly_demo, out.width=c('75%'), out.height=c('500px'), echo=F, warning=F, message=F}
pacman::p_load(plotly, rio, here, ggplot2, dplyr, lubridate)
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

## これらのボタンは余計であり、不要
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- linelist %>% 
  mutate(outcome = if_else(is.na(outcome), "Unknown", outcome),
         date_earliest = if_else(is.na(date_infection), date_onset, date_infection),
         week_earliest = floor_date(date_earliest, unit = "week",week_start = 1))%>% 
  count(week_earliest, outcome) %>% 
  ggplot()+
  geom_col(aes(week_earliest, n, fill = outcome))+
  xlab("Week of infection/onset") + ylab("Cases per week")+
  theme_minimal()

p %>% 
  ggplotly() %>% 
  partial_bundle() %>% 
  config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)

```

<!-- ======================================================= -->
## 準備 {  }

### パッケージの読み込み {.unnumbered}  

以下のコードを実行すると、分析に必要なパッケージが読み込まれます。このハンドブックでは、パッケージを読み込むために、**pacman** パッケージの `p_load()` を主に使用しています。`p_load()` は、必要に応じてパッケージをインストールし、現在の R セッションで使用するためにパッケージを読み込む関数です。また、すでにインストールされたパッケージは、R の基本パッケージである **base** （以下、**base** R）の `library()` を使用して読み込むこともできます。R のパッケージに関する詳細は [R の基礎](#basics) の章をご覧ください。


```{r}
pacman::p_load(
  rio,       # インポート・エクスポート
  here,      # ファイルパス
  lubridate, # 日付の操作
  plotly,    # 動的な作図
  scales,    # 軸やスケールの調整
  tidyverse  # データの処理と可視化
  ) 
```

### はじめは `ggplot()` 関数から {.unnumbered}  

この章では、動的な図に変換したい図表を `ggplot()` 関数を用いて作成するところから始めることを想定しています。この章では、このハンドブックの多くの章で使われている `linelist` ケースを使って、このようなプロットをいくつか作ってみます。


### データのインポート {.unnumbered}

まず始めに、エボラ出血熱のシミュレーションで得られた症例がクリーニングされたラインリストの取り込みをします。続きをご覧になりたい方は、<a href='<https://github.com/appliedepi/epiRhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds'> class='download-button'>クリックして「クリーニングされた」ラインリストをダウンロードしてください</a>（.rdsファイルとして）。**rio** パッケージの `import()` 関数を使ってデータの読み込みをします（.xlsx, .csv, .rdsなどの多くのファイルの種類を扱うことができます。

```{r, echo=F}
# ラインリストを R へインポート
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# 結果のラインリストの取り込み
linelist <- import("linelist_cleaned.rds")
```

ラインリストの最初の50行を以下に表示します。

```{r, message=FALSE, echo=F}
# ラインリストのデータを表として表示
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```






  
<!-- ======================================================= -->
## `ggplotly()` 関数によるプロット {  }

**plotly** パッケージの `ggplotly()` 関数を使うと、`ggplot()` 関数の出力を動的な図へかんたんに変換できます。`ggplot()` 関数の出力を保存して、それを `ggplotly()` 関数にパイプするだけです。


下の図は、ある週に死亡した症例の割合を表すシンプルな線をプロットしたものです。

まず、疫学週毎のサマリーデータを作成し、結果が判明している症例のうち死亡した症例の割合を計算します。

```{r}
weekly_deaths <- linelist %>%
  group_by(epiweek = floor_date(date_onset, "week")) %>%  # 疫学週毎のデータの作成とグループ化
  summarise(                                              # 新しいサマリーデータフレームの作成:
    n_known_outcome = sum(!is.na(outcome), na.rm=T),      # 結果が判明しているグループごとの症例数
    n_death  = sum(outcome == "Death", na.rm=T),          # 死亡したグループごとの症例数
    pct_death = 100*(n_death / n_known_outcome)           # 結果が判明している症例のうち、死亡した症例の割合
  )
```
`weekly_deaths` データセットの最初の50行を示します。

```{r message=FALSE, echo=F}
DT::datatable(head(weekly_deaths, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```
そして、**ggplot2** パッケージで `geom_line()` 関数を使ってプロットを作成します。

```{r, warning=F, message=F}
deaths_plot <- ggplot(data = weekly_deaths)+            # weekly_deaths データを使用する
  geom_line(mapping = aes(x = epiweek, y = pct_death))  # 折れ線グラフの作成

deaths_plot   # 出力
```


このプロットオブジェクトを以下のように `ggplotly()` 関数に渡すだけで、動的に表示できます。線の上にマウスを置くと、x と y の値が表示されます。図を拡大したり、ドラッグしたりすることができます。また、図の右上には、アイコンが表示されています。順に、以下のことができます。

* 今表示されている図を PNG 画像としてダウンロードする
* 選択範囲を指定して拡大
* "Pan", つまり図をクリック＆ドラッグすることで図を移動させる
* 拡大、縮小、またはデフォルトの縮尺に戻る
* 軸のスケールをデフォルトに戻す
* 動的にグラフ上の点からx軸、y軸に伸びる点線である "spike lines" のオン・オフを切り替える
* グラフ線上にカーソルを置いていないときにデータを表示するか否かの設定


```{r}
deaths_plot %>% plotly::ggplotly()
```

グループ化されたデータも、`ggplotly()` 関数で動作します。下記の図は、結果ごとにグループ化された週毎の流行曲線（エピカーブ）を作成したものです。積み上げられた棒グラフは動的に表示されています。凡例の各項目をクリックしてみてください（現れたり消えたりします）。


```{r plot_show, eval=F}
# incidence2 パッケージを用いた流行曲線（エピカーブ）の作成
p <- incidence2::incidence(
  linelist,
  date_index = date_onset,
  interval = "weeks",
  groups = outcome) %>% plot(fill = outcome)
```

```{r, echo=T, eval=F}
# 動的な図へ
p %>% plotly::ggplotly()
```
  
```{r, warning = F, message = F, , out.width=c('95%'), out.height=c('500px'), echo=FALSE}
p %>% 
  ggplotly() %>% 
  partial_bundle() 
```
  
<!-- ======================================================= -->
## 変更・修正 {  }

### ファイルサイズ {.unnumbered}  

R Markdown で生成された HTML にエクスポートする場合（本書のように！）、図をできるだけ小さなデータサイズにすることが望まれます（ほとんどの場合悪影響はありません）。そのためには、動的な図オブジェクトを **plotly** パッケージの `partial_bundle()` 関数にパイプします。

```{r plot_tidyshow, eval=F}
p <- p %>% 
  plotly::ggplotly() %>%
  plotly::partial_bundle()
```

### ボタン {.unnumbered}  

標準的な plotly のボタンの中には、余計なものや邪魔なものがあるので、それらを取り除くことができます。これは、**plotly** パッケージの `config()` 関数の出力をパイプでつなぎ、削除したいボタンを指定するだけで可能です。以下の例では、削除するボタンの名前をあらかじめ指定し、引数の `modeBarButtonsToRemove =` に渡しています。 また、`displaylogo = FALSE` とすることで、 **plotly** パッケージのロゴを削除しています。

```{r plot_tidyshow2, eval=F}
## これらのボタンは不要なので削除する
plotly_buttons_remove <- list('zoom2d','pan2d','lasso2d', 'select2d','zoomIn2d',
                              'zoomOut2d','autoScale2d','hoverClosestCartesian',
                              'toggleSpikelines','hoverCompareCartesian')

p <- p %>%          # 上記のボタンを使わずに動的な図を再定義する
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```



<!-- ======================================================= -->
## ヒートタイル {  }

ヒートタイルを含むほとんどの `ggplot()` プロットオブジェクトを動的に変えることができます。ある施設が州へデータを報告した日数の割合を表示する下記の図の作成方法について[ヒートマップ](#heatmap)の章で説明しています。

ここでは詳細な説明はしませんが、コードを紹介します。

```{r  message=F, warning=F}
# データのインポート
facility_count_data <- rio::import(here::here("data", "malaria_facility_count_data.rds"))

# Spring 地区におけるデータを週毎に集約
agg_weeks <- facility_count_data %>% 
  filter(District == "Spring",
         data_date < as.Date("2020-08-01")) %>% 
  mutate(week = aweek::date2week(
    data_date,
    start_date = "Monday",
    floor_day = TRUE,
    factor = TRUE)) %>% 
  group_by(location_name, week, .drop = F) %>%
  summarise(
    n_days          = 7,
    n_reports       = n(),
    malaria_tot     = sum(malaria_tot, na.rm = T),
    n_days_reported = length(unique(data_date)),
    p_days_reported = round(100*(n_days_reported / n_days))) %>% 
  ungroup(location_name, week) %>%
  right_join(tidyr::expand(., week)) %>% 
  mutate(week = aweek::week2date(week))

# プロットの作成
metrics_plot <- ggplot(agg_weeks,
       aes(x = week,
           y = location_name,
           fill = p_days_reported))+
  geom_tile(colour="white")+
  scale_fill_gradient(low = "orange", high = "darkgreen", na.value = "grey80")+
  scale_x_date(expand = c(0,0),
               date_breaks = "2 weeks",
               date_labels = "%d\n%b")+
  theme_minimal()+ 
  theme(
    legend.title = element_text(size=12, face="bold"),
    legend.text  = element_text(size=10, face="bold"),
    legend.key.height = grid::unit(1,"cm"),
    legend.key.width  = grid::unit(0.6,"cm"),
    axis.text.x = element_text(size=12),
    axis.text.y = element_text(vjust=0.2),
    axis.ticks = element_line(size=0.4),
    axis.title = element_text(size=12, face="bold"),
    plot.title = element_text(hjust=0,size=14,face="bold"),
    plot.caption = element_text(hjust = 0, face = "italic")
    )+
  labs(x = "Week",
       y = "Facility name",
       fill = "Reporting\nperformance (%)",
       title = "Percent of days per week that facility reported data",
       subtitle = "District health facilities, April-May 2019",
       caption = "7-day weeks beginning on Mondays.")

metrics_plot # 出力
```

以下では、上記のグラフを動的にして、単純化したボタンやファイルサイズを修正しています。

```{r,  out.width=c('95%'), out.height=c('500px')}
metrics_plot %>% 
  plotly::ggplotly() %>% 
  plotly::partial_bundle() %>% 
  plotly::config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove)
```

<!-- ## Maps {.unnumbered}   -->

<!-- You can also make `ggplot()` GIS maps interactive, although it makes a bit more care.  -->

<!-- THIS SECTION IS UNDER CONSTRUCTION  -->

<!-- Although **plotly** works well with `ggplot2::geom_sf` in RStudio, when you try to include its outputs in R Markdown HTML files (like this book), it doesn't work well.   -->

<!-- So instead you can use {**plotly**}'s own mapping tools which can be tricky but are easy when you know how. Read on...   -->

<!-- We're going to use Covid-19 incidence across African countries for this example. The data used can be found on the [World Health Organisation website](https://covid19.who.int/table).   -->

<!-- You'll also need a new type of file, a GeoJSON, which is sort of similar to a shp file for those familiar with GIS. For this book, we used one from [here](https://geojson-maps.ash.ms).   -->

<!-- GeoJSON files are stored in R as complex lists and you'll need to maipulate them a little. -->

<!-- ```{r, echo=T,} -->
<!-- ## You need two new packages: {rjson} and {purrr} -->
<!-- pacman::p_load(plotly, rjson, purrr) -->

<!-- ## This is a simplified version of the WHO data -->
<!-- df <- rio::import(here::here("data", "gis", "covid_incidence.csv")) -->

<!-- ## Load your geojson file -->
<!-- geoJSON <- rjson::fromJSON(file=here::here("data", "gis", "africa_countries.geo.json")) -->

<!-- ## Here are some of the properties for each element of the object -->
<!-- head(geoJSON$features[[1]]$properties) -->

<!-- ``` -->


<!-- This is the tricky part. For {**plotly**} to match your incidence data to GeoJSON, the countries in the geoJSON need an id in a specific place in the list of lists. For this we need to build a basic function: -->
<!-- ```{r} -->
<!-- ## The property column we need to choose here is "sovereignt" as it is the names for each country -->
<!-- give_id <- function(x){ -->

<!--   x$id <- x$properties$sovereignt  ## Take sovereignt from properties and set it as the id -->

<!--   return(x) -->
<!-- } -->

<!-- ## Use {purrr} to apply this function to every element of the features list of the geoJSON object -->
<!-- geoJSON$features <- purrr::map(.x = geoJSON$features, give_id) -->
<!-- ``` -->

<!-- <!-- ======================================================= --> -->
<!-- ### Maps - plot {  } -->

<!-- UNDER CONSTRUCTION -->

<!-- ```{r, echo=FALSE, eval=FALSE, out.width=c('95%'), out.height=c('500px'),warning=F} -->
<!-- plotly::plot_ly() %>%  -->
<!--   plotly::add_trace(                    #The main plot mapping functionn -->
<!--     type="choropleth", -->
<!--     geojson=geoJSON, -->
<!--     locations=df$Name,          #The column with the names (must match id) -->
<!--     z=df$Cumulative_incidence,  #The column with the incidence values -->
<!--     zmin=0, -->
<!--     zmax=57008, -->
<!--     colorscale="Viridis", -->
<!--     marker=list(line=list(width=0)) -->
<!--   ) %>% -->
<!--   colorbar(title = "Cases per million") %>% -->
<!--   layout(title = "Covid-19 cumulative incidence", -->
<!--                  geo = list(scope = 'africa')) %>%  -->
<!--   config(displaylogo = FALSE, modeBarButtonsToRemove = plotly_buttons_remove) -->
<!-- ``` -->

<!-- ======================================================= -->
## 参考文献 {  }

Plotly はR だけではなく、Python（JavaScript で作られているため、実際にはあらゆるデータサイエンスで用いられている言語）でも動作します。詳しくは [plotly のウェブサイト](https://plotly.com/r/)をご覧ください。


