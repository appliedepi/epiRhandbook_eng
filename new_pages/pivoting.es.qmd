
<!-- ======================================================= -->
<!-- ======================================================= -->
<!-- ======================================================= -->
# Pivotar datos {#pivoting-data} 

```{r, warning=F, message=F, out.height = c('50%'), fig.align="center", fig.show='hold', echo=F}
knitr::include_graphics(here::here("images", "pivoting", "Pivoting_500x500.png"))

#knitr::include_graphics(here::here("images", "pivoting", "pivot_longer_new.png"))
#knitr::include_graphics(here::here("images", "pivoting", "pivot_bar.png"))
#knitr::include_graphics(here::here("images", "pivoting", "pivot_wider_new.png"))
```


En la gestión de datos, se puede entender que el *pivoteo se refiere* a uno de los dos procesos: 

1.  La creación de *tablas dinámicas*, que son tablas de estadísticas que resumen los datos de una tabla más extensa 

2.  La conversión de una tabla de formato **largo** a formato **ancho**, o viceversa. 

**En esta página, nos centraremos en la última definición.** La primera es un paso crucial en el análisis de datos, y se trata en las páginas [Agrupar datos](#grouping-data) y [Tablas descriptivas](#descriptive-tables). 

En esta página se tratan los formatos de los datos. Es útil conocer la idea de "datos ordenados", en la que cada variable tiene su propia columna, cada observación tiene su propia fila y cada valor tiene su propia celda. Se puede encontrar más información sobre este tema [en este capítulo en línea de R for Data Science](https://es.r4ds.hadley.nz/datos-ordenados.html). 


## Preparación   {#preparation-3}

### Cargar paquetes {.unnumbered}  

Este trozo de código muestra la carga de los paquetes necesarios para los análisis. En este manual destacamos `p_load()` de **pacman**, que instala el paquete si es necesario *y* lo carga para su uso. También puede cargar los paquetes instalados con `library()` de R **base**. Consulta la página sobre [Fundamentos de R](#r-basics) para obtener más información sobre los paquetes de R. 

```{r}
pacman::p_load(
  rio,          # Importación de ficheros
  here,         # Localizador de archivos
  kableExtra,   # Build and manipulate complex tables
  tidyverse)    # gestión de datos + gráficos ggplot2
```



### Importar datos {.unnumbered}


### Recuento de casos de malaria {-}  

En esta página, utilizaremos unos datos ficticios de casos diarios de malaria, por centro y grupo de edad. Si quieres seguirlo, [clica aquí para descargarlo (como archivo .rds)](https://github.com/epirhandbook/Epi_R_handbook/raw/master/data/malaria_facility_count_data.rds). Importa los datos con la función `import()` del paquete **rio** (maneja muchos tipos de archivos como .xlsx, .csv, .rds - mira la página de [importación y exportación](#import-and-export) para más detalles). 
  

```{r, echo=F}
count_data <- rio::import(here::here("data", "malaria_facility_count_data.rds")) %>% 
  as_tibble()
```

```{r, eval=F}
# Import data
count_data <- import("malaria_facility_count_data.rds")
```

A continuación se muestran las primeras 50 filas. 

```{r, message=FALSE, echo=F}
# mostrar los datos de linelist como una tabla
DT::datatable(head(count_data, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


### Listado de casos de Linelist  {-}  

En la parte posterior de esta página, también utilizaremos los datos de casos de una epidemia de ébola simulada. Si quieres seguir el proceso, [clica aqui para descargar linelist "limpio" ](https://github.com/epirhandbook/Epi_R_handbook/raw/master/data/case_linelists/linelist_cleaned.rds) (como archivo .rds). Importa tus datos con la función `import()` del paquete **rio** (acepta muchos tipos de archivos como .xlsx, .rds, .csv - mira la página de [importación y exportación](#import-and-export) para más detalles). 

```{r, echo=F}
# importar el listado a R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```


```{r, eval=F}
# importar tus datos
linelist <- import("linelist_cleaned.xlsx")
```







<!-- ======================================================= -->
## De ancho a largo  {#wide-to-long}

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "pivoting", "pivot_longer_new.png"))
```


<!-- ======================================================= -->
### "Formato ancho" {.unnumbered}

Los datos suelen introducirse y almacenarse en un formato "amplio", en el que las características o respuestas de un sujeto se almacenan en una sola fila. Aunque esto puede ser útil para la presentación, no es ideal para algunos tipos de análisis. 

Tomemos como ejemplo el set de datos `count_data` importado en la sección "Preparación". Puedes ver que cada fila representa un "centro-día". Los recuentos de casos reales (las columnas más a la derecha) se almacenan en un formato "ancho", de modo que la información de cada grupo de edad en un día determinado del centro se almacena en una sola fila. 

```{r, echo=F}
DT::datatable(count_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T) )
```

Cada observación de este conjunto de datos se refiere a los recuentos de paludismo en una de las 65 instalaciones en una fecha determinada, que va desde `count_data$data_date %\>% min()` hasta `count_data$data_date %\>% max()`. Estas instalaciones están situadas en una `Province` (Norte) y cuatro `District` (Spring, Bolo, Dingo y Barnard). Los datos proporcionan los recuentos globales de malaria, así como los recuentos específicos por edad en cada uno de los tres grupos de edad: \<4 años, 5-14 años y 15 años o más. 

Los datos "anchos" como éste no se ajustan a las normas de "datos ordenados", porque los encabezados de las columnas no representan realmente "variables", sino que representan *valores* de una hipotética variable "grupo de edad". 

Este formato puede ser útil para presentar la información en una tabla, o para introducir datos (por ejemplo, en Excel) a partir de formularios de informes de casos. Sin embargo, en la etapa de análisis, estos datos normalmente deben ser transformados a un formato "largo" más alineado con los estándares de "datos ordenados". El paquete **ggplot2**, en particular, funciona mejor cuando los datos están en un formato "largo". 

La visualización de los recuentos *totales* de malaria a lo largo del tiempo no plantea ninguna dificultad con los datos en su formato actual: 

```{r, warning=F, message=F}
ggplot(count_data) +
  geom_col(aes(x = data_date, y = malaria_tot), width = 1)
```

Sin embargo, ¿qué pasaría si quisiéramos mostrar las contribuciones relativas de cada grupo de edad a este recuento total? En este caso, necesitamos asegurarnos de que la variable de interés (grupo de edad), aparezca en el conjunto de datos en una sola columna que pueda pasarse a {ggplot2} el argumento `aes()` de  "mapping aesthetics". 




<!-- ======================================================= -->
### `pivot_longer()` {.unnumbered}

La función `pivot_longer()` de **tidyr**  hace que los datos sean "largos". **tidyr** forma parte de los paquetes **tidyverse** . 

Acepta un rango de columnas para transformar (especificado a `cols = `). Por lo tanto, puede operar sólo en una parte de unos datos. Esto es útil para los datos de la malaria, ya que sólo queremos pivotar las columnas de recuento de casos. 

En este proceso, terminará con dos "nuevas" columnas - una con las categorías (los antiguos nombres de las columnas), y otra con los valores correspondientes (por ejemplo, recuento de casos). Puedes aceptar los nombres por defecto para estas nuevas columnas, o puede especificar otros con `names_to = ` y `values_to = ` respectivamente. 

Veamos `pivot_longer()` en acción... 



### Pivoteo estándar {.unnumbered}  

Queremos utilizar la función `pivot_longer()` de **tidyr** para convertir los datos "anchos" en un formato "largo". Concretamente, para convertir las cuatro columnas numéricas con datos sobre los recuentos de malaria en dos nuevas columnas: una que contenga los *grupos de edad* y otra que contenga los *valores* correspondientes. 


```{r, eval=F}
df_long <- count_data %>% 
  pivot_longer(
    cols = c(`malaria_rdt_0-4`, `malaria_rdt_5-14`, `malaria_rdt_15`, `malaria_tot`)
  )

df_long
```

Observa que el dataframe recién creado (`df_long`) tiene más filas (12.152 frente a 3.038); se ha hecho *más largo*. De hecho, es precisamente cuatro veces más largo, porque cada fila de los datos originales representa ahora cuatro filas en df_long, una para cada una de las observaciones de recuento de malaria (<4 años, 5-14 años, 15 años+ y total). 

Además de ser más largo, el nuevo conjunto de datos tiene menos columnas (8 frente a 10), ya que los datos que antes se almacenaban en cuatro columnas (las que empiezan por el prefijo `malaria_`) se almacenan ahora en dos. 

Dado que los nombres de estas cuatro columnas comienzan con el prefijo `malaria_`, podríamos haber hecho uso de la práctica función "tidyselect" `starts_with()` para conseguir el mismo resultado (véase la página [Limpieza de datos y funciones básicas](#cleaning-data-and-core-functions) para conocer más sobre estas funciones de ayuda). 

```{r}
# proporcionar a la columna una función de ayuda tidyselect
count_data %>% 
  pivot_longer(
    cols = starts_with("malaria_")
  )
```

o por posición: 

```{r, eval=F}
# proporcionar columnas por posición
count_data %>% 
  pivot_longer(
    cols = 6:9
  )
```

o por rango de nombres: 

```{r, eval=F}
# proporcionar rango de columnas consecutivas
count_data %>% 
  pivot_longer(
    cols = `malaria_rdt_0-4`:malaria_tot
  )
```


Estas dos nuevas columnas reciben los nombres por defecto de `name` y `value`, pero podemos cambiar estos valores por defecto para proporcionar nombres más significativos, que pueden ayudar a recordar lo que se almacena dentro, utilizando los argumentos `names_to` y `values_to`. Utilicemos los nombres `age_group` y `counts`: 

```{r}
df_long <- 
  count_data %>% 
  pivot_longer(
    cols = starts_with("malaria_"),
    names_to = "age_group",
    values_to = "counts"
  )

df_long
```

Ahora podemos pasar este nuevo conjunto de datos a `{ggplot2}`, y asignar la nueva columna `count` al eje-y y la nueva columna `age_group` al argumento `fill = ` (el color interno de la columna). Esto mostrará los recuentos de malaria en un gráfico de barras apilado, por grupo de edad: 

```{r, warning=F, message=F}
ggplot(data = df_long) +
  geom_col(
    mapping = aes(x = data_date, y = counts, fill = age_group),
    width = 1
  )
```

Examina esta nueva gráfica y compárala con la que hemos creado antes: *¿qué ha fallado?* 

Nos hemos encontrado con un problema común al manejar los datos de vigilancia: hemos incluido también los recuentos totales de la columna `malaria_tot`, por lo que la magnitud de cada barra en el gráfico es el doble de lo que debería ser. 

Podemos manejar esto de varias maneras. Podríamos simplemente filtrar estos totales en los datos antes de pasarlo a `ggplot()`: 

```{r, warning=F, message=F}
df_long %>% 
  filter(age_group != "malaria_tot") %>% 
  ggplot() +
  geom_col(
    aes(x = data_date, y = counts, fill = age_group),
    width = 1
  )
```

Como alternativa, podríamos haber excluido esta variable al ejecutar `pivot_longer()`, manteniéndola así en set de datos como una variable independiente. Observa cómo se "expanden" sus valores para llenar las nuevas filas. 

```{r, warning=F, message=F}
count_data %>% 
  pivot_longer(
    cols = `malaria_rdt_0-4`:malaria_rdt_15,   # no incluye la columna de totales
    names_to = "age_group",
    values_to = "counts"
  )
```





### Pivotear datos de múltiples tipos  {.unnumbered}

El ejemplo anterior funciona bien en situaciones en las que todas las columnas que se quieren "pivotar más" son del mismo tipo (carácter, numérico, lógico...). 

Sin embargo, habrá muchos casos en los que, en el trabajo de campo, se trabaje con datos preparados por personas no especializadas y que sigan su propia lógica no estándar - como señaló Hadley Wickham (haciendo referencia a Tolstoi) en su [artículo seminal](https://vita.had.co.nz/papers/tidy-data.pdf) sobre los principios de **Tidy Data**: "Como las familias, los conjuntos de datos ordenados son todos iguales, pero cada conjunto de datos desordenado es desordenado a su manera". 

Un problema particularmente común que encontrarás será la necesidad de pivotar columnas que contienen diferentes tipos de datos. Este pivote resultará en el almacenamiento de estos diferentes tipos de datos en una sola columna, lo cual no es una buena situación. Se pueden seguir varios enfoques para separar el desorden que esto crea, pero hay un paso importante que puedes seguir usando `pivot_longer()` para evitar crear tal situación tu mismo. 

Tomemos una situación en la que ha habido una serie de observaciones en diferentes pasos de tiempo para cada uno de los tres elementos A, B y C. Ejemplos de estos elementos podrían ser individuos (por ejemplo, contactos de un caso de ébola que se rastrean cada día durante 21 días) o puestos de salud de aldeas remotas que se supervisan una vez al año para garantizar que siguen funcionando. Utilicemos el ejemplo del rastreo de contactos. Imaginemos que los datos se almacenan de la siguiente manera: 


```{r, message=FALSE, echo=F}

df <- 
  tibble::tribble(
     ~id,   ~obs1_date, ~obs1_status,   ~obs2_date, ~obs2_status,   ~obs3_date, ~obs3_status,
     "A", "2021-04-23",    "Healthy", "2021-04-24",    "Healthy", "2021-04-25",     "Unwell",
     "B", "2021-04-23",    "Healthy", "2021-04-24",    "Healthy", "2021-04-25",    "Healthy",
     "C", "2021-04-23",    "Missing", "2021-04-24",    "Healthy", "2021-04-25",    "Healthy"
     ) 

DT::datatable(df, rownames = FALSE)

```

Como puede verse, los datos son un poco complicados. Cada fila almacena información sobre un elemento, pero con la serie temporal cada vez más alejada hacia la derecha a medida que avanza el tiempo. Además, los tipos de columnas alternan entre valores de fecha y caracteres. 

Un ejemplo particularmente malo que encontró este autor fue el de los datos de vigilancia del cólera, en el que se añadieron 8 nuevas columnas de observaciones *cada día en el* transcurso de **4 años**. El simple hecho de abrir el archivo de Excel en el que se almacenaban estos datos me llevó más de 10 minutos en mi ordenador portátil. 

Para trabajar con estos datos, necesitamos transformar el dataframe a formato largo, pero manteniendo la separación entre una columna `date` y una columna de `character` (estado), para cada observación de cada elemento. Si no lo hacemos, podríamos terminar con una mezcla de tipos de variables en una sola columna (un gran "no-no" cuando se trata de gestión de datos y de datos ordenados): 

```{r}
df %>% 
  pivot_longer(
    cols = -id,
    names_to = c("observation")
  )

```

Arriba, nuestro pivote ha fusionado *fechas* y *caracteres* en una sola columna de `value`. R reaccionará convirtiendo toda la columna en tipo carácter, y se pierde la utilidad de las fechas. 

Para evitar esta situación, podemos aprovechar la estructura sintáctica de los nombres de las columnas originales. Hay una estructura de nombres común, con el número de observación, un guión bajo, y luego "estado" o "fecha". Podemos aprovechar esta sintaxis para mantener estos dos tipos de datos en columnas separadas después del pivote. 

Para ello: 

* Proporcionar un vector de caracteres al argumento names_to =, siendo el segundo elemento (`".value"`). Este término especial indica que las columnas pivotadas se dividirán basándose en un carácter de su nombre... 
* También se debe proporcionar el carácter de "división" al argumento `names_sep = `. En este caso, es el guión bajo "_". 

Así, la denominación y división de las nuevas columnas se basa en el guión bajo de los nombres de las variables existentes. 

```{r}

df_long <- 
  df %>% 
  pivot_longer(
    cols = -id,
    names_to = c("observation", ".value"),
    names_sep = "_"
  )

df_long

```

**Toques finales**: 

Ten en cuenta que la columna de fecha es actualmente de tipo *carácter* - podemos convertirla fácilmente en tipo fecha utilizando las funciones `mutate()` y `as_date()` descritas en la página [Trabajar con fechas](#working-with-dates-1). 

También podemos convertir la columna de `observation` a un formato `numeric` eliminando el prefijo "obs" y convirtiendo a numérico. Podemos hacer esto con `str_remove_all()` del paquete **stringr** (véase la página [Caracteres y cadenas](#characters-and-strings)).   

```{r}

df_long <- 
  df_long %>% 
  mutate(
    date = date %>% lubridate::as_date(),
    observation = 
      observation %>% 
      str_remove_all("obs") %>% 
      as.numeric()
  )

df_long

```

Y ahora, podemos empezar a trabajar con los datos en este formato, por ejemplo, trazando un mosaico de calor descriptivo: 

```{r}
ggplot(data = df_long, mapping = aes(x = date, y = id, fill = status)) +
  geom_tile(colour = "black") +
  scale_fill_manual(
    values = 
      c("Healthy" = "lightgreen", 
        "Unwell" = "red", 
        "Missing" = "orange")
  )

```





<!-- ======================================================= -->
## De largo a ancho  {#long-to-wide}

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "pivoting", "pivot_wider_new.png"))
```

En algunos casos, es posible que queramos convertir unos datos a un formato ancho. Para ello, podemos utilizar la función `pivot_wider()`. 

Un caso de uso típico es cuando queremos transformar los resultados de un análisis en un formato que sea más digerible para el lector (como una [tabla para su presentación](#tables-for-presentation)). Por lo general, se trata de transformar unos datos en el que la información de un sujeto está repartida en varias filas en un formato en el que esa información se almacena en una sola fila. 

### Datos {.unnumbered}

Para esta sección de la página, utilizaremos la lista de casos (véase la sección [Preparación](#preparation-3)), que contiene una fila por caso. 

Aquí están las primeras 50 filas: 

```{r, message=FALSE, echo=F}
# mostrar los datos de linelist como una tabla
DT::datatable(head(linelist, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```


Supongamos que queremos conocer los recuentos de individuos en los diferentes grupos de edad, por género: 

```{r}
df_wide <- 
  linelist %>% 
  count(age_cat, gender)

df_wide
```

Esto nos da un largo conjunto de datos que es genial para producir visualizaciones en **ggplot2**, pero no es ideal para la presentación en una tabla: 

```{r}
ggplot(df_wide) +
  geom_col(aes(x = age_cat, y = n, fill = gender))
```

### Pivote ancho {.unnumbered}  
 
Por lo tanto, podemos utilizar `pivot_wider()` para transformar los datos en un formato mejor para incluirlos como tablas en nuestros informes. 

El argumento `names_from` especifica la columna *from* que genera la columna nueva *names*, mientras que el argumento `values_from` especifica la columna *from* de la que tomar los *values* para rellenar las celdas. El argumento `id_cols = ` es opcional, pero se puede proporcionar un vector de nombres de columnas que no deben ser pivotadas, y que por tanto identificarán cada fila. 

```{r}
table_wide <- 
  df_wide %>% 
  pivot_wider(
    id_cols = age_cat,
    names_from = gender,
    values_from = n
  )

table_wide
```

Esta tabla es mucho más fácil de leer y, por tanto, mejor para incluirla en nuestros informes. Se puede convertir en una tabla bonita con varios paquetes, como **flextable** y **knitr**. Este proceso se elabora en la página [Tablas para presentaciones](#tables-for-presentation).  

```{r}
table_wide %>% 
  janitor::adorn_totals(c("row", "col")) %>% # adds row and column totals
  knitr::kable() %>% 
  kableExtra::row_spec(row = 10, bold = TRUE) %>% 
  kableExtra::column_spec(column = 5, bold = TRUE) 
```

---


<!-- ======================================================= -->
## Rellenar {#fill}

En algunas situaciones después de `pivotar`, y más comúnmente después de unir con `bind`, nos quedan huecos en algunas celdas que nos gustaría rellenar. 

<!-- ======================================================= -->
### Datos {.unnumbered}

Por ejemplo, toma dos conjuntos de datos, cada uno con observaciones para el número de medición, el nombre del centro y el recuento de casos en ese momento. Sin embargo, el segundo conjunto de datos también tiene la variable `Year`.

```{r}
df1 <- 
  tibble::tribble(
       ~Measurement, ~Facility, ~Cases,
                  1,  "Hosp 1",     66,
                  2,  "Hosp 1",     26,
                  3,  "Hosp 1",      8,
                  1,  "Hosp 2",     71,
                  2,  "Hosp 2",     62,
                  3,  "Hosp 2",     70,
                  1,  "Hosp 3",     47,
                  2,  "Hosp 3",     70,
                  3,  "Hosp 3",     38,
       )

df1 

df2 <- 
  tibble::tribble(
    ~Year, ~Measurement, ~Facility, ~Cases,
     2000,            1,  "Hosp 4",     82,
     2001,            2,  "Hosp 4",     87,
     2002,            3,  "Hosp 4",     46
  )

df2
```


Cuando realizamos un `bind_rows()` para unir los dos conjuntos de datos, la variable `Year` se rellena con `NA` para aquellas filas en las que no había información previa (es decir, el primer conjunto de datos): 


```{r}
df_combined <- 
  bind_rows(df1, df2) %>% 
  arrange(Measurement, Facility)

df_combined

```

<!-- ======================================================= -->
### `fill()` {.unnumbered}

En este caso, `Year` es una variable útil para incluir, especialmente si queremos explorar las tendencias a lo largo del tiempo. Por lo tanto, utilizamos `fill()` para *rellenar* esas celdas vacías, especificando la columna a rellenar y la dirección (en este caso **hacia arriba**): 

```{r}
df_combined %>% 
  fill(Year, .direction = "up")
```

Alternativamente, podemos reordenar los datos para que tengamos que rellenar en sentido descendente:

```{r}
df_combined <- 
  df_combined %>% 
  arrange(Measurement, desc(Facility))

df_combined

df_combined <- 
  df_combined %>% 
  fill(Year, .direction = "down")

df_combined
```

Ahora tenemos unos datos útiles para representarlos gráficamente: 

```{r}
ggplot(df_combined) +
  aes(Year, Cases, fill = Facility) +
  geom_col()
```

Pero es menos útil para presentarlo en una tabla, así que practiquemos la conversión de este largo y desordenado dataframe en un dataframe ancho y ordenado: 

```{r}
df_combined %>% 
  pivot_wider(
    id_cols = c(Measurement, Facility),
    names_from = "Year",
    values_from = "Cases"
  ) %>% 
  arrange(Facility) %>% 
  janitor::adorn_totals(c("row", "col")) %>% 
  knitr::kable() %>% 
  kableExtra::row_spec(row = 5, bold = TRUE) %>% 
  kableExtra::column_spec(column = 5, bold = TRUE) 
```

N.B. En este caso, tuvimos que especificar que sólo se incluyeran las tres variables `Facility`, `Year`, y `Cases`, ya que la variable adicional `Measurement` interferiría en la creación de la tabla: 

```{r}
df_combined %>% 
  pivot_wider(
    names_from = "Year",
    values_from = "Cases"
  ) %>% 
  knitr::kable()
```

## Recursos {#resources-5}

Aquí hay un [tutorial](https://datacarpentry.org/r-socialsci/03-dplyr-tidyr/index.html) útil 

