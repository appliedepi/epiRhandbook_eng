# Testes estatísticos simples {#stat-tests}


Esta página demonstra como realizar testes estatísticos simples com os pacotes R **base**, **rstatix**, e **gtsummary**.  

* Teste t  
* Teste de Shapiro-Wilk  
* Teste de Wilcoxon  
* Teste de Kruskal-Wallis  
* Teste qui-quadrado de Pearson  
* Correlações entre variáveis numéricas  

...muitos outros testes podem ser realizados, mas mostramos apenas os mais comuns e fornecemos links para outras fontes.  

Cada um dos pacotes acima possui certas vantagens e desvantagens:

* Utilize as funções do pacote R **base** para exportar resultados estatísticos para o console do R
* Utilize as funções do pacote **rstatix** para gerar os resultados em um quadro de dados, ou caso queira que os testes sejam realizados por grupos
* Utilize o pacote **gtsummary** para exportar facilmente tabelas prontas para publicação.



<!-- ======================================================= -->
## Preparação {  }


### Carregue os pacotes {.unnumbered}

Este pequeno código carrega os pacotes necessários para as análises. Neste manual, nós estimulamos o uso da função `p_load()`, do **pacman**, que instala os pacotes, caso necessários, *e* os carrega para utilização. Também é possível carregar pacotes já instalados com a função `library()` do pacote R **base**. Veja a página sobre [Introdução ao R](#basics) para mais informações sobre pacotes do R.


```{r}
pacman::p_load(
  rio,          # Importa arquivos
  here,         # Localiza arquivos
  skimr,        # visualize os dados
  tidyverse,    # gerenciamento dos dados + gráficos no ggplot2, 
  gtsummary,    # resumo estatístico e testes
  rstatix,      # estatísticas
  corrr,        # análise de correlação entre variáveis numéricas
  janitor,      # adicione totais e porcentagens às tabelas
  flextable     # converte tabelas para o formato HTML
  )
```

### Importando os dados {.unnumbered}

Nós iremos importar o banco de dados dos casos de uma simulação de epidemia de Ebola. Se você quiser acompanhar, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>clique para baixar o banco "limpo"</a> (como arquivo .rds). Importe os dados com a função `import()`, do pacote **rio** (ela aceita muitos formatos de arquivos, como .xlsx, .rds, .csv - veja a página [Importar e exportar](#importing) para detalhes).  


```{r, echo=F}
# importa o banco de dados para o ambiente R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# importa o 'linelist'
linelist <- import("linelist_cleaned.rds")
```

As primeiras 50 linhas dos dados são mostradas abaixo.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```





## Pacote R **base** {}

Você pode utilizar as funções do pacote R **base** para realizar testes estatísticos. Os comandos são relativamente simples, e os resultados são exportados para o terminal do R para visualização. Entretanto, normalmente os resultados são gerados no formato de listas, o que dificulta a manipulação, caso queira utilizá-los posteriormente.

### Testes T {.unnumbered} 

O [teste t](https://en.wikipedia.org/wiki/Student%27s_t-test), também chamando de "Teste t de Student", é tipicamente utilizado para determinar se existem diferenças significativas entre as médias de variáveis numéricas de dois grupos distintos. Aqui, nós iremos mostrar duas sintaxes para realizar esse teste, de acordo com a presença ou não das colunas no mesmo quadro de dados.

**Sintaxe 1:** Esta é a sintaxe utilizada quando as colunas numéricas e categóricas estão no mesmo quadro de dados (*data frame*). Especifique a coluna numérica no lado esquerdo da equação, e a coluna categórica no lado direito. Coloque o nome do banco de dados no argumento `data = `. Opcionalmente, ajuste os argumentos `paired = TRUE`, `conf.level = ` para (0.95 default), e `alternative = ` para ("two.sided", "less", ou "greater"). Digite `?t.test` para mais detalhes.  

```{r}
## compare a média das idades de acordo com o sexo com um teste t
t.test(age_years ~ gender, data = linelist)
```

**Sintaxe 2:** Você pode comparar dois vetores numéricos separados com essa sintaxe. Por exemplo, se as duas colunas estão em bancos de dados distintos.

```{r, eval=F}
t.test(df1$age_years, df2$age_years)
```

Também é possível utilizar o teste t para determinar se a média de uma amostra é significativamente diferente de algum valor específico. Aqui, nós aplicamos o teste t entre uma amostra e uma média conhecida/suposta de uma população (`mu = `):

```{r, eval=F}
t.test(linelist$age_years, mu = 45)
```

### Teste de Shapiro-Wilk {.unnumbered}  

O [teste de Shapiro-Wilk](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test) pode ser utilizado para determinar se uma amostra foi obtida de uma população com distribuição normal (um pré-requisito de muitos outros testes e análises, como o teste t). Entretanto, isto só pode ser utilizado em uma amostra de 3 a 5000 observações. Para amostras maiores, um [gráfico de Quantil-Quantil](https://ggplot2.tidyverse.org/reference/geom_qq.html) é recomendado.


```{r, eval=F}
shapiro.test(linelist$age_years)
```

### Teste de Wilcoxon {.unnumbered}

O teste de Wilcoxon, também chamado de [teste U de Mann–Whitney](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test), é frequentemente utilizado para determinar se duas amostras numéricas possuem a mesma distribuição, mesmo quando suas populações não possuem distribuição normal ou possuem variância independente (desiguais).

```{r wilcox_base}

## compare a distribuição da idade de acordo com o grupo 'outcome' utilizando o teste wilcox
wilcox.test(age_years ~ outcome, data = linelist)

```


### Teste de Kruskal-Wallis {.unnumbered}


O [tesde de Kruskal-Wallis](https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance) é uma extensão do teste de Wilcoxon que pode ser utilizado para verificar diferenças na distribuição de mais de duas amostras. Quando apenas duas amostras são utilizadas, os resultados são idênticos ao teste de Wilcoxon.

```{r }

## compare a distribuição da idade de acordo com o grupo 'outcome' utilizando o teste de kruskal-wallis
kruskal.test(age_years ~ outcome, linelist)

```

### Teste de qui-quadrado {.unnumbered} 

[O teste do qui-quadrado de Pearson](https://en.wikipedia.org/wiki/Chi-squared_test) é utilizado para verificar se existem diferenças significativas entre grupos categóricos.

```{r}

## compare as proporções em cada grupo utilizando o teste do qui-quadrado
chisq.test(linelist$gender, linelist$outcome)

```



## Pacote **rstatix** {}

O pacote **rstatix** realiza testes estatísticos e gera os resultados de forma que possam ser manipulados ("pipe-friendly"). Os resultados são gerados automaticamente em um quadro de dados (*data frame*), sendo possível realizar operações posteriores com eles. Também é fácil agrupar os dados utilizados nas funções, podendo as estatísticas serem executadas por cada grupo.


### Estatísticas resumo {.unnumbered}  

A função `get_summary_stats()` é uma maneira rápida de gerar resultados estatísticos. Simplesmente aplique seu banco de dados nessa função, e escolha as colunas para analisar. Se nenhuma coluna for especificada, as estatísticas são calculadas com todas as colunas.

Por padrão, um resumo estatístico completo é gerado: n, max, min, mediana, 25%ile, 75%ile, IQR, desvio absoluto mediano (mad), média, desvio padrão, erro padrão, e o intervalo de confiança da média.


```{r}
linelist %>%
  rstatix::get_summary_stats(age, temp)
```

Você pode especificar um sub-grupo do resumo estatístico a ser gerado, ao fornecer um dos seguintes valores ao argumento `type = `: "full", "common", "robust", "five_number", "mean_sd", "mean_se", "mean_ci", "median_iqr", "median_mad", "quantile", "mean", "median", "min", "max".  

Esta função também pode ser utilizada com dados agrupados, de forma que uma linha é gerada por cada variável agrupável:

```{r}
linelist %>%
  group_by(hospital) %>%
  rstatix::get_summary_stats(age, temp, type = "common")
```

O pacote **rstatix** também pode ser utilizado para realizar testes estatísticos:

### Teste t {.unnumbered}  

Utilize a sintaxe para especificar as colunas numérica e categórica:

```{r}
linelist %>% 
  t_test(age_years ~ gender)
```

Ou utilize `~ 1` e especifique `mu = ` para realizar o teste t de uma amostra. Isto também pode ser realizado por grupos.

```{r}
linelist %>% 
  t_test(age_years ~ 1, mu = 30)
```

Se necessário, os testes estatísticos podem ser realizados por grupos, como mostrado abaixo:

```{r}
linelist %>% 
  group_by(gender) %>% 
  t_test(age_years ~ 1, mu = 18)
```

### Tesde de Shapiro-Wilk {.unnumbered}  

Como dito acima, o tamanho da amostra precisa estar entre 3 e 5000.

```{r}
linelist %>% 
  head(500) %>%            # primeiras 500 linhas dos dados em linelist, para exemplificação apenas
  shapiro_test(age_years)
```

### Tesde de Wilcoxon {.unnumbered}  

```{r}
linelist %>% 
  wilcox_test(age_years ~ gender)
```


### Teste de Kruskal-Wallis {.unnumbered}  

Também conhecido como teste U de Mann-Whitney.

```{r}
linelist %>% 
  kruskal_test(age_years ~ outcome)
```


### Teste do Qui-quadrado {.unnumbered}  

A função do teste do Qui-quadrado pode utilizar uma tabela, então primeiro criamos uma tabulação cruzada. Existem diversas formas de realizar isto (veja página de [Tabelas descritivas](#tables-descriptive)), mas aqui utilizamos a função `tabyl()`, do pacote **janitor**, e então removemos a coluna mais a esquerda (com os nomes) antes de utilizá-la na função `chisq_test()`.

```{r}
linelist %>% 
  tabyl(gender, outcome) %>% 
  select(-1) %>% 
  chisq_test()

```

Muitas outras funções e testes estatísticos podem ser realizados com as funções do **rstatix**. Veja a documentação do **rstatix** [online aqui](https://github.com/kassambara/rstatix) ou digite `?rstatix`.  





## Pacote `gtsummary` {#stats_gt}

Use o **gtsummary** se você quiser adicionar os resultados de um teste estatístico em uma tabela criada com esse pacote (como descrito na seção do **gtsummary** na página de [Tabelas descritivas](#tbl_gt)).  

Para realizar testes estatísticos de comparação com a função `tbl_summary`, basta adicionar a função `add_p` na tabela e especificar qual teste utilizar. É possível obter os p-valores corrigidos para testes múltiplos ao utilizar a função `add_q`. Utilize o comando `?tbl_summary` para mais detalhes.  

### Teste Qui-quadrado {.unnumbered}

Compare as proporções de uma variável categórica em dois grupos. O teste estatístico padrão para a função `add_p()` para uma variável categórica é o teste Qui-quadrado de independência com correção de continuidade. Entretanto, caso alguma contagem seja abaixo de 5, o teste exato de Fisher é utilizado em seu lugar.

```{r chi_gt}

theme_gtsummary_language("pt") # acrescentando tradução para o portugues

linelist %>% 
  select(gender, outcome) %>% # selecione as variáveis de interesse
  mutate(outcome=ifelse(outcome=="Death", "Óbito",
                        ifelse(outcome=="Recover", "Recuperado",outcome))) %>%  #só traduzindo 
  tbl_summary(by = outcome, # produza uma tabela resumo e especifique a variável de agrupamento
              label = list( gender ~"gênero")) %>% # traduzindo o rótulo
  add_p()                        # especifique qual teste estatístico realizar %>% 



```


### Testes t {.unnumbered} 

Compare a diferença média de uma variável contínua em dois grupos.
Por exemplo, compare a média das idades de acordo com a evolução clínica do paciente.

```{r ttest_gt}

linelist %>% 
  select(age_years, outcome) %>%             # selecione as variáveis de interesse
  mutate(outcome=ifelse(outcome=="Death", "Óbito",
                        ifelse(outcome=="Recover", "Recuperado",outcome))) %>%  #só traduzindo 
  tbl_summary(                               # produza uma tabela resumo
    statistic = age_years ~ "{mean} ({sd})", # especifique quais estatísticas mostrar
    by = outcome, # especifique a variável de agrupamento
    label = list(age_years ~ "idade")) %>%   # traduzindo                     
  add_p(age_years ~ "t.test")                # especifique quais testes realizar


```

### Teste de Wilcoxon {.unnumbered}

Compare a distribuição de uma variável contínua em dois grupos. O padrão é utilizar o teste de Wilcoxon e a mediana (IQR) quando comparar dois grupos. Entretanto, para dados sem distribuição normal ou ao comparar grupos múltiplos, o teste de Kruskal-Wallis é o mais apropriado.

```{r wilcox_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # selecione as variáveis de interesse
  mutate(outcome=ifelse(outcome=="Death", "Óbito",
                        ifelse(outcome=="Recover", "Recuperado",outcome))) %>% # traduzindo
  tbl_summary(                                         # produz uma tabela resumo
    statistic = age_years ~ "{median} ({p25}, {p75})", # especifique quais estatísticas mostrar (estes valores são padrão e podem ser removidos)
    by = outcome, # especifique a variável de agrupamento
    label = list( age_years ~ "idade")) %>%    # traduxindo                              
  add_p(age_years ~ "wilcox.test")                     # especifique qual teste realizar (existem testes padrão, então é possível deixar os parênteses em branco)


```

### Teste de Kruskal-wallis {.unnumbered}

Compare a distribuição de uma variável contínua em dois ou mais grupos, independentemente dos dados terem distribuição normal ou não.

```{r kruskal_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # selecione as variáveis de interesse
  mutate(outcome=ifelse(outcome=="Death", "Óbito",
                        ifelse(outcome=="Recover", "Recuperado",outcome))) %>% # traduzindo
  tbl_summary(                                         # produza tabelas resumo
    statistic = age_years ~ "{median} ({p25}, {p75})", # especifique quais estatísticas mostrar (existem valores padrão, então pode-se deixar os parênteses em branco)
    by = outcome, # especifique a variável de agrupamento
    label = list(age_years ~ "idade")) %>%     # traduzindo                             
  add_p(age_years ~ "kruskal.test")                    # especifique qual teste realizar


```




<!-- ## `dplyr` package {} -->

<!-- Performing statistical tests in `dplyr` alone is very dense, again because it  -->
<!-- does not fit within the tidy-data framework. It requires using `purrr` to create -->
<!-- a list of dataframes for each of the subgroups you want to compare. See the page on [Iteration, loops, and lists] to learn about **purrr**.   -->

<!-- An easier alternative may be the `rstatix` package.  -->

<!-- ### T-tests {.unnumbered}  -->

<!-- ```{r ttest_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the mean age for the death group -->
<!--     Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the mean age for the recover group -->
<!--     Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)), -->
<!--     ## using both grouped data sets compare mean age with a t-test -->
<!--     ## keep only the p.value -->
<!--     t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value) -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->


<!-- ### Wilcoxon rank sum test {.unnumbered} -->

<!-- ```{r wilcox_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the median age for the death group -->
<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_iqr = map(Death, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## calculate the median age for the recover group -->
<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_iqr = map(Recover, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## using both grouped data sets compare age distribution with a wilcox test -->
<!--     ## keep only the p.value -->
<!--     wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value) -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Kruskal-wallis test {.unnumbered} -->


<!-- ```{r kruskal_dplyr} -->

<!-- linelist %>%  -->
<!--   ## only keep variables of interest -->
<!--   select(age, outcome) %>%  -->
<!--   ## drop those missing outcome  -->
<!--   filter(!is.na(outcome)) %>%  -->
<!--   ## specify the grouping variable -->
<!--   group_by(outcome) %>%  -->
<!--   ## create a subset of data for each group (as a list) -->
<!--   nest() %>%  -->
<!--   ## spread in to wide format -->
<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->
<!--   mutate( -->
<!--     ## calculate the median age for the death group -->
<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->
<!--     ## calculate the sd among dead  -->
<!--     Death_iqr = map(Death, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## calculate the median age for the recover group -->
<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->
<!--     ## calculate the sd among recovered  -->
<!--     Recover_iqr = map(Recover, ~str_c( -->
<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->
<!--       collapse = ", " -->
<!--       )), -->
<!--     ## using the original data set compare age distribution with a kruskal test -->
<!--     ## keep only the p.value -->
<!--     kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value -->
<!--   ) %>%  -->
<!--   ## drop datasets  -->
<!--   select(-Death, -Recover) %>%  -->
<!--   ## return a dataset with the medians and p.value (drop missing) -->
<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Chi-squared test {.unnumbered}  -->


<!-- ```{r} -->
<!-- linelist %>%  -->
<!--   ## do everything by gender  -->
<!--   group_by(outcome) %>%  -->
<!--   ## count the variable of interest -->
<!--   count(gender) %>%  -->
<!--   ## calculate proportion  -->
<!--   ## note that the denominator here is the sum of each gender -->
<!--   mutate(percentage = n / sum(n) * 100) %>%  -->
<!--   pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>%  -->
<!--   filter(!is.na(gender)) %>%  -->
<!--   mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value) -->
<!-- ``` -->


<!-- ======================================================= -->

## Correlações

Correlações entre variáveis numéricas podem ser investigadas utilizando os pacotes **tidyverse** **corrr**. Assim, é possível realizar os testes de correlação de Pearson, tau ($\tau$) de Kendall ou rho ($\rho$) de Spearman. O pacote cria uma tabela e tem uma função para gerar um gráfico os valores automaticamente.

```{r, warning=F, message=F}

correlation_tab <- linelist %>% 
  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # selecione as variáveis numéricas de interesse
  correlate()      # cria uma tabela de correlação (utilizando o teste padrão pearson)

correlation_tab    # exporte a tabela para o terminal 

## remove entradas duplicadas (a tabela acima é espelhada) 
correlation_tab <- correlation_tab %>% 
  shave()

## visualize a a tabela de correlação
correlation_tab

## plote as correlações
rplot(correlation_tab)
```


<!-- ======================================================= -->

## Recursos {  }

Muitas informações dessa página foram adaptadas dos recursos e tutoriais online abaixo:

[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html)
[dplyr](https://dplyr.tidyverse.org/articles/grouping.html)
[corrr](https://corrr.tidymodels.org/articles/using-corrr.html)
[sthda correlation](http://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r)
