# 基本的な統計的検定 { #stat-tests }

この章では、**base**R、**rstatix**、**gtsummary** を使って、基本的な統計的検定を行う方法を紹介します。

-   T 検定
-   Shapiro-Wilk 検定
-   Wilcoxon の順位和検定
-   Kruskal-Wallis 検定
-   カイ二乗検定
-   数値変数間の相関

...他にも様々な検定を行うことができますが、ここでは一般的なものだけを紹介し、それ以外のものにはドキュメントへのリンクを張っています。

上記の各パッケージには、それぞれ利点と欠点があります：

-   **base** R の関数を使用して、R コンソールに統計的な出力を表示します。

-   データフレームで結果を表示する場合や、グループごとに検定を実行したい場合は、**rstatix** パッケージの関数を使用します。

-   出版用の表を素早く表示したい場合は、**gtsummary** を使用します。

<!-- ======================================================= -->

## 準備

### パッケージを読み込む {.unnumbered}

以下のコードを実行すると、分析に必要なパッケージが読み込まれます。このハンドブックでは、パッケージを読み込むために、pacman パッケージの p_load() を主に使用しています。p_load() は、必要に応じてパッケージをインストールし、現在の R セッションで使用するためにパッケージを読み込む関数です。また、すでにインストールされたパッケージは、R の基本パッケージである base の library() を使用して読み込むこともできます。R のパッケージに関する詳細は [R basics](#basics) の章をご覧ください。

```{r}
pacman::p_load(
  rio,          # ファイルをインポートする
  here,         # ファイルの位置決める
  skimr,        # データの概要を把握する
  tidyverse,    # データ管理 + ggplot2 グラフィックス 
  gtsummary,    # 要約統計と検定をする
  rstatix,      # 統計を行う
  corrr,        # 数値変数の相関分析を行う
  janitor,      # 表に合計値とパーセンテージを加える
  flextable     # 表をHTMLに変換する
  )
```

### データをインポートする

エボラ出血熱の流行をシミュレートしたデータセットをインポートします。お手元の環境でこの章の内容を実行したい方は、 <a href='https://github.com/appliedepi/epiRhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>クリック</a>して「前処理された」ラインリスト（linelist）データをダウンロードしてください>（.rds 形式で取得できます）。データは **rio** パッケージの `import()` を利用してインポートしましょう（**rio** パッケージは、.xlsx、.csv、.rds など様々な種類のファイルを取り扱うことができます。詳細は、[インポートとエクスポート](#importing) の章をご覧ください。）

```{r, echo=F}
# linelist を R にインポートする
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# linelist のインポートをする
linelist <- import("linelist_cleaned.rds")
```

linelist の最初の50行が下のように表示されます。

```{r, message=FALSE, echo=F}
# linelist のデータをテーブルとして表示する
DT::datatable(head(linelist, 50), rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## base R

**base** R の関数を使って、統計的検定を行うことができます。コマンドは比較的簡単で、結果は R のコンソールに表示されるので簡単に見ることができます。しかし、出力は、通常、リストですので、結果を次の操作で使用したい場合は、操作が難しくなります。

### T 検定

「スチューデントの t 検定」とも呼ばれる[ｔ検定](https://en.wikipedia.org/wiki/Student%27s_t-test)は、通常、2つのグループ間で何らかの数値変数の平均値に有意差があるかどうかを判定するために使用されます。ここでは、列が同じデータフレーム内にあるかどうかに応じて、この検定を行うための構文を示します。

構文1：これは、数値列とカテゴリー列が同じデータフレームにある場合の構文です。数式の左側に数値列を、右側にカテゴリー列を用意します。データセットを `data =`で指定します。オプションとして、`paired = TRUE`、`conf.level =` (初期設定は0.95)、`alternative =` ("two.sided"、 "less"、 "greater" のいずれか)を設定します。詳細を知りたい場合は `?t.test` と入力してください。

```{r}
##ｔ検定を使用してアウトカムグループごとに平均年齢を比較する
t.test(age_years ~ gender, data = linelist)
```

構文2：この代替構文を使って、2つの別々の数値ベクトルを比較することができます。たとえば、2 つの列が異なるデータセットにある場合です。

```{r, eval=F}
t.test(df1$age_years, df2$age_years)
```

また，t 検定は，標本平均がある特定の値と有意に異なるかどうかを判定するためにも使用できます。ここでは、既知/仮説の母平均を `mu =`として、1標本の t 検定を行います。

```{r, eval=F}
t.test(linelist$age_years, mu = 45)
```

### Shapiro-Wilk 検定

[Shapiro-Wilk 検定](https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test)は，標本が正規分布の母集団から得られたものであるかどうかを判定するために使用できます（t 検定など，他の多くの検定や分析の仮定）．ただし，これは3件から5000件まで観察サンプルにしか使用できません。より大きなサンプルでは，[分位数-分位数 プロット](https://ggplot2.tidyverse.org/reference/geom_qq.html)を使用することが有用かもしれません。

```{r, eval=F}
shapiro.test(linelist$age_years)
```

### Wilcoxon の順位和検定

Wilcoxon の順位和検定（[Mann--Whitney の U 検定](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test)とも呼ばれる）は、2つの数値サンプルの母集団が正規分布していない場合や、不均等な分散を持つ場合に、そのサンプルが同じ分布から来ているかどうかを判断するためによく使用されます。

```{r wilcox_base}

## Wilcoxon の検定を使用してアウトカムグループごとに年齢の分布を比較する
wilcox.test(age_years ~ outcome, data = linelist)

```

### Kruskal-Wallis 検定

[Kruskal-Wallis 検定](https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance)は、Wilcoxon の順位和検定を拡張したもので、2つ以上のサンプルの分布の違いを検定するのに使用できます。2つのサンプルしか使用しない場合は、Wilcoxon の順位和検定と同じ結果が得られます。

```{r }

##  Kruskal-Wallis 検定を使用して、アウトカムグループごとに年齢の分布を比較する
kruskal.test(age_years ~ outcome, linelist)

```

### カイ二乗検定

[Pearson のカイ二乗検定](https://en.wikipedia.org/wiki/Chi-squared_test)は、カテゴリー変数のグループ間の有意差を検定する際に使用されます。

```{r}

## 各グループにおける割合をカイ二乗検定で比較する
chisq.test(linelist$gender, linelist$outcome)

```

### **rstatix** パッケージ

**rstatix** パッケージは、「パイプ・フレンドリー」なフレームワークで統計的検定を実行し、結果を取得する機能を提供します。結果は自動的にデータフレームに格納されるので、結果に対して後続の操作を行うことができます。また、関数に渡されるデータをグループ化して、グループごとに統計を実行することも容易です。

### 要約統計 {.unnumbered}

`get_summary_stats()` は、要約統計を素早く表示する方法です。データセットをこの関数に繋げて、分析したい列を指定するだけです。列が指定されていない場合は、すべての列の統計量が計算されます。

デフォルトでは、数、最大値、最小値、平均、25パーセンタイル値、75パーセンタイル値、四分位範囲、中央絶対偏差 (mad)、平均、標準偏差、標準誤差、平均値の信頼区間という全ての種類の要約統計量が表示されます。

```{r}
linelist %>%
  rstatix::get_summary_stats(age, temp)
```

`type =` に以下の値のいずれかを指定することで、返す要約統計量の一部を指定することができます。full"、"common"、"robust"、"five_number"、"mean_sd"、"mean_se"、"mean_ci"、"median_iqr"、"median_mad"、"quantile"、"mean"、"median"、"min"、"max"

グループ化されたデータにも使用でき、グループ化された変数ごとに行として返される。

```{r}
linelist %>%
  group_by(hospital) %>%
  rstatix::get_summary_stats(age, temp, type = "common")
```

また、**rstatix** を使って統計的な検定を行うこともできます。

### T 検定 {.unnumbered}

数式の構文を使って、数値とカテゴリーの列を指定します。

```{r}
linelist %>% 
  t_test(age_years ~ gender)
```

また、`~ 1` を使用し、 `mu =` を指定すると、1標本の T 検定を行うことができます。これは、グループごとに行うこともできます。

```{r}
linelist %>% 
  t_test(age_years ~ 1, mu = 30)
```

該当する場合は、以下のようにグループごとに統計的検定を行うことができます。

```{r}
linelist %>% 
  group_by(gender) %>% 
  t_test(age_years ~ 1, mu = 18)
```

### **Shapiro-Wilk 検定** {.unnumbered}

前述の通り、サンプルサイズは3～5000の間でなければなりません。

```{r}
linelist %>% 
  head(500) %>%      # 例として、linelist での最初の500行の症例
  shapiro_test(age_years)
```

### **Wilcoxon** の順位和検定 {.unnumbered}

Mann--Whitney の U 検定としても知られています。

```{r}
linelist %>% 
  wilcox_test(age_years ~ gender)
```

### **Kruskal-Wallis** 検定 {.unnumbered}

```{r}
linelist %>% 
  kruskal_test(age_years ~ outcome)
```

### カイ二乗検定

カイ二乗検定の関数は表をもとに実施しますので、まずクロス集計を作成します。クロス集計を作成する方法はたくさんありますが（[記述表](#tables-descriptive)を参照）、ここでは **janitor**  パッケージの `tabyl()` を使用し、`chisq_test()` に渡す前に値ラベルの左端の列を削除します。

```{r}
linelist %>% 
  tabyl(gender, outcome) %>% 
  select(-1) %>% 
  chisq_test()

```

**rstatix** パッケージの関数では、さらに多くの関数や統計検定を実行できます。rstatix パッケージのドキュメントをオンラインで見るには、[ここをクリック](https://github.com/kassambara/rstatix)するか、?rstatix を入力してください。

## `gtsummary` パッケージ {#stats_gt}

本パッケージで作成したきれいな表に統計的な検定の結果を追加したい場合は、**gtsummary** パッケージを使用してください（「[記述表](#tables-descriptive)」章の **gtsummary** セクションで説明しています）。

`tbl_summary()` で比較の統計的検定を行うには、テーブルに `add_p()` を追加し、使用する検定を指定します。`add_q()` を使用して、多重検定で補正された p 値を得ることができる。詳細は `?tbl_summary` を実行してください。

### カイ二乗検定

2つのグループにおけるカテゴリー変数の割合を比較します。カテゴリー変数に適用された場合の `add_p()` へのデフォルトの統計的検定は、連続性補正を用いた独立性のカイ二乗検定ですが、予想される算出数が5以下の場合は、フィッシャーの正確検定が用いられます。

```{r chi_gt}
linelist %>% 
  select(gender, outcome) %>%    # 興味のある変数を投入
  tbl_summary(by = outcome) %>%  # 要約表の作成とグループ化をする変数を指定
  add_p()                        # 実行する検定の指定
```

### T 検定 {}

2つのグループにおける連続変数の平均値の差を比較します。例えば、患者の転帰ごとに平均年齢を比較します。

```{r ttest_gt}

linelist %>% 
  select(age_years, outcome) %>%             # 興味のある変数を投入
  tbl_summary(                               # 要約表を作成
    statistic = age_years ~ "{mean} ({sd})", # 表示したい要約統計量を指定
    by = outcome) %>%                        # グループ化する変数を指定
  add_p(age_years ~ "t.test")                # 実行する検定を指定


```

### **Wilcoxon** の順位和検定 {.unnumbered}

2つのグループにおける連続変数の分布を比較します。デフォルトでは、2つのグループを比較する際に Wilcoxon の順位和検定と中央値（四分位範囲）を使用します。しかし、非正規分布のデータや複数のグループを比較する場合は、Kruskal-Wallis 検定を使用することがより適切です。

```{r wilcox_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # 興味ある変数を投入
  tbl_summary(                                         # 要約表を作成
    statistic = age_years ~ "{median} ({p25}, {p75})", # 表示したい統計量を指定(これは初期値なので取り除くことができる)
    by = outcome) %>%                                  # グループ化する変数を指定
  add_p(age_years ~ "wilcox.test")                     # 実行する検定を指定（これはデフォルトなので括弧内は取り除くことが可能）
```

### **Kruskal-Wallis** 検定 {.unnumbered}

データが正規分布しているかどうかに関わらず、2つ以上のグループにおける連続変数の分布を比較します。

```{r kruskal_gt}

linelist %>% 
  select(age_years, outcome) %>%                       # 興味ある変数を投入
  tbl_summary(                                         # 要約表を作成
    statistic = age_years ~ "{median} ({p25}, {p75})", # 表示したい統計量を指定(これは初期値なので取り除くことができる)
    by = outcome) %>%                                  # グループ化する変数を指定
  add_p(age_years ~ "kruskal.test")                    # 実行する検定を指定


```

<!-- ## `dplyr` package {} -->

<!-- Performing statistical tests in `dplyr` alone is very dense, again because it  -->

<!-- does not fit within the tidy-data framework. It requires using `purrr` to create -->

<!-- a list of dataframes for each of the subgroups you want to compare. See the page on [Iteration, loops, and lists] to learn about **purrr**.   -->

<!-- An easier alternative may be the `rstatix` package.  -->

<!-- ### T-tests {.unnumbered}  -->

<!-- ```{r ttest_dplyr} -->

<!-- linelist %>%  -->

<!--   ## only keep variables of interest -->

<!--   select(age, outcome) %>%  -->

<!--   ## drop those missing outcome  -->

<!--   filter(!is.na(outcome)) %>%  -->

<!--   ## specify the grouping variable -->

<!--   group_by(outcome) %>%  -->

<!--   ## create a subset of data for each group (as a list) -->

<!--   nest() %>%  -->

<!--   ## spread in to wide format -->

<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->

<!--   mutate( -->

<!--     ## calculate the mean age for the death group -->

<!--     Death_mean = map(Death, ~mean(.x$age, na.rm = TRUE)), -->

<!--     ## calculate the sd among dead  -->

<!--     Death_sd = map(Death, ~sd(.x$age, na.rm = TRUE)), -->

<!--     ## calculate the mean age for the recover group -->

<!--     Recover_mean = map(Recover, ~mean(.x$age, na.rm = TRUE)),  -->

<!--     ## calculate the sd among recovered  -->

<!--     Recover_sd = map(Recover, ~sd(.x$age, na.rm = TRUE)), -->

<!--     ## using both grouped data sets compare mean age with a t-test -->

<!--     ## keep only the p.value -->

<!--     t_test = map2(Death, Recover, ~t.test(.x$age, .y$age)$p.value) -->

<!--   ) %>%  -->

<!--   ## drop datasets  -->

<!--   select(-Death, -Recover) %>%  -->

<!--   ## return a dataset with the medians and p.value (drop missing) -->

<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Wilcoxon rank sum test {.unnumbered} -->

<!-- ```{r wilcox_dplyr} -->

<!-- linelist %>%  -->

<!--   ## only keep variables of interest -->

<!--   select(age, outcome) %>%  -->

<!--   ## drop those missing outcome  -->

<!--   filter(!is.na(outcome)) %>%  -->

<!--   ## specify the grouping variable -->

<!--   group_by(outcome) %>%  -->

<!--   ## create a subset of data for each group (as a list) -->

<!--   nest() %>%  -->

<!--   ## spread in to wide format -->

<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->

<!--   mutate( -->

<!--     ## calculate the median age for the death group -->

<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->

<!--     ## calculate the sd among dead  -->

<!--     Death_iqr = map(Death, ~str_c( -->

<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->

<!--       collapse = ", " -->

<!--       )), -->

<!--     ## calculate the median age for the recover group -->

<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->

<!--     ## calculate the sd among recovered  -->

<!--     Recover_iqr = map(Recover, ~str_c( -->

<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->

<!--       collapse = ", " -->

<!--       )), -->

<!--     ## using both grouped data sets compare age distribution with a wilcox test -->

<!--     ## keep only the p.value -->

<!--     wilcox = map2(Death, Recover, ~wilcox.test(.x$age, .y$age)$p.value) -->

<!--   ) %>%  -->

<!--   ## drop datasets  -->

<!--   select(-Death, -Recover) %>%  -->

<!--   ## return a dataset with the medians and p.value (drop missing) -->

<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Kruskal-wallis test {.unnumbered} -->

<!-- ```{r kruskal_dplyr} -->

<!-- linelist %>%  -->

<!--   ## only keep variables of interest -->

<!--   select(age, outcome) %>%  -->

<!--   ## drop those missing outcome  -->

<!--   filter(!is.na(outcome)) %>%  -->

<!--   ## specify the grouping variable -->

<!--   group_by(outcome) %>%  -->

<!--   ## create a subset of data for each group (as a list) -->

<!--   nest() %>%  -->

<!--   ## spread in to wide format -->

<!--   pivot_wider(names_from = outcome, values_from = data) %>%  -->

<!--   mutate( -->

<!--     ## calculate the median age for the death group -->

<!--     Death_median = map(Death, ~median(.x$age, na.rm = TRUE)), -->

<!--     ## calculate the sd among dead  -->

<!--     Death_iqr = map(Death, ~str_c( -->

<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->

<!--       collapse = ", " -->

<!--       )), -->

<!--     ## calculate the median age for the recover group -->

<!--     Recover_median = map(Recover, ~median(.x$age, na.rm = TRUE)),  -->

<!--     ## calculate the sd among recovered  -->

<!--     Recover_iqr = map(Recover, ~str_c( -->

<!--       quantile(.x$age, probs = c(0.25, 0.75), na.rm = TRUE),  -->

<!--       collapse = ", " -->

<!--       )), -->

<!--     ## using the original data set compare age distribution with a kruskal test -->

<!--     ## keep only the p.value -->

<!--     kruskal = kruskal.test(linelist$age, linelist$outcome)$p.value -->

<!--   ) %>%  -->

<!--   ## drop datasets  -->

<!--   select(-Death, -Recover) %>%  -->

<!--   ## return a dataset with the medians and p.value (drop missing) -->

<!--   unnest(cols = everything()) -->

<!-- ``` -->

<!-- ### Chi-squared test {.unnumbered}  -->

<!-- ```{r} -->

<!-- linelist %>%  -->

<!--   ## do everything by gender  -->

<!--   group_by(outcome) %>%  -->

<!--   ## count the variable of interest -->

<!--   count(gender) %>%  -->

<!--   ## calculate proportion  -->

<!--   ## note that the denominator here is the sum of each gender -->

<!--   mutate(percentage = n / sum(n) * 100) %>%  -->

<!--   pivot_wider(names_from = outcome, values_from = c(n, percentage)) %>%  -->

<!--   filter(!is.na(gender)) %>%  -->

<!--   mutate(pval = chisq.test(linelist$gender, linelist$outcome)$p.value) -->

<!-- ``` -->

<!-- ======================================================= -->

### 相関

数値変数間の相関は、**tidyverse corrr** パッケージを使用して実施することができます。Pearson、Kendall tau、Spearman rho を使って相関を計算することができます。このパッケージは表を作成し、値を自動的に記入する機能も備えています。

```{r, warning=F, message=F}

correlation_tab <- linelist %>% 
  select(generation, age, ct_blood, days_onset_hosp, wt_kg, ht_cm) %>%   # 興味ある変数を投入
  correlate()      # 相関係数表を作成 (初期設定ではPearsonを使用)

correlation_tab    # 表示す

## 重複する項目を削除 (上記の表がミラーリングされている) 
correlation_tab <- correlation_tab %>% 
  shave()

## 相関係数表を表示
correlation_tab

## 相関をプロット
rplot(correlation_tab)
```

<!-- ======================================================= -->

### 参考資料

この章における多くの情報はオンラインでのこれらのリソースより採用しています。

[gtsummary](http://www.danieldsjoberg.com/gtsummary/articles/tbl_summary.html) [dplyr](https://dplyr.tidyverse.org/articles/grouping.html) [corrr](https://corrr.tidymodels.org/articles/using-corrr.html) [sthda correlation](http://www.sthda.com/english/wiki/correlation-test-between-two-variables-in-r)
