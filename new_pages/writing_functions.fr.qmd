
# Fonctions d'écriture {#writing_functions}


<!-- ======================================================= -->
## Préparation { }


### Load packages {-}

Ce morceau de code montre le chargement des paquets nécessaires aux analyses. Dans ce manuel, nous mettons l'accent sur `p_load()` de **pacman**, qui installe le paquet si nécessaire *et* le charge pour l'utiliser. Vous pouvez aussi charger les paquets installés avec `library()` de **base** R. Voir la page sur [R basics] pour plus d'informations sur les paquets R.  

```{r, echo=F, warning=F, message=F}
pacman::p_load(
  rio, # Importation de fichiers
  here, # Localisateur de fichiers
  skimr, # obtenir une vue d'ensemble des données
  tidyverse, # gestion des données + graphiques ggplot2, 
  gtsummary, # statistiques et tests sommaires
  janitor, # ajout de totaux et de pourcentages aux tableaux
  scales, # conversion facile des proportions en pourcentages  
  flextable, # convertir les tableaux en HTML
  purrr, # facilite la programmation fonctionnelle
  readr, #pour lire les fichiers csv
  highcharter #pour créer un objet highchart et dessiner un graphique particulier

  )
```

### Importer des données {-}

Nous importons le jeu de données des cas d'une épidémie d'Ebola simulée. Si vous souhaitez télécharger les données pour les suivre pas à pas, consultez les instructions de la page [Télécharger le manuel et les données](#download_book_data). Le jeu de données est importé à l'aide de la fonction `import()` du paquet **rio**. Voir la page [Importer et exporter des données](#import_export) pour les différentes manières d'importer des données.

Nous utiliserons également dans la dernière partie de cette page des données sur la grippe H7N9 de 2013.

```{r, echo=F}
# Importez les linelists dans R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

flu_china <- rio::import(here::here("data", "case_linelists", "fluH7N9_China_2013.csv"))

```


## Fonctions  

Les fonctions sont utiles en programmation car elles permettent de rendre les codes plus faciles à comprendre, plus courts et moins sujets aux erreurs (à condition qu'il n'y ait pas d'erreurs dans la fonction elle-même).

Si vous êtes arrivé jusqu'à ce manuel, cela signifie que vous avez rencontré d'innombrables fonctions, car en R, chaque opération est un appel de fonction.
`+, for, if, [, $, { â¦`. Par exemple, `x + y` est la même chose que `'+'(x, y)`.

R est l'un des langages qui offre le plus de possibilités de travailler avec des fonctions et qui donne suffisamment d'outils à l'utilisateur pour les écrire facilement. Nous ne devrions pas penser aux fonctions comme étant fixées au sommet ou à la fin de la chaîne de programmation, R offre la possibilité de les utiliser comme s'il s'agissait de vecteurs et même de les utiliser à l'intérieur d'autres fonctions, listes...

Il existe de nombreuses ressources très avancées sur la programmation fonctionnelle et nous ne donnerons ici qu'un aperçu pour vous aider à démarrer avec la programmation fonctionnelle avec de courts exemples pratiques. Nous vous encourageons ensuite à visiter les liens sur les références pour en savoir plus.





## Pourquoi utiliser une fonction ? 

Avant de répondre à cette question, il est important de noter que vous avez déjà eu des conseils pour écrire vos toutes premières fonctions R dans la page sur [l'itération, les boucles et les listes] de ce manuel. En fait, l'utilisation de "if/else" et de boucles est souvent au cour de bon nombre de nos fonctions car elles permettent d'élargir l'application de notre code en autorisant des conditions multiples ou d'itérer des codes pour des tâches répétitives.

- Je répète plusieurs fois le même bloc de code pour l'appliquer à une variable ou à des données différentes ?

- Si je m'en débarrasse, cela raccourcira-t-il considérablement mon code global et le rendra-t-il plus rapide ?

- Est-il possible que le code que j'ai écrit soit réutilisé mais avec une valeur différente à plusieurs endroits du code ?

Si la réponse à l'une des questions précédentes est "OUI", alors vous avez probablement besoin d'écrire une fonction

## Comment R construit-il les fonctions ?

Les fonctions dans R ont trois composants principaux :

- le `formals()` qui est la liste d'arguments qui contrôle la façon dont nous pouvons appeler la fonction.

- le `body()` qui est le code à l'intérieur de la fonction, c'est-à-dire entre les parenthèses ou à la suite des parenthèses, selon la façon dont on l'écrit.

et,

- l' `environnement()` qui aide à localiser les variables de la fonction et détermine comment la fonction trouve sa valeur.
 
Une fois que vous avez créé votre fonction, vous pouvez vérifier chacun de ces composants en appelant la fonction associée.
 

## Syntaxe et structure de base

- Une fonction devra être nommée correctement afin que son travail soit facilement compréhensible dès que l'on lit son nom. En fait, c'est déjà le cas avec la majorité de l'architecture R de base. Des fonctions comme `mean()`, `print()`, `summary()` ont des noms qui sont très simples. 

- Une fonction a besoin d'arguments, comme les données sur lesquelles elle travaille et d'autres objets qui peuvent être des valeurs statiques, entre autres options.  

- Et enfin, une fonction donnera une sortie basée sur sa tâche principale et les arguments qui lui ont été donnés. Habituellement, nous utilisons les fonctions intégrées telles que `print()`, `return()`... pour produire la sortie. La sortie peut être une valeur logique, un nombre, un caractère, un cadre de données... en bref, tout type d'objet R.

En gros, c'est la composition d'une fonction :

```{r, eval=FALSE}

nom_fonction <- function(argument_1, argument_2, argument_3){
  
           function_task
  
           return(output)
}


```

Nous pouvons créer notre première fonction qui sera appelée `contain_covid19()``. 

```{r}

contain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){
  
                            if(barrier_gest == "yes" & wear_mask == "yes" & get_vaccine == "yes" ) 
       
                            return("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


```

Nous pouvons ensuite vérifier les composants de notre fonction nouvellement créée.

```{r}

formals(contain_covid19)
body(contain_covid19)
environment(contain_covid19)

```


Maintenant, nous allons tester notre fonction. Pour appeler notre fonction écrite, vous l'utilisez comme vous utilisez toutes les fonctions R, c'est-à-dire en écrivant le nom de la fonction et en ajoutant les arguments requis.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "yes")

```

Par précaution, nous pouvons réécrire le nom de chaque argument. Mais sans les préciser, le code devrait fonctionner puisque R a en mémoire le positionnement de chaque argument. Ainsi, tant que vous mettez les valeurs des arguments dans le bon ordre, vous pouvez éviter d'écrire les noms des arguments lors de l'appel des fonctions.

```{r}

contain_covid19("yes", "yes", "yes")

```

Voyons ensuite ce qui se passe si l'une des valeurs est `"no"` ou **pas** `"yes"`.

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "no")
```

Si nous fournissons un argument qui n'est pas reconnu, nous obtenons une erreur: 

```{r, eval=F}
contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", get_vaccine = "no")
```

`Erreur dans contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", : 
  Impossible de trouver la fonction "contain_covid19"``.


<span style="color : black ;">**_NOTE:_** Certaines fonctions (la plupart du temps très courtes et simples) peuvent ne pas avoir besoin de nom et peuvent être utilisées directement sur une ligne de code ou à l'intérieur d'une autre fonction pour effectuer une tâche rapide. Elles sont appelées **fonctions anonymes** .</span>

Par exemple ci-dessous est une première fonction anonyme qui ne garde que les variables de caractères le jeu de données.

```{r, eval=F}
linelist %>% 
  dplyr::slice_head(n=10) %>% #équivalent à la fonction "head" de base de R et qui renvoie les n premières observations de l'ensemble de données.
  select(function(x) is.character(x)) 
```
  
```{r, echo=F}
linelist %>% 
  dplyr::slice_head(n=10) %>% #équivalent de la fonction "head" de base de R et qui retourne les n premières observations de l'ensemble de données
  select(function(x) is.character(x)) %>%  
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```


Ensuite, une autre fonction qui sélectionne une observation sur deux de notre ensemble de données (cela peut être utile lorsque nous avons des données longitudinales avec de nombreux enregistrements par patient, par exemple après avoir été classés par date ou par visite).
Dans ce cas, la fonction à écrire en dehors de dplyr serait `function (x) (x%%2 == 0)` pour s'appliquer au vecteur contenant tous les numéros de ligne.


```{r, eval=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # ajoute les indices de chaque obs comme rownames pour voir clairement la sélection finale
   filter(row_number() %%2 == 0)
```

```{r, echo=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # ajoute les indices de chaque obs comme rownames pour voir clairement la sélection finale
   filter(row_number() %%2 == 0) %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


Un code R de base possible pour la même tâche serait le suivant :

```{r, eval = F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]
```

```{r, echo=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


<span style="color : orange ;">**_CAUTION:_** S'il est vrai que l'utilisation de fonctions peut nous aider dans notre code, il peut néanmoins être long d'écrire certaines fonctions ou d'en corriger une si elle n'a pas été pensée en profondeur, écrite de manière adéquate et qu'elle renvoie des erreurs en conséquence. C'est pour cette raison qu'il est souvent recommandé d'écrire d'abord le code R, de s'assurer qu'il fait ce que nous voulons qu'il fasse, puis de le transformer en une fonction avec ses trois composants principaux tels que listés ci-dessus. </span>

## Exemples  

### Retourner les tableaux de proportion pour plusieurs colonnes {.unnumbered}  

Oui, nous avons déjà de belles fonctions dans de nombreux paquets permettant de résumer des informations d'une manière très simple et agréable. Mais nous allons tout de même essayer de créer nos propres fonctions, lors de nos premiers pas dans l'écriture de fonctions.

Dans cet exemple, nous voulons montrer comment l'écriture d'une simple fonction vous évitera de copier-coller le même code plusieurs fois.

```{r}

proptab_multiple <- function(my_data, var_to_tab){
  
  #imprimez le nom de chaque variable d'intérêt avant de faire la tabulation
  print(var_to_tab)

  with(my_data,
       rbind( #liez les résultats des deux fonctions suivantes par ligne
        #tabuler la variable d'intérêt: ne donne que des nombres
          table(my_data[[var_to_tab]], useNA = "no"),
          #calculer les proportions pour chaque variable d'intérêt et arrondir la valeur à 2 décimales
         round(prop.table(table(my_data[[var_to_tab]]))*100,2)
         )
       )
}


proptab_multiple(linelist, "gender")

proptab_multiple(linelist, "age_cat")

proptab_multiple(linelist, "outcome")


```

<span style="color : darkgreen ;">**_TIP:_** Comme indiqué ci-dessus, il est très important de commenter vos fonctions comme vous le feriez pour la programmation générale. Gardez à l'esprit que le but d'une fonction est de rendre un code facile à lire, plus court et plus efficace. Alors on devrait être capable de comprendre ce que fait la fonction juste en lisant son nom et avoir plus de détails en lisant les commentaires.</span>


Une deuxième option est d'utiliser cette fonction dans une autre via une boucle pour faire le processus en une fois :

```{r}


for(var_to_tab in c("gender", "age_cat", "outcome")){
  
  print(proptab_multiple(linelist, var_to_tab))
  
}

```

Une manière plus simple serait d'utiliser la base R "appliquer" au lieu d'une "boucle for" comme exprimé ci-dessous :

```{r, include=FALSE, eval=FALSE}

base::lapply(linelist[,c("gender", "age_cat", "outcome")], table)

```


<span style="color : darkgreen ;">**_TIP:_** R est souvent défini comme un langage de programmation fonctionnel et presque chaque fois que vous exécutez une ligne de code, vous utilisez certaines fonctions intégrées. Une bonne habitude pour être plus à l'aise avec l'écriture de fonctions est d'avoir souvent un regard interne sur la façon dont les fonctions de base que vous utilisez quotidiennement sont construites. Le raccourci pour le faire est de sélectionner le nom de la fonction puis de cliquer sur `Ctrl+F2` ou `fn+F2` ou `Cmd+F2` (selon votre ordinateur) .</span>

### Utilisation de **purrr** : écrire des fonctions qui peuvent être appliquées de manière itérative.

### Modifier la classe de plusieurs colonnes dans un ensemble de données {.unnumbered}  

Disons que de nombreuses variables de caractère dans les données originales `linelist` doivent être changées en "factor" pour des raisons d'analyse et de traçage. Au lieu de répéter l'étape plusieurs fois, nous pouvons juste utiliser `lapply()` pour faire la transformation de toutes les variables concernées sur une seule ligne de code.


<span style="color : orange ;">**_CAUTION:_** `lapply()` renvoie une liste, donc son utilisation peut nécessiter une modification supplémentaire en dernière étape.</span>


```{r, include=FALSE}

linelist_factor1 <- linelist %>%
      lapply(
          function(x) if(is.character(x)) as.factor(x) else x) %>%
      as.data.frame() %>% 
      glimpse()

```


La même étape peut être effectuée en utilisant la fonction `map_if()` du paquet **purrr**.

```{r}

linelist_factor2 <- linelist %>%
  purrr::map_if(is.character, as.factor)

linelist_factor2 %>%
        glimpse()

```


### Produire itérativement des graphiques pour différents niveaux d'une variable {.unnumbered}

Nous allons produire ici un graphique circulaire pour examiner la distribution des résultats des patients en Chine pendant l'épidémie de H7N9 pour chaque province. Au lieu de répéter le code pour chacun d'entre eux, nous allons simplement appliquer une fonction que nous allons créer.

```{r}

#Préciser les options pour l'utilisation de highchart
options(highcharter.theme =  highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))


#créer une fonction appelée "chart_outcome_province" qui prend comme argument l'ensemble de données et le nom de la province pour laquelle on veut tracer la distribution du résultat.

chart_outcome_province <- function(data_used, prov){
  
  tab_prov <- data_used %>% 
    filter(province == prov,
           !is.na(outcome))%>% 
    group_by(outcome) %>% 
    count() %>%
    adorn_totals(where = "row") %>% 
    adorn_percentages(denominator = "col", )%>%
    mutate(
        perc_outcome= round(n*100,2))
  
  
  tab_prov %>%
    filter(outcome != "Total") %>% 
  highcharter::hchart(
    "pie", hcaes(x = outcome, y = perc_outcome),
    name = paste0("Distribution du résultat en :", prov)
    )
  
}

chart_outcome_province(flu_china, "Shanghai")
chart_outcome_province(flu_china, "Zhejiang")
chart_outcome_province(flu_china, "Jiangsu")


```



### Produire itérativement des tableaux pour différents niveaux d'une variable {.unnumbered}

Ici, nous allons créer trois indicateurs à résumer dans un tableau et nous voudrions produire ce tableau pour chacune des provinces. Nos indicateurs sont le délai entre l'apparition et l'hospitalisation, le pourcentage de guérison et l'âge médian des cas.

```{r}


indic_1 <- flu_china %>% 
  group_by(province) %>% 
  mutate(
    date_hosp= strptime(date_of_hospitalisation, format = "%m/%d/%Y"),
    date_ons= strptime(date_of_onset, format = "%m/%d/%Y"), 
    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,
    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%
  select(province, mean_delay_onset_hosp) %>% 
  distinct()
     

indic_2 <- flu_china %>% 
            filter(!is.na(outcome)) %>% 
            group_by(province, outcome) %>% 
            count() %>%
            pivot_wider(names_from = outcome, values_from = n) %>% 
    adorn_totals(where = "col") %>% 
    mutate(
        perc_recovery= round((Recover/Total)*100,2))%>% 
  select(province, perc_recovery)
    
    
    
indic_3 <- flu_china %>% 
            group_by(province) %>% 
            mutate(
                    median_age_cases = median(as.numeric(age), na.rm = TRUE)
            ) %>% 
  select(province, median_age_cases) %>% 
  distinct()

#Joindre les trois ensembles de données d'indicateurs

table_indic_all <- indic_1 %>% 
  dplyr::left_join(indic_2, by = "province") %>% 
        left_join(indic_3, by = "province")


#Imprimez les indicateurs dans un tableau mobile


print_indic_prov <- function(table_used, prov){
  
  #d'abord transformer un peu le dataframe pour faciliter l'impression.
  indic_prov <- table_used %>%
    filter(province==prov) %>%
    pivot_longer(names_to = "Indicateurs", cols = 2:4) %>% 
   mutate( indic_label = factor(Indicateurs,
   levels= c("mean_delay_onset_hosp", "perc_recovery", "median_age_cases"),
   labels=c("Délai moyen d'apparition hôpital", "Pourcentage de récupération", "Âge médian des cas"))
   ) %>% 
    ungroup(province) %>% 
    select(indic_label, value)
  

    tab_print <- flextable(indic_prov) %>%
    theme_vanilla() %>% 
    flextable::fontsize(part = "body", size = 10) 
    
    
     tab_print <- tab_print %>% 
                  autofit() %>%
                  set_header_labels( 
                indic_label= "Indicateurs", value= "Estimation") %>%
    flextable::bg( bg = "darkblue", part = "header") %>%
    flextable::bold(part = "header") %>%
    flextable::color(color = "white", part = "header") %>% 
    add_header_lines(values = paste0("Indicateurs pour la province de : ", prov)) %>% 
bold(part = "header")
 
 tab_print <- set_formatter_type(tab_print,
   fmt_double = "%.2f",
   na_str = "-")

tab_print 
    
}




print_indic_prov(table_indic_all, "Shanghai")
print_indic_prov(table_indic_all, "Jiangsu")


```


## Conseils et meilleures pratiques pour des fonctions bien rodées

La programmation fonctionnelle a pour but d'alléger le code et d'en faciliter la lecture. Elle devrait produire le contraire. Les conseils ci-dessous vous aideront à avoir un code propre et facile à lire. 


### Nommage et syntaxe {.unnumbered}

- Evitez d'utiliser des caractères qui auraient pu être facilement pris par d'autres fonctions déjà existantes dans votre environnement.

- Il est recommandé que le nom de la fonction soit court et facile à comprendre pour un autre lecteur.

- Il est préférable d'utiliser des verbes pour le nom de la fonction et des noms pour les noms des arguments.


### Noms de colonnes et évaluation ordonnée {.unnumbered}  

Si vous voulez savoir comment référencer les *noms de colonnes* qui sont fournis à votre code en tant qu'arguments, lisez ce [guide de programmation tidyverse](https://dplyr.tidyverse.org/articles/programming.html). Parmi les sujets abordés figurent *l'évaluation tidée* et l'utilisation de l'accolade double `{{ }}`.

Par exemple, voici un squelette de code rapide tiré du tutoriel de la page mentionnée juste au-dessus :  

```{r, eval=F}

var_summary <- function(data, var) {
  data %>%
    summarise(n = n(), min = min({{ var }}), max = max({{ var }})))
}
mtcars %>% 
  group_by(cyl) %>% 
  var_summary(mpg)

```


### Test et gestion des erreurs {.unnumbered}

Plus la tâche d'une fonction est compliquée, plus la possibilité d'erreurs est élevée. Il est donc parfois nécessaire d'ajouter une vérification dans la fonction pour aider à comprendre rapidement d'où vient l'erreur et trouver un moyen de la corriger.

- Il peut être plus que recommandé d'introduire une vérification de l'absence d'un argument en utilisant `missing(argument)`. Cette simple vérification peut retourner la valeur "VRAI" ou "FAUX".

```{r , error=TRUE}

contain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){
  
  if (missing(barrier_gest)) (print("please provide arg1"))
  if (missing(wear_mask)) print("please provide arg2")
  if (missing(get_vaccine)) print("please provide arg3")


  if (!barrier_gest == "yes" | wear_mask == "yes" | get_vaccine == "yes" ) 
       
       return ("you can do better")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_missing(get_vaccine = "yes")

```


- Utilisez `stop()` pour les erreurs plus faciles à détecter.

```{r, error=TRUE}

contain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){
  
  if(!is.character(barrier_gest)) (stop("arg1 should be a character, please enter the value with `yes`, `no` or `sometimes`"))
  
  if(barrier_gest == "yes" & wear_mask == "yes" & get_vaccine == "yes" ) 
       
       return ("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_stop(barrier_gest=1, wear_mask="yes", get_vaccine = "no")

```

- Comme nous le voyons lorsque nous exécutons la plupart des fonctions intégrées, des messages et des avertissements peuvent apparaître dans certaines conditions. Nous pouvons les intégrer dans nos fonctions écrites en utilisant les fonctions `message()` et `warning()`.

- Nous pouvons également gérer les erreurs en utilisant la fonction `safely()` qui prend une fonction en argument et l'exécute de manière sûre. En fait, la fonction s'exécutera sans s'arrêter si elle rencontre une erreur. `safely()` retourne en sortie une **liste** avec deux objets qui sont les résultats et l'erreur qu'elle a "sautée".

Nous pouvons vérifier en exécutant d'abord la fonction `mean()`, puis en l'exécutant avec `safely()`.


```{r, warning=FALSE}

map(linelist, mean)
```


```{r, warning=FALSE}
safe_mean <- safely(mean)
linelist %>% 
  map(safe_mean)

```


Comme dit précédemment, bien commenter nos codes est déjà un bon moyen d'avoir de la documentation dans notre travail.  


<!-- ======================================================= -->
## Ressources


[Lien vers R pour la science des données](https://r4ds.had.co.nz/functions.html)   

[Cheatsheet advance R programming](https://www.rstudio.com/wp-content/uploads/2016/02/advancedR.pdf)

[Cheatsheet purr Package](https://purrr.tidyverse.org/)

[Video-ACM talk by Hadley Wickham : Les joies de la programmation fonctionnelle (comment fonctionne map_dbl)](https://youtube.videoken.com/embed/bzUmK0Y07ck)