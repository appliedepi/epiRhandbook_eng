# Escrevendo funções  {#writing-functions}


<!-- ======================================================= -->
## Preparação {  }


### Carregar pacotes {-}

Este "chuk" (pedaço) de código mostra o carregamento de pacotes necessários para as análises. Neste manual, enfatizamos `p_load()` de **pacman**, que instala o pacote, se necessário, *e* carrega ele para ser utilizado. Você também pode carregar pacotes instalados com  `library()` do R **base**. Veja em [Introdução ao R](#basics) para mais informações sobre pacotes R.  

```{r, echo=F, warning=F, message=F}
pacman::p_load(
  rio,          # Importar arquivos
  here,         # Localizar de arquivos
  skimr,        # Obter uma visão geral dos dados
  tidyverse,    # Gerenciar dados + gráficos ggplot2 
  gtsummary,    # Estatísticas resumo e testes
  janitor,      # Adicionar totais e porcentagens às tabelas
  scales,       # Converter facilmente proporções em porcentagens  
  flextable,    # Converter tabelas para HTML
  purrr,        # Tornar a programação de funções mais fácil
  readr,        # Ler arquivos csv
  highcharter   # Criar objeto highchart e desenhar um gráfico particular

  )
```

### Importar dados {-}

Importamos os dados de casos de uma simulação de epidemia de Ebola. Se desejar fazer o download dos dados para seguir passo a passo, veja as instruções na página [Baixar livro e dados](#data-used). O conjunto de dados é importado usando a função `import ()` do pacote **rio**. Consulte a página [Importar e exportar](#importing) para várias maneiras de importar dados.

Também usaremos na última parte desta página alguns dados sobre a gripe H7N9 de 2013.

```{r, echo=F}
# Importar as listas de casos para o R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

flu_china <- rio::import(here::here("data", "case_linelists", "fluH7N9_China_2013.csv"))

```


## Funções

As funções são úteis na programação, pois permitem tornar os códigos mais fáceis de entender, de alguma forma mais curtos e menos sujeitos a erros (dado que não haja erros na própria função).

Se você chegou até aqui neste manual, significa que encontrou inúmeras funções, uma vez que no R toda operação é uma chamada de função `+, for, if, [, $, { …`. Por exemplo `x + y` é o mesmo que `'+'(x, y)`

R é uma das linguagens que oferece a maior possibilidade de trabalhar com funções e dar ferramentas suficientes para que o usuário as escreva facilmente. Não devemos pensar nas funções como fixas no topo ou no final da cadeia de programação, o R oferece a possibilidade de usá-las como se fossem vetores e até mesmo dentro de outras funções, listas ...

Existem muitos recursos muito avançados sobre programação de funções e só daremos aqui uma visão para ajudá-lo a começar com breves exemplos práticos. Em seguida, você é incentivado a visitar os links de referências para ler mais sobre o assunto.

## Por que você usaria uma função?

Antes de responder a esta pergunta, é importante observar que você já recebeu dicas para escrever suas primeiras funções R na página [Iteração, loops e listas](#iteration) deste manual. Na verdade, o uso de "if / else" e loops costuma ser uma parte central de muitas de nossas funções, pois ajudam a ampliar a aplicação do nosso código, permitindo várias condições, ou a iterar códigos para tarefas repetidas.

- Estou repetindo várias vezes o mesmo bloco de código para aplicá-lo a uma variável ou dado diferente?

- Livrar-se dele irá encurtar substancialmente meu código e torná-lo executado mais rápido?

- É possível que o código que escrevi seja usado novamente, mas com um valor diferente em muitos lugares do código?

Se a resposta a uma das perguntas anteriores for "SIM", provavelmente você precisará escrever uma função


## Como o R cria funções?

As funções em R têm três componentes principais:

- `formals ()`, que é a lista de argumentos que controla como podemos rodar a função

- `body ()`, que é o código dentro da função, ou seja, entre colchetes ou após o parêntese, dependendo de como o escrevemos

e,

- `environment ()` que ajudará a localizar as variáveis da função e determina como a função encontra o valor.
 
Depois de criar sua função, você pode verificar cada um desses componentes chamando a função associada.
 

## Sintaxe e estrutura básicas


- Uma função precisará ser nomeada corretamente para que sua tarefa seja facilmente compreensível assim que lermos seu nome. Na verdade, este já é o caso com a maioria da arquitetura do R base. Funções como `mean ()`, `print ()`, `summary ()` têm nomes que são muito diretos

- Uma função precisará de argumentos, como os dados nos quais trabalhar e outros objetos que podem ser valores estáticos entre outras opções  

- E, finalmente, uma função fornecerá uma saída com base em sua tarefa principal e nos argumentos fornecidos. Normalmente usaremos funções embutidas como `print ()`, `return ()` ... para produzir a saída. A saída pode ser um valor lógico, um número, um caractere, um quadro de dados ... em suma, qualquer tipo de objeto R.

Basicamente, esta é a composição de uma função:

```{r, eval=FALSE}

nome_da_funcao <- function(argumento_1, argumento_2, argumento_3){
  
           function_task
  
           return(output)
}


```

Podemos criar nossa primeira função que será chamada `conter_covid19 ()`. 

```{r}

conter_covid19 <- function(distanciamento_social, usar_mascara, vacinacao){
  
                            if(distanciamento_social == "sim" & usar_mascara == "sim" & vacinacao == "sim" ) 
       
                            return("successo")
  
  else("Certifique-se de que todos sejam 'sim', esta pandemia tem que acabar!")
}


```

Podemos então verificar os componentes de nossa função recém-criada.

```{r}

formals(conter_covid19)
body(conter_covid19)
environment(conter_covid19)

```

Agora vamos testar nossa função. Para rodar nossa função escrita, você a usa da mesma forma que usa todas as funções R, ou seja, escrevendo o nome da função e adicionando os argumentos necessários.


```{r}

conter_covid19(distanciamento_social = "sim", usar_mascara = "sim", vacinacao = "sim")

```

Podemos escrever novamente o nome de cada argumento por razões de precaução. Mas o código deve funcionar mesmo sem especificá-los, uma vez que o R tem na memória o posicionamento de cada argumento. Portanto, desde que você coloque os valores dos argumentos na ordem correta, você pode pular a escrita dos nomes dos argumentos ao rodar as funções.

```{r}

conter_covid19("sim", "sim", "sim")

```

Então, vamos ver o que acontece se um dos valores for `"não"` ou **diferente de** `"sim"`.

```{r}

conter_covid19(distanciamento_social = "sim", usar_mascara = "sim", vacinacao = "não")
```

Se fornecermos um argumento que não é reconhecido, obteremos um erro:


```{r, eval=F}
conter_covid19(distanciamento_social = "às vezes", usar_mascara = "sim", vacinacao = "não")
```

`Error in conter_covid19(distanciamento_social = "às vezes", usar_mascara = "sim",  : 
  could not find function "conter_covid19"`


<span style="color: black;">**_NOTA:_** Algumas funções (na maioria das vezes muito curtas e diretas) podem não precisar de um nome e podem ser usadas diretamente em uma linha de código, ou dentro de outra função, para fazer tarefa rápida. Elas são chamadas de **funções anônimas**. </span>

Por exemplo, abaixo está uma primeira função anônima que mantém apenas variáveis de caracteres no conjunto de dados.

```{r, eval=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  # Equivalente à função "head" do R base, que retorna as primeiras n observações do conjunto de dados
    select(function(x) is.character(x)) 
```
  
```{r, echo=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  # Equivalente à função "head" do R base, que retorna as primeiras n observações do conjunto de dados
  select(function(x) is.character(x)) %>%  
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```


Outra função poderia selecionar o segundo registro realizado no nosso conjunto de dados. Pode ser relevante quando temos dados longitudinais com muitos registros por paciente, por exemplo, após ter solicitado por data ou visita). Nesse caso, a função apropriada para escrever fora do dplyr seria `function (x) (x %% 2 == 0)` para aplicar ao vetor contendo todos os números de linha.


```{r, eval=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # Adiciona índices de cada registro como rownames para ver claramente a seleção final
   filter(row_number() %%2 == 0)
```

```{r, echo=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>%    # Adiciona índices de cada registro como rownames para ver claramente a seleção final
   filter(row_number() %%2 == 0) %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


Um possível código do R base para a mesma tarefa seria:

```{r, eval = F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]
```

```{r, echo=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


<span style="color: orange;">**_CUIDADO:_** Se por um lado é verdade que o uso de funções pode nos ajudar com nosso código, também pode ser demorado escrever ou mesmo consertá-las se não tiver sido pensada completamente, escrita de forma adequada ou estiver retornando erros como resultado. Por esse motivo, geralmente é recomendado escrever primeiro o código R, certificar-se de que ele faz o que pretendemos fazer e, em seguida, transformá-lo em uma função com seus três componentes principais, conforme listado acima. </span>

## Exemplos  

### Retorna tabelas de proporção para várias colunas {.unnumbered}  

Sim, já temos funções interessantes em muitos pacotes, permitindo resumir informações de uma forma muito fácil e agradável. Mas ainda vamos tentar fazer o nosso próprio, em nossos primeiros passos para nos acostumarmos a escrever funções.

Neste exemplo, queremos mostrar como escrever uma função simples evitaria que você copiasse e colasse o mesmo código várias vezes.

```{r}

proptab_multiple <- function(my_data, var_to_tab){
  
  # Grava o nome de cada variável de interesse antes de fazer a tabulação
  print(var_to_tab)

  with(my_data,
       rbind( # Vincula os resultados das duas funções seguintes por linha
        # Tabula a variável de interesse: fornece apenas números
          table(my_data[[var_to_tab]], useNA = "no"),
          # Calcula as proporções para cada variável de interesse e arredonda o resultado para 2 decimais
         round(prop.table(table(my_data[[var_to_tab]]))*100,2)
         )
       )
}


proptab_multiple(linelist, "gender")

proptab_multiple(linelist, "age_cat")

proptab_multiple(linelist, "outcome")


```

<span style="color: darkgreen;">**_DICA:_** Como mostrado acima, é muito importante comentar suas funções como você faria para a programação geral. Lembre-se de que o objetivo de uma função é deixar um código pronto para ser lido, mais curto e mais eficiente. Então, deve-se ser capaz de entender o que a função faz apenas lendo seu nome e encontrar mais detalhes lendo os comentários.</span>


Uma segunda opção é usar a função dentro de outra, por meio de um loop para fazer o processo de uma vez:

```{r}


for(var_to_tab in c("gender","age_cat",  "outcome")){
  
  print(proptab_multiple(linelist, var_to_tab))
  
}

```

Uma maneira mais simples poderia ser usar o "apply" do R base em vez de um "for loop", conforme abaixo:


```{r, include= FALSE, eval=FALSE}

base::lapply(linelist[,c("gender","age_cat", "outcome")], table)

```


<span style="color: darkgreen;">**_DICA:_** R é frequentemente definido como uma linguagem de programação funcional e quase sempre que você executa uma linha de código, está usando algumas funções integradas. Um bom hábito para ficar mais confortável com funções de escrita é frequentemente dar uma olhada interna em como as funções básicas que você usa diariamente são criadas. O atalho para isso é selecionar o nome da função e clicar em`Ctrl+F2` ou `fn+F2` ou `Cmd+F2` (dependendo do seu computador) .</span>

## Usando **purrr**: Escrevendo funções que podem ser aplicadas iterativamente

### Modificar a classe de várias colunas em um conjunto de dados {.unnumbered}  

Digamos que muitas variáveis do tipo caractere nos dados originais da `linelist` precisem ser alteradas para "fator" para fins de análise e plotagem. Em vez de repetir a etapa várias vezes, podemos apenas usar `lapply ()` para fazer a transformação de todas as variáveis envolvidas em uma única linha de código.

<span style="color: orange;">**_CUIDADO:_** `lapply()` retorna uma lista, portanto, seu uso pode exigir uma modificação adicional como última etapa.</span>


```{r, include=FALSE}

linelist_factor1 <- linelist %>%
      lapply(
          function(x) if(is.character(x)) as.factor(x) else x) %>%
      as.data.frame() %>% 
      glimpse()

```


O mesmo passo pode ser feito usando a função `map_if ()` do pacote **purr**

```{r}

linelist_factor2 <- linelist %>%
  purrr::map_if(is.character, as.factor)


linelist_factor2 %>%
        glimpse()

```


### Produzir gráficos iterativamente para diferentes níveis de uma variável {.unnumbered}

Vamos produzir um gráfico de pizza para observar a distribuição dos resultados dos pacientes na China durante o surto de H7N9 para cada província. Em vez de repetir o código para cada um deles, apenas aplicaremos uma função que criaremos.

```{r}

# Opções precisas para o uso do highchart
options(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))


# Criar uma função chamada "chart_outcome_province" que leva como argumento o conjunto de dados e o nome da província para a qual plotar a distribuição do resultado.

chart_outcome_province <- function(data_used, prov){
  
  tab_prov <- data_used %>% 
    filter(province == prov,
           !is.na(outcome))%>% 
    group_by(outcome) %>% 
    count() %>%
    adorn_totals(where = "row") %>% 
    adorn_percentages(denominator = "col", )%>%
    mutate(
        perc_outcome= round(n*100,2),
        outcome=ifelse(outcome=="Death", "Óbito",  #só traduzindo para ficar com rótulos
                       ifelse(outcome=="Recover","Recuperado", outcome))) # em português
 

  
  
  tab_prov %>%
    filter(outcome != "Total") %>% 
  highcharter::hchart(
    "pie", hcaes(x = outcome, y = perc_outcome),
    name = paste0("Distribuição do desfecho em:", prov)
    )
  
}

chart_outcome_province(flu_china, "Shanghai")
chart_outcome_province(flu_china,"Zhejiang")
chart_outcome_province(flu_china,"Jiangsu")


```


### Produzir tabelas iterativamente para diferentes níveis de uma variável {.unnumbered}

Aqui criaremos três indicadores para resumir em uma tabela e gostaríamos de produzir esta tabela para cada uma das províncias. Nossos indicadores são o atraso entre o início e a internação, o percentual de recuperação e a idade mediana dos casos.

```{r}


indic_1 <- flu_china %>% 
  group_by(province) %>% 
  mutate(
    date_hosp= strptime(date_of_hospitalisation, format = "%m/%d/%Y"),
    date_ons= strptime(date_of_onset, format = "%m/%d/%Y"), 
    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,
    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%
  select(province, mean_delay_onset_hosp)  %>% 
  distinct()
     

indic_2 <-  flu_china %>% 
            filter(!is.na(outcome)) %>% 
            group_by(province, outcome) %>% 
            count() %>%
            pivot_wider(names_from = outcome, values_from = n) %>% 
    adorn_totals(where = "col") %>% 
    mutate(
        perc_recovery= round((Recover/Total)*100,2))%>% 
  select(province, perc_recovery)
    
    
    
indic_3 <-  flu_china %>% 
            group_by(province) %>% 
            mutate(
                    median_age_cases = median(as.numeric(age), na.rm = TRUE)
            ) %>% 
  select(province, median_age_cases)  %>% 
  distinct()

# Junte os três conjuntos de dados de indicadores

table_indic_all <- indic_1 %>% 
  dplyr::left_join(indic_2, by = "province") %>% 
        left_join(indic_3, by = "province")


# Imprima os indicadores em uma flextable


print_indic_prov <-  function(table_used, prov){
  
  # Primeiro, transforme um pouco o quadro de dados para facilitar a visualização
 indic_prov <- table_used %>%
    filter(province==prov) %>%
    pivot_longer(names_to = "Indicadores", cols = 2:4)%>% 
   mutate( indic_label = factor(Indicadores,
   levels= c("mean_delay_onset_hosp","perc_recovery","median_age_cases"),
   labels=c("Atraso entre início e internação", "Percentual de recuperação", "Idade mediana dos casos"))
   ) %>% 
    ungroup(province) %>% 
    select(indic_label, value)
  

  tab_print <- flextable(indic_prov)  %>%
    theme_vanilla() %>% 
    flextable::fontsize(part = "body", size = 10) 
    
    
     tab_print <- tab_print %>% 
                  autofit()   %>%
                  set_header_labels( 
                indic_label= "Indicadores", value= "Estimativa") %>%
    flextable::bg( bg = "darkblue", part = "header") %>%
    flextable::bold(part = "header") %>%
    flextable::color(color = "white", part = "header") %>% 
    add_header_lines(values = paste0("Indicadores para a província de:", prov)) %>% 
bold(part = "header")
 
 tab_print <- set_formatter_type(tab_print,
   fmt_double = "%.2f",
   na_str = "-")

tab_print 
    
}




print_indic_prov(table_indic_all, "Shanghai")
print_indic_prov(table_indic_all, "Jiangsu")


```


## Dicas e práticas recomendadas para o bom funcionamento das funções

A programação de funções visa facilitar o código e facilitar sua leitura. Deve produzir o contrário. As dicas abaixo irão ajudá-lo a ter um código limpo e fácil de ler.

### Nomenclatura e sintaxe {.unnumbered}

- Evite usar caracteres que poderiam facilmente ter sido contemplados em outras funções já existentes em seu ambiente

- Recomenda-se que o nome da função seja curto e fácil de entender 

- É preferível usar verbos como o nome da função e substantivos para os nomes dos argumentos.


### Nomes de coluna e avaliação organizada {.unnumbered}  

Se você quiser saber como fazer referência a *nomes de coluna* fornecidos em seu código como argumentos, leia  [tidyverse programming guidance](https://dplyr.tidyverse.org/articles/programming.html).Entre os tópicos cobertos estão *avaliação arrumada* (de *tidy evaluation*) e uso de *embrace* `{{ }}` "Colchetes duplos"

Por exemplo, aqui está um esqueleto rápido de código modelo da página do tutorial mencionado acima:

```{r, eval=F}

var_summary <- function(data, var) {
  data %>%
    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
}
mtcars %>% 
  group_by(cyl) %>% 
  var_summary(mpg)

```


### Teste e tratamento de erros {.unnumbered}

Quanto mais complicada a tarefa de uma função, maior a possibilidade de erros. Portanto, às vezes é necessário adicionar alguma verificação na função para ajudar a entender rapidamente de onde vem o erro e encontrar uma maneira de corrigi-lo.

- Pode ser mais do que recomendado introduzir uma verificação sobre a falta de um argumento usando `missing(argumento)`. Esta verificação simples pode retornar um valor "TRUE" (verdadeiro) ou "FALSE" (falso).

```{r , error=TRUE}

conter_covid19_missing <- function(distanciamento_social, usar_mascara, vacinacao){
  
  if (missing(distanciamento_social)) (print("Por favor, forneça o arg1"))
  if (missing(usar_mascara)) print("Por favor, forneça o arg2")
  if (missing(vacinacao)) print("Por favor, forneça o arg3")


  if (!distanciamento_social == "sim" | usar_mascara =="sim" | vacinacao == "sim" ) 
       
       return ("Você pode fazer melhor")
  
  else("Certifique-se de que todos estejam 'sim', esta pandemia tem que acabar!")
}


conter_covid19_missing(vacinacao = "sim")

```


- Use `stop()` para mais erros detectáveis.

```{r, error=TRUE}

conter_covid19_stop <- function(distanciamento_social, usar_mascara, vacinacao){
  
  if(!is.character(distanciamento_social)) (stop("arg1 deve ser um caractere, digite o valor com` sim`, `não` ou` às vezes"))
  
  if (distanciamento_social == "sim" & usar_mascara =="sim" & vacinacao == "sim" ) 
       
       return ("successo")
  
  else("Certifique-se de que todos estejam 'sim', esta pandemia tem que acabar!")
}


conter_covid19_stop(distanciamento_social=1, usar_mascara="sim", vacinacao = "não")

```

- Como vemos quando executamos a maioria das funções integradas, existem mensagens e avisos que podem aparecer em certas condições. Podemos integrá-los na escrita de nossas funções usando as funções `message()` e `warning()`.

- Também podemos lidar com erros usando `safely()`, que pega uma função como um argumento e a executa de maneira segura. Na verdade, a função será executada sem parar se encontrar um erro. `safely()` retorna como resultado uma **list** com dois objetos, que são os resultados e o erro "pulado".

Podemos verificar executando primeiro a `mean()` como função e, em seguida, executando com `secure ()`.


```{r, warning=FALSE}

map(linelist, mean)
```


```{r, warning=FALSE}
safe_mean <- safely(mean)
linelist %>% 
  map(safe_mean)

```


Como dito anteriormente, comentar bem nossos códigos já é uma boa forma de termos documentação em nosso trabalho.  


<!-- ======================================================= -->
## Recursos


[link para o livro R para Ciência de Dados](https://r4ds.had.co.nz/functions.html)   

[Cheatsheet (cola) em programação avançada em R](https://www.rstudio.com/wp-content/uploads/2016/02/advancedR.pdf)

[Cheatsheet (cola) do Pacote purr](https://purrr.tidyverse.org/)

[Video-ACM palesta por Hadley Wickham: A alegria da programação funcional (como map_dbl funciona)](https://youtube.videoken.com/embed/bzUmK0Y07ck)
