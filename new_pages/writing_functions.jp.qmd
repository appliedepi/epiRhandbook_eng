# 関数の作成 {#writing-functions}


<!-- ======================================================= -->
## 準備 {  }


### パッケージの読み込み {-}

以下のコードは、分析に必要なパッケージの読み込みを行います。このハンドブックでは、パッケージを読み込むために、**pacman** パッケージの `p_load()` を主に使用しています。`p_load()` は、必要に応じてパッケージをインストールし、現在の R セッションで使用するためにパッケージを読み込む関数です。また、すでにインストールされたパッケージは、R の基本パッケージである **base** （以下、**base** R）の `library()` を使用して読み込むこともできます。R のパッケージに関する詳細は [R の基礎](#basics)の章をご覧ください。

```{r, echo=F, warning=F, message=F}
pacman::p_load(
  rio,          # ファイルのインポート
  here,         # ファイルパスの生成
  skimr,        # データの要約統計量の表示
  tidyverse,    # データマネジメントとggplot2によるグラフィックス 
  gtsummary,    # 要約統計量と回帰分析の表作成
  janitor,      # 表に合計値とパーセンテージを加える
  scales,       # 割合をパーセンテージに簡単に変換する  
  flextable,     # 表を HTML に変換
  purrr,          #関数プログラミングを容易にする
  readr,          #csv ファイルの読み込み
  highcharter     #highchart オブジェクトを作成し、特定のプロットを描く
  )
```

### データのインポート {-}

エボラ出血熱の流行をシミュレートしたデータセットをインポートします。データをダウンロードし同じように行いたい場合、[ハンドブックとデータのダウンロード](#data-used)の章をご覧ください。データは **rio** パッケージの import() を利用してインポートしましょう。データをインポートする様々な方法については [インポートとエクスポート](#importing)の章をご覧ください。

また、この章の最後では、2013年のH7N9インフルエンザのデータを使用します。

```{r, echo=F}
# ラインリスト（linelist）データを R に取り込む
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))

flu_china <- rio::import(here::here("data", "case_linelists", "fluH7N9_China_2013.csv"))

```


## 関数  

関数はコードを理解しやすく、短く、エラーを起こしにくくすることができるため、プログラミングにおいて役立ちます(関数自体にエラーがない場合)。

このハンドブックをここまで読んでくださった方は、無数の関数に出会ったことになります。というのも、R ではすべての演算子が関数呼び出しになるからです。
`+, for, if, [, $, { …`. 例えば、`x + y` は `'+'(x, y)` と同じです。

R は、複数の関数を共に扱う可能性が最も高い言語であり、また、ユーザが簡単に関数を書けるように十分なツールが提供されている言語の 1 つです。私たちはプログラムの繋がりを最初から最後まで考える必要はなく、R では複数の関数をベクトルのように使用したり、他の関数やリストの中で使用することもできます。

関数型プログラミングに関する非常に高度な資料は数多く存在しますが、ここでは短い実用的な例を用いて、関数型プログラミングを始めるためのヒントを提供するにとどめます。その後、参考資料のリンクを参照して、さらに詳しい情報を得ることをお勧めします。





## なぜ関数を使うのか? 

見出しの質問に答える前に、次の点が重要です。このハンドブックの [ループと反復処理・リストの操作](#iteration)の章に、最初の R 関数を書くためのヒントがすでにあります。実際、if/else や loop の使用は、関数の中で多くの機能の中核です。なぜなら、複数の条件分岐によって、記述したコードが様々な場面に適用できたり、ループ文によってコードを繰り返し実行するのに役立ったりするからです。

- 別々の変数やデータに、同じコードを複数回繰り返し適用するか？

- 繰り返しの適用を取り除くことで、コード全体が大幅に短縮され、実行速度が速くなるか？

- 記述したコードが他の箇所で再度使用されているが、再度使用されたコードの複数箇所で異なる値が使用される可能性はあるか？

前述の質問の答えが YES であれば、おそらく関数を書く必要があるでしょう。

## R でどのように関数を作成するか?

R の関数は主に 3 つの要素で構成されています:

- `formals()`、関数の呼び出し方を制御する引数のリストを返す

- `body()`、関数内にコードを記述する。例、コードの記述方法によって、角括弧（{}）の内側や括弧（()）の後など

そして、

- `environment()`、関数の変数の位置を特定するのに役立ち、関数が値を見つける方法を決定する
 
関数を作成したら、関連する関数を呼び出すことで、これらの各構成要素を検証することができます。
 

## 基本的な構文と構造

- 関数には適切な名前を付ける必要があり、名前を読んだだけでその内容が容易に理解できるようにしなければなりません。実際、Rの基本的な関数の大部分ですでに当てはまります。`mean()`、`print()`、`summary()` のような関数は、非常にわかりやすい名前となっています 

- 関数は、引数を必要とします。例えば、処理するデータや静的な値、その他のオプションオブジェクトなどです 

- そして最後に、関数はその中核となるタスクと与えられた引数に基づいて出力を行います。通常、出力を得るためには、`print()` や `return()` などの組み込み関数を使用します。ロジカル値、数値、文字、データフレームなど、要するにあらゆる種類の R オブジェクトを出力できます。

基本的に下記が関数の構成です:

```{r, eval=FALSE}

function_name <- function(argument_1, argument_2, argument_3){
  
           function_task
  
           return(output)
}


```

`contain_covid19()` という名前の関数を最初に作ります。 

```{r}

contain_covid19 <- function(barrier_gest, wear_mask, get_vaccine){
  
                            if(barrier_gest == "yes" & wear_mask == "yes" & get_vaccine == "yes" ) 
       
                            return("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


```

新しく作成した関数の要素を検証します。

```{r}

formals(contain_covid19)
body(contain_covid19)
environment(contain_covid19)

```


では、作成した関数をテストしてみましょう。作成した関数を呼び出すには、他の R 関数と同様に、関数名を記述し、必要な引数を追加します。

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "yes")

```

明示的に各引数の名前をあらためて指定できます。しかし、R は各引数の定義順序を記憶しているので、あらためて指定しなくても、上記のコードは動作するはずです。つまり、引数の値を正しい順序で書く限り、関数を呼び出すときに引数の名前を省略できるのです。

```{r}

contain_covid19("yes", "yes", "yes")

```

次に、片方の値が `"no"` または **not** `"yes"` の場合はどうなるかを見てみましょう。

```{r}

contain_covid19(barrier_gest = "yes", wear_mask = "yes", get_vaccine = "no")
```

関数定義に定義されていない引数を与えると、エラーが発生します: 

```{r, eval=F}
contain_covid19(barrier_gest = "sometimes", wear_mask = "yes", get_vaccine = "no")
```

`Error in contain_covid19(barrier_gest = "sometimes", wear_mask = "yes",  : 
  could not find function "contain_covid19"`


<span style="color: black;">**<u>備考:</u>** 一部の関数(多くは非常に短くわかりやすい関数です)には、関数名を必要としないものもあり、コード内で直接使用したり、他の関数内で使用したりして、素早い実装ができます。 これらの関数は **無名関数** と呼ばれています。</span>

例えば、以下は、データセットの文字型変数のみを保持する無名関数です。

```{r, eval=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  #base R パッケージにある "head" 関数に相当し、データセットの最初の n 個の観測データを返す
  select(function(x) is.character(x)) 
```
  
```{r, echo=F}
linelist %>% 
  dplyr::slice_head(n=10) %>%  #base R パッケージにある "head" 関数に相当し、データセットの最初の n 個の観測データを返す
  select(function(x) is.character(x)) %>%  
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )
```


次は、観測データを 2 行ごと選択する関数です(例えば、患者ごとに多くのレコードを持つ縦持ちデータがある場合、日付や訪問で順番に並べた後などに適切なことがあります)。
この例では、dplyr 処理外に記述する適切な関数は、すべての行番号を含むベクトルに適用する `function (x) (x%%2 == 0)` となります。


```{r, eval=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>% # 最終的な抽出行を明示するために、各観測行のインデックスを rowname として追加する
   filter(row_number() %%2 == 0)
```

```{r, echo=F}
linelist %>%   
   slice_head(n=20) %>% 
   tibble::rownames_to_column() %>%    # 最終的な抽出行を明示するために、各観測行のインデックスを rowname として追加する
   filter(row_number() %%2 == 0) %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


base R を利用すると以下のように書くことができます:

```{r, eval = F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),]
```

```{r, echo=F}

linelist_firstobs <- head(linelist, 20)

linelist_firstobs[base::Filter(function(x) (x%%2 == 0), seq(nrow(linelist_firstobs))),] %>% 
DT::datatable(rownames = FALSE, filter="top", options = list(pageLength = 10, scrollX=T), class = 'white-space: nowrap' )

```


<span style="color: orange;">**<u>注意:</u>** 関数を使うことがコード実装に役立つのは事実です。しかしながら、複数の関数を記述することに時間を浪費したり、あるいは、十分に考えられておらず、また、適切に書かれていない、つまり、結果としてエラーを返す関数の修正に時間を浪費する可能性があります。そのため、まず R のコードを書き、そのコードが意図した動作をすることを確認してから、上記のような 3 つの主要な要素を持つ関数にすることを推奨します。</span>

## 例  

### それぞれの列の割合を返す {.unnumbered}  

確かに、多くのパッケージには、情報を非常に簡単かつ良い方法で要約することができる素晴らしい関数がすでにあります。しかし、関数を書くことに慣れるための最初のステップとして自分で作ってみることにします。

下記の例では、シンプルな関数を書くことで、同じコードを何度もコピーペーストする必要がないことを示します。

```{r}

proptab_multiple <- function(my_data, var_to_tab){
  
  #表組みする前に対象となる各変数名を表示する
  print(var_to_tab)

  with(my_data,
       rbind( #次の 2 つの関数の結果を行ごとに結合する
        #対象となる変数を表にする: 数値のみ
          table(my_data[[var_to_tab]], useNA = "no"),
          #対象となる各変数ごとに割合を計算し、その値を小数第 2 位に丸める
         round(prop.table(table(my_data[[var_to_tab]]))*100,2)
         )
       )
}


proptab_multiple(linelist, "gender")

proptab_multiple(linelist, "age_cat")

proptab_multiple(linelist, "outcome")


```

<span style="color: darkgreen;">**<u>ヒント:</u>** 上記のように、一般的なプログラミングと同様に、関数にコメントを付けることが非常に重要です。関数作成の目的は、コードを読みやすく、短く、効率的にすることであることを覚えておいてください。関数の名前を読んだだけで、その関数が何をするのか理解できるようにし、コメントを読むことでより詳細な情報を得られるようにします。</span>


もう一つの方法は、ループ内でこの関数を使用し、一度に処理を行うことです。:

```{r}


for(var_to_tab in c("gender","age_cat",  "outcome")){
  
  print(proptab_multiple(linelist, var_to_tab))
  
}

```

よりシンプルな方法としては、"for loop" の代わりに base R の "apply" を使用することで、以下のように表現できます:

```{r, include= FALSE, eval=FALSE}

base::lapply(linelist[,c("gender","age_cat", "outcome")], table)

```


<span style="color: darkgreen;">**<u>ヒント：</u>** R は関数型プログラミング言語として定義されており、ほとんどの場合、コードを実行する際には組み込み関数を使用します。関数の書き方に慣れるための良い習慣は、普段使用している基本的な関数がどのように作られているか内部動作を確認することです。そのための RStudio のショートカットは、関数名を選択してから `Ctrl+F2` または `fn+F2` または`Cmd+F2`(お使いのコンピュータによって異なります)を押します。</span>

## **purrr** の使用: 繰り返し利用可能な関数の作成

### データセット内の複数のカラムのデータ型を変更する {.unnumbered}  

例えば、分析やプロットのために、元の `linelist` データに含まれる多くの文字型変数を「因子型」に変換する必要があるとします。この変換ステップを何度も繰り返し実行する代わりに、`lapply()` を使えば、1 行のコードですべての文字型変数の変換を行うことができます


<span style="color: orange;">**<u>注意:</u>** `lapply()` はリストを返すので、使用の際には変換の最終ステップとして追加の修正が必要になるかもしれません。</span>


```{r, include=FALSE}

linelist_factor1 <- linelist %>%
      lapply(
          function(x) if(is.character(x)) as.factor(x) else x) %>%
      as.data.frame() %>% 
      glimpse()

```


同じことは **purrr** パッケージの `map_if()` を使って行うことができます。

```{r}

linelist_factor2 <- linelist %>%
  purrr::map_if(is.character, as.factor)


linelist_factor2 %>%
        glimpse()

```


### 異なる変数で繰り返しグラフを作成する {.unnumbered}

H7N9 発生時の患者の転帰の分布を、中国各省ごとに見ていくための円グラフを作成します。各省それぞれにコードを繰り返すのではなく、以下に作成する関数を適用するだけです。

```{r}

#highchart カラーテーマを使用するためのオプションの設定
options(highcharter.theme =   highcharter::hc_theme_smpl(tooltip = list(valueDecimals = 2)))


#"chart_outcome_province" という関数を作成する。この関数はデータセットと、結果の分布をプロットする州の名前を引数として取る。

chart_outcome_province <- function(data_used, prov){
  
  tab_prov <- data_used %>% 
    filter(province == prov,
           !is.na(outcome))%>% 
    group_by(outcome) %>% 
    count() %>%
    adorn_totals(where = "row") %>% 
    adorn_percentages(denominator = "col", )%>%
    mutate(
        perc_outcome= round(n*100,2))
  
  
  tab_prov %>%
    filter(outcome != "Total") %>% 
  highcharter::hchart(
    "pie", hcaes(x = outcome, y = perc_outcome),
    name = paste0("Distibution of the outcome in:", prov)
    )
  
}

chart_outcome_province(flu_china, "Shanghai")
chart_outcome_province(flu_china,"Zhejiang")
chart_outcome_province(flu_china,"Jiangsu")


```



### 異なる変数で繰り返し表を作成する {.unnumbered}

3 つの指標を作成して表にまとめ、各州ごとに作成します。指標は、発症から入院までの期間、回復の割合、症例の年齢の中央値です。

```{r}


indic_1 <- flu_china %>% 
  group_by(province) %>% 
  mutate(
    date_hosp= strptime(date_of_hospitalisation, format = "%m/%d/%Y"),
    date_ons= strptime(date_of_onset, format = "%m/%d/%Y"), 
    delay_onset_hosp= as.numeric(date_hosp - date_ons)/86400,
    mean_delay_onset_hosp = round(mean(delay_onset_hosp, na.rm=TRUE ), 0)) %>%
  select(province, mean_delay_onset_hosp)  %>% 
  distinct()
     

indic_2 <-  flu_china %>% 
            filter(!is.na(outcome)) %>% 
            group_by(province, outcome) %>% 
            count() %>%
            pivot_wider(names_from = outcome, values_from = n) %>% 
    adorn_totals(where = "col") %>% 
    mutate(
        perc_recovery= round((Recover/Total)*100,2))%>% 
  select(province, perc_recovery)
    
    
    
indic_3 <-  flu_china %>% 
            group_by(province) %>% 
            mutate(
                    median_age_cases = median(as.numeric(age), na.rm = TRUE)
            ) %>% 
  select(province, median_age_cases)  %>% 
  distinct()

#3 つの指標データセットの結合

table_indic_all <- indic_1 %>% 
  dplyr::left_join(indic_2, by = "province") %>% 
        left_join(indic_3, by = "province")


#指標を flextable で表示する


print_indic_prov <-  function(table_used, prov){
  
  #まず、表示しやすいようにデータフレームを少し変換する
  indic_prov <- table_used %>%
    filter(province==prov) %>%
    pivot_longer(names_to = "Indicateurs", cols = 2:4) %>% 
   mutate( indic_label = factor(Indicateurs,
   levels= c("mean_delay_onset_hosp","perc_recovery","median_age_cases"),
   labels=c("Mean delay onset-hosp","Percentage of recovery", "Median age of the cases"))
   ) %>% 
    ungroup(province) %>% 
    select(indic_label, value)
  

    tab_print <- flextable(indic_prov)  %>%
    theme_vanilla() %>% 
    flextable::fontsize(part = "body", size = 10) 
    
    
     tab_print <- tab_print %>% 
                  autofit()   %>%
                  set_header_labels( 
                indic_label= "Indicateurs", value= "Estimation") %>%
    flextable::bg( bg = "darkblue", part = "header") %>%
    flextable::bold(part = "header") %>%
    flextable::color(color = "white", part = "header") %>% 
    add_header_lines(values = paste0("Indicateurs pour la province de: ", prov)) %>% 
bold(part = "header")
 
 tab_print <- set_formatter_type(tab_print,
   fmt_double = "%.2f",
   na_str = "-")

tab_print 
    
}




print_indic_prov(table_indic_all, "Shanghai")
print_indic_prov(table_indic_all, "Jiangsu")


```


## 関数をよりよく使うためのヒントとベストプラクティス

関数型プログラミングは、コードを簡単にし、その読み取りを容易にするためのものです。また、逆も成り立ちます。以下のヒントは、きれいなコードと読みやすいコードの作成に役立つでしょう。


### 命名と構文 {.unnumbered}

- 環境に存在する他の関数と、容易に重複してしまう可能性のある名前の使用は避けてください

- 関数名は短く、他の方が理解しやすいようにすることをお勧めします

- 関数名には動詞を使い、引数名には名詞を使うのが好ましいです。


### カラム名と tidy evaluation {.unnumbered}  

コードに引数として与えられた<u>列名</u>を参照する方法を知りたい場合は、[tidyverse programming guidance](https://dplyr.tidyverse.org/articles/programming.html) を参照ください。トピックの中には、<u>tidy evaluation</u>と<u>包括演算子</u> `{{ }}` (二重括弧)の利用方法が含まれています。

前述した tidyverse チュートリアルページにある、テンプレートコード例です:  

```{r, eval=F}

var_summary <- function(data, var) {
  data %>%
    summarise(n = n(), min = min({{ var }}), max = max({{ var }}))
}
mtcars %>% 
  group_by(cyl) %>% 
  var_summary(mpg)

```


### テストとエラー処理 {.unnumbered}

関数のタスクが複雑であればあるほど、エラーが発生する可能性は高くなります。そのため、エラーの原因がどこにあるのかを素早く理解し、エラーの修正方法を見つけるために、関数内に何らかの検証工程を加えることが必要な場合があります。

- `missing(引数)` を用いて引数の欠落を確認することが推奨されます。この簡単な確認は "TRUE" もしくは "FALSE" を返します。

```{r , error=TRUE}

contain_covid19_missing <- function(barrier_gest, wear_mask, get_vaccine){
  
  if (missing(barrier_gest)) (print("please provide arg1"))
  if (missing(wear_mask)) print("please provide arg2")
  if (missing(get_vaccine)) print("please provide arg3")


  if (!barrier_gest == "yes" | wear_mask =="yes" | get_vaccine == "yes" ) 
       
       return ("you can do better")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_missing(get_vaccine = "yes")

```


- より検出しやすいエラーには、`stop()` を使用します。

```{r, error=TRUE}

contain_covid19_stop <- function(barrier_gest, wear_mask, get_vaccine){
  
  if(!is.character(barrier_gest)) (stop("arg1 should be a character, please enter the value with `yes`, `no` or `sometimes"))
  
  if (barrier_gest == "yes" & wear_mask =="yes" & get_vaccine == "yes" ) 
       
       return ("success")
  
  else("please make sure all are yes, this pandemic has to end!")
}


contain_covid19_stop(barrier_gest=1, wear_mask="yes", get_vaccine = "no")

```

- ほとんどの組み込み関数は実行時に、特定の条件でポップアップするメッセージや警告があります。関数 `message()` や `warning()` を使って、これらのメッセージを自作の関数に組み込むことができます。

- 引数として関数を受取り、安全な方法で実行する `safely()` を使うことで、エラーを処理することもできます。実際、この関数は、エラーが発生しても停止することなく実行されます。`safely()` は出力として、関数の結果とスキップしたエラーの2つのオブジェクトを持つ**リスト**を返します。

下記コードでは、linelise 各行に対し `mean()` を実行し、次に `safely()` を実行することで結果とエラーを検証できます。


```{r, warning=FALSE}

map(linelist, mean)
```


```{r, warning=FALSE}
safe_mean <- safely(mean)
linelist %>% 
  map(safe_mean)

```


以前述べたように、コードにコメントをつけることは、作業内容を明示するための良い方法です。  


<!-- ======================================================= -->
## 参考資料


[R for Data Science link](https://r4ds.had.co.nz/functions.html)   

[Cheatsheet advance R programming](https://www.rstudio.com/wp-content/uploads/2016/02/advancedR.pdf)

[Cheatsheet purr Package](https://purrr.tidyverse.org/)

[Video-ACM talk by Hadley Wickham: The joy of functional programming (how does map_dbl work)](https://youtube.videoken.com/embed/bzUmK0Y07ck)
