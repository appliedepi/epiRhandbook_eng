# Faktoren {}

```{r, out.width=c("100%"), echo=F, message=F}
knitr::include_graphics(here::here("images", "Factors_1500x500.png"))
```

In R, *Faktoren* sind eine Klasse von Daten, die geordnete Kategorien mit einer festen Menge akzeptabler Werte ermöglichen.

Normalerweise konvertierst du eine Spalte von einer Zeichen- oder numerischen Klasse in einen Faktor, wenn du den Werten eine eigene Ordnung geben willst ("*Ebenen*"), damit sie in Diagrammen und Tabellen nicht alphabetisch angezeigt werden können. Eine weitere häufige Verwendung von Faktoren ist die Standardisierung der Legenden von Diagrammen, damit sie nicht schwanken, wenn bestimmte Werte vorübergehend nicht in den Daten enthalten sind.

Diese Seite demonstriert die Verwendung von Funktionen aus dem Paket **forcats** (ein Kurzname für "**Für** **Katze**egorische Variablen") und einige **Basis** R-Funktionen. Wir gehen auch auf die Verwendung von **lubridate** und **aweek** für Sonderfaktoren, die sich auf epidemiologische Wochen beziehen.

Eine vollständige Liste der **forcats** Funktionen kann online gefunden werden [hier](https://forcats.tidyverse.org/reference/index.html). Nachfolgend zeigen wir einige der gängigsten Funktionen.

<!-- ======================================================= -->

## Vorbereitung

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über \[R-Grundlagen\] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,           # import/export
  here,          # filepaths
  lubridate,     # working with dates
  forcats,       # factors
  aweek,         # create epiweeks with automatic factor levels
  janitor,       # tables
  tidyverse      # data mgmt and viz
  )
```

### Daten importieren {.unnumbered}

Wir importieren den Datensatz der Fälle aus einer simulierten Ebola-Epidemie. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere deine Daten mit der `import()` Funktion aus der **rio**Paket (sie akzeptiert viele Dateitypen wie .xlsx, .rds, .csv - siehe die \[Import und Export\] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import your dataset
linelist <- import("linelist_cleaned.rds")
```

### Neue kategoriale Variable {#fct\_newcat .unnumbered}

Zur Veranschaulichung verwenden wir auf dieser Seite ein gängiges Szenario - die Erstellung einer neuen kategorialen Variablen.

Wenn du eine numerische Spalte in einen Klassenfaktor umwandelst, kannst du keine numerischen Statistiken berechnen.

#### Spalte erstellen {.unnumbered}

Wir verwenden die vorhandene Spalte `days_onset_hosp` (Tage vom Auftreten der Symptome bis zur Krankenhausaufnahme) und erstellen eine neue Spalte `delay_cat` indem wir jede Zeile in eine von mehreren Kategorien einordnen. Wir tun dies mit der **dplyr** Funktion `case_when()` die nacheinander logische Kriterien (rechte Seite) auf jede Zeile anwendet und den entsprechenden Wert der linken Seite für die neue Spalte zurückgibt `delay_cat`. Lies mehr über `case_when()`in \[Datenbereinigung und Kernfunktionen\].

```{r}
linelist <- linelist %>% 
  mutate(delay_cat = case_when(
    # criteria                                   # new value if TRUE
    days_onset_hosp < 2                        ~ "<2 days",
    days_onset_hosp >= 2 & days_onset_hosp < 5 ~ "2-5 days",
    days_onset_hosp >= 5                       ~ ">5 days",
    is.na(days_onset_hosp)                     ~ NA_character_,
    TRUE                                       ~ "Check me"))  
```

#### Standardwert Reihenfolge {.unnumbered}

Wie erstellt mit `case_when()` erstellt wurde, ist die neue Spalte `delay_cat` ist eine kategoriale Spalte der Klasse Charakter - *nicht* noch ein Faktor. In einer Häufigkeitstabelle sehen wir also, dass die eindeutigen Werte in einer standardmäßigen alphanumerischen Reihenfolge erscheinen - eine Reihenfolge, die intuitiv nicht viel Sinn macht:

```{r}
table(linelist$delay_cat, useNA = "always")
```

Wenn wir ein Balkendiagramm erstellen, erscheinen die Werte ebenfalls in dieser Reihenfolge auf der x-Achse (siehe die \[ggplot Grundlagen\] Seite für mehr über**ggplot2** - dem am weitesten verbreiteten Visualisierungspaket in R).

```{r, warning=F, message=F}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = delay_cat))
```

## In Faktor umwandeln

Um eine Zeichen- oder Zahlenspalte in eine Klasse umzuwandeln *Faktor* umzuwandeln, kannst du jede Funktion aus der **forcats** Paket verwenden (viele sind detailliert [unter](#fct_adjust)). Sie konvertieren in den Klassenfaktor und führen dann auch eine bestimmte Ordnung der Ebenen durch oder erlauben diese - zum Beispiel mit `fct_relevel()` kannst du die Reihenfolge der Stufen manuell festlegen. Die Funktion `as_factor()` wandelt die Klasse einfach um, ohne weitere Fähigkeiten.

Die **Basis** R-Funktion `factor()` wandelt eine Spalte in einen Faktor um und ermöglicht es dir, die Reihenfolge der Ebenen manuell festzulegen, und zwar als Zeichenvektor zu seinem `levels = ` Argument.

Im Folgenden verwenden wir `mutate()` und `fct_relevel()` um die Spalte zu konvertieren `delay_cat` von Klassenzeichen in Klassenfaktor umzuwandeln. Die Spalte `delay_cat` wird erstellt in der [Vorbereitung](#fct_newcat) Abschnitt oben beschrieben.

```{r}
linelist <- linelist %>%
  mutate(delay_cat = fct_relevel(delay_cat))
```

*Die einzelnen "Werte" in dieser Spalte werden nun als "Stufen" des Faktors betrachtet.*  Die Stufen haben einen *Ordnung* die mit dem Befehl **Basis** R-Funktion `levels()` oder alternativ in einer Zähltabelle über `table()` von **Basis** R oder `tabyl()` von **Hausmeister**. Die Reihenfolge der Ebenen ist standardmäßig alphanumerisch, wie bisher. Beachte, dass `NA` keine Faktorstufe ist.

```{r}
levels(linelist$delay_cat)
```

Die Funktion `fct_relevel()` hat den zusätzlichen Nutzen, dass du die Reihenfolge der Ebenen manuell festlegen kannst. Schreibe einfach die Werte der Ebenen in Anführungszeichen, getrennt durch Kommas, wie unten gezeigt. Beachte, dass die Schreibweise genau mit den Werten übereinstimmen muss. Wenn du Ebenen erstellen willst, die in den Daten nicht vorhanden sind, verwende [`fct_expand()` stattdessen](#fct_add)).

```{r}
linelist <- linelist %>%
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", "2-5 days", ">5 days"))
```

Jetzt können wir sehen, dass die Ebenen in einer sinnvollen Reihenfolge angeordnet sind, wie im vorherigen Befehl angegeben.

```{r}
levels(linelist$delay_cat)
```

Jetzt macht auch die Reihenfolge der Darstellung intuitiv mehr Sinn.

```{r, warning=F, message=F}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = delay_cat))
```

## Ebenen hinzufügen oder entfernen

### hinzufügen {#fct\_add .unnumbered}

Wenn du einem Faktor Stufen hinzufügen musst, kannst du dies mit `fct_expand()`. Schreibe einfach den Spaltennamen gefolgt von den neuen Stufen (durch Kommas getrennt). Wenn du die Werte tabellierst, kannst du die neuen Stufen und die Nullen sehen. Du kannst verwenden `table()` von **Basis** R, oder `tabyl()` von **Hausmeister**:

```{r}
linelist %>% 
  mutate(delay_cat = fct_expand(delay_cat, "Not admitted to hospital", "Transfer to other jurisdiction")) %>% 
  tabyl(delay_cat)   # print table
```

Hinweis: Es gibt eine besondere **forcats** Funktion, um fehlende Werte einfach hinzuzufügen (`NA`) als Ebene. Siehe den Abschnitt über [Fehlende Werte](#fct_missing) unten.

### Drop {.unnumbered}

Wenn du `fct_drop()` verwendest, werden die "ungenutzten" Ebenen mit Nullwerten aus der Menge der Ebenen entfernt. Die Ebenen, die wir oben hinzugefügt haben ("Nicht in ein Krankenhaus eingewiesen"), gibt es zwar als Ebene, aber keine Zeile hat diese Werte. Daher werden sie durch die Anwendung von `fct_drop()` auf unsere Faktorspalte:

```{r}
linelist %>% 
  mutate(delay_cat = fct_drop(delay_cat)) %>% 
  tabyl(delay_cat)
```

## Reihenfolge der Ebenen anpassen {#fct\_adjust}

Das Paket **forcats** bietet nützliche Funktionen, mit denen du die Reihenfolge der Stufen eines Faktors leicht anpassen kannst (nachdem eine Spalte als Klassenfaktor definiert wurde):

Diese Funktionen können in zwei Kontexten auf eine Faktorspalte angewendet werden:

1) zur Spalte im Datenrahmen, wie üblich, damit die Transformation für jede spätere Verwendung der Daten verfügbar ist
2) *Innerhalb eines Diagramms* damit die Änderung nur innerhalb des Plots angewendet wird

### Manuell {.unnumbered}

Mit dieser Funktion kannst du die Faktorstufen manuell anordnen. Wenn sie auf eine Spalte ohne Faktor angewendet wird, wird die Spalte zunächst in einen Klassenfaktor umgewandelt.

In den Klammern gibst du zuerst den Namen der Faktorspalte an und dann entweder:

- Alle Ebenen in der gewünschten Reihenfolge (als Zeichenvektor) `c()`), oder
- Eine Ebene und ihre korrigierte Platzierung mit dem `after = ` Argument

Hier ist ein Beispiel für die Neudefinition der Spalte `delay_cat` (die bereits die Klasse Factor ist) und die Angabe der gewünschten Reihenfolge der Ebenen.

```{r}
# re-define level order
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, c("<2 days", "2-5 days", ">5 days")))
```

Wenn du nur eine Ebene verschieben willst, kannst du sie auf `fct_relevel()` allein und gibst eine Nummer für die `after = ` Argument eine Zahl, um anzugeben, wo in der Reihenfolge sie stehen soll. Der folgende Befehl verschiebt zum Beispiel "\<2 Tage" an die zweite Position:

```{r, eval=F}
# re-define level order
linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", after = 1)) %>% 
  tabyl(delay_cat)
```

### Innerhalb eines Plots {.unnumbered}

Die **forcats** Befehle können verwendet werden, um die Reihenfolge der Ebenen im Datenrahmen oder nur innerhalb eines Plots festzulegen. Indem du den Befehl zum "Umschließen" des Spaltennamens verwendest *innerhalb von* der `ggplot()` Plot-Befehl kannst du die Transformation rückgängig machen, neu ausrichten usw. Die Transformation gilt dann nur innerhalb dieses Plots.

Unten werden zwei Plots erstellt mit `ggplot()`erstellt (siehe die \[ggplot Grundlagen\] Seite). In der ersten wird die`delay_cat` Spalte auf die x-Achse des Plots abgebildet, wobei die Standardreihenfolge der Ebenen wie in den Daten `linelist`. Im zweiten Beispiel wird die Spalte in die `fct_relevel()` und die Reihenfolge wird im Diagramm geändert.

```{r, echo=F}
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, c("2-5 days", "<2 days", ">5 days")))

```

```{r, warning=F, message=F, out.width=c("50%", "50%"), fig.show="hold"}
# Alpha-numeric default order - no adjustment within ggplot
ggplot(data = linelist)+
    geom_bar(mapping = aes(x = delay_cat))

# Factor level order adjusted within ggplot
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = fct_relevel(delay_cat, c("<2 days", "2-5 days", ">5 days"))))
```

Beachte, dass der Standardtitel der x-Achse jetzt ziemlich kompliziert ist - du kannst diesen Titel mit dem **ggplot2** `labs()` Argument.

### Umkehren {.unnumbered}

Es kommt häufig vor, dass du die Reihenfolge der Ebenen umkehren möchtest. Schließe den Faktor einfach mit `fct_rev()`.

Beachte, dass du, wenn du den Faktor umkehren willst *nur* eine Plotlegende umkehren willst, nicht aber die tatsächlichen Faktorstufen, kannst du das mit `guides()`(siehe \[ggplot-Tipps\]).

### Nach Häufigkeit {.unnumbered}

Um nach der Häufigkeit zu sortieren, mit der der Wert in den Daten erscheint, verwende `fct_infreq()`. Alle fehlenden Werte (`NA`) werden automatisch am Ende eingefügt, es sei denn, sie werden in eine explizite Ebene umgewandelt (siehe [diesen Abschnitt](#fct_missing)). Du kannst die Reihenfolge umkehren, indem du einen weiteren Wrapper mit `fct_rev()`.

Diese Funktion kann innerhalb einer `ggplot()` verwenden, wie unten gezeigt.

```{r, out.width=c("50%", "50%", "50%"), fig.show="hold", warning=F, message=F}
# ordered by frequency
ggplot(data = linelist, aes(x = fct_infreq(delay_cat)))+
  geom_bar()+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by frequency")

# reversed frequency
ggplot(data = linelist, aes(x = fct_rev(fct_infreq(delay_cat))))+
  geom_bar()+
  labs(x = "Delay onset to admission (days)",
       title = "Reverse of order by frequency")
```

### Nach Aussehen {.unnumbered}

Verwende `fct_inorder()` kannst du die Reihenfolge der Ebenen so einstellen, dass sie mit der Reihenfolge des Auftretens in den Daten übereinstimmt, beginnend mit der ersten Zeile. Das kann nützlich sein, wenn du zuerst sorgfältig `arrange()` die Daten in den Datenrahmen einträgst und dann damit die Reihenfolge der Faktoren festlegst.


### Nach der zusammenfassenden Statistik einer anderen Spalte {.unnumbered}

Du kannst verwenden `fct_reorder()` um die Ebenen einer Spalte zu ordnen *nach einer statistischen Zusammenfassung einer anderen Spalte*. Dies kann zu optisch ansprechenden Diagrammen führen, bei denen die Balken/Punkte gleichmäßig auf- oder absteigen.

In den folgenden Beispielen ist die x-Achse `delay_cat` und die y-Achse ist eine numerische Spalte `ct_blood` (Zyklus-Schwellenwert). Boxplots zeigen die Verteilung der CT-Werte nach `delay_cat` Gruppe. Wir wollen die Boxplots in aufsteigender Reihenfolge nach dem mittleren CT-Wert der Gruppe ordnen.

Im ersten Beispiel unten wird die Standardreihenfolge der alphanumerischen Ebenen verwendet. Du kannst sehen, dass die Höhen der Boxplots durcheinander und nicht in einer bestimmten Reihenfolge sind. Im zweiten Beispiel wird die `delay_cat` Spalte (die der x-Achse zugeordnet ist) in `fct_reorder()`, die Spalte `ct_blood` als zweites Argument und "Median" als drittes Argument angegeben (du könntest auch "max", "mean", "min", etc. verwenden). So wird die Reihenfolge der Ebenen von `delay_cat` die aufsteigenden Median-CT-Werte der einzelnen `delay_cat` des mittleren CT-Werts jeder Gruppe. Das spiegelt sich in der zweiten Grafik wider - die Box-Plots wurden aufsteigend angeordnet. Beachte, wie `NA` (fehlend) am Ende erscheint, wenn es nicht in eine explizite Ebene umgewandelt wird.

```{r, fig.show="hold", message=FALSE, warning=FALSE, out.width=c("50%", "50%")}
# boxplots ordered by original factor levels
ggplot(data = linelist)+
  geom_boxplot(
    aes(x = delay_cat,
        y = ct_blood, 
        fill = delay_cat))+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by original alpha-numeric levels")+
  theme_classic()+
  theme(legend.position = "none")


# boxplots ordered by median CT value
ggplot(data = linelist)+
  geom_boxplot(
    aes(x = fct_reorder(delay_cat, ct_blood, "median"),
        y = ct_blood,
        fill = delay_cat))+
  labs(x = "Delay onset to admission (days)",
       title = "Ordered by median CT value in group")+
  theme_classic()+
  theme(legend.position = "none")
```

Beachte, dass in diesem Beispiel keine Schritte erforderlich sind, bevor die `ggplot()` Aufruf keine Schritte erforderlich sind - die Gruppierung und die Berechnungen werden alle intern im ggplot-Befehl durchgeführt.

### Nach "End"-Wert {.unnumbered}

verwenden `fct_reorder2()` für gruppierte Liniendiagramme. Sie ordnet die Ebenen (und damit die *Legende*) so, dass sie mit der vertikalen Anordnung der Linien am "Ende" des Diagramms übereinstimmen. Technisch ausgedrückt: Sie ordnet nach den y-Werten, die mit den größten x-Werten verbunden sind.

Wenn du zum Beispiel Linien hast, die die Fallzahlen nach Krankenhaus im Laufe der Zeit darstellen, kannst du Folgendes anwenden `fct_reorder2()` auf die `color = ` Argument innerhalb `aes()`, so dass die vertikale Reihenfolge der Krankenhäuser in der Legende mit der Reihenfolge der Linien am Ende des Plots übereinstimmt. Lies mehr in der [Online-Dokumentation](https://forcats.tidyverse.org/reference/fct_reorder.html).

```{r, warning=F, message=F}
epidemic_data <- linelist %>%         # begin with the linelist   
    filter(date_onset < as.Date("2014-09-21")) %>%    # cut-off date, for visual clarity
    count(                                            # get case counts per week and by hospital
      epiweek = lubridate::floor_date(date_onset, "week"),  
      hospital                                            
    ) 
  
ggplot(data = epidemic_data)+                       # start plot
  geom_line(                                        # make lines
    aes(
      x = epiweek,                                  # x-axis epiweek
      y = n,                                        # height is number of cases per week
      color = fct_reorder2(hospital, epiweek, n)))+ # data grouped and colored by hospital, with factor order by height at end of plot
  labs(title = "Factor levels (and legend display) by line height at end of plot",
       color = "Hospital")                          # change legend title
```

## Fehlende Werte {#fct\_missing}

Wenn du `NA` Werte in deiner Faktorspalte hast, kannst du sie ganz einfach in eine benannte Ebene wie "Missing" umwandeln mit `fct_explicit_na()`. Die `NA` Werte werden am Ende der Ebenenreihenfolge standardmäßig in "(Missing)" umgewandelt. Du kannst den Namen der Ebene mit dem Argument `na_level = `.

Im Folgenden wird diese Operation für die Spalte `delay_cat` durchgeführt und es wird eine Tabelle mit `tabyl()` mit `NA` in "Fehlende Verzögerung" umgewandelt.

```{r}
linelist %>% 
  mutate(delay_cat = fct_explicit_na(delay_cat, na_level = "Missing delay")) %>% 
  tabyl(delay_cat)
```

## Ebenen kombinieren

### Manuell {.unnumbered}

Du kannst die Pegelanzeigen manuell einstellen mit `fct_recode()`. Dies ist wie die **dplyr** Funktion `recode()`(siehe \[Datenbereinigung und Kernfunktionen\]), aber sie ermöglicht die Erstellung neuer Faktorstufen. Wenn du die einfache`recode()` auf einen Faktor anwendest, werden neue, neu kodierte Werte abgelehnt, es sei denn, sie wurden bereits als zulässige Ebenen festgelegt.

Mit diesem Tool kannst du auch Ebenen "kombinieren", indem du mehreren Ebenen denselben neu kodierten Wert zuweist. Achte nur darauf, dass keine Informationen verloren gehen! Achte darauf, dass du diese Kombinationsschritte in einer neuen Spalte durchführst (und nicht die bestehende Spalte überschreibst).

`fct_recode()` hat eine andere Syntax als `recode()`. `recode()` verwendet `OLD = NEW`, während `fct_recode()` verwendet `NEW = OLD`.

Die aktuellen Werte der `delay_cat` sind:

```{r, echo=F}
linelist <- linelist %>% 
  mutate(delay_cat = fct_relevel(delay_cat, "<2 days", after = 0))
```

```{r}
levels(linelist$delay_cat)
```

Die neuen Ebenen werden mit der Syntax erstellt `fct_recode(column, "new" = "old", "new" = "old", "new" = "old")` erstellt und gedruckt:

```{r}
linelist %>% 
  mutate(delay_cat = fct_recode(
    delay_cat,
    "Less than 2 days" = "<2 days",
    "2 to 5 days"      = "2-5 days",
    "More than 5 days" = ">5 days")) %>% 
  tabyl(delay_cat)
```

Hier werden sie manuell kombiniert mit `fct_recode()`. Beachte, dass bei der Erstellung einer neuen Ebene "Weniger als 5 Tage" kein Fehler auftritt.

```{r, warning=F, message=F}
linelist %>% 
  mutate(delay_cat = fct_recode(
    delay_cat,
    "Less than 5 days" = "<2 days",
    "Less than 5 days" = "2-5 days",
    "More than 5 days" = ">5 days")) %>% 
  tabyl(delay_cat)
```

### Reduzieren auf "Sonstiges" {.unnumbered}

Du kannst verwenden `fct_other()` kannst du die Faktorebenen manuell einer Ebene "Andere" zuordnen. Unten werden alle Ebenen in der Spalte `hospital` mit Ausnahme von "Hafenkrankenhaus" und "Zentralkrankenhaus" zu "Sonstige" zusammengefasst. Du kannst einen Vektor angeben, um entweder `keep = `, oder `drop = `. Du kannst die Anzeige der Ebene "Andere" mit `other_level = `.

```{r}
linelist %>%    
  mutate(hospital = fct_other(                      # adjust levels
    hospital,
    keep = c("Port Hospital", "Central Hospital"),  # keep these separate
    other_level = "Other Hospital")) %>%            # All others as "Other Hospital"
  tabyl(hospital)                                   # print table

```

### Verringern nach Frequenz {.unnumbered}

Du kannst die am wenigsten häufigen Faktorstufen automatisch kombinieren, indem du `fct_lump()`.

Um viele niedrigfrequente Ebenen in einer Gruppe "Andere" zusammenzufassen, kannst du einen der folgenden Schritte ausführen:

- Setze `n = ` als die Anzahl der Gruppen ein, die du behalten willst. Die n am häufigsten vorkommenden Stufen werden beibehalten, alle anderen werden zu "Andere" zusammengefasst.
- einstellen `prop = ` als Schwellenwert für den Frequenzanteil der Pegel, die du behalten möchtest. Alle anderen Werte werden zu "Sonstige" zusammengefasst.

Du kannst die Anzeige der Stufe "Sonstige" mit `other_level = `. Unten werden alle Krankenhäuser bis auf die beiden häufigsten zu "Anderes Krankenhaus" zusammengefasst.

```{r, warning=F, message=F}
linelist %>%    
  mutate(hospital = fct_lump(                      # adjust levels
    hospital,
    n = 2,                                          # keep top 2 levels
    other_level = "Other Hospital")) %>%            # all others as "Other Hospital"
  tabyl(hospital)                                   # print table

```

## Alle Levels anzeigen

Ein Vorteil der Verwendung von Faktoren ist die Vereinheitlichung des Aussehens von Legenden und Tabellen, unabhängig davon, welche Werte in einem Datensatz tatsächlich vorhanden sind.

Wenn du viele Zahlen vorbereitest (z. B. für mehrere Gerichtsbarkeiten), möchtest du, dass die Legenden und Tabellen auch bei unterschiedlichem Grad der Datenvervollständigung oder Datenzusammensetzung identisch aussehen.

### In Diagrammen {.unnumbered}

In einem `ggplot()` Figur fügst du einfach das Argument `drop = FALSE` in der entsprechenden `scale_xxxx()` Funktion ein. Es werden alle Faktorstufen angezeigt, unabhängig davon, ob sie in den Daten vorhanden sind. Wenn deine Faktorspaltenebenen angezeigt werden, indem du `fill = ` angezeigt werden, dann fügst du in scale\_fill\_discrete() `drop = FALSE` ein, wie unten gezeigt. Wenn deine Ebenen mit `x = ` (auf der x-Achse) `color = ` oder `size = ` du würdest dies zur Verfügung stellen `scale_color_discrete()` oder `scale_size_discrete()` entsprechend.

Dieses Beispiel ist ein gestapeltes Balkendiagramm der Alterskategorie, aufgeschlüsselt nach Krankenhaus. Hinzufügen von `scale_fill_discrete(drop = FALSE)` sorgt dafür, dass alle Altersgruppen in der Legende erscheinen, auch wenn sie nicht in den Daten enthalten sind.

```{r}
ggplot(data = linelist)+
  geom_bar(mapping = aes(x = hospital, fill = age_cat)) +
  scale_fill_discrete(drop = FALSE)+                        # show all age groups in the legend, even those not present
  labs(
    title = "All age groups will appear in legend, even if not present in data")
```

### In Tabellen {.unnumbered}

Sowohl die **Basis** R `table()` und `tabyl()` von **Hausmeister** zeigt alle Faktorebenen an (auch unbenutzte Ebenen).

Wenn du `count()` oder `summarise()` von **dplyr** um eine Tabelle zu erstellen, füge das Argument `.drop = FALSE` hinzu, um die Zählungen für alle Faktorebenen einzuschließen, auch für die nicht verwendeten.

Lesen Sie mehr in den \[Beschreibende Tabellen\] Seite, oder auf der[scale\_discrete Dokumentation](https://ggplot2.tidyverse.org/reference/scale_discrete.html) oder die [count()-Dokumentation](https://dplyr.tidyverse.org/reference/count.html). Ein weiteres Beispiel findest du in der \[Kontaktverfolgung\] Seite.

## Epiweeks

Bitte beachten Sie die ausführliche Diskussion über die Erstellung von epidemiologischen Wochen im Abschnitt \[Daten gruppieren\] Seite.  
Bitte beachte auch die Seite      \[Arbeiten mit Daten\] Seite für Tipps zum Erstellen und Formatieren von epidemiologischen Wochen.

### Epiweeks in einer Grafik {.unnumbered}

Wenn du Epiweeks erstellen willst, um sie in einem Plot anzuzeigen, kannst du das ganz einfach tun mit **lubridate**'s `floor_date()`, wie im Abschnitt \[Daten gruppieren\] Seite erklärt. Die zurückgegebenen Werte sind von der Klasse Datum mit dem Format JJJJ-MM-TT. Wenn du diese Spalte in einem Diagramm verwendest, werden die Daten natürlich richtig angeordnet, und du musst dich nicht um Ebenen oder die Umwandlung in die Klasse Faktor kümmern. Siehe die`ggplot()` Histogramm der Eintrittsdaten unten.

Bei diesem Ansatz kannst du die *Anzeige* der Daten auf einer Achse mit `scale_x_date()`. Siehe die Seite über \[Epidemie-Kurven\] für weitere Informationen. Du kannst ein "strptime"-Anzeigeformat für die`date_labels = ` Argument von `scale_x_date()`. Diese Formate verwenden "%"-Platzhalter und werden im Abschnitt \[Arbeiten mit Datumsangaben\] Seite behandelt. Verwende "%Y", um ein vierstelliges Jahr darzustellen, und entweder "%W" oder "%U", um die Wochennummer (Montag bzw. Sonntag) anzugeben.

```{r, warning=F, message=F}
linelist %>% 
  mutate(epiweek_date = floor_date(date_onset, "week")) %>%  # create week column
  ggplot()+                                                  # begin ggplot
  geom_histogram(mapping = aes(x = epiweek_date))+           # histogram of date of onset
  scale_x_date(date_labels = "%Y-W%W")                       # adjust disply of dates to be YYYY-WWw
```

### Epiweeks in den Daten {.unnumbered}

Wenn dein Ziel beim Factoring jedoch ist *nicht* zu plotten, kannst du dies auf zwei Arten angehen:

1) *Für eine feine Kontrolle über die Anzeige* konvertieren Sie die **lubridate** epiweek-Spalte (JJJJ-MM-TT) in das gewünschte Anzeigeformat (JJJJ-WWW) *innerhalb des Datenrahmens selbst* und konvertiere sie dann in die Klasse Faktor.

Erstens, benutze `format()` von **Basis**R, um die Datumsanzeige von JJJJ-MM-TT in JJJJ-WW-Anzeige umzuwandeln (siehe den Abschnitt \[Arbeiten mit Datumsangaben\] Seite). Bei diesem Vorgang wird die Klasse in Zeichen umgewandelt. Konvertiere dann von Character zu Class Factor mit`factor()`.

```{r}
linelist <- linelist %>% 
  mutate(epiweek_date = floor_date(date_onset, "week"),       # create epiweeks (YYYY-MM-DD)
         epiweek_formatted = format(epiweek_date, "%Y-W%W"),  # Convert to display (YYYY-WWw)
         epiweek_formatted = factor(epiweek_formatted))       # Convert to factor

# Display levels
levels(linelist$epiweek_formatted)
```

<span style="color: red;">***GEFAHR!*** Wenn du die Wochen vor den Jahren ("Www-YYYY") platzierst ("%W-%Y"), ist die standardmäßige alphanumerische Reihenfolge der Ebenen falsch (z.B. 01-2015 liegt vor 35-2014). Du könntest die Reihenfolge manuell anpassen müssen, was ein langwieriger Prozess wäre.</span>

2) *Für eine schnelle Standardanzeige* verwenden Sie die **aweek** Paket und seine Funktion `date2week()`. Du kannst die `week_start = ` Tag, und wenn du den `factor = TRUE` einstellst, ist die Ausgabespalte ein geordneter Faktor. Als Bonus enthält der Faktor Stufen für *alle* möglichen Wochen in der Spanne - auch wenn es in dieser Woche keine Fälle gibt.

```{r, eval=F}
df <- linelist %>% 
  mutate(epiweek = date2week(date_onset, week_start = "Monday", factor = TRUE))

levels(df$epiweek)
```

Siehe die \[Arbeiten mit Daten\] Seite für weitere Informationen über**eine Woche**. Es bietet auch die umgekehrte Funktion `week2date()`.

<!-- ======================================================= -->

## Ressourcen {}

R für Data Science Seite auf [Faktoren](https://r4ds.had.co.nz/factors.html)  
[aweek Paket Vignette](https://cran.r-project.org/web/packages/aweek/vignettes/introduction.html)


