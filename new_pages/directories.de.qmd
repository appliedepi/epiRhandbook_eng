# Verzeichnis-Interaktionen { }

Auf dieser Seite behandeln wir häufige Szenarien, in denen du Verzeichnisse (Ordner) erstellst, mit ihnen interagierst, sie speicherst und importierst.

## Vorbereitung

### **fs** Paket {.unnumbered}

Die **fs** Paket ist ein **tidyverse** Paket, das die Interaktion mit Verzeichnissen erleichtert und einige der **Basis** R-Funktionen. In den folgenden Abschnitten werden wir oft Funktionen aus **fs**.

```{r}
pacman::p_load(
  fs,             # file/directory interactions
  rio,            # import/export
  here,           # relative file pathways
  tidyverse)      # data management and visualization
```

### Verzeichnis als Dendrogrammbaum drucken {.unnumbered}

Verwende die Funktion `dir_tree()` von **fs**.

Geben Sie den Dateipfad des Ordners an `path = ` an und entscheide, ob du nur eine Ebene anzeigen möchtest (`recurse = FALSE`) oder alle Dateien in allen Unterebenen (`recurse = TRUE`). Im Folgenden verwenden wir `here()` als Abkürzung für das R-Projekt und geben seinen Unterordner "data" an, der alle für dieses R-Handbuch verwendeten Daten enthält. Wir stellen es so ein, dass alle Dateien in "data" und seinen Unterordnern (z. B. "cache", "epidemic models", "population", "shp" und "weather") angezeigt werden.

```{r}
fs::dir_tree(path = here("data"), recurse = TRUE)
```

## Dateien in einem Verzeichnis auflisten

Um nur die Dateinamen in einem Verzeichnis aufzulisten, kannst du Folgendes verwenden `dir()` von **Basis** R. Dieser Befehl listet zum Beispiel die Dateinamen der Dateien im Unterordner "population" des Ordners "data" in einem R-Projekt auf. Der relative Dateipfad wird angegeben mit `here()`angegeben (mehr dazu erfährst du im Abschnitt [Importieren und Exportieren] Seite nachlesen).

```{r}
# file names
dir(here("data", "gis", "population"))
```

Um die vollständigen Dateipfade der Dateien des Verzeichnisses aufzulisten, kannst du Folgendes verwenden `dir_ls()` von **fs**. A **Basis** R Alternative ist `list.files()`.

```{r}
# file paths
dir_ls(here("data", "gis", "population"))
```

Um alle Metadateninformationen zu jeder Datei in einem Verzeichnis zu erhalten (z. B. Pfad, Änderungsdatum usw.), kannst du Folgendes verwenden `dir_info()` von **fs**.

Das kann besonders nützlich sein, wenn du die letzte Änderungszeit der Datei extrahieren willst, zum Beispiel wenn du die neueste Version einer Datei importieren willst. Ein Beispiel dafür findest du im Abschnitt [Importieren und Exportieren] Seite.

```{r, eval=F}
# file info
dir_info(here("data", "gis", "population"))
```

Hier ist der zurückgegebene Datenrahmen. Scrolle nach rechts, um alle Spalten zu sehen.

```{r, echo=F}
DT::datatable(dir_info(here("data", "gis", "population")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

## Datei-Informationen

Um Metadateninformationen über eine bestimmte Datei zu extrahieren, kannst du `file_info()` von **fs** (oder `file.info()` von **Basis** R).

```{r, eval=F}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, echo=F}
DT::datatable(file_info(here("data", "case_linelists", "linelist_cleaned.rds")), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Hier verwenden wir die `$` um das Ergebnis zu indizieren und geben nur die `modification_time` Wert zurück.

```{r}
file_info(here("data", "case_linelists", "linelist_cleaned.rds"))$modification_time
```

## Prüfen, ob vorhanden

### R Objekte {.unnumbered}

Du kannst verwenden `exists()` von **Basis** R, um zu prüfen, ob ein R-Objekt existiert *innerhalb von* R existiert (gib den Objektnamen in Anführungszeichen an).

```{r}
exists("linelist")
```

Beachte, dass einige **Basis** R-Pakete hinter den Kulissen generische Objektnamen wie "data" verwenden, die als TRUE angezeigt werden, wenn `inherit = FALSE` angegeben wird. Das ist ein Grund, warum du deinen Datensatz nicht "data" nennen solltest.

```{r}
exists("data")
exists("data", inherit = FALSE)
```

Wenn du eine Funktion schreibst, solltest du `missing()` von **base** R, um zu prüfen, ob ein Argument vorhanden ist oder nicht, anstelle von `exists()`.

### Verzeichnisse {.unnumbered}

Um zu prüfen, ob ein Verzeichnis existiert, gibst du den Dateipfad (und den Dateinamen) an `is_dir()` von **fs**. Scrolle nach rechts, um zu sehen, dass `TRUE` gedruckt wird.

```{r}
is_dir(here("data"))
```

Eine Alternative ist `file.exists()` von **Basis** R.

### Dateien {.unnumbered}

Um zu prüfen, ob eine bestimmte Datei existiert, verwendest du `is_file()` von **fs**. Scrolle nach rechts, um zu sehen, dass `TRUE` gedruckt wird.

```{r}
is_file(here("data", "case_linelists", "linelist_cleaned.rds"))
```

A **Basis** R Alternative ist `file.exists()`.

## erstellen

### Verzeichnisse {.unnumbered}

Um ein neues Verzeichnis (Ordner) zu erstellen, kannst du verwenden `dir_create()` von **fs**. Wenn das Verzeichnis bereits existiert, wird es nicht überschrieben und es wird kein Fehler zurückgegeben.

```{r, eval=F}
dir_create(here("data", "test"))
```

Eine Alternative ist `dir.create()` von **Basis** R, das einen Fehler anzeigt, wenn das Verzeichnis bereits existiert. Im Gegensatz dazu, `dir_create()` in diesem Szenario stumm bleiben.

### Dateien {.unnumbered}

Du kannst eine (leere) Datei erstellen mit `file_create()` von **fs**. Wenn die Datei bereits existiert, wird sie nicht überschrieben oder verändert.

```{r, eval=F}
file_create(here("data", "test.rds"))
```

A **Basis** R Alternative ist `file.create()`. Wenn die Datei jedoch bereits existiert, wird sie mit dieser Option abgeschnitten. Wenn du die Option `file_create()` verwendest, wird die Datei unverändert gelassen.

### Erstellen, wenn nicht vorhanden {.unnumbered}

IM BAU

## löschen

### R-Objekte {.unnumbered}

Verwende `rm()` von **Basis** R, um ein R-Objekt zu entfernen.

### Verzeichnisse {.unnumbered}

Verwenden Sie `dir_delete()` von **fs**.

### Dateien {.unnumbered}

Du kannst Dateien löschen mit `file_delete()` von **fs**.

## Andere Dateien ausführen

### `source()` {.unnumbered}

Um ein R-Skript von einem anderen R-Skript aus auszuführen, kannst du die `source()` Befehl (von **base** R).

```{r, eval=F}
source(here("scripts", "cleaning_scripts", "clean_testing_data.R"))
```

Das ist so, als würdest du das obige R-Skript aufrufen und auf die Schaltfläche "Quelle" oben rechts im Skript klicken. Dadurch wird das Skript ausgeführt, allerdings im Stillen (keine Ausgabe auf der R-Konsole), es sei denn, dies ist ausdrücklich beabsichtigt. Siehe die Seite über [Interaktive Konsole] für Beispiele zur Verwendung von`source()` um mit einem Benutzer über die R-Konsole im Frage-und-Antwort-Modus zu interagieren.

```{r, fig.align="center", out.height="300%", echo=F}
knitr::include_graphics(here::here("images", "source_button.png"))
```

### `render()` {.unnumbered}

`render()` ist eine Variante von `source()` die am häufigsten für R-Markdown-Skripte verwendet wird. Du stellst die `input = ` die die R-Markdown-Datei ist, und auch die `output_format = ` (normalerweise entweder "html\_document", "pdf\_document", "word\_document", "")

Siehe die Seite über [Berichte mit R Markdown] für weitere Details. Siehe auch die Dokumentation für`render()` [hier](https://rmarkdown.rstudio.com/docs/reference/render.html) oder durch Eingabe von `?render`.

### Dateien in einem Verzeichnis ausführen {.unnumbered}

Du kannst eine *for-Schleife* erstellen und sie verwenden, um `source()` jede Datei in einem Verzeichnis, das mit `dir()`.

```{r, eval=F}
for(script in dir(here("scripts"), pattern = ".R$")) {   # for each script name in the R Project's "scripts" folder (with .R extension)
  source(here("scripts", script))                        # source the file with the matching name that exists in the scripts folder
}
```

Wenn du nur bestimmte Skripte ausführen willst, kannst du sie wie folgt benennen:

```{r, eval=F}

scripts_to_run <- c(
     "epicurves.R",
     "demographic_tables.R",
     "survival_curves.R"
)

for(script in scripts_to_run) {
  source(here("scripts", script))
}

```

Hier ist ein [Vergleich](https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html) der **fs** und **Basis** R-Funktionen.

### Dateien in ein Verzeichnis importieren {.unnumbered}

Siehe die Seite über [Import und Export] zum Importieren und Exportieren einzelner Dateien.

Siehe auch die [Importieren und Exportieren] Seite für Methoden zum automatischen Importieren der aktuellsten Datei anhand eines Datums im Dateinamen*oder* indem du die Metadaten der Datei betrachtest.

Siehe die Seite über [Iteration, Schleifen und Listen] für ein Beispiel mit dem Paket**purrr** demonstrieren:

- Einen Datenrahmen aufteilen und als mehrere CSV-Dateien speichern
- Aufteilen eines Datenrahmens und Speichern jedes Teils als separates Blatt in einer Excel-Arbeitsmappe
- Mehrere CSV-Dateien importieren und in einem Datenrahmen kombinieren
- Importieren einer Excel-Arbeitsmappe mit mehreren Blättern und Kombinieren dieser Blätter in einem Datenrahmen

## **Basis** R

Siehe unten die Funktionen `list.files()` und `dir()`, die den gleichen Vorgang ausführen, nämlich das Auflisten von Dateien in einem bestimmten Verzeichnis. Du kannst angeben `ignore.case =` oder ein bestimmtes Muster angeben, nach dem gesucht werden soll.

```{r, eval=F}
list.files(path = here("data"))

list.files(path = here("data"), pattern = ".csv")
# dir(path = here("data"), pattern = ".csv")

list.files(path = here("data"), pattern = "evd", ignore.case = TRUE)

```

Wenn eine Datei gerade "geöffnet" ist, wird sie in deinem Ordner mit einer vorangestellten Tilde angezeigt, z. B. "~$hospital\_linelists.xlsx".

<!-- ======================================================= -->

## Ressourcen {  }

[https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html](https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html)


