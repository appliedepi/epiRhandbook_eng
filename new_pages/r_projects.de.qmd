# R-Projekte {}

Mit einem R-Projekt kannst du deine Arbeit in einem portablen, in sich abgeschlossenen Ordner bündeln. Innerhalb des Projekts werden alle relevanten Skripte, Datendateien, Zahlen/Ausgaben und die Historie in Unterordnern gespeichert und - ganz wichtig - die *Arbeitsverzeichnis* ist das Stammverzeichnis des Projekts.

## Empfohlene Verwendung

Eine gängige, effiziente und problemlose Art, R zu nutzen, ist die Kombination dieser 3 Elemente. Ein einzelnes Arbeitsprojekt wird in einem R-Projekt gehostet. Jedes Element wird in den folgenden Abschnitten beschrieben.

1) Eine **R-Projekt**
  - Eine in sich geschlossene Arbeitsumgebung mit Ordnern für Daten, Skripte, Ausgaben, etc.
2) Die **hier** Paket für relative Dateipfade
  - Dateipfade werden relativ zum Stammordner des R-Projekts geschrieben - siehe [Importieren und Exportieren] für weitere Informationen
3) Die **rio** Paket zum Importieren/Exportieren
  - `import()` und `export()` jeden Dateityp anhand seiner Endung behandeln (z.B. .csv, .xlsx, .png)

<!-- ======================================================= -->

## Ein R-Projekt erstellen {}

Um ein R-Projekt zu erstellen, wähle "Neues Projekt" aus dem Menü "Datei".

- Wenn du einen neuen Ordner für das Projekt erstellen möchtest, wähle "Neues Verzeichnis" und gib an, wo er erstellt werden soll.
- Wenn du das Projekt innerhalb eines bestehenden Ordners erstellen möchtest, klicke auf "Vorhandenes Verzeichnis" und gib den Ordner an.
- Wenn du ein Github-Repository klonen willst, wähle die dritte Option "Versionskontrolle" und dann "Git". Siehe die Seite über [Versionskontrolle und Zusammenarbeit mit Git und Github] für weitere Informationen.

```{r, out.width="75%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "create_project.png"))
```

Das R-Projekt, das du erstellst, hat die Form eines Ordners, der eine *.Rproj* Datei. Diese Datei ist eine Verknüpfung und wahrscheinlich die erste Art, wie du dein Projekt öffnest. Du kannst ein Projekt auch öffnen, indem du "Projekt öffnen" aus dem Menü "Datei" wählst. Alternativ dazu siehst du ganz oben rechts in RStudio ein R-Projekt-Symbol und ein Dropdown-Menü mit den verfügbaren R-Projekten.

Um ein R-Projekt zu verlassen, öffne entweder ein neues Projekt oder schließe das Projekt (Datei - Projekt schließen).

### Projekte wechseln {.unnumbered}

Um zwischen den Projekten zu wechseln, klicke auf das R-Projekt-Symbol und das Dropdown-Menü ganz oben rechts in RStudio. Du siehst dann die Optionen Projekt schließen, Projekt öffnen und eine Liste der letzten Projekte.

```{r, out.width="100%", fig.align="center", echo=F}
knitr::include_graphics(here::here("images", "Rproject_dropdown.png"))
```

### Einstellungen {.unnumbered}

Im Allgemeinen wird empfohlen, RStudio jedes Mal mit einem "Neustart" zu beginnen, d.h. mit deinem Arbeitsbereich **nicht** aus der vorherigen Sitzung erhalten bleibt. Das bedeutet, dass deine Objekte und Ergebnisse nicht von Sitzung zu Sitzung erhalten bleiben (du musst sie beim Ausführen deiner Skripte neu erstellen). Das ist gut, denn es zwingt dich dazu, bessere Skripte zu schreiben und langfristig Fehler zu vermeiden.

So stellst du sicher, dass RStudio beim Start jedes Mal einen "Neustart" hat:

- Wähle "Projektoptionen" aus dem Menü "Extras".
- Setze RStudio auf der Registerkarte "Allgemein" auf **nicht** RData beim Start nicht im Arbeitsbereich wiederhergestellt wird, und **nicht** Arbeitsbereich beim Beenden in .RData zu speichern.

### Organisation {.unnumbered}

Es ist üblich, dass du Unterordner in deinem Projekt hast. Ziehe Ordner wie "Daten", "Skripte", "Zahlen" und "Präsentationen" in Betracht. Du kannst Ordner auf die gleiche Weise hinzufügen, wie du einen neuen Ordner auf deinem Computer anlegen würdest. Alternativ kannst du auch die Seite über [Verzeichnis-Interaktionen] um zu erfahren, wie du mit R-Befehlen neue Ordner erstellen kannst.

### Versionskontrolle {.unnumbered}

Ziehe ein Versionskontrollsystem in Betracht. Es könnte so einfach sein wie ein Datum im Namen der Skripte (z.B. "transmission\_analysis\_2020-10-03.R") und ein "Archiv"-Ordner. Du könntest auch überlegen, ob du am Anfang jedes Skripts einen kommentierten Text mit einer Beschreibung, Tags, Autoren und einem Änderungsprotokoll einfügen willst.

Eine kompliziertere Methode wäre die Verwendung von Github oder einer ähnlichen Plattform für die Versionskontrolle. Siehe die Seite über [Versionskontrolle und Zusammenarbeit mit Git und Github].

Ein Tipp ist, dass du mit dem Werkzeug "In Dateien suchen" (Menü Bearbeiten) ein ganzes Projekt oder einen Ordner durchsuchen kannst. Damit kannst du in mehreren Dateien suchen und sogar Zeichenfolgen ersetzen.

## Beispiele

Nachfolgend sind einige Beispiele für den Import/Export/Speicherung mit `here()` innerhalb eines R-Projekts. Lies mehr über die Verwendung der **hier**Paket in der [Importieren und Exportieren] Seite.

*Importieren `linelist_raw.xlsx` aus dem Ordner "data" in deinem R-Projekt*

```{r, eval=F}
linelist <- import(here("data", "linelist_raw.xlsx"))
```

*Exportieren des R-Objekts `linelist` als "my\_linelist.rds" in den Ordner "clean" innerhalb des Ordners "data" in deinem R-Projekt.*

```{r, eval=F}
export(linelist, here("data","clean", "my_linelist.rds"))
```

*Speichere den zuletzt gedruckten Plot als "epicurve\_2021-02-15.png" im Ordner "epicurves" im Ordner "outputs" in deinem R-Projekt.*

```{r, eval=F}
ggsave(here("outputs", "epicurves", "epicurve_2021-02-15.png"))
```

<!-- ======================================================= -->

## Ressourcen {}

RStudio-Webseite auf [Verwendung von R-Projekten](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)


