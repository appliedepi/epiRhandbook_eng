<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

# Daten pivotieren {}

```{r, warning=F, message=F, out.height=c("50%"), fig.align="center", fig.show="hold", echo=F}
knitr::include_graphics(here::here("images", "pivoting", "Pivoting_500x500.png"))

#knitr::include_graphics(here::here("images", "pivoting", "pivot_longer_new.png"))
#knitr::include_graphics(here::here("images", "pivoting", "pivot_bar.png"))
#knitr::include_graphics(here::here("images", "pivoting", "pivot_wider_new.png"))
```

Bei der Verwaltung von Daten, *Pivotieren* kann sich auf einen von zwei Prozessen beziehen:

1. Die Schaffung von *Pivot-Tabellen* das sind Tabellen mit Statistiken, die die Daten einer umfangreicheren Tabelle zusammenfassen
2. Die Umwandlung einer Tabelle von **langen** zu **breit** Format oder umgekehrt.

**Auf dieser Seite konzentrieren wir uns auf die letztere Definition.**Erstere ist ein entscheidender Schritt bei der Datenanalyse und wird an anderer Stelle im Kapitel [Daten gruppieren] und [Beschreibende Tabellen] Seiten behandelt.

Auf dieser Seite geht es um die Formate von Daten. Es ist nützlich, die Idee der "aufgeräumten Daten" zu kennen, bei der jede Variable ihre eigene Spalte, jede Beobachtung ihre eigene Zeile und jeder Wert seine eigene Zelle hat. Mehr zu diesem Thema findest du unter [in diesem Online-Kapitel in R for Data Science](https://r4ds.had.co.nz/tidy-data.html).

## Vorbereitung

### Pakete laden {.unnumbered}

Dieser Codeabschnitt zeigt das Laden von Paketen, die für die Analysen benötigt werden. In diesem Handbuch betonen wir `p_load()` von **pacman**, der das Paket bei Bedarf installiert *und* lädt es zur Verwendung. Du kannst installierte Pakete auch laden mit `library()` von **base**R. Siehe die Seite über [R-Grundlagen] für weitere Informationen über R-Pakete.

```{r}
pacman::p_load(
  rio,          # File import
  here,         # File locator
  kableExtra,   # Build and manipulate complex tables
  tidyverse)    # data management + ggplot2 graphics
```

### Daten importieren {.unnumbered}

### Malaria Zähldaten {-}

Auf dieser Seite verwenden wir einen fiktiven Datensatz mit täglichen Malariafällen, aufgeschlüsselt nach Einrichtungen und Altersgruppen. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/malaria_facility_count_data.rds' class='download-button'>klicke hier zum Herunterladen (als .rds-Datei)<span></a>. Importiere Daten mit dem `import()` Funktion aus dem **rio**Paket (sie verarbeitet viele Dateitypen wie .xlsx, .csv, .rds - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
count_data <- rio::import(here::here("data", "malaria_facility_count_data.rds")) %>% 
  as_tibble()
```

```{r, eval=F}
# Import data
count_data <- import("malaria_facility_count_data.rds")
```

Die ersten 50 Zeilen werden unten angezeigt.

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(count_data, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

### Linelist Falldaten {-}

Im späteren Teil dieser Seite werden wir auch den Datensatz der Fälle einer simulierten Ebola-Epidemie verwenden. Wenn du mitmachen willst, <a href='https://github.com/appliedepi/epirhandbook_eng/raw/master/data/case_linelists/linelist_cleaned.rds' class='download-button'>klicke hier, um die "saubere" Linienliste herunterzuladen</a> (als .rds-Datei). Importiere deine Daten mit der `import()` Funktion aus der **rio**Paket (sie akzeptiert viele Dateitypen wie .xlsx, .rds, .csv - siehe die [Import und Export] Seite für Details).

```{r, echo=F}
# import the linelist into R
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
```

```{r, eval=F}
# import your dataset
linelist <- import("linelist_cleaned.xlsx")
```

<!-- ======================================================= -->

## Weit-zu-lang {}

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "pivoting", "pivot_longer_new.png"))
```

<!-- ======================================================= -->

###  Format "Breit" {.unnumbered}

Daten werden oft in einem "breiten" Format eingegeben und gespeichert, d. h. die Merkmale oder Antworten einer Person werden in einer einzigen Zeile gespeichert. Das kann zwar für die Präsentation nützlich sein, ist aber für einige Arten von Analysen nicht ideal.

Nehmen wir die `count_data` Datensatz, der im Abschnitt Vorbereitung importiert wurde, als Beispiel. Du kannst sehen, dass jede Zeile einen "Einrichtungstag" darstellt. Die tatsächlichen Fallzahlen (die Spalten ganz rechts) werden in einem "breiten" Format gespeichert, so dass die Informationen für jede Altersgruppe an einem bestimmten Einrichtungstag in einer einzigen Zeile gespeichert sind.

```{r, echo=F}
DT::datatable(count_data, rownames = FALSE, options = list(pageLength = 5, scrollX=T) )
```

Jede Beobachtung in diesem Datensatz bezieht sich auf die Malaria-Zahlen in einer von 65 Einrichtungen an einem bestimmten Tag, und zwar von ` count_data$data_date %>% min()` bis ` count_data$data_date %>% max()`. Diese Einrichtungen befinden sich in einem `Province` (Norden) und vier `District`s (Spring, Bolo, Dingo und Barnard). Der Datensatz enthält die Gesamtzahlen der Malariafälle sowie die altersspezifischen Zahlen für jede der drei Altersgruppen - \<4 Jahre, 5-14 Jahre und 15 Jahre und älter.

"Breite" Daten wie diese entsprechen nicht den Standards für "aufgeräumte Daten", denn die Spaltenüberschriften stellen eigentlich keine "Variablen" dar - sie stehen für *Werte* einer hypothetischen Variable "Altersgruppe".

Dieses Format kann für die Darstellung der Informationen in einer Tabelle oder für die Eingabe von Daten (z. B. in Excel) aus Fallberichtsformularen nützlich sein. In der Analysephase sollten diese Daten jedoch normalerweise in ein "längeres" Format umgewandelt werden, das den Standards für "aufgeräumte Daten" entspricht. Das R-Paket Plotting **ggplot2** funktioniert am besten, wenn die Daten in einem "langen" Format vorliegen.

Die Visualisierung der *gesamten* Die Visualisierung der Malaria-Gesamtzahlen im Zeitverlauf ist mit den Daten in ihrem derzeitigen Format kein Problem:

```{r, warning=F, message=F}
ggplot(count_data) +
  geom_col(aes(x = data_date, y = malaria_tot), width = 1)
```

Was aber, wenn wir den relativen Anteil der einzelnen Altersgruppen an dieser Gesamtzahl anzeigen wollen? In diesem Fall müssen wir sicherstellen, dass die Variable, die uns interessiert (die Altersgruppe), im Datensatz in einer einzigen Spalte erscheint, die wir an `{ggplot2}` Die "Mapping-Ästhetik" `aes()` Argument übergeben werden kann.

<!-- ======================================================= -->

### `pivot_longer()` {.unnumbered}

Die **tidyr** Funktion `pivot_longer()` macht Daten "länger". **tidyr** ist Teil der **tidyverse** von R-Paketen.

Es akzeptiert einen Bereich von Spalten, die transformiert werden sollen (angegeben in `cols = `). Daher kann sie nur einen Teil eines Datensatzes bearbeiten. Das ist nützlich für die Malaria-Daten, da wir nur die Spalten mit den Fallzahlen drehen wollen.

Bei diesem Vorgang erhältst du zwei "neue" Spalten - eine mit den Kategorien (die früheren Spaltennamen) und eine mit den entsprechenden Werten (z. B. Fallzahlen). Du kannst die voreingestellten Namen für diese neuen Spalten akzeptieren oder deine eigenen Namen angeben, um `names_to = ` und `values_to = ` festlegen.

Schauen wir mal `pivot_longer()` in Aktion...

### Standard-Schwenken {.unnumbered}

Wir wollen verwenden **tidyr**'s `pivot_longer()` Funktion, um die "breiten" Daten in ein "langes" Format umzuwandeln. Konkret geht es darum, die vier numerischen Spalten mit den Daten zu den Malariazahlen in zwei neue Spalten umzuwandeln: eine, die die *Altersgruppen* und eine, die die entsprechenden *Werte*.

```{r, eval=F}
df_long <- count_data %>% 
  pivot_longer(
    cols = c(`malaria_rdt_0-4`, `malaria_rdt_5-14`, `malaria_rdt_15`, `malaria_tot`)
  )

df_long
```

Beachten Sie, dass der neu erstellte Datenrahmen (`df_long`) mehr Zeilen hat (12.152 gegenüber 3.038); er wurde *länger*. Tatsächlich ist sie genau viermal so lang, weil jede Zeile im ursprünglichen Datensatz jetzt vier Zeilen in df\_long darstellt, eine für jede der Malaria-Beobachtungen (\<4y, 5-14y, 15y+ und total).

Der neue Datensatz ist nicht nur länger, sondern hat auch weniger Spalten (8 gegenüber 10), da die Daten zuvor in vier Spalten gespeichert wurden (die mit dem Präfix `malaria_`) jetzt in zwei Spalten gespeichert werden.

Da die Namen dieser vier Spalten alle mit dem Präfix `malaria_` beginnen, hätten wir auch die praktische Funktion "tidyselect" verwenden können `starts_with()`verwenden können, um das gleiche Ergebnis zu erzielen (siehe die Seite [Daten bereinigen und Kernfunktionen] für mehr über diese Hilfsfunktionen).

```{r}
# provide column with a tidyselect helper function
count_data %>% 
  pivot_longer(
    cols = starts_with("malaria_")
  )
```

oder nach Position:

```{r, eval=F}
# provide columns by position
count_data %>% 
  pivot_longer(
    cols = 6:9
  )
```

oder nach benanntem Bereich:

```{r, eval=F}
# provide range of consecutive columns
count_data %>% 
  pivot_longer(
    cols = `malaria_rdt_0-4`:malaria_tot
  )
```

Diese beiden neuen Spalten erhalten die Standardnamen `name` und `value` aber wir können diese Standardnamen überschreiben, um aussagekräftigere Namen zu vergeben, die uns helfen, uns an den Inhalt zu erinnern, indem wir die `names_to` und `values_to` Argumente. Verwenden wir die Namen `age_group` und `counts`:

```{r}
df_long <- 
  count_data %>% 
  pivot_longer(
    cols = starts_with("malaria_"),
    names_to = "age_group",
    values_to = "counts"
  )

df_long
```

Wir können diesen neuen Datensatz nun an `{ggplot2}` übergeben und die neue Spalte `count` auf die y-Achse und die neue Spalte `age_group` auf die `fill = ` Argument (die interne Farbe der Spalte). Dadurch werden die Malariazahlen in einem gestapelten Balkendiagramm nach Altersgruppen angezeigt:

```{r, warning=F, message=F}
ggplot(data = df_long) +
  geom_col(
    mapping = aes(x = data_date, y = counts, fill = age_group),
    width = 1
  )
```

Sieh dir dieses neue Diagramm an und vergleiche es mit dem Diagramm, das wir zuvor erstellt haben - *Was ist falsch gelaufen?*

Wir sind auf ein häufiges Problem beim Umgang mit Überwachungsdaten gestoßen - wir haben auch die Gesamtzahlen aus den `malaria_tot` Spalte einbezogen, so dass die Größe jedes Balkens in der Grafik doppelt so hoch ist, wie sie sein sollte.

Es gibt mehrere Möglichkeiten, damit umzugehen. Wir könnten diese Summen einfach aus dem Datensatz filtern, bevor wir ihn an `ggplot()`:

```{r, warning=F, message=F}
df_long %>% 
  filter(age_group != "malaria_tot") %>% 
  ggplot() +
  geom_col(
    aes(x = data_date, y = counts, fill = age_group),
    width = 1
  )
```

Alternativ hätten wir diese Variable auch ausschließen können, als wir die `pivot_longer()` ausschließen und sie so als separate Variable im Datensatz behalten. Sieh dir an, wie sich ihre Werte "ausdehnen", um die neuen Zeilen zu füllen.

```{r, warning=F, message=F}
count_data %>% 
  pivot_longer(
    cols = `malaria_rdt_0-4`:malaria_rdt_15,   # does not include the totals column
    names_to = "age_group",
    values_to = "counts"
  )
```

### Pivotierung von Daten mit mehreren Klassen {.unnumbered}

Das obige Beispiel funktioniert gut in Situationen, in denen alle Spalten, die du "länger schwenken" willst, derselben Klasse angehören (Zeichen, Zahlen, logisch ...).

Es wird jedoch viele Fälle geben, in denen du als Epidemiologe vor Ort mit Daten arbeitest, die von Nichtfachleuten aufbereitet wurden und die ihrer eigenen, nicht standardisierten Logik folgen - wie Hadley Wickham (mit Verweis auf Tolstoi) in seinem [bahnbrechenden Artikel](https://vita.had.co.nz/papers/tidy-data.pdf) auf **Aufgeräumte Daten** Prinzipien: "Wie Familien sind aufgeräumte Datensätze alle gleich, aber jeder unordentliche Datensatz ist auf seine eigene Art unordentlich."

Ein besonders häufiges Problem, auf das du stoßen wirst, ist die Notwendigkeit, Spalten, die verschiedene Datenklassen enthalten, zu pivotieren. Dieser Pivot führt dazu, dass diese verschiedenen Datentypen in einer einzigen Spalte gespeichert werden, was keine gute Situation ist. Es gibt verschiedene Ansätze, um das dadurch entstehende Chaos zu beseitigen, aber es gibt einen wichtigen Schritt, den du mit `pivot_longer()` um zu vermeiden, dass du selbst in eine solche Situation gerätst.

Nimm eine Situation an, in der es eine Reihe von Beobachtungen in verschiedenen Zeitschritten für jedes der drei Elemente A, B und C gibt. Beispiele für solche Elemente könnten Einzelpersonen sein (z. B. Kontaktpersonen eines Ebola-Falls, die 21 Tage lang jeden Tag verfolgt werden) oder abgelegene Dorfgesundheitsposten, die einmal im Jahr überwacht werden, um sicherzustellen, dass sie noch funktionsfähig sind. Nehmen wir das Beispiel der Kontaktverfolgung. Stell dir vor, dass die Daten wie folgt gespeichert werden:

```{r, message=FALSE, echo=F}

df <- 
  tibble::tribble(
     ~id,   ~obs1_date, ~obs1_status,   ~obs2_date, ~obs2_status,   ~obs3_date, ~obs3_status,
     "A", "2021-04-23",    "Healthy", "2021-04-24",    "Healthy", "2021-04-25",     "Unwell",
     "B", "2021-04-23",    "Healthy", "2021-04-24",    "Healthy", "2021-04-25",    "Healthy",
     "C", "2021-04-23",    "Missing", "2021-04-24",    "Healthy", "2021-04-25",    "Healthy"
     ) 

DT::datatable(df, rownames = FALSE)

```

Wie du siehst, sind die Daten ein bisschen kompliziert. Jede Zeile speichert Informationen über ein Element, wobei die Zeitreihe mit fortschreitender Zeit immer weiter nach rechts verläuft. Außerdem wechseln sich die Spaltenklassen zwischen Datums- und Zeichenwerten ab.

Ein besonders schlimmes Beispiel, auf das dieser Autor gestoßen ist, waren die Daten zur Choleraüberwachung, bei denen 8 neue Spalten mit Beobachtungen hinzugefügt wurden *jeden Tag* im Laufe von **4 Jahre**. Allein das Öffnen der Excel-Datei, in der diese Daten gespeichert waren, hat auf meinem Laptop mehr als 10 Minuten gedauert!

Um mit diesen Daten arbeiten zu können, müssen wir den Datenrahmen in ein langes Format umwandeln, aber die Trennung zwischen einem `date` Spalte und einer `character` (Status-)Spalte für jede Beobachtung für jedes Element beibehalten. Andernfalls könnte es passieren, dass wir in einer einzigen Spalte eine Mischung aus verschiedenen Variablentypen haben (ein großes "No-No", wenn es um Datenmanagement und ordentliche Daten geht):

```{r}
df %>% 
  pivot_longer(
    cols = -id,
    names_to = c("observation")
  )

```

Oben hat unser Pivot Folgendes zusammengeführt *Daten* und *Zeichen* in eine einzige `value` Spalte. R reagiert darauf, indem es die gesamte Spalte in Klassenzeichen umwandelt, und der Nutzen der Daten geht verloren.

Um dies zu verhindern, können wir uns die Syntaxstruktur der ursprünglichen Spaltennamen zunutze machen. Es gibt eine gemeinsame Namensstruktur mit der Beobachtungsnummer, einem Unterstrich und dann entweder "Status" oder "Datum". Wir können diese Syntax nutzen, um diese beiden Datentypen nach dem Pivot in getrennten Spalten zu halten.

Wir tun dies, indem wir:

- Bereitstellung eines Zeichenvektors für die `names_to = ` Argument, wobei das zweite Element (`".value"` ). Dieser spezielle Begriff zeigt an, dass die gepivoteten Spalten anhand eines Zeichens in ihrem Namen aufgeteilt werden...
- Du musst auch das "Splitting"-Zeichen in der `names_sep = ` Argument angeben. In diesem Fall ist es der Unterstrich "\_".

Die Benennung und Aufteilung neuer Spalten basiert also auf dem Unterstrich in den bestehenden Variablennamen.

```{r}

df_long <- 
  df %>% 
  pivot_longer(
    cols = -id,
    names_to = c("observation", ".value"),
    names_sep = "_"
  )

df_long

```

**Der letzte Schliff**:

Beachte, dass die `date` Spalte derzeit in *Zeichen* Klasse - wir können sie leicht in die richtige Datumsklasse umwandeln, indem wir die `mutate()` und `as_date()`Funktionen, die im Abschnitt [Arbeiten mit Daten] Seite beschrieben sind.

Vielleicht möchten wir auch die `observation` Spalte in eine `numeric` Format konvertieren, indem wir das Präfix "obs" weglassen und in ein numerisches Format konvertieren. Wir können dies tun mit `str_remove_all()` aus der **stringr**Paket (siehe die [Zeichen und Zeichenketten] Seite).

```{r}

df_long <- 
  df_long %>% 
  mutate(
    date = date %>% lubridate::as_date(),
    observation = 
      observation %>% 
      str_remove_all("obs") %>% 
      as.numeric()
  )

df_long

```

Jetzt können wir mit den Daten in diesem Format arbeiten, z.B. indem wir eine beschreibende Wärmekachel aufzeichnen:

```{r}
ggplot(data = df_long, mapping = aes(x = date, y = id, fill = status)) +
  geom_tile(colour = "black") +
  scale_fill_manual(
    values = 
      c("Healthy" = "lightgreen", 
        "Unwell" = "red", 
        "Missing" = "orange")
  )

```

<!-- ======================================================= -->

## Lang-zu-breit {}

```{r, warning=F, message=F, echo=F}
knitr::include_graphics(here::here("images", "pivoting", "pivot_wider_new.png"))
```

In manchen Fällen möchten wir einen Datensatz in ein breiteres Format konvertieren. Hierfür können wir die `pivot_wider()` Funktion.

Ein typischer Anwendungsfall ist, wenn wir die Ergebnisse einer Analyse in ein Format umwandeln wollen, das für den Leser besser verdaulich ist (z. B. eine [Tabelle für die Präsentation][Tabellen für die Präsentation]). Normalerweise geht es darum, einen Datensatz, in dem die Informationen zu einem Thema über mehrere Zeilen verteilt sind, in ein Format umzuwandeln, in dem diese Informationen in einer einzigen Zeile gespeichert sind.

### Daten {.unnumbered}

Für diesen Abschnitt der Seite verwenden wir die Fall-Lineliste (siehe die [Vorbereitung](#pivot_prep) Abschnitt), die eine Zeile pro Fall enthält.

Hier sind die ersten 50 Zeilen:

```{r, message=FALSE, echo=F}
# display the linelist data as a table
DT::datatable(head(linelist, 50), rownames = FALSE, options = list(pageLength = 5, scrollX=T), class = 'white-space: nowrap' )
```

Angenommen, wir wollen die Anzahl der Personen in den verschiedenen Altersgruppen nach Geschlecht wissen:

```{r}
df_wide <- 
  linelist %>% 
  count(age_cat, gender)

df_wide
```

So erhalten wir einen langen Datensatz, der sich hervorragend für die Erstellung von Visualisierungen in **ggplot2** eignet, aber nicht ideal für die Darstellung in einer Tabelle:

```{r}
ggplot(df_wide) +
  geom_col(aes(x = age_cat, y = n, fill = gender))
```

### Drehpunkt breiter {.unnumbered}

Daher können wir verwenden `pivot_wider()` verwenden, um die Daten in ein besseres Format umzuwandeln, damit sie als Tabellen in unsere Berichte aufgenommen werden können.

Das Argument `names_from` gibt die Spalte an *von* aus der die neue Spalte erzeugt werden soll *Namen*, während das Argument `values_from` die Spalte angibt *von* die Spalte, aus der die *Werte* um die Zellen zu füllen. Das Argument `id_cols = ` ist optional, kann aber als Vektor von Spaltennamen angegeben werden, die nicht gepivotet werden sollen und somit jede Zeile identifizieren.

```{r}
table_wide <- 
  df_wide %>% 
  pivot_wider(
    id_cols = age_cat,
    names_from = gender,
    values_from = n
  )

table_wide
```

Diese Tabelle ist viel leserfreundlicher und eignet sich daher besser für die Aufnahme in unsere Berichte. Du kannst sie mit verschiedenen Paketen in eine hübsche Tabelle umwandeln. **flextable** und **knitr**. Dieser Prozess wird auf der Seite [Tabellen für die Präsentation].

```{r}
table_wide %>% 
  janitor::adorn_totals(c("row", "col")) %>% # adds row and column totals
  knitr::kable() %>% 
  kableExtra::row_spec(row = 10, bold = TRUE) %>% 
  kableExtra::column_spec(column = 5, bold = TRUE) 
```

***

<!-- ======================================================= -->

## Fülle

In manchen Situationen nach einer `pivot`, und häufiger nach einem `bind` bleiben in einigen Zellen Lücken, die wir gerne füllen würden.

<!-- ======================================================= -->

### Daten {.unnumbered}

Nehmen wir zum Beispiel zwei Datensätze, die jeweils Beobachtungen für die Messnummer, den Namen der Einrichtung und die Fallzahl zu diesem Zeitpunkt enthalten. Der zweite Datensatz enthält jedoch auch eine Variable `Year`.

```{r}
df1 <- 
  tibble::tribble(
       ~Measurement, ~Facility, ~Cases,
                  1,  "Hosp 1",     66,
                  2,  "Hosp 1",     26,
                  3,  "Hosp 1",      8,
                  1,  "Hosp 2",     71,
                  2,  "Hosp 2",     62,
                  3,  "Hosp 2",     70,
                  1,  "Hosp 3",     47,
                  2,  "Hosp 3",     70,
                  3,  "Hosp 3",     38,
       )

df1 

df2 <- 
  tibble::tribble(
    ~Year, ~Measurement, ~Facility, ~Cases,
     2000,            1,  "Hosp 4",     82,
     2001,            2,  "Hosp 4",     87,
     2002,            3,  "Hosp 4",     46
  )

df2
```

Wenn wir eine `bind_rows()` um die beiden Datensätze zusammenzuführen, wird die `Year` Variable gefüllt mit `NA` für die Zeilen, für die es keine vorherigen Informationen gab (d. h. für den ersten Datensatz):

```{r}
df_combined <- 
  bind_rows(df1, df2) %>% 
  arrange(Measurement, Facility)

df_combined

```

<!-- ======================================================= -->

### `fill()` {.unnumbered}

In diesem Fall, `Year` eine nützliche Variable, vor allem wenn wir Trends im Zeitverlauf untersuchen wollen. Daher verwenden wir `fill()` zu *füllen* diese leeren Zellen zu füllen, indem du die zu füllende Spalte und die Richtung angibst (in diesem Fall **oben**):

```{r}
df_combined %>% 
  fill(Year, .direction = "up")
```

Alternativ können wir die Daten auch so anordnen, dass wir sie nach unten hin ausfüllen müssen:

```{r}
df_combined <- 
  df_combined %>% 
  arrange(Measurement, desc(Facility))

df_combined

df_combined <- 
  df_combined %>% 
  fill(Year, .direction = "down")

df_combined
```

Jetzt haben wir einen brauchbaren Datensatz zum Plotten:

```{r}
ggplot(df_combined) +
  aes(Year, Cases, fill = Facility) +
  geom_col()
```

Für die Darstellung in einer Tabelle ist er jedoch weniger geeignet. Deshalb wollen wir uns darin üben, diesen langen, unordentlichen Datenrahmen in einen breiteren, ordentlichen Datenrahmen umzuwandeln:

```{r}
df_combined %>% 
  pivot_wider(
    id_cols = c(Measurement, Facility),
    names_from = "Year",
    values_from = "Cases"
  ) %>% 
  arrange(Facility) %>% 
  janitor::adorn_totals(c("row", "col")) %>% 
  knitr::kable() %>% 
  kableExtra::row_spec(row = 5, bold = TRUE) %>% 
  kableExtra::column_spec(column = 5, bold = TRUE) 
```

N.B. In diesem Fall mussten wir festlegen, dass nur die drei Variablen enthalten sind `Facility`, `Year`, und `Cases` als die zusätzliche Variable `Measurement` bei der Erstellung der Tabelle stören würde:

```{r}
df_combined %>% 
  pivot_wider(
    names_from = "Year",
    values_from = "Cases"
  ) %>% 
  knitr::kable()
```

## Ressourcen

Hier ist eine hilfreiche [Anleitung](https://datacarpentry.org/r-socialsci/03-dplyr-tidyr/index.html)


