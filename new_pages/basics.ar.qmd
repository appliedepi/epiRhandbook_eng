# أساسيات R {#rbasics}

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "basics_header_close.png"))
```

مرحبًا!

تستعرض هذه الصفحة أساسيات لغة البرمجة R. لا تهدف إلى أن تكون دورة تعليمية شاملة، ولكنها تقدم الأساسيات ويمكن أن تكون مفيدة لتحديث ذاكرتك. تحتوي القسم المخصص لـ [موارد التعلم](#learning) على روابط لدورات تعليمية شاملة أكثر.

تم تكييف أجزاء من هذه الصفحة بإذن من [مشروع R4Epis](https://r4epis.netlify.app/).

انظر الصفحة حول [الانتقال إلى R](transition_to_R.qmd) للحصول على نصائح حول التحول إلى R من STATA أو SAS أو Excel.

```{r, echo=F}
# استيراد قائمة الحالات المنظمة لفيروس إيبولا
linelist <- rio::import(here::here("data", "case_linelists", "linelist_cleaned.rds"))
pacman::p_load(apyramid)
```

<!-- ======================================================= -->

## لماذا استخدام R؟

كما هو موضح على [موقع مشروع R](https://www.r-project.org/about.html)، R هي لغة برمجة وبيئة للحوسبة الإحصائية والرسومات. إنها متعددة الاستخدامات بشكل كبير، ويمكن توسيعها، وتدعمها المجتمع.

**التكلفة**

R مجاني للاستخدام! هناك أخلاق قوية في المجتمع تجاه المواد المجانية ومفتوحة المصدر.

**إعادة الإنتاجية**

يعزز إجراء إدارة البيانات والتحليلات الخاصة بك من خلال لغة برمجة (بالمقارنة مع Excel أو أداة أخرى تعتمد بشكل أساسي على النقرات والأوامر اليدوية) **إعادة الإنتاجية**، ويجعل **كشف الأخطاء** أسهل، ويخفف عبء عملك.

**المجتمع**

مجتمع مستخدمي R ضخم وتعاوني. يتم تطوير حزم وأدوات جديدة لمعالجة المشاكل الحياتية يوميًا، ويتم فحصها من قبل مجتمع المستخدمين. كمثال، [R-Ladies](https://rladies.org/) هي منظمة عالمية تهدف إلى تعزيز التنوع الجنسي في مجتمع R، وهي واحدة من أكبر المنظمات لمستخدمي R. من المحتمل أن يكون لديها فرع بالقرب منك!

## مصطلحات رئيسية

**RStudio** - RStudio هو واجهة رسومية لمستخدم (GUI) لتسهيل استخدام **R**. اقرأ المزيد [في قسم RStudio](#rstudio).

**الكائنات** - كل ما تخزنه في R - مجموعات البيانات، المتغيرات، قائمة بأسماء القرى، عدد سكان إجمالي، حتى النواتج مثل الرسوم البيانية - هي *كائنات* تُعطى *اسمًا* ويمكن *الرجوع إليها* في الأوامر لاحقًا. اقرأ المزيد [في قسم الكائنات](#objects).

**الدوال** - الدالة هي عملية برمجية تقبل مدخلات وتُرجع ناتجًا محولًا. اقرأ المزيد [في قسم الدوال](#functions).

**الحزم** - حزمة R هي مجموعة قابلة للمشاركة من الدوال. اقرأ المزيد [في قسم الحزم](#packages).

**النصوص** - النص هو ملف الوثيقة الذي يحتوي على أوامرك. اقرأ المزيد [في قسم النصوص](#scripts).

## موارد للتعلم {#learning}

### موارد داخل RStudio {.unnumbered}

**توثيق المساعدة**

ابحث في علامة التبويب "المساعدة" في RStudio عن توثيق حول حزم R ودوال محددة. هذا داخل اللوحة التي تحتوي أيضًا على ملفات، رسوم بيانية، وحزم (عادة في اللوحة السفلية اليمنى). كاختصار، يمكنك أيضًا كتابة اسم حزمة أو دالة في وحدة التحكم R بعد علامة الاستفهام لفتح صفحة المساعدة ذات الصلة. لا تضع الأقواس.

على سبيل المثال: `?filter` أو `?diagrammeR`.

**البرامج التعليمية التفاعلية**

هناك طرق عديدة لتعلم R تفاعليًا *داخل* RStudio.

يقدم RStudio نفسه لوحة تعليمية تعتمد على حزمة [**learnr**](https://blog.rstudio.com/2020/02/25/rstudio-1-3-integrated-tutorials/). قم ببساطة بتثبيت هذه الحزمة وافتح تعليمًا عبر علامة التبويب الجديدة "التعليم" في اللوحة العلوية اليمنى في RStudio (التي تحتوي أيضًا على علامات بيئة وتاريخ).

تقدم حزمة R [**swirl**](https://swirlstats.com/) دورات تفاعلية في وحدة التحكم R. قم بتثبيت هذه الحزمة وتحميلها، ثم قم بتشغيل الأمر `swirl()` (بأقواس فارغة) في وحدة التحكم R. ستظهر لك تعليمات في وحدة التحكم. قم بالرد عن طريق الكتابة في وحدة التحكم. سترشدك خلال دورة اختيارك.

### الورقات الغش {.unnumbered}

هناك العديد من "ورقات الغش" بتنسيق PDF متاحة على [موقع RStudio](https://rstudio.com/resources/cheatsheets/). على سبيل المثال:

-   العوامل مع حزمة **forcats**\
-   التواريخ والأوقات مع حزمة **lubridate**\
-   السلاسل النصية مع حزمة **stringr**\
-   العمليات التكرارية مع حزمة **purrr**\
-   استيراد البيانات\
-   ورقة مراوغة لتحويل البيانات مع حزمة **dplyr**\
-   R Markdown (لإنشاء مستندات مثل PDF، Word، Powerpoint...)\
-   Shiny (لبناء تطبيقات ويب تفاعلية)\
-   تصور البيانات مع حزمة **ggplot2**\
-   علم الخرائط (GIS)\
-   حزمة **leaflet** (خرائط تفاعلية)\
-   Python مع R (حزمة **reticulate**)

هذا مورد R عبر الإنترنت خاص بمستخدمي [Excel](https://jules32.github.io/r-for-excel-users/)

### تويتر {.unnumbered}

R لديه مجتمع نشط على تويتر حيث يمكنك تعلم النصائح والاختصارات والأخبار - تابع هذه الحسابات:

-   تابعنا! [\@epiRhandbook](https://twitter.com/epirhandbook)\
-   R Function A Day [\@rfuntionaday](https://twitter.com/rfunctionaday) هو مورد *رائع*\
-   R for Data Science [\@rstats4ds](https://twitter.com/rstats4ds?lang=en)\
-   RStudio [\@RStudio](https://twitter.com/rstudio?lang=en)\
-   RStudio Tips [\@rstudiotips](https://twitter.com/rstudiotips)\
-   R-Bloggers [\@Rbloggers](https://twitter.com/Rbloggers)\
-   R-ladies [\@RLadiesGlobal](https://twitter.com/RLadiesGlobal)\
-   Hadley Wickham [\@hadleywickham](https://twitter.com/hadleywickham?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor)

أيضًا:

**\#epitwitter** و **\#rstats**

### موارد مجانية عبر الإنترنت {.unnumbered}

نص محدد هو كتاب [R for Data Science](https://r4ds.had.co.nz/) من تأليف Garrett Grolemund و Hadley Wickham

موقع مشروع [R4Epis](https://r4epis.netlify.app/) يهدف إلى "تطوير أدوات قياسية لتنظيف البيانات وتحليلها وإعداد تقارير تغطي أنواعًا شائعة من الفترات الاندفاعية والدراسات السكانية التي يمكن إجراؤها في إطار استجابة الطوارئ لمنظمة أطباء بلا حدود." يمكنك العثور على مواد تدريبية أساسية لـ R، قوالب لتقارير RMarkdown حول الاندفاعات والدراسات السكانية، وبرامج تعليمية لمساعدتك في إعدادها.

### لغات أخرى غير الإنجليزية {.unnumbered}


## التثبيت

### R و RStudio {.unnumbered}

**كيفية تثبيت R**

قم بزيارة هذا الموقع <https://www.r-project.org/> وقم بتنزيل أحدث إصدار من R المناسب لجهاز الكمبيوتر الخاص بك.

**كيفية تثبيت RStudio**

قم بزيارة هذا الموقع <https://rstudio.com/products/rstudio/download/> وقم بتنزيل أحدث إصدار مجاني من RStudio Desktop المناسب لجهاز الكمبيوتر الخاص بك.

**الأذونات**\
يرجى ملاحظة أنه يجب عليك تثبيت R و RStudio على قرص تمتلك فيه صلاحيات القراءة والكتابة. وإلا، ستتأثر قدرتك على تثبيت حزم R (وهو أمر شائع). إذا واجهت مشاكل، جرب فتح RStudio بالنقر بزر الماوس الأيمن على الرمز واختيار "تشغيل كمسؤول". يمكن العثور على نصائح أخرى في الصفحة [R على محركات الأقراص الشبكية](network_drives.qmd).

**كيفية تحديث R و RStudio**

يتم طباعة إصدار R الخاص بك في وحدة التحكم R عند بدء التشغيل. يمكنك أيضًا تشغيل `sessionInfo()`.

لتحديث R، انتقل إلى الموقع المذكور أعلاه وأعد تثبيت R. بدلاً من ذلك، يمكنك استخدام حزمة **installr** (على نظام Windows) عن طريق تشغيل `installr::updateR()`. سيتم فتح صناديق حوار لمساعدتك في تنزيل أحدث إصدار من R وتحديث حزمك إلى الإصدار الجديد من R. يمكن العثور على تفاصيل أكثر في [الوثائق](https://www.r-project.org/nosvn/pandoc/installr.html) لـ **installr**.

كن على علم بأن الإصدار القديم من R سيظل موجودًا على جهاز الكمبيوتر الخاص بك. يمكنك تشغيل إصدار أقدم مؤقتًا (تثبيت أقدم) من R عن طريق النقر فوق "الأدوات" -\> "الخيارات العالمية" في RStudio واختيار إصدار R. يمكن أن يكون هذا مفيدًا إذا كنت ترغب في استخدام حزمة لم يتم تحديثها للعمل على أحدث إصدار من R.

لتحديث RStudio، يمكنك الانتقال إلى الموقع أعلاه وإعادة تنزيل RStudio. خيار آخر هو النقر فوق "المساعدة" -\> "التحقق من التحديثات" داخل RStudio، ولكن قد لا تظهر أحدث التحديثات.

لمعرفة الإصدارات التي تم استخدامها من R أو RStudio أو الحزم عند إنشاء هذا الدليل، انظر إلى الصفحة على [الملاحظات التحريرية والتقنية](editorial_style.qmd).

### برامج أخرى *قد* تحتاج إلى تثبيتها {.unnumbered}

-   TinyTeX (*لتجميع مستند RMarkdown إلى PDF*)\
-   Pandoc (*لتجميع مستندات RMarkdown*)\
-   RTools (*لبناء حزم لـ R*)\
-   phantomjs (*لحفظ صور ثابتة لشبكات متحركة، مثل سلاسل النقل*)

#### TinyTex {.unnumbered}

TinyTex هو توزيع LaTeX مخصص، مفيد عند محاولة إنتاج ملفات PDF من R.\
انظر <https://yihui.org/tinytex/> لمزيد من المعلومات.

لتثبيت TinyTex من R:

```{r, eval=F}
install.packages('tinytex')
tinytex::install_tinytex()
# لإلغاء تثبيت TinyTeX، قم بتشغيل tinytex::uninstall_tinytex()
```

#### Pandoc {.unnumbered}

Pandoc هو محول مستندات، برنامج منفصل عن R. **يأتي معبأ مع RStudio ولا يجب تنزيله.** يساعد في عملية تحويل مستندات Rmarkdown إلى تنسيقات مثل .pdf وإضافة وظائف معقدة.

#### RTools {.unnumbered}

RTools هو مجموعة من البرامج لبناء حزم لـ R

قم بالتثبيت من هذا الموقع: <https://cran.r-project.org/bin/windows/Rtools/>

#### phantomjs {.unnumbered}

يُستخدم هذا البرنامج غالبًا لأخذ "لقطات" من صفحات الويب. على سبيل المثال، عند إنشاء سلسلة نقل باستخدام حزمة **epicontacts**، يتم إنتاج ملف HTML تفاعلي وديناميكي. إذا كنت ترغب في صورة ثابتة، يمكن استخدام الحزمة [**webshot**](https://wch.github.io/webshot/articles/intro.html) لتلقين هذه العملية. سيتطلب ذلك برنامجًا خارجيًا يُدعى "phantomjs". يمكنك تثبيت phantomjs عبر الحزمة **webshot** باستخدام الأمر `webshot::install_phantomjs()`.

<!-- ======================================================= -->

## RStudio {#rstudio}

### توجيه RStudio {.unnumbered}

**أولاً، افتح RStudio.** نظرًا لأن رموزهما يمكن أن تبدو متشابهة للغاية، تأكد من أنك تفتح *RStudio* وليس R.

لكي يعمل RStudio، يجب أيضًا أن يكون لديك R مثبتًا على الكمبيوتر (انظر أعلاه لتعليمات التثبيت).

**RStudio** هو واجهة (GUI) لسهولة استخدام **R**. يمكنك أن تفكر في R كمحرك للمركبة، يقوم بالعمل الحاسم، و RStudio كجسم المركبة (مع المقاعد، الإكسسوارات، الخ) الذي يساعدك فعليًا على استخدام المحرك للتقدم إلى الأمام! يمكنك رؤية ورقة مرجعية كاملة لواجهة مستخدم RStudio (PDF) [هنا](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf)

افتراضيًا، يعرض RStudio أربع لوحات مستطيلة.

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "RStudio_overview.png"))
```

[***نصيحة:*** إذا كان RStudio الخاص بك يعرض لوحة يسارية واحدة فقط، فهذا لأنه ليس لديك نصوص مفتوحة حتى الآن.]{style="color: black;"}

**لوحة المصدر**\
هذه اللوحة، افتراضيًا في الزاوية العلوية اليسرى، هي مساحة لتحرير، تشغيل، وحفظ [النصوص](#scripts). النصوص تحتوي على الأوامر التي تريد تشغيلها. يمكن لهذه اللوحة أيضًا عرض مجموعات البيانات (إطارات البيانات) للعرض.

بالنسبة لمستخدمي Stata، هذه اللوحة مشابهة لنافذة Do-file ومحرر البيانات الخاصة بك.

**لوحة وحدة التحكم R**

وحدة التحكم R، افتراضيًا في الزاوية اليسرى أو السفلى اليسرى في R Studio، هي موطن "المحرك" R. هنا حيث تُشغل الأوامر فعليًا وتظهر النواتج غير الرسومية ورسائل الخطأ/التحذير. يمكنك إدخال الأوامر مباشرة وتشغيلها في وحدة التحكم R، ولكن تدرك أن هذه الأوامر لا تُحفظ كما هي عند تشغيل الأوامر من نص.

إذا كنت ملمًا بـ Stata، فوحدة التحكم R تشبه نافذة الأوامر وأيضًا نافذة النتائج.

**لوحة البيئة**\
هذه اللوحة، افتراضيًا في الزاوية العلوية اليمنى، تُستخدم في معظم الأحيان لرؤية ملخصات موجزة لـ [الكائنات](#objects) في بيئة R في الجلسة الحالية. يمكن أن تتضمن هذه الكائنات مجموعات بيانات مستوردة، معدلة، أو تم إنشاؤها، المعلمات التي قمت بتعريفها (على سبيل المثال، أسبوع epi محدد للتحليل)، أو متجهات أو قوائم قمت بتعريفها أثناء التحليل (على سبيل المثال، أسماء المناطق). يمكنك النقر على السهم المجاور لاسم إطار البيانات لرؤية متغيراته.

في Stata، هذا يشبه إلى حد كبير نافذة مدير المتغيرات.

هذا الجزء يحتوي أيضًا على *History* حيث يمكنك رؤية الأوامر التي قمت بها سابقًا. كما يحتوي على علامة تبويب "Tutorial" حيث يمكنك إكمال دروس R التفاعلية إذا كان لديك حزمة **learnr** مثبتة. كما يحتوي على جزء "Connections" للاتصالات الخارجية، ويمكن أن يحتوي على جزء "Git" إذا اخترت التفاعل مع Github.

**الرسوم البيانية، العارض، الحزم، وجزء المساعدة**\
الجزء السفلي الأيمن يتضمن عدة علامات تبويب مهمة. ستعرض الرسوم البيانية النمطية بما في ذلك الخرائط في الجزء الخاص بالرسوم البيانية. ستعرض النتائج التفاعلية أو HTML في العارض. يمكن لجزء المساعدة عرض الوثائق وملفات المساعدة. يعد جزء الملفات متصفحًا يمكن استخدامه لفتح أو حذف الملفات. يسمح لك جزء الحزم برؤية، تثبيت، تحديث، حذف، تحميل/تفريغ حزم R، ورؤية الإصدار الذي تمتلكه من الحزمة. لمعرفة المزيد حول الحزم، انظر إلى [قسم الحزم](#packages) أدناه.

يحتوي هذا الجزء على ما يعادل Stata من مدير الرسوم البيانية ونافذة مدير المشروع.

### إعدادات RStudio {.unnumbered}

قم بتغيير إعدادات ومظهر RStudio في قائمة السحب *Tools*، عن طريق تحديد *Global Options*. يمكنك هنا تغيير الإعدادات الافتراضية، بما في ذلك الظهور/لون الخلفية.

```{r out.width = c('50%'), fig.show='hold', echo=F}
knitr::include_graphics(here::here("images", "RStudio_tools_options_1.png"))

knitr::include_graphics(here::here("images", "RStudio_tools_options.png"))
```

**إعادة التشغيل**

إذا تجمد R الخاص بك، يمكنك إعادة تشغيل R من خلال الانتقال إلى قائمة الجلسة والنقر على "إعادة تشغيل R". هذا يتجنب عناء إغلاق وفتح RStudio. سيتم إزالة كل شيء في بيئتك R عند القيام بذلك.

### اختصارات لوحة المفاتيح {.unnumbered}

بعض اختصارات لوحة المفاتيح المفيدة أدناه. انظر إلى جميع اختصارات لوحة المفاتيح لنظامي Windows و Mac و Linux في الصفحة الثانية من ورقة مراجع اختصارات واجهة المستخدم هذه لـ RStudio [هنا](https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf).

+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Windows/Linux                    | Mac                    | الإجراء                                                                                                                         |
+==================================+========================+================================================================================================================================+
| Esc                              | Esc                    | إيقاف الأمر الحالي (مفيد إذا قمت بتشغيل أمر غير كامل عن طريق الخطأ ولا يمكنك الهروب من رؤية "+" في وحدة التحكم R) |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl+s                           | Cmd+s                  | حفظ (النص)                                                                                                                  |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Tab                              | Tab                    | إكمال تلقائي                                                                                                                  |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Enter                     | Cmd + Enter            | تشغيل السطر(السطور)/تحديد الكود                                                                                          |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Shift + C                 | Cmd + Shift + c        | تعليق/إلغاء تعليق الأسطر المحددة                                                                                        |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Alt + -                          | Option + -             | إدراج `<-`                                                                                                                    |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Shift + m                 | Cmd + Shift + m        | إدراج `%>%`                                                                                                                   |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + l                         | Cmd + l                | مسح وحدة التحكم R                                                                                                            |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Alt + b                   | Cmd + Option + b       | تشغيل من البداية إلى السطر الحالي                                                                                                 |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Alt + t                   | Cmd + Option + t       | تشغيل الجزء الحالي من الكود (R Markdown)                                                                                      |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Alt + i                   | Cmd + Shift + r        | إدراج قطعة كود (في R Markdown)                                                                                            |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Alt + c                   | Cmd + Option + c       | تشغيل قطعة الكود الحالية (R Markdown)                                                                                            |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| السهم لأعلى/لأسفل في وحدة التحكم R      | نفسه                   | التبديل بين الأوامر التي تم تشغيلها مؤخرًا                                                                                           |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Shift + السهم لأعلى/لأسفل في النص | نفسه                   | تحديد عدة أسطر من الكود                                                                                                     |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + f                         | Cmd + f                | البحث والاستبدال في النص الحالي                                                                                             |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Ctrl + Shift + f                 | Cmd + Shift + f        | البحث في الملفات (البحث/الاستبدال عبر العديد من النصوص)                                                                             |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Alt + l                          | Cmd + Option + l       | طي الكود المحدد                                                                                                             |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+
| Shift + Alt + l                  | Cmd + Shift + Option+l | فتح الكود المحدد                                                                                                           |
+----------------------------------+------------------------+--------------------------------------------------------------------------------------------------------------------------------+

[***نصيحة:*** استخدم مفتاح Tab عند الكتابة لاستخدام وظيفة الإكمال التلقائي في RStudio. يمكن أن يمنع هذا الأخطاء الإملائية. اضغط على Tab أثناء الكتابة لعرض قائمة من الوظائف والكائنات المحتملة، استنادًا إلى ما قمت بكتابته حتى الآن.]{style="color: darkgreen;"}

<!-- ======================================================= -->

## الوظائف {#functions}

الوظائف هي في صميم استخدام R. الوظائف هي الطريقة التي تقوم بها بأداء المهام والعمليات. تأتي العديد من الوظائف مثبتة مع R، والمزيد منها متاح للتنزيل في *حزم* (المشروحة في القسم [الحزم](#packages))، ويمكنك حتى كتابة وظائف مخصصة خاصة بك!

يشرح هذا القسم الأساسي حول الوظائف:

-   ما هي الوظيفة وكيف تعمل\
-   ما هي *المُعطيات* الخاصة بالوظيفة\
-   كيفية الحصول على مساعدة في فهم الوظيفة

*ملاحظة سريعة حول الصيغة:* في هذا الدليل، تُكتب الوظائف في نص الكود بفتح القوسين، مثل هذا: `filter()` كما هو مشروح في القسم [الحزم](#packages)، تُنزل الوظائف ضمن *حزم*. في هذا الدليل، تُكتب أسماء الحزم بخط عريض، مثل **dplyr**. أحيانًا في الشيفرة المثالية قد ترى ارتباط اسم الوظيفة بشكل صريح باسم حزمتها باستخدام نقطتين (`::`) مثل هذا: `dplyr::filter()`. يُشرح هدف هذا الربط في قسم الحزم.

<!-- ======================================================= -->

### الوظائف البسيطة {.unnumbered}

**الوظيفة مثل آلة تستقبل مدخلات، تقوم بإجراء بعض الإجراءات باستخدام تلك المدخلات، وتنتج مخرجًا.** ما هو المخرج يعتمد على الوظيفة.

**تعمل الوظائف عادة على كائن ما يتم وضعه داخل قوسي الوظيفة**. على سبيل المثال، تقوم الوظيفة `sqrt()` بحساب الجذر التربيعي لرقم ما:

```{r basics_function_sqrt}
sqrt(49)
```

يمكن أن يكون الكائن الذي يتم توفيره للوظيفة أيضًا عمودًا في مجموعة بيانات (انظر القسم [الكائنات](#objects) للتفاصيل حول جميع أنواع الكائنات). نظرًا لأن R يمكنه تخزين مجموعات بيانات متعددة، ستحتاج إلى تحديد كل من المجموعة البياناتية والعمود. يمكن القيام بذلك باستخدام علامة الدولار `$` لربط اسم المجموعة البياناتية واسم العمود (`dataset$column`). في المثال أدناه، يتم تطبيق الوظيفة `summary()` على العمود الرقمي `age` في مجموعة البيانات `linelist`، والمخرج هو ملخص للقيم الرقمية والقيم المفقودة في العمود.

```{r basics_functions_summary}
# طباعة إحصائيات ملخصة للعمود 'العمر' في مجموعة البيانات 'linelist'
summary(linelist$age)
```

[***ملاحظة:*** خلف الكواليس، تمثل الوظيفة رمزًا معقدًا إضافيًا تم تجميعه للمستخدم في أمر واحد سهل.]{style="color: black;"}

<!-- ======================================================= -->

### الوظائف مع عدة وسائط {.unnumbered}

غالبًا ما تطلب الوظائف عدة مدخلات، تُسمى ***وسائط***، تقع داخل الأقواس المستديرة للوظيفة، عادة ما تكون مفصولة بفواصل.

-   تُطلب بعض الوسائط لعمل الوظيفة بشكل صحيح، بينما تكون البعض الآخر اختيارية\
-   تحتوي الوسائط الاختيارية على إعدادات افتراضية\
-   يمكن أن تأخذ الوسائط مدخلات شخصية أو رقمية أو منطقية (صحيح/خطأ) ومدخلات أخرى

هنا وظيفة خيالية ممتعة، تسمى `oven_bake()`، كمثال على وظيفة نموذجية. تأخذ كائن مدخل (على سبيل المثال، مجموعة بيانات، أو في هذا المثال "العجين") وتنفذ العمليات عليه كما هو محدد بوسائط إضافية (`minutes =` و `temperature =`). يمكن طباعة الناتج إلى وحدة التحكم، أو حفظه ككائن باستخدام عامل التعيين `<-`.

```{r basics_functions_image, echo=F, out.width = "75%", fig.align = "center"}
knitr::include_graphics(here::here("images", "Function_Bread_Example.png"))
```

**في مثال أكثر واقعية**, ينتج الأمر `age_pyramid()` أدناه رسم هرم الأعمار بناءً على مجموعات عمرية محددة وعمود تقسيم ثنائي، مثل `gender`. يتم تقديم الوظيفة ثلاث وسائط داخل الأقواس، مفصولة بفواصل. القيم المقدمة للوسائط تحدد `linelist` كإطار بيانات للاستخدام، `age_cat5` كالعمود للعد، و `gender` كالعمود الثنائي لاستخدامه في تقسيم الهرم باللون.

```{r basics_functions_arguments, include=FALSE, results='hide', message=FALSE, warning=FALSE,}
## إنشاء متغير مجموعة عمرية عن طريق تحديد الفواصل الفئوية
linelist$age_group <- cut(linelist$age, breaks = c(0, 5, 10, 15, 20, 30, 45, 60))
```

```{r message=FALSE, warning=FALSE,  out.width = "75%", out.height="75%"}
# إنشاء هرم عمر
age_pyramid(data = linelist, age_group = "age_cat5", split_by = "gender")
```

الأمر أعلاه يمكن كتابته بشكل مكافئ كما يلي، بأسلوب أطول مع سطر جديد لكل وسيط. يمكن أن يكون هذا الأسلوب أسهل للقراءة، وأسهل لكتابة "تعليقات" باستخدام `#` لشرح كل جزء (التعليق بشكل موسع هو ممارسة جيدة!). لتشغيل هذا الأمر الطويل يمكنك تحديد الأمر بالكامل والنقر فوق "تشغيل"، أو مجرد وضع المؤشر في السطر الأول ثم الضغط على مفاتيح Ctrl و Enter معًا.

```{r message=FALSE, warning=FALSE,  out.width = "75%", out.height="75%"}
# إنشاء هرم عمري
age_pyramid(
  data = linelist,        # استخدام حالة linelist
  age_group = "age_cat5", # توفير عمود مجموعة العمر
  split_by = "gender"     # استخدام عمود الجنس لجانبي الهرم
  )
```{style="color: black;"}

نصف الجزء الأول من تعيين الوسيط (مثل `data =`) لا يحتاج إلى تحديد إذا كانت الوسائط مكتوبة بترتيب محدد (محدد في وثائق الوظيفة). الشيفرة أدناه تنتج نفس الهرم الذي تم ذكره أعلاه، لأن الوظيفة تتوقع ترتيب الوسائط: إطار البيانات، متغير `age_group`، متغير `split_by`.

```{r, basics_functions_pyramid2, eval = FALSE, warning=FALSE, message=FALSE, , out.width = "75%", out.height="75%", eval=F}
# هذا الأمر سينتج نفس الرسم البياني الذي تم ذكره أعلاه
age_pyramid(linelist, "age_cat5", "gender")
```{style="color: black;"}

**قد يتضمن أمر `age_pyramid()` الأكثر تعقيدًا الوسائط *الاختيارية* ل:**

-   عرض النسب بدلاً من العدادات (قم بتعيين `proportional = TRUE` عندما يكون الافتراضي `FALSE`)
-   تحديد اللونين المستخدمين (`pal =` اختصار لـ "palette" ويتم توفيره بمتجه من اسماء الألوان الاثنين. انظر [الكائنات](#objectstructure) لكيفية عمل الوظيفة `c()` على إنشاء متجه)

[***ملاحظة:*** بالنسبة للوسائط التي تحددها بكل جزء من الوسيط (مثل `proportional = TRUE`، ترتيبها بين جميع الوسائط لا يهم.]{style="color: black;"}

```{r message=FALSE, warning=FALSE, out.width = "75%", out.height="75%"}
age_pyramid(
  linelist,                    # استخدام حالة linelist
  "age_cat5",                  # عمود مجموعة العمر
  "gender",                    # تقسيم حسب الجنس
  proportional = TRUE,         # نسب بدلاً من عدادات
  pal = c("orange", "purple")  # الألوان
  )
```

### Escrevendo Funções {.unnumbered}

R é uma linguagem orientada em torno de funções, então você deve se sentir capacitado para escrever suas próprias funções. Criar funções traz várias vantagens:

-   Para facilitar a programação modular - a separação do código em pedaços independentes e gerenciáveis\
-   Substituir cópias e colagens repetitivas, que podem conter erros\
-   Dar nomes memoráveis a pedaços de código

Como escrever uma função é abordado em profundidade na página [Escrevendo funções](writing_functions.qmd).

```{r, eval=F, echo=F}
minha_funcao <- function( ARGUMENTOS AQUI ){ CÓDIGO AQUI }
```

<!--                        time_case = 0.5, time_contact = 0.25, time_day = 8){ -->

<!--   # تعريف إجمالي ساعات العمل اليومية للاتصال بالحالات -->

<!--   case_hours <- daily_cases * time_case  -->

<!--   # تعريف إجمالي ساعات العمل اليومية للاتصال بالجهات الاتصال -->

<!--   contact_hours <- daily_cases * contacts_each * time_contact -->

<!--   # حساب عدد الموظفين المطلوبين -->

<!--   staff_required <- (case_hours + contact_hours)/time_day -->

<!--   return(staff_required) -->

<!-- } -->

<!-- ``` -->

<!-- بمجرد تشغيل هذا الكود، سيتم تعريف الدالة وستظهر في بيئة R. يمكننا تشغيل الدالة. أدناه يتم استخدام جميع القيم الافتراضية وتم تعيين `daily_cases = 150`.   -->

```{r eval=F, echo=F, message=FALSE, warning=FALSE, out.width = "75%", out.height="75%"}
staff_calc(daily_cases = 150)
```

```{r, eval=F, echo=F}
case_incidence <- tibble(
  dates = seq.Date(from = as.Date("2020-05-01"), to = as.Date("2020-05-21"), by = 1),
  projected_incidence = c(102,110,50,37,106,190,146,138,135,111,60,43,189,184,185,80,44,97,254,291,288),
  staff_needed = staff_calc(projected_incidence)
)

ggplot(case_incidence, aes(x = dates))+
  geom_line(aes(y = projected_incidence))+
  geom_line(aes(y = staff_needed))
```

<!-- هناك العديد من الجوانب الأخرى التي يجب فهمها عند كتابة الدوال، كما هو موضح في الصفحة [كتابة الدوال].   -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## الحزم {#packages}

**الحزم تحتوي على الدوال.**

الحزمة في R هي حزمة قابلة للمشاركة من الشيفرة والوثائق التي تحتوي على دوال محددة مسبقًا. يقوم مستخدمو R في المجتمع بتطوير حزم باستمرار تتناسب مع مشاكل محددة، ومن المحتمل أن تساعدك واحدة منها في عملك! ستقوم بتثبيت واستخدام مئات الحزم في استخدامك لـ R.

عند التثبيت، يحتوي R على حزم ودوال **"الأساسية"** التي تقوم بأداء المهام الأساسية الشائعة. ولكن العديد من مستخدمي R ينشئون دوال متخصصة، والتي يتم التحقق منها من قبل مجتمع R والتي يمكنك تنزيلها كـ **حزمة** لاستخدامها الخاص. في هذا الدليل، تكتب أسماء الحزم بخط **عريض**. واحدة من أصعب جوانب R هو أنه غالبًا ما تكون هناك العديد من الدوال أو الحزم للاختيار من بينها لإكمال مهمة معينة.

### التثبيت والتحميل {.unnumbered}

*الوظائف* موجودة ضمن **الحزم** التي يمكن تنزيلها ("تثبيتها") على جهاز الكمبيوتر الخاص بك من الإنترنت. بمجرد تنزيل الحزمة، يتم تخزينها في "مكتبتك". يمكنك بعد ذلك الوصول إلى الوظائف التي تحتويها خلال جلسة R الحالية عن طريق "تحميل" الحزمة.

*فكر في R كمكتبتك الشخصية*: عندما تقوم بتنزيل حزمة، تحصل مكتبتك على كتاب جديد من الوظائف، ولكن في كل مرة ترغب في استخدام وظيفة في ذلك الكتاب، يجب عليك استعارة ("تحميل") تلك الكتاب من مكتبتك.

في الختام: لاستخدام الوظائف المتاحة في حزمة R، يجب تنفيذ خطوتين:

1)  يجب **تثبيت** الحزمة (مرة واحدة)، *و*\
2)  يجب **تحميل** الحزمة (في كل جلسة R)

#### مكتبتك {.unnumbered}

"مكتبتك" هي في الواقع مجلد على جهاز الكمبيوتر الخاص بك، يحتوي على مجلد لكل حزمة تم تثبيتها. ابحث عن مكان تثبيت R على جهاز الكمبيوتر الخاص بك، وابحث عن مجلد يسمى "win-library". على سبيل المثال: `R\win-library\4.0` (الرقم 4.0 هو إصدار R - ستكون لديك مكتبة مختلفة لكل إصدار R قمت بتنزيله).

يمكنك طباعة مسار الملف إلى مكتبتك عن طريق إدخال `.libPaths()` (قوسين فارغة). يصبح هذا مهمًا بشكل خاص عند العمل مع [R على محركات الأقراص الشبكية](network_drives.qmd).

#### التثبيت من CRAN {.unnumbered}

غالبًا ما يقوم مستخدمو R بتنزيل الحزم من CRAN. CRAN (شبكة الأرشيف الشاملة لـ R) هي مستودع عام على الإنترنت لحزم R التي تم نشرها من قبل أعضاء مجتمع R.

هل تشعر بالقلق بشأن الفيروسات والأمان عند تنزيل حزمة من CRAN؟ اقرأ [هذه المقالة](https://support.rstudio.com/hc/en-us/articles/360042593974-R-and-R-Package-Security) حول هذا الموضوع.

#### كيفية التثبيت والتحميل {.unnumbered}

في هذا الدليل، نقترح استخدام حزمة **pacman** (اختصارًا لـ "مدير الحزم"). تقدم وظيفة مريحة `p_load()` التي ستقوم بتثبيت الحزمة إذا لزم الأمر *و* تحميلها للاستخدام في جلسة R الحالية.

الصيغة بسيطة تمامًا. ما عليك سوى سرد أسماء الحزم داخل قوسين `p_load()`، مفصولة بفواصل. سيقوم هذا الأمر بتثبيت حزم **rio**, **tidyverse**, و **here** إذا لم يتم تثبيتها بعد، وسيقوم بتحميلها للاستخدام. يجعل هذا النهج `p_load()` مريحًا وموجزًا عند مشاركة النصوص مع الآخرين. لاحظ أن أسماء الحزم حساسة لحالة الأحرف.

```{r}
# قم بتثبيت (إذا لزم الأمر) وتحميل الحزم للاستخدام
pacman::p_load(rio, tidyverse, here)
```

يرجى ملاحظة أننا استخدمنا بنية `pacman::p_load()` التي تكتب بشكل صريح اسم الحزمة (**pacman**) قبل اسم الدالة (`p_load()`), متصلة بواسطة نقطتين `::`. هذه الصيغة مفيدة لأنها تحمل أيضًا حزمة **pacman** (بشرط أن تكون مثبتة بالفعل).

هناك وظائف **base** R بديلة ستراها كثيرًا. الوظيفة **base** R لتثبيت حزمة هي `install.packages()`. يجب توفير اسم الحزمة التي تريد تثبيتها داخل القوسين *بين علامتي اقتباس*. إذا كنت ترغب في تثبيت عدة حزم في أمر واحد، يجب أن تُدرج في متجه الأحرف `c()`.

ملاحظة: هذا الأمر *يثبت* حزمة، ولكنها لا تُحمل للاستخدام في الجلسة الحالية.

```{r, eval=F}
# تثبيت حزمة واحدة باستخدام base R
install.packages("tidyverse")

# تثبيت عدة حزم باستخدام base R
install.packages(c("tidyverse", "rio", "here"))
```

يمكن أيضًا تنفيذ التثبيت بالنقر بالماوس عن طريق الانتقال إلى لوحة RStudio "Packages" والنقر على "Install" والبحث عن اسم الحزمة المطلوبة.

الوظيفة **base** R لـ **تحميل** حزمة للاستخدام (بعد تثبيتها) هي `library()`. يمكنها تحميل حزمة واحدة فقط في كل مرة (سبب آخر لاستخدام `p_load()`). يمكنك توفير اسم الحزمة مع أو بدون اقتباسات.

```{r, eval=F}
# تحميل الحزم للاستخدام، باستخدام base R
library(tidyverse)
library(rio)
library(here)
```

للتحقق مما إذا كانت الحزمة مثبتة و/أو محملة، يمكنك عرض لوحة الحزم في RStudio. إذا كانت الحزمة مثبتة، ستظهر هناك مع رقم الإصدار. إذا تم تحديد خانتها، فهي محملة للجلسة الحالية.

**التثبيت من Github**

أحيانًا، قد تحتاج إلى تثبيت حزمة غير متوفرة بعد من CRAN. أو ربما تكون الحزمة متوفرة على CRAN ولكنك تريد *النسخة التطويرية* بميزات جديدة لم تُقدم بعد في النسخة المنشورة الأكثر استقرارًا على CRAN. غالبًا ما تكون هذه مستضافة على موقع [github.com](https://github.com/) في "مستودع" للشفرة المجاني والعام. اقرأ المزيد حول Github في صفحة الدليل عن [التحكم في الإصدار والتعاون مع Git وGithub].


لتنزيل حزم R من Github، يمكنك استخدام الدالة `p_load_gh()` من **pacman**، والتي ستقوم بتثبيت الحزمة إذا لزم الأمر، وتحميلها لاستخدامها في جلسة R الحالية. البدائل للتثبيت تشمل استخدام حزم **remotes** أو **devtools**. اقرأ المزيد عن جميع وظائف **pacman** في [وثائق الحزمة](https://cran.r-project.org/web/packages/pacman/pacman.pdf).

لتثبيت من Github، يجب عليك توفير مزيد من المعلومات. يجب عليك توفير:

1)  معرف Github لمالك المستودع
2)  اسم المستودع الذي يحتوي على الحزمة
3)  *(اختياري) اسم "الفرع" (الإصدار التطويري المحدد) الذي تريد تنزيله*

في الأمثلة أدناه، الكلمة الأولى بين علامات التنصيص هي معرف Github لمالك المستودع، بعد شرطة مائلة يأتي اسم المستودع (اسم الحزمة).

```{r, eval=F}
# تثبيت/تحميل حزمة epicontacts من مستودعها على Github
p_load_gh("reconhub/epicontacts")
```

إذا كنت ترغب في التثبيت من "فرع" (إصدار) غير الرئيسي، أضف اسم الفرع بعد "\@" بعد اسم المستودع.

```{r, eval=F}
# تثبيت فرع "timeline" من حزمة epicontacts من Github
p_load_gh("reconhub/epicontacts@timeline")
```

إذا لم يكن هناك فرق بين الإصدار على Github والإصدار على جهاز الكمبيوتر الخاص بك، لن يتم اتخاذ أي إجراء. يمكنك "إجبار" إعادة التثبيت بدلاً من ذلك باستخدام `p_load_current_gh()` مع الوسيط `update = TRUE`. اقرأ المزيد عن **pacman** في هذا [المقال على الإنترنت](http://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html)

**التثبيت من ملف ZIP أو TAR**

يمكنك تثبيت الحزمة من عنوان URL:

```{r, eval=F}
packageurl <- "https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
```

أو، قم بتنزيلها إلى جهاز الكمبيوتر الخاص بك في ملف مضغوط:

الخيار 1: باستخدام `install_local()` من حزمة **remotes**

```{r, eval=F}
remotes::install_local("~/Downloads/dplyr-master.zip")
```

Option 2: استخدام `install.packages()` من **base** R، وتقديم مسار الملف إلى ملف ZIP وضبط `type = "source` و `repos = NULL`.

```{r, eval=F}
install.packages("~/Downloads/dplyr-master.zip", repos=NULL, type="source")
```

### بناء جملة الكود {.unnumbered}

للوضوح في هذا الدليل، يتم تسبق بعض الدوال أحيانًا باسم حزمتها باستخدام رمز `::` بالطريقة التالية: `package_name::function_name()`

بمجرد تحميل حزمة لجلسة، لا يلزم هذا النمط الصريح. يمكن استخدام `function_name()` مباشرة. ومع ذلك، فإن كتابة اسم الحزمة مفيدة عندما يكون اسم الدالة شائعًا وقد يكون موجودًا في عدة حزم (على سبيل المثال، `plot()`). كتابة اسم الحزمة سيقوم أيضًا بتحميل الحزمة إذا لم تكن محملة بالفعل.

```{r eval=FALSE}
# تستخدم هذه الأمر الحزمة "rio" ودالتها "import()" لاستيراد مجموعة بيانات
linelist <- rio::import("linelist.xlsx", which = "Sheet1")
```

### مساعدة الدوال {.unnumbered}

لقراءة المزيد عن دالة ما، يمكنك البحث عنها في علامة المساعدة في أسفل يمين RStudio. يمكنك أيضًا تشغيل أمر مثل `?thefunctionname` (ضع اسم الدالة بعد علامة الاستفهام) وسيظهر صفحة المساعدة في اللوحة المساعدة. وأخيرًا، جرب البحث عبر الإنترنت عن الموارد.

### تحديث الحزم {.unnumbered}

يمكنك تحديث الحزم عن طريق إعادة تثبيتها. يمكنك أيضًا النقر على الزر الأخضر "تحديث" في لوحة حزم RStudio الخاصة بك لمعرفة الحزم التي تحتوي على إصدارات جديدة لتثبيتها. كن على علم بأنه قد يكون من الضروري تحديث كودك القديم إذا كان هناك تعديل رئيسي على كيفية عمل دالة!

### حذف الحزم {.unnumbered}

استخدم `p_delete()` من **pacman**، أو `remove.packages()` من **base** R. بالإضافة إلى ذلك، اذهب للعثور على المجلد الذي يحتوي على مكتبتك واحذف المجلد يدويًا.

### التبعيات {.unnumbered}

غالبًا ما تعتمد الحزم على حزم أخرى للعمل. تُعرف هذه بالتبعيات. إذا فشل تثبيت تبعية، فقد يفشل تثبيت الحزمة التي تعتمد عليها.

انظر إلى التبعيات لحزمة معينة باستخدام `p_depends()`، وانظر إلى الحزم التي تعتمد عليها باستخدام `p_depends_reverse()`

### الدوال المقنعة {.unnumbered}

ليس من النادر أن تحتوي حزمتان أو أكثر على نفس اسم الدالة. على سبيل المثال، تحتوي حزمة **dplyr** على دالة `filter()`، ولكن الحزمة **stats** تحتوي أيضًا على نفس الدالة. تعتمد الدالة الافتراضية `filter()` على ترتيب تحميل هذه الحزم في جلسة R - ستكون الأخيرة هي الافتراضية للأمر `filter()`.

يمكنك التحقق من الترتيب في لوحة البيئة الخاصة بك في R Studio - انقر فوق القائمة المنسدلة لـ "البيئة العالمية" وانظر ترتيب الحزم. ستقوم الدوال من الحزم *الأقل* في تلك القائمة المنسدلة بتغطية الدوال التي تحمل نفس الاسم في الحزم التي تظهر في الجزء الأعلى من القائمة المنسدلة. عند تحميل حزمة لأول مرة، سيقوم R بتحذيرك في وحدة التحكم إذا كانت هناك تغطية، ولكن يمكن أن يكون من السهل تفويت هذا التحذير.

```{r out.width = "50%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "masking_functions.png"))
```

إليك طرق يمكنك من خلالها إصلاح التغطية:

1)  حدد اسم الحزمة في الأمر. على سبيل المثال، استخدم `dplyr::filter()`\
2)  أعد ترتيب ترتيب تحميل الحزم (على سبيل المثال، ضمن `p_load()`)، و**ابدأ جلسة R جديدة**

### فصل / تفريغ {.unnumbered}

لفصل (تفريغ) حزمة، استخدم هذا الأمر، مع اسم الحزمة الصحيح وفقط نقطة واحدة. يرجى ملاحظة أن هذا قد لا يحل مشكلة التغطية.

```{r, eval=F}
detach(package:PACKAGE_NAME_HERE, unload=TRUE)
```

### تثبيت إصدار أقدم {.unnumbered}

انظر إلى هذا [الدليل](https://support.rstudio.com/hc/en-us/articles/219949047-Installing-older-versions-of-packages) لتثبيت إصدار أقدم من حزمة معينة.

### الحزم المقترحة {.unnumbered}

انظر إلى الصفحة حول [الحزم المقترحة](packages_suggested.qmd) للحصول على قائمة بالحزم التي نوصي بها للإيبيدميولوجيا اليومية.

<!-- ======================================================= -->

## النصوص {#scripts}

النصوص هي جزء أساسي من البرمجة. إنها وثائق تحتوي على أوامرك (على سبيل المثال، الدوال لإنشاء وتعديل مجموعات البيانات، طباعة التصورات البصرية، إلخ). يمكنك حفظ نص وتشغيله مرة أخرى لاحقًا. هناك العديد من المزايا في تخزين وتشغيل أوامرك من نص (بدلاً من كتابة الأوامر واحدة تلو الأخرى في سطر الأوامر "الموجه")، سواءً كانت تعديلاتك تعمل أم لا.

-   النقل - يمكنك مشاركة عملك مع الآخرين عن طريق إرسال النصوص الخاصة بك\
-   إعادة الإنتاجية - حتى تعرف أنت والآخرون بالضبط ما فعلت\
-   التحكم في الإصدارات - حتى تتمكن من تتبع التغييرات التي قمت بها أو قام بها زملاؤك\
-   التعليق/التعليق - لشرح لزملائك ما قمت به

### التعليق {.unnumbered}

في النص البرمجي يمكنك أيضًا التعليق ("تعليق") حول رمزك R. التعليق مفيد لشرح لنفسك وللقراء الآخرين ما تقوم به. يمكنك إضافة تعليق عن طريق كتابة رمز الهاش (\#) وكتابة تعليقك بعد ذلك. سيظهر النص المعلق بلون مختلف عن رمز R.

أي رمز مكتوب بعد الهاش (\#) لن يتم تشغيله. لذلك، وضع الهاش (\#) قبل الرمز هو أيضًا طريقة مفيدة لحجب سطر من الرمز مؤقتًا ("تعليق") إذا لم ترغب في حذفه. يمكنك تعليق/إلغاء تعليق عدة أسطر دفعة واحدة عن طريق تحديدها والضغط على Ctrl+Shift+c (Cmd+Shift+c في نظام Mac).

```{r, eval = F}
# يمكن أن يكون التعليق في سطر بمفرده
# استيراد البيانات
linelist <- import("linelist_raw.xlsx") %>%   # يمكن أيضًا وضع تعليق بعد الرمز
# تصفية(العمر > 50)                          # يمكن أيضًا استخدامه لتعطيل/إزالة سطر من الرمز
  count()

```

-   تعليق على *ما* تقوم به *وعلى **لماذا** تقوم به*.\
-   قسّم رمزك إلى أقسام منطقية\
-   رافق رمزك بوصف نصي تفصيلي خطوة بخطوة لما تقوم به (على سبيل المثال، خطوات مرقمة)

### الأسلوب {.unnumbered}

من المهم أن تكون واعيًا لأسلوب البرمجة الخاص بك - خاصة عند العمل ضمن فريق. نحن ننصح بدليل أسلوب **tidyverse** [style guide](https://style.tidyverse.org/). هناك أيضًا حزم مثل **styler** و **lintr** التي تساعدك على الالتزام بهذا الأسلوب.

بعض النقاط الأساسية جدًا لجعل رمزك قابلًا للقراءة للآخرين:\
\* عند تسمية الكائنات، استخدم فقط الحروف الصغيرة، الأرقام، وشرطة سفلية `_`، على سبيل المثال، `my_data`\
\* استخدم المسافات بشكل متكرر، بما في ذلك حول العوامل، على سبيل المثال، `n = 1` و `age_new <- age_old + 3`

### نصوص مثال {.unnumbered}

### سكريبت R {.unnumbered}

سكريبت R markdown هو نوع من سكريبت R حيث يصبح السكريبت نفسه وثيقة إخراج (PDF، Word، HTML، Powerpoint، إلخ). هذه الأدوات مفيدة ومتعددة الاستخدامات وغالبًا ما تُستخدم لإنشاء تقارير ديناميكية وآلية. حتى هذا الموقع والكتيب يتم إنتاجهما باستخدام سكريبتات R markdown!

من المهم أن نلاحظ أن مستخدمي R المبتدئين يمكنهم أيضًا استخدام R Markdown - لا تكونوا مرتابين! لمزيد من المعلومات، انظر صفحة الكتيب حول [تقارير باستخدام R Markdown](rmarkdown.qmd) documents.

### دفاتر R {.unnumbered}

لا يوجد فرق بين كتابة في Rmarkdown مقابل دفتر R. ومع ذلك، تختلف تنفيذ الوثيقة قليلاً. انظر هذا [الموقع](http://uc-r.github.io/r_notebook) لمزيد من التفاصيل.

### Shiny {.unnumbered}

تحتوي تطبيقات/مواقع Shiny على سكريبت واحد، يجب أن يكون اسمه `app.R`. يحتوي هذا الملف على ثلاث مكونات:

1) واجهة مستخدم (ui)\
2) وظيفة الخادم\
3) استدعاء لوظيفة `shinyApp`

انظر صفحة الكتيب حول [لوحات التحكم باستخدام Shiny](shiny_basics.qmd)، أو هذا البرنامج التعليمي عبر الإنترنت: [برنامج تعليمي Shiny](https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/)

*في الأوقات القديمة، كان يتم تقسيم الملف أعلاه إلى ملفين (`ui.R` و `server.R`)*

### طي الشيفرة {.unnumbered}

يمكنك طي أجزاء من الشيفرة لجعل سكريبتك أسهل قراءة.

للقيام بذلك، أنشئ رأس نصي بـ \#، اكتب رأسك، واتبعه بـ 4 على الأقل من الشرطات (-)، الهاشات (\#) أو العلامات (=). عند القيام بذلك، سيظهر سهم صغير في "الخطاف" إلى اليسار (بجانب رقم الصف). يمكنك النقر فوق هذا السهم وسيتم طي الشيفرة أدناه حتى الرأس التالي وسيظهر رمز سهم مزدوج مكانه.

لتوسيع الشيفرة، انقر على السهم في الهامش مرة أخرى، أو على أيقونة السهم المزدوج. هناك أيضًا اختصارات لوحة المفاتيح كما هو موضح في [قسم RStudio](#rstudio) من هذه الصفحة.

من خلال إنشاء رؤوس بواسطة \#، ستقوم أيضًا بتنشيط جدول المحتويات في أسفل النص الخاص بك (انظر أدناه) الذي يمكنك استخدامه لتصفح النص الخاص بك. يمكنك إنشاء رؤوس فرعية عن طريق إضافة المزيد من رموز \#، على سبيل المثال \# للرئيسية، \#\# للثانوية، و \#\#\# للرؤوس الثلاثية.

أدناه توجد نسختان من نص مثالي. على اليمين الأصلي مع رؤوس معلقة. على اليمين، تمت كتابة أربعة شرطات بعد كل رأس، مما يجعلها قابلة للطي. تم طي اثنين منها، ويمكنك رؤية أن جدول المحتويات في الأسفل الآن يظهر كل قسم.

```{r, out.width = c('50%'), fig.show='hold', echo=F}
knitr::include_graphics(here::here("images", "code_folding1.png"))
knitr::include_graphics(here::here("images", "code_folding2.png"))
```

المناطق الأخرى من الشيفرة التي تكون مؤهلة تلقائيًا للطي تشمل المناطق "المقوسة" بأقواس `{ }` مثل تعريفات الدوال أو الكتل الشرطية (بيانات if else). يمكنك قراءة المزيد حول الطي في الشيفرة على موقع RStudio [هنا](https://support.rstudio.com/hc/en-us/articles/200484568-Code-Folding-and-Sections).

<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## الدليل العامل

الدليل العامل هو موقع مجلد الجذر الذي يستخدمه R لعملك - حيث يبحث R عن الملفات ويحفظها افتراضيًا. بشكل افتراضي، سيحفظ الملفات الجديدة والنواتج في هذا الموقع، وسيبحث عن الملفات للاستيراد (على سبيل المثال، مجموعات البيانات) هنا أيضًا.

يظهر الدليل العامل بنص رمادي في أعلى نافذة الوحدة النصية في RStudio. يمكنك أيضًا طباعة الدليل العامل الحالي عن طريق تشغيل `getwd()` (اترك الأقواس فارغة).

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "working_directory_1.png"))
```

### النهج الموصى به {.unnumbered}

**انظر إلى الصفحة حول [مشاريع R](r_projects.qmd) للحصول على تفاصيل حول النهج الموصى به لإدارة دليل العمل الخاص بك.**\
طريقة شائعة وفعالة وخالية من المشاكل لإدارة دليل العمل الخاص بك ومسارات الملفات هي دمج هذه العناصر الثلاثة في سير العمل الموجه نحو [مشروع R](r_projects.qmd):

1)  مشروع R لتخزين جميع ملفاتك (انظر الصفحة حول [مشاريع R](r_projects.qmd))\
2)  حزمة **here** لتحديد مواقع الملفات (انظر الصفحة حول [الاستيراد والتصدير](importing.qmd))\
3)  حزمة **rio** لاستيراد/تصدير الملفات (انظر الصفحة حول [الاستيراد والتصدير](importing.qmd))

<!-- ======================================================= -->

### تعيين بواسطة الأمر {.unnumbered}

حتى وقت قريب، كان يُعلم العديد من الأشخاص الذين يتعلمون R ببدء نصوصهم بأمر `setwd()`. يُرجى بدلاً من ذلك النظر في استخدام سير عمل موجه نحو [مشروع R][r_projects.qmd] وقراءة [الأسباب لعدم استخدام `setwd()`](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/). بإيجاز، يصبح عملك محددًا لجهاز الكمبيوتر الخاص بك، وتصبح مسارات الملفات المستخدمة للاستيراد والتصدير "هشة"، وهذا يعيق بشكل كبير التعاون واستخدام كودك على أي كمبيوتر آخر. هناك بدائل سهلة!

كما هو مذكور أعلاه، على الرغم من أننا لا نوصي بهذا النهج في معظم الحالات، يمكنك استخدام الأمر `setwd()` مع مسار المجلد المطلوب بين علامتي اقتباس، على سبيل المثال:

```{r, eval=F}
setwd("C:/Documents/R Files/My analysis")
```

[***خطر:*** تعيين دليل عمل باستخدام `setwd()` *قد* يكون "هشًا" إذا كان مسار الملف محددًا لجهاز كمبيوتر واحد. بدلاً من ذلك، استخدم مسارات الملفات ذات الصلة بالنسبة إلى دليل جذر مشروع R (مع حزمة **here**). ]{style="color: red;"}

<!-- ======================================================= -->

### تعيين يدويًا {.unnumbered}

لتعيين دليل العمل يدويًا (ما يعادل النقر والتحديد لأمر `setwd()`)، انقر فوق قائمة الجلسة وانتقل إلى "تعيين دليل العمل" ثم "اختيار المجلد". سيتم تعيين دليل العمل لجلسة R المحددة. ملاحظة: إذا كنت تستخدم هذا النهج، سيتعين عليك القيام بذلك يدويًا في كل مرة تفتح فيها RStudio.

### ضمن مشروع R {.unnumbered}
إذا كنت تستخدم مشروع R، سيكون دليل العمل افتراضيًا هو مجلد جذر مشروع R الذي يحتوي على ملف ".rproj". سيتم تطبيق هذا إذا قمت بفتح RStudio عن طريق فتح مشروع R (الملف الذي يحمل امتداد ".rproj").

{/*examples*/}

### دليل العمل في سكربت R markdown {.unnumbered}
في سكربت R markdown، الدليل الافتراضي للعمل هو المجلد الذي يتم حفظ ملف Rmarkdown (`.Rmd`) داخله. إذا كنت تستخدم مشروع R وحزمة **here**، فهذا لا ينطبق وسيكون دليل العمل `here()` كما هو موضح في صفحة [مشاريع R](r_projects.qmd).

إذا كنت ترغب في تغيير دليل العمل لسكربت R markdown مستقل (ليس ضمن مشروع R)، إذا استخدمت `setwd()`، سينطبق هذا فقط على تلك القطعة البرمجية الخاصة. لجعل التغيير لجميع قطع البرمجة في سكربت R markdown، عدل قطعة الإعداد لإضافة المعلمة `root.dir =`، كما هو موضح أدناه:

```{r, eval=F}
knitr::opts_knit$set(root.dir = 'المسار/المطلوب/للمجلد')
```

من الأسهل بكثير استخدام سكربت R markdown ضمن مشروع R واستخدام حزمة **here**.

{/*examples*/}

### توفير مسارات الملفات {.unnumbered}
ربما يكون أكثر مصادر الإحباط للمبتدئين في R (على الأقل على جهاز Windows) هو كتابة مسار الملف لاستيراد البيانات أو تصديرها. هناك شرح مفصل حول كيفية إدخال مسارات الملفات بشكل أفضل في صفحة [الاستيراد والتصدير](importing.qmd)، ولكن هنا بعض النقاط الرئيسية:

**مسارات مكسورة**

أدناه مثال على مسار ملف "مطلق" أو "عنوان كامل". من المحتمل أن تتعطل هذه المسارات إذا استخدمتها جهاز كمبيوتر آخر. الاستثناء الوحيد هو إذا كنت تستخدم محرك أقراص مشترك/شبكة.

    C:/Users/Name/Document/Analytic Software/R/Projects/Analysis2019/data/March2019.csv  

**اتجاه الشرطة**

*عند كتابة مسار ملف، كن على علم باتجاه الشرطة.* استخدم *شرطات مائلة* (`/`) لفصل العناصر ("data/provincial.csv"). بالنسبة لمستخدمي Windows، الطريقة الافتراضية التي يتم عرض مسارات الملفات بها هي باستخدام *شرطات خلفية* (\\) - لذا ستحتاج إلى تغيير اتجاه كل شرطة. إذا استخدمت حزمة **here** كما هو موضح في صفحة [مشاريع R](r_projects.qmd)، فإن اتجاه الشرطة ليس مشكلة.

**مسارات الملفات النسبية**

نوصي عمومًا بتوفير مسارات الملفات "النسبية" بدلاً من ذلك - أي، المسار الذي يكون *نسبيًا لـ* جذر مشروع R الخاص بك. يمكنك القيام بذلك باستخدام حزمة **here** كما هو موضح في الصفحة [مشاريع R](r_projects.qmd). يمكن أن يبدو مسار الملف النسبي مثل هذا:

```{r, eval=F}
# استيراد csv linelist من المجلدات الفرعية data/linelist/clean/ لمشروع R
linelist <- import(here("data", "clean", "linelists", "marin_country.csv"))
```

حتى عند استخدام مسارات ملفات نسبية داخل مشروع R، يمكنك لا تزال استخدام مسارات مطلقة لاستيراد/تصدير البيانات خارج مشروع R الخاص بك.

<!-- ======================================================= -->

## الكائنات {#objects}

كل شيء في R هو كائن، وR هي لغة "موجهة نحو الكائنات". ستشرح هذه الأقسام:

-   كيفية إنشاء الكائنات (`<-`)
-   أنواع الكائنات (على سبيل المثال، إطارات البيانات، الفواصل..)
-   كيفية الوصول إلى الأجزاء الفرعية للكائنات (على سبيل المثال، المتغيرات في مجموعة بيانات)
-   فئات الكائنات (على سبيل المثال، رقمية، منطقية، صحيحة، مزدوجة، نصية، عامل)

<!-- ======================================================= -->

### كل شيء هو كائن {.unnumbered}

*تم تكييف هذا القسم من [مشروع R4Epis](https://r4epis.netlify.app/training/r_basics/objects/).*\
كل ما تخزنه في R - مجموعات بيانات، متغيرات، قائمة بأسماء القرى، عدد سكان إجمالي، حتى النواتج مثل الرسوم البيانية - هي **كائنات** تُسند لها **اسم** ويمكن **الرجوع إليها** في الأوامر لاحقًا.

الكائن موجود عندما تسنده قيمة (انظر إلى القسم الخاص بالتعيين أدناه). عندما يتم تسنيده قيمة، يظهر الكائن في البيئة (انظر إلى الجزء العلوي الأيمن من RStudio). يمكن بعد ذلك التعامل معه، تلاعبه، تغييره، وإعادة تعريفه.

<!-- ======================================================= -->

### تعريف الكائنات (`<-`) {.unnumbered}

**أنشئ الكائنات *من خلال تسنيدها قيمة* باستخدام عامل \<- .**\
يمكنك أن تفكر في عامل التسنيد `<-` ككلمة "يتم تعريفه كـ". تتبع الأوامر التي تتضمن التسنيد عادة ترتيبًا قياسيًا:

**اسم_الكائن** <- **القيمة** (أو عملية/حساب تنتج قيمة)

على سبيل المثال، قد ترغب في تسجيل الأسبوع الوبائي الحالي ككائن للرجوع إليه في الشيفرة لاحقًا. في هذا المثال، يتم إنشاء الكائن `current_week` عندما يتم تعيين له القيمة `"2018-W10"` (تجعل علامات الاقتباس هذه قيمة نصية). سيظهر الكائن `current_week` بعد ذلك في لوحة بيئة RStudio (أعلى اليمين) ويمكن الرجوع إليه في الأوامر لاحقًا.

انظر إلى الأوامر R وإخراجها في المربعات أدناه.

```{r basics_objects_assignment}
current_week <- "2018-W10"   # تنشئ هذه الأمر الكائن current_week عن طريق تعيين قيمة له
current_week                 # تطبع هذه الأمر القيمة الحالية لكائن current_week في وحدة التحكم
```

[***ملاحظة:*** لاحظ `[1]` في إخراج وحدة التحكم R يشير ببساطة إلى أنك تعرض العنصر الأول من الإخراج]{style="color: black;"}

[***تحذير:*** **يمكن كتابة قيمة الكائن مرة أخرى** في أي وقت عن طريق تشغيل أمر تعيين لإعادة تعريف قيمته. لذا، **ترتيب تشغيل الأوامر مهم جدًا**.]{style="color: orange;"}

الأمر التالي سيعيد تعريف قيمة `current_week`:

```{r basics_objects_reassignment}
current_week <- "2018-W51"   # يعيد تعيين قيمة جديدة لكائن current_week
current_week                 # يطبع القيمة الحالية لكائن current_week في وحدة التحكم
```

**علامات المساواة `=`**

سترى أيضًا علامات المساواة في شيفرة R:

-   علامة مساواة مزدوجة `==` بين كائنين أو قيمتين تطرح سؤالًا منطقيًا: "هل هذا مساوٍ لذلك؟".\
-   سترى أيضًا علامات المساواة داخل الدوال المستخدمة لتحديد قيم لوسائط الدالة (اقرأ عن هذه في الأقسام أدناه)، على سبيل المثال `max(age, na.rm = TRUE)`.\

**المجموعات البيانات**


المجموعات البيانية هي أيضًا كائنات (عادة "إطارات بيانات") ويجب تعيين أسماء لها عند استيرادها. في الكود أدناه، يتم إنشاء الكائن `linelist` وتعيين قيمة ملف CSV مستورد باستخدام حزمة **rio** ووظيفتها `import()`.

```{r basics_objects_dataframes, eval=FALSE}
# يتم إنشاء الكائن linelist وتعيين قيمة الملف CSV المستورد
linelist <- import("my_linelist.csv")
```

يمكنك قراءة المزيد حول استيراد وتصدير المجموعات البيانية في القسم حول [الاستيراد والتصدير](importing.qmd).

[***تحذير:*** ملاحظة سريعة حول تسمية الكائنات:]{style="color: orange;"}

-   يجب ألا تحتوي أسماء الكائنات على مسافات، ولكن يجب استخدام شرطة سفلية (\_) أو نقطة (.) بدلاً من المسافة.
-   أسماء الكائنات حساسة لحالة الأحرف (مما يعني أن `Dataset_A` مختلف عن `dataset_A`).
-   يجب أن تبدأ أسماء الكائنات بحرف (لا يمكن أن تبدأ برقم مثل 1، 2 أو 3).

**النواتج**

النواتج مثل الجداول والرسوم البيانية توفر مثالًا على كيفية حفظ النواتج ككائنات، أو فقط طباعتها دون حفظها. يمكن طباعة جدول التقاطع بين الجنس والنتيجة باستخدام وظيفة **base** R `table()` مباشرة إلى وحدة التحكم R (*دون* حفظ).

```{r}
# طباعة إلى وحدة التحكم R فقط
table(linelist$gender, linelist$outcome)
```

ولكن يمكن حفظ نفس الجدول ككائن مسمى. ثم، اختياريًا، يمكن طباعته.

```{r}
# حفظ
gen_out_table <- table(linelist$gender, linelist$outcome)

# طباعة
gen_out_table
```

**الأعمدة**

الأعمدة في مجموعة بيانات هي أيضًا كائنات ويمكن تعريفها، والكتابة فوقها، وإنشاؤها كما هو موضح أدناه في القسم حول الأعمدة.

يمكنك استخدام مشغل التعيين من **base** R لإنشاء عمود جديد. فيما يلي، يتم إنشاء العمود الجديد `bmi` (مؤشر كتلة الجسم)، ولكل صف القيمة الجديدة هي نتيجة عملية رياضية على قيمة الصف في أعمدة `wt_kg` و `ht_cm`.

```{r, eval=F}
# إنشاء عمود "bmi" الجديد باستخدام بنية جملة base R
linelist$bmi <- linelist$wt_kg / (linelist$ht_cm/100)^2
```

ومع ذلك، في هذا الدليل، نؤكد على نهج مختلف لتعريف الأعمدة، والذي يستخدم الدالة `mutate()` من حزمة **dplyr** و *التوجيه* مع مشغل الأنبوب (`%>%`). الصيغة أسهل قراءة وهناك مزايا أخرى موضحة في الصفحة حول [تنظيف البيانات والوظائف الأساسية](cleaning.qmd). يمكنك قراءة المزيد حول *التوجيه* في القسم حول التوجيه أدناه.

```{r, eval=F}
# إنشاء عمود "bmi" جديد باستخدام بنية dplyr
linelist <- linelist %>% 
  mutate(bmi = wt_kg / (ht_cm/100)^2)
```

<!-- ======================================================= -->

### هيكل الكائن {.unnumbered}

**يمكن أن تكون الكائنات قطعة واحدة من البيانات (على سبيل المثال `my_number <- 24`)، أو يمكن أن تتكون من بيانات منظمة.**

الرسم البياني أدناه مأخوذ من [هذا البرنامج التعليمي عبر الإنترنت حول R](http://venus.ifca.unican.es/Rintro/dataStruct.html). يظهر بعض الهياكل البيانية الشائعة وأسماؤها. لم يتم تضمين بيانات المكانية في هذه الصورة، والتي يتم مناقشتها في صفحة [مبادئ نظم المعلومات الجغرافية](gis.qmd).

```{r basics_objects_structures, echo=F, out.width = "75%", out.height="50%", fig.align = "center"}
knitr::include_graphics(here::here("images", "R_data_structures.png"))
```

في علم الوبائيات (وخاصة في مجال الوبائيات الميدانية)، ستواجه *بشكل أكثر شيوعًا* إطارات بيانات ومتجهات:

+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| الهيكل الشائع  | الشرح                                                                                           | المثال                                                                             |
+==================+==================================================================================================+=====================================================================================+
| متجهات          | حاوية لتسلسل من كائنات فردية، جميعها من نفس الفئة (على سبيل المثال، رقمية، نصية).         | **"المتغيرات" (الأعمدة) في إطارات البيانات هي متجهات** (على سبيل المثال، العمود `age_years`). |
+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| إطارات بيانات  | متجهات (على سبيل المثال، أعمدة) مرتبطة معًا تحتوي جميعها على نفس عدد الصفوف.                 | `linelist` هو إطار بيانات.                                                         |
+------------------+--------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

ملاحظة أنه لإنشاء متجه "مستقل" (لا يكون جزءًا من إطار بيانات) يتم استخدام الدالة `c()` لدمج العناصر المختلفة. على سبيل المثال، إذا كنت تقوم بإنشاء متجه من ألوان مقياس الألوان للرسم البياني: `vector_of_colors <- c("blue", "red2", "orange", "grey")`

<!-- ======================================================= -->

### فئات الكائنات {.unnumbered} { /*examples*/}

جميع الكائنات المخزنة في R لديها *فئة* تخبر R كيفية التعامل مع الكائن. هناك العديد من الفئات الممكنة، ولكن الشائعة تشمل:

+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| الفئة     | الشرح                                                                                                                                                                                   | الأمثلة                                                                                              |
+============+=========================================================================================================================================================================================+=======================================================================================================+
| نصي       | هذه هي النصوص/الكلمات/الجمل **"بين علامات الاقتباس"**. لا يمكن إجراء عمليات رياضية على هذه الكائنات.                                                                               | "الكائنات النصية بين علامات الاقتباس"                                                           |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| عددي صحيح| الأرقام التي تكون **صحيحة فقط** (بدون أرقام عشرية)                                                                                                                                   | -5، 14، أو 2000                                                                                      |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| عددي      | هذه هي الأرقام و **يمكن أن تتضمن أرقامًا عشرية**. إذا كانت بين علامات الاقتباس، فسيتم اعتبارها من الفئة النصية.                                                                      | 23.1 أو 14                                                                                            |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| Factor     | هذه هي متجهات تحتوي على **ترتيب محدد** أو تسلسل للقيم                                                                                                                               | متغير للوضع الاقتصادي مع قيم مرتبة                                                               |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| تاريخ     | **بمجرد أن يُخبر R أن بعض البيانات هي تواريخ**، يمكن تلاعب هذه البيانات وعرضها بطرق خاصة. انظر الصفحة على [العمل مع التواريخ](dates.qmd) لمزيد من المعلومات. | 2018-04-12 أو 15/3/1954 أو الأربعاء 4 يناير 1980                                                 |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| منطقي     | يجب أن تكون القيم إحدى القيمتين الخاصتين TRUE أو FALSE (لاحظ أن هذه ليست "TRUE" و "FALSE" بين علامات الاقتباس)                                                               | TRUE أو FALSE                                                                                         |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| إطار بيانات| إطار البيانات هو كيفية تخزين R لـ **مجموعة بيانات نموذجية**. يتكون من متجهات (أعمدة) من البيانات مرتبة معًا، والتي تحتوي جميعها على نفس عدد الملاحظات (الصفوف).             | مثال على مجموعة البيانات AJS المسماة `linelist_raw` تحتوي على 68 متغيرًا مع 300 ملاحظة (صفوف) لكل منها. |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| tibble     | تعتبر التيبلز تغييرًا على إطار البيانات، والفرق التشغيلي الرئيسي هو أنها تطبع بشكل أجمل على وحدة التحكم (تعرض أول 10 صفوف والأعمدة فقط التي تناسب الشاشة)               | يمكن تحويل أي إطار بيانات، أو قائمة، أو مصفوفة إلى تيبل باستخدام `as_tibble()`                   |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+
| قائمة     | القائمة شبيهة بالمتجه، ولكنها تحتوي على كائنات أخرى يمكن أن تكون من فئات مختلفة                                                                                                    | يمكن أن تحتوي القائمة على رقم واحد، وإطار بيانات، ومتجه، وحتى قائمة أخرى ضمنها!                 |
+------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------+

**يمكنك اختبار فئة كائن عن طريق توفير اسمه لوظيفة `class()`**. ملاحظة: يمكنك الإشارة إلى عمود معين ضمن مجموعة بيانات باستخدام علامة `$` لفصل اسم المجموعة البيانات واسم العمود.

```{r, echo=TRUE,}
class(linelist)         # يجب أن تكون الفئة إطار بيانات أو tibble

class(linelist$age)     # يجب أن تكون الفئة رقمية

class(linelist$gender)  # يجب أن تكون الفئة حرفية
```

أحيانًا، يتم تحويل عمود إلى فئة مختلفة تلقائيًا بواسطة R. كن حذرًا من ذلك! على سبيل المثال، إذا كان لديك متجه أو عمود من الأرقام، ولكن تم إدراج قيمة حرفية... سيتم تغيير العمود بأكمله إلى فئة حرفية.

```{r}
num_vector <- c(1,2,3,4,5) # تعريف المتجه بأنه جميع الأرقام
class(num_vector)          # المتجه من الفئة الرقمية
num_vector[3] <- "three"   # تحويل العنصر الثالث إلى حرف
class(num_vector)          # المتجه الآن من الفئة الحرفية
```

مثال شائع على ذلك هو عند تلاعب إطار البيانات من أجل طباعة جدول - إذا قمت بإنشاء صف إجمالي وحاولت لصق النسب المئوية مع الأرقام في نفس الخلية (على سبيل المثال، `23 (40%)`)، سيتم تحويل العمود الرقمي بأكمله إلى حرفي ولا يمكن استخدامه بعد الآن للحسابات الرياضية. **أحيانًا، ستحتاج إلى تحويل الكائنات أو الأعمدة إلى فئة أخرى.**

+------------------+---------------------------------------------------------------------------------------+
| الوظيفة         | الإجراء                                                                               |
+==================+=======================================================================================+
| `as.character()` | يحول إلى فئة حرفية                                                               |
+------------------+---------------------------------------------------------------------------------------+
| `as.numeric()`   | يحول إلى فئة رقمية                                                               |
+------------------+---------------------------------------------------------------------------------------+
| `as.integer()`   | يحول إلى فئة صحيحة                                                               |
+------------------+---------------------------------------------------------------------------------------+
| `as.Date()`      | يحول إلى فئة تاريخ - ملاحظة: انظر القسم حول [التواريخ](dates.qmd) للتفاصيل           |
+------------------+---------------------------------------------------------------------------------------+
| `factor()`       | يحول إلى factor - ملاحظة: إعادة تعريف ترتيب مستويات القيم يتطلب وسيطات إضافية |
+------------------+---------------------------------------------------------------------------------------+

بالمثل، هناك **وظائف أساسية** في R للتحقق مما إذا كان الكائن من فئة معينة، مثل `is.numeric()`، `is.character()`، `is.double()`، `is.factor()`، `is.integer()`

هنا [المزيد من المواد عبر الإنترنت حول الفئات والهياكل البيانية في R](https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/).

<!-- ======================================================= -->

### الأعمدة/المتغيرات (`$`) {.unnumbered}

**العمود في إطار البيانات هو تقنيًا "متجه" (انظر الجدول أعلاه)** - سلسلة من القيم التي يجب أن تكون جميعها من نفس الفئة (سواء كانت نصية، رقمية، منطقية، إلخ).

يمكن أن يكون المتجه موجودًا بشكل مستقل عن إطار البيانات، على سبيل المثال متجه من أسماء الأعمدة التي ترغب في تضمينها كمتغيرات توضيحية في نموذج. لإنشاء متجه "مستقل"، استخدم الدالة `c()` كما هو موضح أدناه:

```{r, warning=F, message=F}
# تعريف متجه القيم النصية المستقلة
explanatory_vars <- c("gender", "fever", "chills", "cough", "aches", "vomit")

# طباعة القيم في هذا المتجه المسمى
explanatory_vars
```

**الأعمدة في إطار البيانات هي أيضًا متجهات ويمكن استدعاؤها، والإشارة إليها، واستخراجها، أو إنشاؤها باستخدام رمز `$`.** يربط رمز `$` بين اسم العمود واسم إطار البيانات الخاص به. في هذا الدليل، نحاول استخدام كلمة "عمود" بدلاً من "متغير".

```{r basics_objects_call, eval=F}
# استرداد طول المتجه age_years
length(linelist$age) # (age هو عمود في إطار البيانات linelist)

```

من خلال كتابة اسم إطار البيانات تليه `$` سترى أيضًا قائمة منسدلة لجميع الأعمدة في إطار البيانات. يمكنك التمرير من خلالها باستخدام مفتاح السهم، اختيار واحدة باستخدام مفتاح Enter، وتجنب أخطاء الإملاء!

```{r echo=F, out.width = "100%", fig.align = "center"}
knitr::include_graphics(here::here("images", "Calling_Names.gif"))
```

[***نصيحة متقدمة:*** بعض الكائنات المعقدة أكثر (على سبيل المثال، قائمة، أو كائن `epicontacts`) قد تحتوي على مستويات متعددة يمكن الوصول إليها من خلال علامات الدولار المتعددة. على سبيل المثال `epicontacts$linelist$date_onset`]{style="color: darkgreen;"}

### الوصول/الفهرسة بالأقواس (`[ ]`) {.unnumbered}

قد تحتاج إلى عرض أجزاء من الكائنات، والتي تُسمى أيضًا "الفهرسة"، والتي غالبًا ما يتم ذلك باستخدام الأقواس المربعة `[ ]`. استخدام `$` على إطار بيانات للوصول إلى عمود هو أيضًا نوع من أنواع الفهرسة.

```{r}
my_vector <- c("a", "b", "c", "d", "e", "f")  # تعريف الفيكتور
my_vector[5]                                  # طباعة العنصر الخامس
```

الأقواس المربعة تعمل أيضًا لإرجاع أجزاء محددة من الناتج المُرجع، مثل ناتج دالة `summary()`:

```{r}
# كل الناتج المرجع
summary(linelist$age)

# العنصر الثاني فقط من الناتج المرجع، مع الاسم (استخدام الأقواس الفردية فقط)
summary(linelist$age)[2]

# العنصر الثاني فقط، بدون اسم (استخدام الأقواس المزدوجة)
summary(linelist$age)[[2]]

# استخراج عنصر بالاسم، بدون عرض الاسم
summary(linelist$age)[["Median"]]

```

الأقواس تعمل أيضًا على الإطارات البيانية لعرض صفوف وأعمدة محددة. يمكنك القيام بذلك باستخدام بنية `dataframe[rows, columns]`:

```{r basics_objects_access, eval=F}
# عرض صف محدد (2) من مجموعة البيانات، مع جميع الأعمدة (لا تنسى الفاصلة!)
linelist[2,]

# عرض جميع الصفوف، ولكن فقط عمود واحد
linelist[, "date_onset"]

# عرض القيم من الصف 2 والأعمدة من 5 إلى 10
linelist[2, 5:10] 

# عرض القيم من الصف 2 والأعمدة من 5 إلى 10 و 18
linelist[2, c(5:10, 18)] 

# عرض الصفوف من 2 إلى 20، والأعمدة المحددة
linelist[2:20, c("date_onset", "outcome", "age")]

# عرض الصفوف والأعمدة بناءً على معايير
# *** ملاحظة: يجب أن يظل الإطار البيانات مسمى في المعايير!
linelist[linelist$age > 25 , c("date_onset", "outcome", "age")]

# استخدام View() لرؤية النواتج في لوحة RStudio Viewer (أسهل قراءة) 
# *** ملاحظة: الحرف الكبير "V" في دالة View()
View(linelist[2:20, "date_onset"])

# حفظ ككائن جديد
new_table <- linelist[2:20, c("date_onset")] 
```

يرجى ملاحظة أنه يمكنك أيضًا تحقيق الفهرسة السابقة للصفوف/الأعمدة على الإطارات البيانية والجداول باستخدام بنية **dplyr** (الدوال `filter()` للصفوف، و `select()` للأعمدة). اقرأ المزيد حول هذه الدوال الأساسية في الصفحة [تنظيف البيانات والدوال الأساسية](cleaning.qmd).

لتصفية بناءً على "رقم الصف"، يمكنك استخدام وظيفة **dplyr** `row_number()` مع فتح القوسين كجزء من عبارة تصفية منطقية. غالبًا ما ستستخدم مشغل `%in%` ونطاقًا من الأرقام كجزء من تلك العبارة المنطقية، كما هو موضح أدناه. لرؤية *أول* N صفوف، يمكنك أيضًا استخدام وظيفة **dplyr** الخاصة `head()`.

```{r, eval=F}
# عرض أول 100 صف
linelist %>% head(100)

# عرض الصف 5 فقط
linelist %>% filter(row_number() == 5)

# عرض الصفوف من 2 إلى 20، وثلاثة أعمدة محددة (لاحظ عدم الحاجة للعلامات التنصتية على أسماء الأعمدة)
linelist %>% filter(row_number() %in% 2:20) %>% select(date_onset, outcome, age)
```

عند فهرسة كائن من النوع **list**، تُرجع القوسين الفردية دائمًا بنوع list، حتى إذا تم إرجاع كائن واحد فقط. ومع ذلك، يمكن استخدام القوسين المزدوجة للوصول إلى عنصر واحد وإرجاع نوع مختلف عن list.\
يمكن كتابة القوسين أيضًا بعد بعضها البعض، كما هو موضح أدناه.

هذا [الشرح المرئي لفهرسة القوائم، مع مبينات الفلفل](https://r4ds.had.co.nz/vectors.html#lists-of-condiments) مضحك ومفيد.

```{r}
# تعريف قائمة توضيحية
my_list <- list(
  # العنصر الأول في القائمة هو متجه أحرف
  hospitals = c("Central", "Empire", "Santa Anna"),
  
  # العنصر الثاني في القائمة هو إطار بيانات للعناوين
  addresses   = data.frame(
    street = c("145 Medical Way", "1048 Brown Ave", "999 El Camino"),
    city   = c("Andover", "Hamilton", "El Paso")
    )
  )
```

هنا كيف تبدو القائمة عند طباعتها إلى وحدة التحكم. انظر كيف توجد عناصر اثنين مسماة:

-   `hospitals`، متجه أحرف\
-   `addresses`، إطار بيانات للعناوين

```{r}
my_list
```

الآن نستخرج، باستخدام طرق مختلفة:

```{r}
my_list[1] # يُرجع هذا العنصر بنوع "list" - اسم العنصر لا يزال معروضًا

my_list[[1]] # يُرجع هذا فقط المتجه الأحرف (غير المسمى)

my_list[["hospitals"]] # يمكنك أيضًا الفهرسة بواسطة اسم عنصر القائمة

my_list[[1]][3] # يُرجع هذا العنصر الثالث من متجه الأحرف "hospitals"

my_list[[2]][1] # يُرجع هذا العمود الأول ("street") من إطار بيانات العناوين

```

### إزالة الكائنات {.unnumbered}

يمكنك إزالة الكائنات الفردية من بيئة R الخاصة بك عن طريق وضع اسم الكائن في دالة `rm()` (بدون علامات اقتباس):

```{r, eval=F}
rm(object_name)
```

يمكنك إزالة جميع الكائنات (تنظيف مساحة العمل الخاصة بك) عن طريق تشغيل:

```{r, eval=F}
rm(list = ls(all = TRUE))
```

## الأنابيب (`%>%`)

**هناك نهجان عامان للعمل مع الكائنات:**

1) **الأنابيب/tidyverse** - ترسل الأنابيب كائنًا من وظيفة إلى أخرى - يكمن التركيز على *الإجراء*، ليس الكائن\
2) **تعريف الكائنات الوسيطة** - يتم إعادة تعريف كائن مرارًا وتكرارًا - يكمن التركيز على الكائن

### **الأنابيب** {.unnumbered}

**ببساطة، يقوم مشغل الأنبوب (`%>%`) بتمرير الإخراج الوسيط من وظيفة واحدة إلى الأخرى.**\
يمكنك التفكير فيه على أنه يقول "ثم". يمكن ربط العديد من الوظائف معًا باستخدام `%>%`.

- **الأنابيب تؤكد على تسلسل الإجراءات، ليس على الكائن الذي يتم تنفيذ الإجراءات عليه**\
- الأنابيب هي الأفضل عندما يجب تنفيذ سلسلة من الإجراءات على كائن واحد\
- تأتي الأنابيب من حزمة **magrittr**، والتي تتضمن تلقائيًا في الحزم **dplyr** و **tidyverse**\
- يمكن للأنابيب جعل الشفرة أكثر نظافة وأسهل قراءة، وأكثر تفهمًا

اقرأ المزيد حول هذا النهج في دليل الأنماط في tidyverse [هنا](https://style.tidyverse.org/pipes.html)

هنا مثال وهمي للمقارنة، باستخدام وظائف خيالية لـ "خبز كعكة". أولاً، طريقة الأنبوب:

```{r piping_example_pipe, eval=F}
# مثال وهمي عن كيفية خبز كعكة باستخدام بنية الأنابيب

cake <- flour %>%       # لتحديد الكعكة، ابدأ بالطحين، ثم...
  add(eggs) %>%   # إضافة البيض
  add(oil) %>%    # إضافة الزيت
  add(water) %>%  # إضافة الماء
  mix_together(         # امزج معًا
    utensil = ملعقة,
    دقائق = 2) %>%    
  bake(درجة الحرارة = 350,   # اخبز
       النظام = "فهرنهايت",
       دقائق = 35) %>%  
  let_cool()            # دعه يبرد
```

ها هو [الرابط](https://cfss.uchicago.edu/notes/pipes/#:~:text=Pipes%20are%20an%20extremely%20useful,code%20and%20combine%20multiple%20operations) الذي يصف فائدة الأنابيب.

التوجيه ليس وظيفة **أساسية**. لاستخدام التوجيه، يجب تثبيت وتحميل حزمة **magrittr** (وهذا عادة ما يتم عن طريق تحميل حزمة **tidyverse** أو **dplyr** التي تتضمنها). يمكنك [قراءة المزيد حول التوجيه في وثائق magrittr](https://magrittr.tidyverse.org/).

يرجى ملاحظة أنه مثل أوامر R الأخرى، يمكن استخدام الأنابيب لعرض النتيجة فقط، أو لحفظ/إعادة حفظ كائن، اعتمادًا على ما إذا كانت هناك عملية تعيين `<-`. انظر الأمثلة أدناه:

```{r, eval=F}
# إنشاء أو تجاوز الكائن، تعريف عدد العمليات الإجمالية حسب فئة العمر (لن يتم طباعته)
linelist_summary <- linelist %>% 
  count(age_cat)
```

```{r}
# طباعة جدول العدادات في وحدة التحكم، ولكن لا تحفظه
linelist %>% 
  count(age_cat)
```

**`%<>%`**\
هذا هو "أنبوب التعيين" من حزمة **magrittr**، الذي *يوجه كائنًا إلى الأمام ويعيد تعريف الكائن أيضًا*. يجب أن يكون أول مشغل أنبوب في السلسلة. إنه اختصار. الأوامر التاليتان متكافئتان:

```{r, eval=F}
linelist <- linelist %>% 
  filter(age > 50)

linelist %<>% filter(age > 50)
```

<!-- ======================================================= -->

### تعريف الكائنات الوسيطة {.unnumbered}

قد تكون هذه الطريقة لتغيير الكائنات/الإطارات البياناتية أفضل إذا:

-   كنت بحاجة إلى تلاعب بعدة كائنات\
-   هناك خطوات وسيطة ذات معنى وتستحق أسماء كائنات منفصلة

**المخاطر:**

-   إنشاء كائنات جديدة لكل خطوة يعني إنشاء الكثير من الكائنات. إذا استخدمت الخاطئة قد لا تدرك ذلك!\
-   قد تكون تسمية جميع الكائنات مربكة\
-   قد لا يكون من السهل اكتشاف الأخطاء

سواء قمت بتسمية كل كائن وسيط، أو تجاوز الأصلي، أو دمج جميع الوظائف معًا. كلها تأتي مع مخاطرها الخاصة.

أدناه نفس مثال "الكعكة" الوهمي كما في الأعلى، ولكن باستخدام هذا النمط:

```%%%%%

```

<!-- ======================================================= -->

## العمليات والدوال الرئيسية {#operators}

تفصيل العمليات في R، مثل:

-   عمليات التعريف\
-   عمليات العلاقة (أقل من، يساوي..)\
-   عمليات المنطق (و، أو...)\
-   التعامل مع القيم المفقودة\
-   العمليات الرياضية والدوال (+/-, \>, sum(), median(), ...)\
-   عامل `%in%`

<!-- ======================================================= -->

### عمليات التعيين {.unnumbered}

**`<-`**

عامل التعيين الأساسي في R هو `<-`. مثل `object_name <- value`.\
يمكن كتابة هذا العامل أيضًا على أنه `=`. ننصح باستخدام `<-` للاستخدام العام في R.\
ننصح أيضًا بتحيط مثل هذه العمليات بمسافات، لقراءة أفضل.

**`<<-`**

إذا كنت [تكتب الدوال](writing_functions.qmd)، أو تستخدم R بطريقة تفاعلية مع النصوص المصدرية المُدخلة، فقد تحتاج إلى استخدام هذا العامل `<<-` (من **base** R). يُستخدم هذا العامل لتعريف كائن في بيئة R 'أبوية' أعلى. انظر هذا [المرجع عبر الإنترنت](https://stat.ethz.ch/R-manual/R-devel/library/base/html/assignOps.html).

**`%<>%`**

هذا هو "أنبوب التعيين" من حزمة **magrittr**، الذي ينقل كائنًا إلى الأمام و*يعيد تعريف الكائن أيضًا*. يجب أن يكون أول عامل أنبوبي في السلسلة. إنه اختصار، كما هو موضح أدناه في مثالين مكافئين:

```{r, eval=F}
linelist <- linelist %>% 
  mutate(age_months = age_years * 12)
```

المثال أعلاه يعادل المثال التالي:

```{r, eval=F}
linelist %<>% mutate(age_months = age_years * 12)
```

**`%<+%`**

يُستخدم هذا لإضافة بيانات إلى الأشجار الفيلوجينية باستخدام حزمة **ggtree**. انظر الصفحة على [الأشجار الفيلوجينية](phylogenetic_trees.qmd) أو هذا [كتاب الموارد عبر الإنترنت](https://yulab-smu.top/treedata-book/).

<!-- ======================================================= -->

### Relational and logical operators {.unnumbered}

تقوم العوامل العلاقية بمقارنة القيم وغالبًا ما تُستخدم عند تعريف متغيرات جديدة ومجموعات فرعية من مجموعات البيانات. فيما يلي العوامل العلاقية الشائعة في R:

+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| المعنى                  | العامل    | المثال      | نتيجة المثال                                                                                                                                         |
+==========================+============+==============+========================================================================================================================================================+
| مساوي لـ               | `==`       | `"A" == "a"` | `FALSE` (لأن R حساس لحالة الأحرف) *يرجى ملاحظة أن == (مزدوج يساوي) مختلف عن = (يساوي واحد)، الذي يعمل كعامل التعيين `<-`* |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| غير مساوي لـ           | `!=`       | `2 != 0`     | `TRUE`                                                                                                                                                 |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| أكبر من                 | `>`        | `4 > 2`      | `TRUE`                                                                                                                                                 |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| أقل من                  | `<`        | `4 < 2`      | `FALSE`                                                                                                                                                |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| أكبر من أو يساوي        | `>=`       | `6 >= 4`     | `TRUE`                                                                                                                                                 |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| أقل من أو يساوي         | `<=`       | `6 <= 4`     | `FALSE`                                                                                                                                                |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| القيمة مفقودة           | `is.na()`  | `is.na(7)`   | `FALSE` (انظر الصفحة على [البيانات المفقودة](missing_data.qmd))                                                                                                                   |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| القيمة غير مفقودة       | `!is.na()` | `!is.na(7)`  | `TRUE`                                                                                                                                                 |
+--------------------------+------------+--------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+


العوامل المنطقية، مثل AND و OR، غالبًا ما تُستخدم لربط العوامل العلاقوية وإنشاء معايير أكثر تعقيدًا. قد تتطلب البيانات المعقدة استخدام الأقواس ( ) للتجميع وتحديد ترتيب التطبيق.

+---------------------+-----------------------------------------------------------------------+
| المعنى             | العامل                                                               |
+=====================+=======================================================================+
| AND                 | `&`                                                                   |
+---------------------+-----------------------------------------------------------------------+
| OR                  | `|` (شريط رأسي)                                                      |
+---------------------+-----------------------------------------------------------------------+
| الأقواس            | `( )` تُستخدم لتجميع المعايير معًا وتوضيح ترتيب العمليات         |
+---------------------+-----------------------------------------------------------------------+

على سبيل المثال، أدناه، لدينا قائمة بيانات تحتوي على متغيرين نريد استخدامهما لإنشاء تعريف الحالة الخاص بنا، `hep_e_rdt`، نتيجة الاختبار و `other_cases_in_hh`، الذي سيخبرنا إذا كانت هناك حالات أخرى في الأسرة. يستخدم الأمر أدناه الوظيفة `case_when()` لإنشاء المتغير الجديد `case_def` بحيث:

```{r eval=FALSE}
linelist_cleaned <- linelist %>%
  mutate(case_def = case_when(
    is.na(rdt_result) & is.na(other_case_in_home)            ~ NA_character_,
    rdt_result == "Positive"                                 ~ "Confirmed",
    rdt_result != "Positive" & other_cases_in_home == "Yes"  ~ "Probable",
    TRUE                                                     ~ "Suspected"
  ))
```

+------------------------------------------------------------------------------------------------+--------------------------------------------+
| المعايير في المثال أعلاه                                                                     | القيمة الناتجة في المتغير الجديد "case_def" |
+================================================================================================+============================================+
| إذا كانت القيمة للمتغيرات `rdt_result` و `other_cases_in_home` مفقودة                     | `NA` (مفقود)                              |
+------------------------------------------------------------------------------------------------+--------------------------------------------+
| إذا كانت القيمة في `rdt_result` هي "Positive"                                                | "Confirmed"                                |
+------------------------------------------------------------------------------------------------+--------------------------------------------+
| إذا كانت القيمة في `rdt_result` ليست "Positive" وكانت القيمة في `other_cases_in_home` هي "Yes" | "Probable"                             |
+------------------------------------------------------------------------------------------------+--------------------------------------------+
| إذا لم تتم مطابقة أي من المعايير أعلاه                                                     | "Suspected"                                |
+------------------------------------------------------------------------------------------------+--------------------------------------------+

### القيم المفقودة {.unnumbered}

في R، تُمثل القيم المفقودة بالقيمة الخاصة `NA` (قيمة "محجوزة") (حروف كبيرة N و A - لا توضع بين علامات اقتباس). إذا قمت بتوريد بيانات تسجل البيانات المفقودة بطريقة أخرى (على سبيل المثال 99، "مفقود"، أو .)، قد ترغب في إعادة تشفير تلك القيم إلى `NA`. كيفية القيام بذلك موجود في الصفحة [الاستيراد والتصدير](importing.qmd).

**للاختبار ما إذا كانت القيمة `NA`، استخدم الدالة الخاصة `is.na()`**، التي تعيد `TRUE` أو `FALSE`.

```{r basics_operators_missing}
rdt_result <- c("Positive", "Suspected", "Positive", NA)   # حالتان إيجابيتان، حالة مشتبه فيها، وحالة مجهولة
is.na(rdt_result)  # يختبر ما إذا كانت قيمة rdt_result هي NA
```

اقرأ المزيد حول القيم المفقودة، اللامتناهية، `NULL`، والقيم المستحيلة في الصفحة عن [البيانات المفقودة](missing_data.qmd). تعلم كيفية تحويل القيم المفقودة عند استيراد البيانات في الصفحة عن [الاستيراد والتصدير](importing.qmd).

### الرياضيات والإحصاء {.unnumbered}

جميع العمليات والدوال في هذه الصفحة متاحة تلقائيًا باستخدام R **الأساسي**.

#### العمليات الرياضية {.unnumbered}

تُستخدم هذه العمليات غالبًا للقيام بالجمع، القسمة، إنشاء أعمدة جديدة، إلخ. أدناه توجد العمليات الرياضية الشائعة في R. إذا كنت تضع مسافات حول العمليات أم لا، فذلك ليس مهمًا.

| الغرض            | المثال في R |
|-------------------|--------------|
| الجمع            | 2 + 3        |
| الطرح            | 2 - 3        |
| الضرب            | 2 \* 3       |
| القسمة           | 30 / 5       |
| الأس              | 2\^3         |
| ترتيب العمليات  | ( )          |

#### الدوال الرياضية {.unnumbered}

| الغرض            | الدالة                                |
|-------------------|---------------------------------------|
| التقريب          | round(x, digits = n)                  |
| التقريب          | janitor::round_half_up(x, digits = n) |
| السقف (التقريب لأعلى) | ceiling(x)                            |
| الأرضية (التقريب لأسفل) | floor(x)                              |
| القيمة المطلقة   | abs(x)                                |
| الجذر التربيعي  | sqrt(x)                               |
| الأس              | exponent(x)                           |
| اللوغاريتم الطبيعي | log(x)                                |
| اللوغاريتم بالقاعدة 10 | log10(x)                              |
| اللوغاريتم بالقاعدة 2 | log2(x)                               |

#### التدوير {.unnumbered}

[***خطر:*** تستخدم `round()` "التقريب البنكي" الذي يقرب من .5 فقط إذا كان الرقم العلوي زوجيًا. استخدم `round_half_up()` من **janitor** لتقريب الأرقام بشكل متسق إلى أقرب عدد صحيح. انظر [هذا التوضيح](https://cran.r-project.org/web/packages/janitor/vignettes/janitor.html#explore-records-with-duplicated-values-for-specific-combinations-of-variables-with-get_dupes) ]{style="color: red;"}

```{r}
# استخدم الدالة المناسبة للتدوير في عملك
round(c(2.5, 3.5))

janitor::round_half_up(c(2.5, 3.5))
```

#### الدوال الإحصائية {.unnumbered}

[***تحذير:*** ستتضمن الدوال أدناه افتراضيًا القيم المفقودة في الحسابات. ستؤدي القيم المفقودة إلى نتيجة `NA`، ما لم يتم تحديد الوسيط `na.rm = TRUE`. يمكن كتابتها بشكل مختصر كـ `na.rm = T`.]{style="color: orange;"}

| الهدف               | الدالة           |
|---------------------|------------------|
| المتوسط (المتوسط)  | mean(x, na.rm=T) |
| الوسيط              | median(x, na.rm=T) |
| الانحراف المعياري  | sd(x, na.rm=T) |
| النسب المئوية\*    | quantile(x, probs) |
| المجموع             | sum(x, na.rm=T) |
| القيمة الدنيا       | min(x, na.rm=T) |
| القيمة العظمى      | max(x, na.rm=T) |
| نطاق القيم الرقمية | range(x, na.rm=T) |
| ملخص\*\*            | summary(x)         |

ملاحظات:

-   `*quantile()`: `x` هو الناقل الرقمي الذي يجب فحصه، و `probs =` هو ناقل رقمي يحتوي على احتماليات تتراوح بين 0 و 1.0، على سبيل المثال `c(0.5, 0.8, 0.85)`
-   `**summary()`: يقدم ملخصًا عن ناقل رقمي بما في ذلك المتوسط، الوسيط، والنسب المئوية الشائعة

[***خطر:*** إذا كنت تقدم ناقل أرقام إلى واحدة من الوظائف أعلاه، تأكد من لف الأرقام بين `c()` .]{style="color: red;"}

```{r}
# إذا كنت تزوّد بأرقام صافية إلى وظيفة، فلفها بـ c()
mean(1, 6, 12, 10, 5, 0)    # !!! غير صحيح !!!  

mean(c(1, 6, 12, 10, 5, 0)) # صحيح
```

#### وظائف مفيدة أخرى {.unnumbered}

+----------------------------+-------------------+-------------------------------------------------+
| الهدف                     | الوظيفة          | المثال                                         |
+============================+===================+=================================================+
| إنشاء تسلسل              | seq(from, to, by) | `seq(1, 10, 2)`                                 |
+----------------------------+-------------------+-------------------------------------------------+
| تكرار x، n مرات          | rep(x, ntimes)    | `rep(1:3, 2)` أو `rep(c("a", "b", "c"), 3)`     |
+----------------------------+-------------------+-------------------------------------------------+
| تقسيم ناقل رقمي          | cut(x, n)         | `cut(linelist$age, 5)`                          |
+----------------------------+-------------------+-------------------------------------------------+
| أخذ عينة عشوائية        | sample(x, size)   | `sample(linelist$id, size = 5, replace = TRUE)` |
+----------------------------+-------------------+-------------------------------------------------+

<!-- ======================================================= -->

### `%in%` {.unnumbered}

مُشغّل مفيد جدًا لمطابقة القيم، ولتقييم سريع ما إذا كانت القيمة ضمن ناقل أو إطار بيانات.

```{r}
my_vector <- c("a", "b", "c", "d")
```

```{r}
"a" %in% my_vector
"h" %in% my_vector
```

لطلب معرفة ما إذا كانت القيمة **ليست** `%in%` في الفيكتور، ضع علامة تعجب (!) **أمام** البيان المنطقي:

```{r}
# لنفي البيان المنطقي، ضع علامة تعجب في الأمام
!"a" %in% my_vector
!"h" %in% my_vector
```

`%in%` مفيد جدًا عند استخدام وظيفة **dplyr** `case_when()`. يمكنك تعريف فيكتور مسبقًا، ثم الرجوع إليه لاحقًا. على سبيل المثال:

```{r eval=F}
affirmative <- c("1", "Yes", "YES", "yes", "y", "Y", "oui", "Oui", "Si")

linelist <- linelist %>% 
  mutate(child_hospitaled = case_when(
    hospitalized %in% affirmative & age < 18 ~ "طفل مستشفى",
    TRUE                                      ~ "لا"))
```

ملاحظة: إذا كنت ترغب في اكتشاف سلسلة جزئية، ربما باستخدام `str_detect()` من **stringr**، فلن يقبل فيكتور الحروف مثل `c("1", "Yes", "yes", "y")`. بدلاً من ذلك، يجب أن يتم تزويده بـ *تعبير منتظم* - سلسلة مضغوطة واحدة مع أشرطة OR، مثل "1\|Yes\|yes\|y". على سبيل المثال، `str_detect(hospitalized, "1|Yes|yes|y")`. انظر الصفحة على [الحروف والسلاسل](characters_strings.qmd) لمزيد من المعلومات.

يمكنك تحويل فيكتور حروفي إلى تعبير منتظم مسمى بهذا الأمر:

```{r}
affirmative <- c("1", "Yes", "YES", "yes", "y", "Y", "oui", "Oui", "Si")
affirmative

# ضغط إلى 
affirmative_str_search <- paste0(affirmative, collapse = "|")  # الخيار مع R الأساسي
affirmative_str_search <- str_c(affirmative, collapse = "|")   # الخيار مع حزمة stringr

affirmative_str_search
```

<!-- ======================================================= -->

<!-- ======================================================= -->

<!-- ======================================================= -->

## الأخطاء والتحذيرات

تشرح هذه القسم:

-   الفرق بين الأخطاء والتحذيرات\
-   نصائح بناء الجملة العامة لكتابة رمز R\
-   مساعدة الرمز

يمكن العثور على الأخطاء والتحذيرات الشائعة ونصائح استكشاف الأخطاء في الصفحة على [الأخطاء والمساعدة](errors.qmd).

<!-- ======================================================= -->

### الخطأ مقابل التحذير {.unnumbered}

عند تشغيل أمر ما، قد يعرض لك وحدة التحكم R رسائل تحذير أو أخطاء باللون الأحمر.

-   **التحذير** يعني أن R قد أكمل الأمر الخاص بك، ولكن كان عليه أن يتخذ خطوات إضافية أو أنتج إخراجًا غير عادي يجب أن تكون على علم به.

-   **الخطأ** يعني أن R لم يتمكن من إكمال الأمر الخاص بك.

ابحث عن دلائل:

-   ستتضمن رسالة الخطأ/التحذير غالبًا رقم السطر الخاص بالمشكلة.

-   إذا كان الكائن "غير معروف" أو "غير موجود"، ربما كنت قد كتبته بشكل غير صحيح، نسيت استدعاء حزمة باستخدام library()، أو نسيت إعادة تشغيل النص البرمجي بعد إجراء التغييرات.

إذا فشلت جميع الحلول، قم بنسخ رسالة الخطأ إلى Google مع بعض المصطلحات الرئيسية - من المحتمل أن شخصًا آخر قد تعامل مع هذا بالفعل!

### نصائح بناء الجملة العامة {.unnumbered}

بعض الأشياء التي يجب تذكرها عند كتابة الأوامر في R، لتجنب الأخطاء والتحذيرات:

-   دائمًا قم بإغلاق الأقواس - نصيحة: احسب عدد الأقواس المفتوحة "(" والمغلقة ")" لكل كتلة كود
-   تجنب استخدام المسافات في أسماء الأعمدة والكائنات. استخدم الشرطة السفلية ( \_ ) أو النقاط ( . ) بدلاً من ذلك
-   تتبع وتذكر فصل معاملات الدالة بفواصل
-   R حساس لحالة الأحرف، مما يعني أن `Variable_A` مختلفة عن `variable_A`

### مساعدات الكود {.unnumbered}

سيقدم أي نص (RMarkdown أو غيره) دلائل عندما ترتكب خطأ. على سبيل المثال، إذا نسيت كتابة فاصلة حيث يلزم ذلك، أو إغلاق قوس، ستقوم RStudio برفع علم على تلك السطر، على الجانب الأيمن من النص البرمجي، لتحذيرك.
