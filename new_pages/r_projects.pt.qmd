
# R projects {#r-projects}  


Um R project permite que seu trabalho seja agrupado em uma pasta portátil e independente. Dentro do projeto, todos os scripts, arquivos de dados, figuras / saídas e histórico relevantes são armazenados em subpastas e, mais importante, - o *diretório de trabalho* é a pasta raiz do projeto.  


## Uso sugerido  

Uma maneira comum, eficiente e sem problemas de usar R é combinar esses 3 elementos. Um projeto de trabalho discreto é hospedado em um R project. Cada elemento é descrito nas seções abaixo.  

1) Um projeto **R**  
     - Um ambiente de trabalho independente com pastas para dados, scripts, saídas, etc.  
2) O pacote **here** para caminhos de arquivo relativos  
     - Os caminhos de arquivo são gravados em relação à pasta raiz do R project - consulte [Importar e exportar](#importing) para obter mais informações  
3) O pacote **rio** para importação / exportação  
     - `import()` e `export()` manipulam qualquer tipo de arquivo por sua extensão (por exemplo, .csv, .xlsx, .png)  
     
     


<!-- ======================================================= -->
## Criação de um R project {}

Para criar um R project, selecione "Novo Projeto" no menu Arquivo.

* Se deseja criar uma nova pasta para o projeto, selecione "Novo diretório" e indique onde deseja que seja criado.  
* Se deseja criar o projeto dentro de uma pasta existente, clique em "Diretório existente" e indique a pasta.  
* Se você deseja clonar um repositório Github, selecione a terceira opção "Controle de Versão" e depois "Git". Veja a página em [Controle de versão e colaboração com Git e Github](#collaboration) para mais detalhes.  


```{r out.width = "75%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "create_project.png"))
```


O R project que você criar virá na forma de uma pasta contendo um arquivo *.Rproj*. Este arquivo é um atalho e provavelmente a principal maneira de abrir seu projeto. Você também pode abrir um projeto selecionando "Abrir Projeto" no menu Arquivo. Alternativamente, no canto superior direito do RStudio, você verá um ícone de R project e um menu suspenso de R projects disponíveis. 

Para sair de um R project, abra um novo projeto ou feche o projeto (Arquivo - Fechar Projeto).  


### Alternar projetos {.unnumbered}

Para alternar entre os projetos, clique no ícone do R project e no menu suspenso no canto superior direito do RStudio. Você verá opções para Fechar projeto, Abrir projeto e uma lista de projetos recentes.  

```{r out.width = "100%", fig.align = "center", echo=F}
knitr::include_graphics(here::here("images", "Rproject_dropdown.png"))
```


### Configurações {.unnumbered}  

Em geral, é aconselhável iniciar o RStudio a cada vez com uma "lousa em branco" - ou seja, com sua área de trabalho **não** preservada da sessão anterior. Isso significa que seus objetos e resultados não persistirão de sessão para sessão (você deve recriá-los executando seus scripts). Isso é bom, porque o forçará a escrever scripts melhores e evitará erros no longo prazo.  

Para configurar o RStudio para ter uma "lista limpa" a cada vez na inicialização:  

* Selecione "Opções de projeto" no menu Ferramentas.  
* Na guia "Geral", defina o RStudio para **não** restaurar .RData na área de trabalho na inicialização e para **não** salvar a área de trabalho em .RData ao sair.  



### Organização {.unnumbered}  

É comum ter subpastas em seu projeto. Considere ter pastas como "dados", "scripts", "figuras", "apresentações". Você pode adicionar pastas da maneira típica que faria com uma nova pasta para o seu computador. Como alternativa, consulte a página em [Interações de diretório](#directories) para saber como criar novas pastas com comandos R.  


### Controle de versão {.unnumbered}  

Considere um sistema de controle de versão. Pode ser algo tão simples como ter datas nos nomes dos scripts (por exemplo, "transmission_analysis_2020-10-03.R") e uma pasta de "arquivo". Considere também ter um texto de cabeçalho comentado na parte superior de cada script com uma descrição, tags, autores e log de alterações.  

Um método mais complicado envolveria o uso do Github ou uma plataforma semelhante para controle de versão. Veja a página em [Controle de versão e colaboração com Git e Github](#collaboration).  

Uma dica é que você pode pesquisar um projeto ou pasta inteira usando a ferramenta "Localizar nos arquivos" (menu Editar). Ele pode pesquisar e até mesmo substituir strings em vários arquivos.  






## Exemplos  

Abaixo estão alguns exemplos de importação / exportação / salvamento usando `here()` de dentro de um R project. Leia mais sobre como usar o pacote **here** na página [Importar e exportar](#importing).  


*Importando `linelist_raw.xlsx` da pasta" data "em seu R project*  

```{r, eval=F}
linelist <- import(here("data", "linelist_raw.xlsx"))
```

*Exportando o objeto R `linelist` como" my_linelist.rds "para a pasta" clean "dentro da pasta" data "em seu R project.*   

```{r, eval=F}
export(linelist, here("data","clean", "my_linelist.rds"))
```

*Salvar o gráfico impresso mais recentemente como "epicurve_2021-02-15.png" dentro da pasta "epicurves" na pasta "saídas" em seu R project.*  

```{r, eval=F}
ggsave(here("outputs", "epicurves", "epicurve_2021-02-15.png"))
```




<!-- ======================================================= -->
## Recursos {}

Página da web do RStudio em [usando R projects](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)



